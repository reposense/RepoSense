[{"path":"README.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"\u003d Address++"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"https://travis-ci.org/CS2103AUG2017-W09-B2/main[image:https://travis-ci.org/CS2103AUG2017-W09-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"https://ci.appveyor.com/project/jeffreygohkw/addressbook-level4-x6ah4[image:https://ci.appveyor.com/api/projects/status/duqy9ai449wl80n2?svg\u003dtrue[Build Status]]"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"https://coveralls.io/github/CS2103AUG2017-W09-B2/main[image:https://coveralls.io/repos/github/CS2103AUG2017-W09-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"https://www.codacy.com/app/charlesgoh/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103AUG2017-W09-B2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/a5878f0b77e34e7eac031ed882cac3cb[Codacy Status]]"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"image::docs/images/Ui.png[width\u003d\"790\"]"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"* It is a Java application primarily targeted for students doing group projects."},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"* It is *written in OOP fashion*. The code base is *reasonably well-written* and is *significantly big* (around 6 KLoC)"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"* Contains support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI, AppVeyor and Codacy, with coverage checks using Coveralls."},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"* This application was built using the source code found in https://github.com/nus-cs2103-AY1718S1/addressbook-level4/[AddressBook-level4] by _SE-EDU_."},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"charlesgoh":36}},{"path":"docs/AboutUs.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":4,"author":{"gitId":"-"},"content":":imagesDir: images"},{"lineNumber":5,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"AddressBook++ - Developed by the https://github.com/CS2103T-W09B2/main/blob/master/docs/AboutUs.adoc[CS2103T-W09B2] team."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"Initial source code this project was based on was from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Project Team"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Goh Chang Kang, Charles"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"{empty}[https://github.com/charlesgoh[github]]"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"Role: Project Integration, Git Expert, Password Security Commands"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: Storage Component"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Jeffrey Goh Keng Wee"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://github.com/jeffreygohkw[github]]"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"Role: Testing"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: UI Component"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Lin Ziwen Kelvin"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://github.com/esilocke[github]]"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"Role: Code Quality"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: Model Component"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Wang Yiming"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://github.com/wangyiming1019[github]]"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"Role: Developer"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: Logic Component"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"charlesgoh":18,"Esilocke":4,"-":26}},{"path":"docs/ContactUs.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103AUG2017-W09-B2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitId":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"* *Email us* : You can also reach us at `e0014961 [at] u.nus.edu`"}],"authorContributionMap":{"Esilocke":2,"-":4}},{"path":"docs/DeveloperGuide.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Address++ - Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitId":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitId":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitId":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitId":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitId":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":10,"author":{"gitId":"-"},"content":":note-caption: :information_source:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":":repoURL: https://github.com/CS2103T-W09B2/addressbook-level4"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"By: `Team W09-B2`      Since: `August 2017`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitId":"-"},"content":"+"},{"lineNumber":23,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitId":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitId":"-"},"content":"+"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitId":"-"},"content":"+"},{"lineNumber":30,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Setting up Address++ in your computer"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitId":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitId":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitId":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitId":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitId":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitId":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitId":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitId":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitId":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitId":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitId":"-"},"content":". link:#testing[Run the tests] to ensure they all pass."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.md[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitId":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitId":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103AUG2017-W09-B2/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103AUG2017-W09-B2/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitId":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"When you are ready to start coding,"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. Get some sense of the overall design by reading the link:#architecture[Architecture] section."},{"lineNumber":87,"author":{"gitId":"-"},"content":"2. Take a look at the section link:#suggested-programming-tasks-to-get-started[Suggested Programming Tasks to Get Started]."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003d\u003d Design"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":94,"author":{"gitId":"-"},"content":"_Figure 2.1.1 : Architecture Diagram_"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":99,"author":{"gitId":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":104,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"link:#common-classes[*`Commons`*] represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"* link:#ui-component[*`UI`*] : The UI of the App."},{"lineNumber":114,"author":{"gitId":"-"},"content":"* link:#logic-component[*`Logic`*] : The command executor."},{"lineNumber":115,"author":{"gitId":"-"},"content":"* link:#model-component[*`Model`*] : Holds the data of the App in-memory."},{"lineNumber":116,"author":{"gitId":"-"},"content":"* link:#storage-component[*`Storage`*] : Reads data from, and writes data to, the hard disk."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Each of the four components"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":126,"author":{"gitId":"-"},"content":"_Figure 2.1.2 : Class Diagram of the Logic Component_"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":134,"author":{"gitId":"-"},"content":"_Figure 2.1.3a : Component interactions for `delete 1` command (part 1)_"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":142,"author":{"gitId":"-"},"content":"_Figure 2.1.3b : Component interactions for `delete 1` command (part 2)_"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":152,"author":{"gitId":"-"},"content":"_Figure 2.2.1 : Structure of the UI Component_"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":169,"author":{"gitId":"-"},"content":"_Figure 2.3.1 : Structure of the Logic Component_"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":172,"author":{"gitId":"-"},"content":"_Figure 2.3.2 : Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in Figure 2.3.1_"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"*API* :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":178,"author":{"gitId":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":179,"author":{"gitId":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":180,"author":{"gitId":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":185,"author":{"gitId":"-"},"content":"_Figure 2.3.1 : Interactions Inside the Logic Component for the `delete 1` Command_"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":190,"author":{"gitId":"-"},"content":"_Figure 2.4.1 : Structure of the Model Component_"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":197,"author":{"gitId":"-"},"content":"* stores the Address Book data."},{"lineNumber":198,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cReadOnlyPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":199,"author":{"gitId":"Esilocke"},"content":"* exposes an unmodifiable `ObservableList\u003cReadOnlyTask\u003e` that can be \u0027observed\u0027."},{"lineNumber":200,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":205,"author":{"gitId":"-"},"content":"_Figure 2.5.1 : Structure of the Storage Component_"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":212,"author":{"gitId":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"charlesgoh"},"content":"//tag::fontsize[]"},{"lineNumber":223,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Increase/Decrease/Reset Font Size"},{"lineNumber":224,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":225,"author":{"gitId":"charlesgoh"},"content":"On some screens, the text appear to be too small. The aim of the increase/decrease/reset font size feature is to allow"},{"lineNumber":226,"author":{"gitId":"charlesgoh"},"content":"users to customize the application\u0027s font size quickly on the go."},{"lineNumber":227,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":228,"author":{"gitId":"charlesgoh"},"content":"image::FontSizeUI.png[width\u003d\"540\"]"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"_Figure 3.1.1 : Using the UI to change font size_"},{"lineNumber":230,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":231,"author":{"gitId":"charlesgoh"},"content":"There are two methods of calling changes in font size:"},{"lineNumber":232,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":233,"author":{"gitId":"charlesgoh"},"content":"1. `onAction` handlers are used to handle UI font size buttons. These handlers will post"},{"lineNumber":234,"author":{"gitId":"charlesgoh"},"content":"new events via `ComponentManager`."},{"lineNumber":235,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":236,"author":{"gitId":"charlesgoh"},"content":"2. CLI commands also post new events to handle font size changes, when the relevant command is entered (e.g. `fontsize increase`)."},{"lineNumber":237,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":238,"author":{"gitId":"charlesgoh"},"content":"image::FontSizeChangeSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":239,"author":{"gitId":"Esilocke"},"content":"_Figure 3.1.2 : Sequence diagram for fontsize changing_"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":241,"author":{"gitId":"charlesgoh"},"content":"From the sequence diagram above, we can observe that the font size changes are handled by subscriber functions in PersonListPanel"},{"lineNumber":242,"author":{"gitId":"charlesgoh"},"content":"and TaskListPanel."},{"lineNumber":243,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":244,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":245,"author":{"gitId":"charlesgoh"},"content":"The initial implementation required access to the model from the UI. This implementation was replaced with one that"},{"lineNumber":246,"author":{"gitId":"charlesgoh"},"content":"standardised the handling of font size change requests through events."},{"lineNumber":247,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":248,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":249,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":250,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Use either UI or CLI based implementations +"},{"lineNumber":251,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Implementing both UI and CLI functionality +"},{"lineNumber":252,"author":{"gitId":"charlesgoh"},"content":"**Pros:** More options for the user. Not much increase in complexity when implementing the CLI version  +"},{"lineNumber":253,"author":{"gitId":"charlesgoh"},"content":"**Cons:** This implementation required passing information between classes, which may cause unnecessary coupling. +"},{"lineNumber":254,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":255,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Implementing only UI functionality +"},{"lineNumber":256,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Less tedious to implement and very intuitive for the user +"},{"lineNumber":257,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Users who prefer typing commands will not have the option of editing their font sizes using the CLI"},{"lineNumber":258,"author":{"gitId":"charlesgoh"},"content":"//end::fontsize[]"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"charlesgoh"},"content":"//tag::avatar[]"},{"lineNumber":261,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Setting Avatar on ViewPersonPanel"},{"lineNumber":262,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":263,"author":{"gitId":"charlesgoh"},"content":"The following function allows the setting of URL for the `ImageView` attribute within the `ViewPersonPanel` class:"},{"lineNumber":264,"author":{"gitId":"charlesgoh"},"content":"[source,java]"},{"lineNumber":265,"author":{"gitId":"charlesgoh"},"content":"----"},{"lineNumber":266,"author":{"gitId":"charlesgoh"},"content":"private void initializeAvatar() {"},{"lineNumber":267,"author":{"gitId":"charlesgoh"},"content":"        try {"},{"lineNumber":268,"author":{"gitId":"charlesgoh"},"content":"            String avatarPath \u003d person.getAvatar().value;"},{"lineNumber":269,"author":{"gitId":"charlesgoh"},"content":"            if (!avatarPath.equals(\"\")) {"},{"lineNumber":270,"author":{"gitId":"charlesgoh"},"content":"                logger.info(\"Initializing avatar to image at saved URL\");"},{"lineNumber":271,"author":{"gitId":"charlesgoh"},"content":"                Image newImage \u003d new Image(avatarPath);"},{"lineNumber":272,"author":{"gitId":"charlesgoh"},"content":"                avatarImage.setImage(newImage);"},{"lineNumber":273,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":274,"author":{"gitId":"charlesgoh"},"content":"        } catch (Exception e) {"},{"lineNumber":275,"author":{"gitId":"charlesgoh"},"content":"            e.printStackTrace();"},{"lineNumber":276,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"charlesgoh"},"content":"----"},{"lineNumber":279,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":280,"author":{"gitId":"charlesgoh"},"content":"The `initializeAvatar` method piggybacks on the `handlePersonPanelSelectionChangedEvent` event handler. Whenever there is"},{"lineNumber":281,"author":{"gitId":"charlesgoh"},"content":"a change in the person selection panel, this function will call the `initializeAvatar` method, which will update"},{"lineNumber":282,"author":{"gitId":"charlesgoh"},"content":"the `ImageView` attribute."},{"lineNumber":283,"author":{"gitId":"charlesgoh"},"content":"[source,java]"},{"lineNumber":284,"author":{"gitId":"charlesgoh"},"content":"----"},{"lineNumber":285,"author":{"gitId":"charlesgoh"},"content":"@Subscribe"},{"lineNumber":286,"author":{"gitId":"charlesgoh"},"content":"private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":287,"author":{"gitId":"charlesgoh"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":288,"author":{"gitId":"charlesgoh"},"content":"    this.person \u003d event.getNewSelection().person;"},{"lineNumber":289,"author":{"gitId":"charlesgoh"},"content":"    initializeWithPerson(person);"},{"lineNumber":290,"author":{"gitId":"charlesgoh"},"content":"    initializeAvatar();"},{"lineNumber":291,"author":{"gitId":"charlesgoh"},"content":"}"},{"lineNumber":292,"author":{"gitId":"charlesgoh"},"content":"----"},{"lineNumber":293,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":294,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":295,"author":{"gitId":"charlesgoh"},"content":"As of v1.5, the avatar field supports only URLs sourced online. References to local files may work but require the"},{"lineNumber":296,"author":{"gitId":"charlesgoh"},"content":"prefix \"file:\""},{"lineNumber":297,"author":{"gitId":"charlesgoh"},"content":"//end::avatar[]"},{"lineNumber":298,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"//tag::undoredo[]"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Undo/Redo mechanism"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.1 : Command inheritance_"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":312,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":313,"author":{"gitId":"-"},"content":"----"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        // ... list logic ..."},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}"},{"lineNumber":320,"author":{"gitId":"-"},"content":"----"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":323,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":324,"author":{"gitId":"-"},"content":"----"},{"lineNumber":325,"author":{"gitId":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        // ... undo logic ..."},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        // ... delete logic ..."},{"lineNumber":338,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}"},{"lineNumber":340,"author":{"gitId":"-"},"content":"----"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.2 : Initial status of undo/redo stack_"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":352,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.3 : After executing `delete 5`_"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":355,"author":{"gitId":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":362,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.4 : Executing undo_"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":365,"author":{"gitId":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.5 : Undo/redo sequence diagram_"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":375,"author":{"gitId":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.6 : Executing `clear`_"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":385,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.7 : Stack is not changed after `list`_"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"200\"]"},{"lineNumber":390,"author":{"gitId":"Esilocke"},"content":"_Figure 3.3.8 : Undo/Redo activity diagram_"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of `UndoableCommand` +"},{"lineNumber":395,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()` +"},{"lineNumber":396,"author":{"gitId":"-"},"content":"**Pros:** We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist. +"},{"lineNumber":397,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"**Cons:** Hard for new developers to understand the template pattern. +"},{"lineNumber":399,"author":{"gitId":"-"},"content":"**Alternative 2:** Just override `execute()` +"},{"lineNumber":400,"author":{"gitId":"-"},"content":"**Pros:** Does not involve the template pattern, easier for new developers to understand. +"},{"lineNumber":401,"author":{"gitId":"-"},"content":"**Cons:** Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"---"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"**Aspect:** How undo \u0026 redo executes +"},{"lineNumber":406,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Saves the entire address book. +"},{"lineNumber":407,"author":{"gitId":"-"},"content":"**Pros:** Easy to implement. +"},{"lineNumber":408,"author":{"gitId":"-"},"content":"**Cons:** May have performance issues in terms of memory usage. +"},{"lineNumber":409,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"**Alternative 2:** Individual command knows how to undo/redo by itself. +"},{"lineNumber":411,"author":{"gitId":"-"},"content":"**Pros:** Will use less memory (e.g. for `delete`, just save the person being deleted). +"},{"lineNumber":412,"author":{"gitId":"-"},"content":"**Cons:** We must ensure that the implementation of each individual command are correct."},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"---"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"**Aspect:** Type of commands that can be undone/redone +"},{"lineNumber":417,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`). +"},{"lineNumber":418,"author":{"gitId":"-"},"content":"**Pros:** We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost). +"},{"lineNumber":419,"author":{"gitId":"-"},"content":"**Cons:** User might think that undo also applies when the list is modified (undoing filtering for example), only to realize that it does not do that, after executing `undo`. +"},{"lineNumber":420,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"**Alternative 2:** Include all commands. +"},{"lineNumber":422,"author":{"gitId":"-"},"content":"**Pros:** Might be more intuitive for the user. +"},{"lineNumber":423,"author":{"gitId":"-"},"content":"**Cons:** User have no way of skipping such commands if he or she just want to reset the state of the address book and not the view. +"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"---"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"**Aspect:** Data structure to support the undo/redo commands +"},{"lineNumber":428,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Use separate stack for undo and redo +"},{"lineNumber":429,"author":{"gitId":"-"},"content":"**Pros:** Easy to understand for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project. +"},{"lineNumber":430,"author":{"gitId":"-"},"content":"**Cons:** Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `UndoRedoStack`. +"},{"lineNumber":431,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"**Alternative 2:** Use `HistoryManager` for undo/redo +"},{"lineNumber":433,"author":{"gitId":"-"},"content":"**Pros:** We do not need to maintain a separate stack, and just reuse what is already in the codebase. +"},{"lineNumber":434,"author":{"gitId":"-"},"content":"**Cons:** Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things. +"},{"lineNumber":435,"author":{"gitId":"-"},"content":"// end::undoredo[]"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"Esilocke"},"content":"// tag::task[]"},{"lineNumber":438,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Task Object"},{"lineNumber":439,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":440,"author":{"gitId":"Esilocke"},"content":"The Task object stores information related to a single deadline or task, in a manner similar to how Person information is stored. +"},{"lineNumber":441,"author":{"gitId":"Esilocke"},"content":"As such, it also shares the same types of commands as the Person object, namely the `add`, `delete`, `find`, `select`, and `edit` commands."},{"lineNumber":442,"author":{"gitId":"Esilocke"},"content":"Object inheritance is thus used to create the commands that are shared with those used to handle Person objects."},{"lineNumber":443,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":444,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Task-related Command implementation"},{"lineNumber":445,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":446,"author":{"gitId":"Esilocke"},"content":"An example of using inheritance to handle Person vs Task addition:"},{"lineNumber":447,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":448,"author":{"gitId":"Esilocke"},"content":"[source,java]"},{"lineNumber":449,"author":{"gitId":"Esilocke"},"content":"----"},{"lineNumber":450,"author":{"gitId":"Esilocke"},"content":"public class AddPersonCommand extends AddCommand {"},{"lineNumber":451,"author":{"gitId":"Esilocke"},"content":"}"},{"lineNumber":452,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":453,"author":{"gitId":"Esilocke"},"content":"public class AddTaskCommand extends AddCommand {"},{"lineNumber":454,"author":{"gitId":"Esilocke"},"content":"}"},{"lineNumber":455,"author":{"gitId":"Esilocke"},"content":"----"},{"lineNumber":456,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":457,"author":{"gitId":"Esilocke"},"content":"[source,java]"},{"lineNumber":458,"author":{"gitId":"Esilocke"},"content":"----"},{"lineNumber":459,"author":{"gitId":"Esilocke"},"content":"public AddCommand parse(String args) throws ParseException {"},{"lineNumber":460,"author":{"gitId":"Esilocke"},"content":"    int objectType \u003d checkType(args);"},{"lineNumber":461,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":462,"author":{"gitId":"Esilocke"},"content":"    if (objectType \u003d\u003d HANDLE_TYPE_PERSON) {"},{"lineNumber":463,"author":{"gitId":"Esilocke"},"content":"        Person toAdd \u003d createNewPerson(args);"},{"lineNumber":464,"author":{"gitId":"Esilocke"},"content":"        return AddPersonCommand(toAdd);"},{"lineNumber":465,"author":{"gitId":"Esilocke"},"content":"    } else if (objectType \u003d\u003d HANDLE_TYPE_TASK) {"},{"lineNumber":466,"author":{"gitId":"Esilocke"},"content":"        Task toAdd \u003d createNewTask(args);"},{"lineNumber":467,"author":{"gitId":"Esilocke"},"content":"        return AddTaskCommand(toAdd);"},{"lineNumber":468,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"Esilocke"},"content":"}"},{"lineNumber":470,"author":{"gitId":"Esilocke"},"content":"----"},{"lineNumber":471,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":472,"author":{"gitId":"Esilocke"},"content":"The Parser in charge of the command will thus return either an AddPersonCommand, or an AddTaskCommand, depending on whether you specify to add a Task or not in the arguments."},{"lineNumber":473,"author":{"gitId":"Esilocke"},"content":" +"},{"lineNumber":474,"author":{"gitId":"Esilocke"},"content":"The sequence diagram below shows how this is done:"},{"lineNumber":475,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":476,"author":{"gitId":"Esilocke"},"content":"image::AddTaskSeq.png[width\u003d\"800\"]"},{"lineNumber":477,"author":{"gitId":"Esilocke"},"content":"_Figure 3.4.1.1 : Sequence Diagram for adding a Task_"},{"lineNumber":478,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":479,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Task structure and subclasses"},{"lineNumber":480,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":481,"author":{"gitId":"Esilocke"},"content":"The Task object has several subclasses, which store information about the task. The following class diagram illustrates the structure of a Task object."},{"lineNumber":482,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":483,"author":{"gitId":"Esilocke"},"content":"image::TaskClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":484,"author":{"gitId":"Esilocke"},"content":"_Figure 3.4.2.1 : Class Diagram for the Task class_"},{"lineNumber":485,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":486,"author":{"gitId":"Esilocke"},"content":"Each subclass contains its own methods for input validation, and the Assignees class supports some methods for changing its assignedList."},{"lineNumber":487,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":488,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Task Object Storage"},{"lineNumber":489,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":490,"author":{"gitId":"Esilocke"},"content":"[source, xml]"},{"lineNumber":491,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":492,"author":{"gitId":"Esilocke"},"content":"    \u003cpersons\u003e"},{"lineNumber":493,"author":{"gitId":"Esilocke"},"content":"        \u003cname\u003esomeone else\u003c/name\u003e"},{"lineNumber":494,"author":{"gitId":"Esilocke"},"content":"        \u003cphone\u003e\u003c/phone\u003e"},{"lineNumber":495,"author":{"gitId":"Esilocke"},"content":"        \u003cemail\u003e\u003c/email\u003e"},{"lineNumber":496,"author":{"gitId":"Esilocke"},"content":"        \u003caddress\u003e\u003c/address\u003e"},{"lineNumber":497,"author":{"gitId":"Esilocke"},"content":"    \u003c/persons\u003e"},{"lineNumber":498,"author":{"gitId":"Esilocke"},"content":"    \u003ctasks\u003e"},{"lineNumber":499,"author":{"gitId":"Esilocke"},"content":"        \u003cname\u003eBuy new pencil\u003c/name\u003e"},{"lineNumber":500,"author":{"gitId":"Esilocke"},"content":"        \u003cdescription\u003eBuy new pencil for writing purposes\u003c/description\u003e"},{"lineNumber":501,"author":{"gitId":"Esilocke"},"content":"        \u003cdeadline\u003e\u003c/deadline\u003e"},{"lineNumber":502,"author":{"gitId":"Esilocke"},"content":"        \u003cpriority\u003e2\u003c/priority\u003e"},{"lineNumber":503,"author":{"gitId":"Esilocke"},"content":"    \u003c/tasks\u003e"},{"lineNumber":504,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":505,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":506,"author":{"gitId":"Esilocke"},"content":"Task objects are stored in a similar manner to Person objects, and share the same level of hierarchy as Person objects. During startup, tasks are read and entered into the UniqueTaskList, which handles all the tasks that are present in the address book."},{"lineNumber":507,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":508,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":509,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":510,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":511,"author":{"gitId":"Esilocke"},"content":"**Aspect:** Implementation of Task-related commands +"},{"lineNumber":512,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":513,"author":{"gitId":"Esilocke"},"content":"**Alternative 1 (current choice):** Use inheritance to implement different commands for Task and Person objects +"},{"lineNumber":514,"author":{"gitId":"Esilocke"},"content":"**Pros:** Can be easily extended to allow handling of other types of objects, and preserves Separation of Concerns. +"},{"lineNumber":515,"author":{"gitId":"Esilocke"},"content":"**Cons:** Minor code duplication occurs as the commands for Person and Tasks objects share the same structure. +"},{"lineNumber":516,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":517,"author":{"gitId":"Esilocke"},"content":"**Alternative 2:** Use polymorphism to allow existing commands to implement task handling +"},{"lineNumber":518,"author":{"gitId":"Esilocke"},"content":"**Pros:** Code duplication is kept to a minimum as the Command will handle Task and Person objects in the same class. +"},{"lineNumber":519,"author":{"gitId":"Esilocke"},"content":"**Cons:** Single Responsibility Principle is violated as each Command class now needs to handle 2 different types of objects. +"},{"lineNumber":520,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":521,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":522,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":523,"author":{"gitId":"Esilocke"},"content":"**Aspect:** Storage of Task objects +"},{"lineNumber":524,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":525,"author":{"gitId":"Esilocke"},"content":"**Alternative 2:** Store Task objects together in the default XML storage file +"},{"lineNumber":526,"author":{"gitId":"Esilocke"},"content":"**Pros** Only 1 storage file is needed. The storage manager thus only needs to refer to one storage +"},{"lineNumber":527,"author":{"gitId":"Esilocke"},"content":"**Cons** Any changes to the Person or Task will affect the storage of both the Person and Task objects. This will increase coupling between the Person and Task classes. +"},{"lineNumber":528,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":529,"author":{"gitId":"Esilocke"},"content":"**Alternative 1 (current choice):** Store Tasks objects in a separate XML file +"},{"lineNumber":530,"author":{"gitId":"Esilocke"},"content":"**Pros:** Easier to manage as Person storage will not interfere with Task storage, and vice versa. +"},{"lineNumber":531,"author":{"gitId":"Esilocke"},"content":"**Cons:** All existing save/load functions will require an additional method to handle Task storage. +"},{"lineNumber":532,"author":{"gitId":"Esilocke"},"content":"// end::task[]"},{"lineNumber":533,"author":{"gitId":"Esilocke"},"content":"// tag::assignDismiss[]"},{"lineNumber":534,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":535,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Assign and Dismiss Commands"},{"lineNumber":536,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":537,"author":{"gitId":"Esilocke"},"content":"The `assign` and `dismiss` command allows you to assign contacts to and from your tasks, thus aiding coordination and collaboration. +"},{"lineNumber":538,"author":{"gitId":"Esilocke"},"content":"The Assignees class stores information related to who is assigned to a particular task through maintaining an internal ArrayList that keeps track of all the indexes of the people who are assigned to the task. +"},{"lineNumber":539,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":540,"author":{"gitId":"Esilocke"},"content":"The indexes stored in the Assignees class *refer to the index of the person in the UniquePersonList, not the visible index shown to the user in the UI*. This means that the indexes will not change even if the list shown in the UI changes, such as after a `find` operation. +"},{"lineNumber":541,"author":{"gitId":"Esilocke"},"content":"For example, given the below list of persons:"},{"lineNumber":542,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":543,"author":{"gitId":"Esilocke"},"content":"image::AssignIndexMovement.png[width\u003d\"800\"]"},{"lineNumber":544,"author":{"gitId":"Esilocke"},"content":"_Figure 3.5.1 : Mapping of indexes to a task_"},{"lineNumber":545,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":546,"author":{"gitId":"Esilocke"},"content":"After a `find` operation, only the second, fourth and fifth persons are visible."},{"lineNumber":547,"author":{"gitId":"Esilocke"},"content":"When you call `assign 1 2 to/1`, while the first and second persons in the visible list will be assigned to the first Task, in this case the \"Second person\" and \"Fourth person\", internally the assignee list contain Indexes corresponding the following values: +"},{"lineNumber":548,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":549,"author":{"gitId":"Esilocke"},"content":"[source, java]"},{"lineNumber":550,"author":{"gitId":"Esilocke"},"content":"assignedList \u003d {1, 3}"},{"lineNumber":551,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":552,"author":{"gitId":"Esilocke"},"content":"The indexes 1 and 3 refer to the zero-based index of the \"Second person\" and \"Fourth person\" in the complete list."},{"lineNumber":553,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":554,"author":{"gitId":"Esilocke"},"content":"Due to this requirement, when the UniquePersonList changes, the assigned indexes of each task will be updated as well."},{"lineNumber":555,"author":{"gitId":"-"},"content":""},{"lineNumber":556,"author":{"gitId":"Esilocke"},"content":"The `add` operation will not require the assigned indexes to be updated, as each newly added person is not assigned to any task by default, and when a person is added, he is inserted to the end of the list, thus the order of the other persons will not change."},{"lineNumber":557,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":558,"author":{"gitId":"Esilocke"},"content":"After a `clear` operation that clears only the persons list, all task assignee lists will be cleared and re-initialized."},{"lineNumber":559,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":560,"author":{"gitId":"Esilocke"},"content":"After a `delete` operation, the order of the persons in the persons list may change. This is especially so when the first person is deleted, as this will cause the positions of all other persons to decrease by 1."},{"lineNumber":561,"author":{"gitId":"Esilocke"},"content":"The activity diagram below illustrates the process of updating task assignee lists when a person is deleted."},{"lineNumber":562,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":563,"author":{"gitId":"Esilocke"},"content":"image::AssignIndexDelete.png[width\u003d\"800]"},{"lineNumber":564,"author":{"gitId":"Esilocke"},"content":"_Figure 3.5.2 : Activity Diagram for updating Assignees after deleting a Person_"},{"lineNumber":565,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":566,"author":{"gitId":"Esilocke"},"content":"After a `sort` operation, the order of the persons in the persons list may change as well. However, in comparison to `delete`, the new position of the person is not fixed."},{"lineNumber":567,"author":{"gitId":"Esilocke"},"content":"To ensure that the indexes are updated properly, the change in positions after each `sort` operation is maintained as well inside the UniquePersonList. +"},{"lineNumber":568,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":569,"author":{"gitId":"Esilocke"},"content":"image::AssignIndexSort.png[width\u003d\"800\"]"},{"lineNumber":570,"author":{"gitId":"Esilocke"},"content":"_Figure 3.5.3 : Mapping of indexes after a sort operation_"},{"lineNumber":571,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":572,"author":{"gitId":"Esilocke"},"content":"All task assignee lists will thus be updated using the mappings from the sort operation. Each index in the list will be replaced by the value given in the mappings."},{"lineNumber":573,"author":{"gitId":"Esilocke"},"content":"For example, if a task previously had an index of \"1\" assigned to it, it be replaced by an index of \"4\"."},{"lineNumber":574,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":575,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":576,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":577,"author":{"gitId":"Esilocke"},"content":"**Aspect:** Storage of assigned persons in the Assignee class +"},{"lineNumber":578,"author":{"gitId":"Esilocke"},"content":"**Alternative 1 (current choice):** Store the Indexes of the persons only +"},{"lineNumber":579,"author":{"gitId":"Esilocke"},"content":"**Pros:** The assigned persons will only need to be retrieved on a per-need basis, rather than residing in the Assignee class all the time, thus making storage simpler +"},{"lineNumber":580,"author":{"gitId":"Esilocke"},"content":"**Cons:** UniquePersonList will be coupled to Tasks, as Tasks will need to retrieve information from the UniquePersonList in order to update itself after any operation that could potentially change the UniquePersonList ordering. +"},{"lineNumber":581,"author":{"gitId":"Esilocke"},"content":"**Alternative 2:** Store the whole person in the Assignees class +"},{"lineNumber":582,"author":{"gitId":"Esilocke"},"content":"**Pros:** The Assignees class will not need to depend on the UniquePersonList as its internal list is independent from that of the UniquePersonList +"},{"lineNumber":583,"author":{"gitId":"Esilocke"},"content":"**Cons:** Repetition of information is incurred in the storage file, as the same person can appear multiple times if he is assigned to multiple tasks. This will increase the size of the storage file, and make read-write operations slow. +"},{"lineNumber":584,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":585,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":586,"author":{"gitId":"Esilocke"},"content":"// end::assignDismiss[]"},{"lineNumber":587,"author":{"gitId":"charlesgoh"},"content":"// tag::sort[]"},{"lineNumber":588,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Sort Command"},{"lineNumber":589,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":590,"author":{"gitId":"charlesgoh"},"content":"The sort command is facilitated by the `sortBy` methods in UniquePersonList and UniqueTaskList. It supports"},{"lineNumber":591,"author":{"gitId":"charlesgoh"},"content":"sort by ascending or by descending order in any field."},{"lineNumber":592,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":593,"author":{"gitId":"charlesgoh"},"content":"The sort enhancement utilises the Java Collections Sort API by passing it a custom Comparator."},{"lineNumber":594,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":595,"author":{"gitId":"charlesgoh"},"content":"The sort command is parsed through `SortCommandParser`, which passes control over to the `SortCommand`"},{"lineNumber":596,"author":{"gitId":"charlesgoh"},"content":"class. The actual sorting happens via the UniquePersonList class or the UniqueTaskList class."},{"lineNumber":597,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":598,"author":{"gitId":"charlesgoh"},"content":"The UML Class diagram for sort commands that trigger sorting in person listings is shown below:"},{"lineNumber":599,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":600,"author":{"gitId":"charlesgoh"},"content":"image::SortCommandPersonDiagram.png[width\u003d\"800\"]"},{"lineNumber":601,"author":{"gitId":"Esilocke"},"content":"_Figure 3.6.1 : Sort command class diagram_"},{"lineNumber":602,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":603,"author":{"gitId":"charlesgoh"},"content":"Likewise, the UML Class diagram for sort commands that trigger sorting in task listings is shown below:"},{"lineNumber":604,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":605,"author":{"gitId":"charlesgoh"},"content":"image::SortCommandTaskDiagram.png[width\u003d\"800\"]"},{"lineNumber":606,"author":{"gitId":"Esilocke"},"content":"_Figure 3.6.1 : Sort task command class diagram_"},{"lineNumber":607,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":608,"author":{"gitId":"charlesgoh"},"content":"We can deduce from the UML diagrams diagrams above that the only difference between the implementation"},{"lineNumber":609,"author":{"gitId":"charlesgoh"},"content":"of the sorting for persons and tasks lies in the location where the sorting is actually executed."},{"lineNumber":610,"author":{"gitId":"charlesgoh"},"content":"The sorting of persons happens in `UniquePersonList` class while the sorting of tasks happens in `UniqueTaskList`."},{"lineNumber":611,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":612,"author":{"gitId":"charlesgoh"},"content":"Suppose a user enters a new command `sort person name desc`. The following sequence diagram"},{"lineNumber":613,"author":{"gitId":"charlesgoh"},"content":"demonstrates how the sort command works."},{"lineNumber":614,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":615,"author":{"gitId":"charlesgoh"},"content":"image::SortSequenceDiagram.png[width\u003d\"800]"},{"lineNumber":616,"author":{"gitId":"Esilocke"},"content":"_Figure 3.6.1 : Sort command sequence diagram_"},{"lineNumber":617,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":618,"author":{"gitId":"charlesgoh"},"content":"Note that the execution of the sort methods results in the actual person or task list being sorted. This list will be"},{"lineNumber":619,"author":{"gitId":"charlesgoh"},"content":"reflected in both the application\u0027s storage as well as the graphical user interface."},{"lineNumber":620,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":621,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":622,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":623,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Implementation of `sort Command` +"},{"lineNumber":624,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":625,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Implement sorting functionality in `UniquePersonList` and `UniqueTaskList` class. +"},{"lineNumber":626,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Delegates the concern of sorting to the class that is responsible for the core of most operations done to the lists."},{"lineNumber":627,"author":{"gitId":"charlesgoh"},"content":"Future changes to the implementation will be easier as a consequence. +"},{"lineNumber":628,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Hard for new developers to understand the flow of control passed between classes at first. +"},{"lineNumber":629,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":630,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Implement the sorting functionality within other classes like `AddressBook` or `SortCommand`. +"},{"lineNumber":631,"author":{"gitId":"charlesgoh"},"content":"**Pros:** May be more intuitive for new developers and it is easier to trace function calls between lesser classes involved. +"},{"lineNumber":632,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Violates Separation of Concern principle and causes unnecessary content coupling whereby the `UniquePersonList`"},{"lineNumber":633,"author":{"gitId":"charlesgoh"},"content":"and `UniqueTaskList` will have to rely on the `SortCommand` class."},{"lineNumber":634,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":635,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":636,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":637,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Temporary Sort Implementation vs. Persistent Sort Implementation +"},{"lineNumber":638,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":639,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Saves the entire address book after sorting. +"},{"lineNumber":640,"author":{"gitId":"charlesgoh"},"content":"**Pros:** More intuitive and reduces complexity in implementation. +"},{"lineNumber":641,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Old order of contact instances in the address book will be lost +"},{"lineNumber":642,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":643,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Duplicate a temporary version of the list and sort it for viewing (i.e. the actual list is not sorted) +"},{"lineNumber":644,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Old order of contact instances remains intact. +"},{"lineNumber":645,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Will use more memory and may be less intuitive for developer to understand and in terms of user experience. Also, sorting will not persist in the system."},{"lineNumber":646,"author":{"gitId":"charlesgoh"},"content":"// end::sort[]"},{"lineNumber":647,"author":{"gitId":"-"},"content":""},{"lineNumber":648,"author":{"gitId":"charlesgoh"},"content":"// tag::backup[]"},{"lineNumber":649,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Backup Command"},{"lineNumber":650,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":651,"author":{"gitId":"charlesgoh"},"content":"The `backup` command uses the event handler `BackupRequestEvent`. When raised, this"},{"lineNumber":652,"author":{"gitId":"charlesgoh"},"content":"event notifies the subscriber `backupAddressBook` method in Storage class."},{"lineNumber":653,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":654,"author":{"gitId":"charlesgoh"},"content":"The outlining sequence diagram for this process (excluding the interaction with the"},{"lineNumber":655,"author":{"gitId":"charlesgoh"},"content":"`BackupRequestEvent`) is shown below:"},{"lineNumber":656,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":657,"author":{"gitId":"charlesgoh"},"content":"image::BackupSequenceDiagram.png[width\u003d\"800]"},{"lineNumber":658,"author":{"gitId":"Esilocke"},"content":"_Figure 3.7.1 : Backup command sequence diagram_"},{"lineNumber":659,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":660,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":661,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":662,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Implementation of `backup Command` +"},{"lineNumber":663,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":664,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Use an event handler to initialize the backup process +"},{"lineNumber":665,"author":{"gitId":"-"},"content":"**Pros:** Avoids coupling the logic to the storage unnecessarily. +"},{"lineNumber":666,"author":{"gitId":"-"},"content":"**Cons:** May not be as intuitive for some developers in the beginning +"},{"lineNumber":667,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":668,"author":{"gitId":"-"},"content":"**Alternative 2:** Access storage component directly instead of using event handlers +"},{"lineNumber":669,"author":{"gitId":"-"},"content":"**Pros:** May be more intuitive as it is a direct approach +"},{"lineNumber":670,"author":{"gitId":"-"},"content":"**Cons:** Violates the Law of Demeter."},{"lineNumber":671,"author":{"gitId":"charlesgoh"},"content":"// end::backup[]"},{"lineNumber":672,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":673,"author":{"gitId":"charlesgoh"},"content":"// tag::password[]"},{"lineNumber":674,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Lock and Unlock Command"},{"lineNumber":675,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":676,"author":{"gitId":"charlesgoh"},"content":"The `lock` and `unlock` commands utilise the Model to access the user preferences of"},{"lineNumber":677,"author":{"gitId":"charlesgoh"},"content":"the application."},{"lineNumber":678,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":679,"author":{"gitId":"charlesgoh"},"content":"Arguments are processed in the `UnlockCommandParser` or `LockCommandParser`,"},{"lineNumber":680,"author":{"gitId":"charlesgoh"},"content":"which passes control over to the `UnlockCommand` and `LockCommand` class respectively."},{"lineNumber":681,"author":{"gitId":"charlesgoh"},"content":"These `Command` classes will then call the Model to toggle the lock\u0027s state."},{"lineNumber":682,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":683,"author":{"gitId":"-"},"content":"The activity diagram below outlines the basic logic of the lock states concept.:"},{"lineNumber":684,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":685,"author":{"gitId":"charlesgoh"},"content":"image::LockStatesActivityDiagram.png[width\u003d\"800]"},{"lineNumber":686,"author":{"gitId":"Esilocke"},"content":"_Figure 3.8.1 : Lock/Unlock command activity diagram_"},{"lineNumber":687,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":688,"author":{"gitId":"charlesgoh"},"content":"From the activity diagram we can see that lock states are preserved in the `preferences.json`"},{"lineNumber":689,"author":{"gitId":"charlesgoh"},"content":"file after the application closes by passing the lock state into the `UserPrefs` class to be"},{"lineNumber":690,"author":{"gitId":"-"},"content":"saved by the Storage component."},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":693,"author":{"gitId":"charlesgoh"},"content":"The default state of the lock is set to False (i.e. locked) when the user first opens the"},{"lineNumber":694,"author":{"gitId":"charlesgoh"},"content":"application. Subsequent changes to the lock will persist in the user preferences."},{"lineNumber":695,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":696,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":697,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":698,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Implementation of `lock` and `unlock` Commands"},{"lineNumber":699,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":700,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Call methods in the Model directly to change UserPrefs +"},{"lineNumber":701,"author":{"gitId":"charlesgoh"},"content":"**Pros:** More intuitive. Highest returns for minimal amount of code +"},{"lineNumber":702,"author":{"gitId":"charlesgoh"},"content":"**Cons:** May be confusing to some developers in the beginning, since another"},{"lineNumber":703,"author":{"gitId":"charlesgoh"},"content":"intuitive approach is to use event handlers +"},{"lineNumber":704,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":705,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Use Event Handlers +"},{"lineNumber":706,"author":{"gitId":"charlesgoh"},"content":"**Pros:** More intuitive for some developers +"},{"lineNumber":707,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Will still have to access Model, which makes its advantage over direct calls next to none"},{"lineNumber":708,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":709,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d ChangePassword Command"},{"lineNumber":710,"author":{"gitId":"-"},"content":"The default password when users first open Address++ is `password`. The ChangePassword command"},{"lineNumber":711,"author":{"gitId":"-"},"content":"sets a new password in the temporary User Preferences. When the application is closed, this"},{"lineNumber":712,"author":{"gitId":"-"},"content":"information is passed to the Storage Component to be saved into the file `preferences.json`"},{"lineNumber":713,"author":{"gitId":"-"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"To illustrate this concept better, let us have a look at the `preferences.json` file:"},{"lineNumber":715,"author":{"gitId":"-"},"content":"[source, json]"},{"lineNumber":716,"author":{"gitId":"-"},"content":"{"},{"lineNumber":717,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":718,"author":{"gitId":"charlesgoh"},"content":"    \"windowWidth\" : 1309.0,"},{"lineNumber":719,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 720.0,"},{"lineNumber":720,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":721,"author":{"gitId":"-"},"content":"      \"x\" : 0,"},{"lineNumber":722,"author":{"gitId":"-"},"content":"      \"y\" : 22"},{"lineNumber":723,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":724,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":725,"author":{"gitId":"-"},"content":"  \"addressBookFilePath\" : \"data/addressbook.xml\","},{"lineNumber":726,"author":{"gitId":"-"},"content":"  \"addressBookName\" : \"My Address++\","},{"lineNumber":727,"author":{"gitId":"-"},"content":"  \"addressBookLockState\" : false,"},{"lineNumber":728,"author":{"gitId":"charlesgoh"},"content":"  \"addressBookEncryptedPassword\" : \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\","},{"lineNumber":729,"author":{"gitId":"charlesgoh"},"content":"  \"theme\" : \"/view/DarkTheme.css\""},{"lineNumber":730,"author":{"gitId":"-"},"content":"}"},{"lineNumber":731,"author":{"gitId":"-"},"content":""},{"lineNumber":732,"author":{"gitId":"-"},"content":"As shown in the cope snippet above, the password is stored as one of the entries in the JSON"},{"lineNumber":733,"author":{"gitId":"-"},"content":"file."},{"lineNumber":734,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":735,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":736,"author":{"gitId":"-"},"content":"SHA256 encryption was used to calculate a hash for the password. This is to delay anyone snooping around the"},{"lineNumber":737,"author":{"gitId":"charlesgoh"},"content":"user\u0027s file directories from seeing the real password immediately."},{"lineNumber":738,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":739,"author":{"gitId":"-"},"content":"**Validation Checks**"},{"lineNumber":740,"author":{"gitId":"-"},"content":"****"},{"lineNumber":741,"author":{"gitId":"charlesgoh"},"content":"1. **Password Validation** -\u003e Is the password correct?"},{"lineNumber":742,"author":{"gitId":"charlesgoh"},"content":"2. **Password Confirmation** -\u003e Does the new password and confirmation password match?"},{"lineNumber":743,"author":{"gitId":"charlesgoh"},"content":"3. **Password Uniqueness** -\u003e Is the new password different from the old password?"},{"lineNumber":744,"author":{"gitId":"-"},"content":"****"},{"lineNumber":745,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":746,"author":{"gitId":"-"},"content":"The activity diagram below outlines the process flow for the `ChangePasswordCommand`:"},{"lineNumber":747,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":748,"author":{"gitId":"-"},"content":"image::ChangePasswordActivityDiagram.png[width\u003d\"800]"},{"lineNumber":749,"author":{"gitId":"Esilocke"},"content":"_Figure 3.9.1 : ChangePassword command activity diagram_"},{"lineNumber":750,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":751,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":752,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":753,"author":{"gitId":"-"},"content":"**Aspect:** On Demand Saving vs. Save On Exit +"},{"lineNumber":754,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":755,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Save On Exit +"},{"lineNumber":756,"author":{"gitId":"-"},"content":"**Pros:** Simplifies process flow as the command class no longer has to access both Model and Storage components +"},{"lineNumber":757,"author":{"gitId":"-"},"content":"**Cons:** Any system/application crash may cause change password data to be lost +"},{"lineNumber":758,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":759,"author":{"gitId":"-"},"content":"**Alternative 2:** On Demand Saving +"},{"lineNumber":760,"author":{"gitId":"-"},"content":"**Pros:** Changes may persist even through system and application crashes +"},{"lineNumber":761,"author":{"gitId":"-"},"content":"**Cons:** May slow down application, although not significantly. Complicates process flow."},{"lineNumber":762,"author":{"gitId":"charlesgoh"},"content":"// end::password[]"},{"lineNumber":763,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":764,"author":{"gitId":"jeffreygohkw"},"content":"// tag::privacy[]"},{"lineNumber":765,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Privacy of fields"},{"lineNumber":766,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":767,"author":{"gitId":"jeffreygohkw"},"content":"The `Name`, `Phone`, `Email`, `Address` and `Remark` of a `Person` contains a boolean `isPrivate`, which will determine if the field belonging to that person is private or not."},{"lineNumber":768,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":769,"author":{"gitId":"jeffreygohkw"},"content":"image::PersonClassDiagramPrivacy.png[width\u003d\"800\"]"},{"lineNumber":770,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.10.1 : Class diagram for a Person, only Name, Phone, Email, Address and Remark contain an isPrivate boolean to indicate if it is private or not_"},{"lineNumber":771,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":772,"author":{"gitId":"jeffreygohkw"},"content":"Adding a person with private fields uses the same `AddCommand` as adding a person with no public fields. +"},{"lineNumber":773,"author":{"gitId":"jeffreygohkw"},"content":"To determine if the field that is added should be set to private, a `p` is added to the start of the prefix. +"},{"lineNumber":774,"author":{"gitId":"jeffreygohkw"},"content":"Hence, `pe/[EMAIL]` will set that person\u0027s email to be private, whereas if `e/[EMAIL]` was used, that person\u0027s email would be public. +"},{"lineNumber":775,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":776,"author":{"gitId":"jeffreygohkw"},"content":"These new prefixes can be found in `CliSyntax`, and `AddCommandParser` will take data with these prefixes."},{"lineNumber":777,"author":{"gitId":"jeffreygohkw"},"content":"`AddCommandParser` will then call the appropriate method in `ParserUtil`, which will parse the string provided into a new field."},{"lineNumber":778,"author":{"gitId":"jeffreygohkw"},"content":"Depending on whether or not the field is supposed to be private, `ParsetUtil` will call the appropriate constructor."},{"lineNumber":779,"author":{"gitId":"jeffreygohkw"},"content":"Upon obtaining all the fields anc creating a new `Person`, `AddCommandParser` will create a new `AddCommand` to handle the addition of the new `Person`."},{"lineNumber":780,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":781,"author":{"gitId":"jeffreygohkw"},"content":"image::AddPrivateSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":782,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.10.2 : Sequence Diagram for adding a Person with private fields_"},{"lineNumber":783,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":784,"author":{"gitId":"jeffreygohkw"},"content":"If a field is private, then the `toString` method will return a string `\u003cPrivate [FIELD]\u003e`, where `[FIELD]` is the name of that field. +"},{"lineNumber":785,"author":{"gitId":"jeffreygohkw"},"content":"This can be seen from the `toString` method in `Name`:"},{"lineNumber":786,"author":{"gitId":"jeffreygohkw"},"content":"[source,java]"},{"lineNumber":787,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":788,"author":{"gitId":"jeffreygohkw"},"content":"@Override"},{"lineNumber":789,"author":{"gitId":"jeffreygohkw"},"content":"public String toString() {"},{"lineNumber":790,"author":{"gitId":"jeffreygohkw"},"content":"    if (isPrivate) {"},{"lineNumber":791,"author":{"gitId":"jeffreygohkw"},"content":"        return \"\u003cPrivate Name\u003e\";"},{"lineNumber":792,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":793,"author":{"gitId":"jeffreygohkw"},"content":"    return fullName;"},{"lineNumber":794,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":795,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":796,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":797,"author":{"gitId":"jeffreygohkw"},"content":"Since the information displayed in a person\u0027s card in the UI gets the value of the field through the `toString()` method, this hides the actual value of the field in the UI."},{"lineNumber":798,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":799,"author":{"gitId":"jeffreygohkw"},"content":"In addition, if `isPrivate` is `true` for `Name`, clicking on a person\u0027s card in the UI will not trigger a search on Google for that person\u0027s name."},{"lineNumber":800,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":801,"author":{"gitId":"jeffreygohkw"},"content":"Instead, a `NewResultAvailableEvent` will be raised by `BrowserPanel` to inform the user that they are not allowed to search for a person possessing a private `Name`."},{"lineNumber":802,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":803,"author":{"gitId":"jeffreygohkw"},"content":"To keep track of whether each field is private or not, `XmlAdaptedPerson` will have to store the `isPrivate` value for each field of `Person`."},{"lineNumber":804,"author":{"gitId":"jeffreygohkw"},"content":"This is done by adding the following"},{"lineNumber":805,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":806,"author":{"gitId":"jeffreygohkw"},"content":"[source,java]"},{"lineNumber":807,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":808,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)"},{"lineNumber":809,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean nameIsPrivate;"},{"lineNumber":810,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)"},{"lineNumber":811,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean phoneIsPrivate;"},{"lineNumber":812,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)"},{"lineNumber":813,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean emailIsPrivate;"},{"lineNumber":814,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)"},{"lineNumber":815,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean addressIsPrivate;"},{"lineNumber":816,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)"},{"lineNumber":817,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean remarkIsPrivate;"},{"lineNumber":818,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":819,"author":{"gitId":"jeffreygohkw"},"content":"Which results in a `Person` being saved in the xml file in the following format"},{"lineNumber":820,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":821,"author":{"gitId":"jeffreygohkw"},"content":"[source, html]"},{"lineNumber":822,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":823,"author":{"gitId":"jeffreygohkw"},"content":"\u003cpersons\u003e"},{"lineNumber":824,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cname\u003eAlex Yeoh\u003c/name\u003e"},{"lineNumber":825,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cnameIsPrivate\u003efalse\u003c/nameIsPrivate\u003e"},{"lineNumber":826,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cphone\u003e87438807\u003c/phone\u003e"},{"lineNumber":827,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cphoneIsPrivate\u003efalse\u003c/phoneIsPrivate\u003e"},{"lineNumber":828,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cemail\u003ealexyeoh@example.com\u003c/email\u003e"},{"lineNumber":829,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cemailIsPrivate\u003efalse\u003c/emailIsPrivate\u003e"},{"lineNumber":830,"author":{"gitId":"jeffreygohkw"},"content":"    \u003caddress\u003eBlk 30 Geylang Street 29, #06-40\u003c/address\u003e"},{"lineNumber":831,"author":{"gitId":"jeffreygohkw"},"content":"    \u003caddressIsPrivate\u003efalse\u003c/addressIsPrivate\u003e"},{"lineNumber":832,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cremark\u003echeerful lad\u003c/remark\u003e"},{"lineNumber":833,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cremarkIsPrivate\u003efalse\u003c/remarkIsPrivate\u003e"},{"lineNumber":834,"author":{"gitId":"jeffreygohkw"},"content":"    \u003ctagged\u003efriends\u003c/tagged\u003e"},{"lineNumber":835,"author":{"gitId":"jeffreygohkw"},"content":"\u003c/persons\u003e"},{"lineNumber":836,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":837,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":838,"author":{"gitId":"jeffreygohkw"},"content":"If an old save file without privacy data is loaded, then the `toModelType()` method in `XmlAdaptedPerson` will set `isPrivate` to be `false` for each field of `Person`, to keep the displayed information the same."},{"lineNumber":839,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":840,"author":{"gitId":"jeffreygohkw"},"content":"[NOTE]"},{"lineNumber":841,"author":{"gitId":"jeffreygohkw"},"content":"If a private field is to be edited by `EditCommand`, `createEditedPerson()` in `EditCommand` will not modify the data of that field, even though `EditCommand` will create a new `CommandResult` with a success message. +"},{"lineNumber":842,"author":{"gitId":"jeffreygohkw"},"content":"Hence, a private field will remain private and the value stored by that field will remain the same as it originally was."},{"lineNumber":843,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":844,"author":{"gitId":"-"},"content":"This is done through the `createEditedPerson` method in `EditCommand`."},{"lineNumber":845,"author":{"gitId":"-"},"content":"`createEditedPerson` sets the boolean `areFieldsAllPrivate` to initially be true."},{"lineNumber":846,"author":{"gitId":"-"},"content":""},{"lineNumber":847,"author":{"gitId":"-"},"content":"As the new instance of each field is being generated, if any field contains a value in the input `EditPersonDescriptor` and that field was not originally private, `areFieldsAllPrivate` is set to false."},{"lineNumber":848,"author":{"gitId":"-"},"content":""},{"lineNumber":849,"author":{"gitId":"-"},"content":"This can be seen from the following code, which is used for the generation of a new `Name` object."},{"lineNumber":850,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":851,"author":{"gitId":"-"},"content":"----"},{"lineNumber":852,"author":{"gitId":"-"},"content":"private static Name createUpdatedName(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":853,"author":{"gitId":"-"},"content":"    Name updatedName;"},{"lineNumber":854,"author":{"gitId":"-"},"content":"    if (!personToEdit.getName().isPrivate()) {"},{"lineNumber":855,"author":{"gitId":"-"},"content":"        updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        if (editPersonDescriptor.getName().isPresent()) {"},{"lineNumber":857,"author":{"gitId":"-"},"content":"            areFieldsAllPrivate \u003d false;"},{"lineNumber":858,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":859,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        updatedName \u003d personToEdit.getName();"},{"lineNumber":861,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":862,"author":{"gitId":"-"},"content":"    return updatedName;"},{"lineNumber":863,"author":{"gitId":"-"},"content":"}"},{"lineNumber":864,"author":{"gitId":"-"},"content":"----"},{"lineNumber":865,"author":{"gitId":"-"},"content":""},{"lineNumber":866,"author":{"gitId":"-"},"content":"Upon generation of all the fields, if `areFieldsAllPrivate` is still true, `createEditedPerson` will throw an `IllegalArgumentException`, which will cause `EditCommand` to throw a `CommandException` and prevent the command from continuing."},{"lineNumber":867,"author":{"gitId":"-"},"content":""},{"lineNumber":868,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":869,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":870,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** Implementation of `isPrivate` +"},{"lineNumber":871,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":872,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Add a boolean to each field class. +"},{"lineNumber":873,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Similar implementation to how the fields are currently being implemented. Privacy settings can be obtained directly from the field class itself. +"},{"lineNumber":874,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Repetitive code. Additional overloaded constructor and methods are needed to set and get the value of `isPrivate`.  +"},{"lineNumber":875,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":876,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Store a person\u0027s privacy settings outside of the field classes in an Array or a HashMap in `Person`. +"},{"lineNumber":877,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Can access and modify the privacy settings of all fields easily. +"},{"lineNumber":878,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** The fields themselves do not have any indication of whether or not they are private, and will have to check with the `Person` the belong to."},{"lineNumber":879,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":880,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":881,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** How to determine if a field for a newly added person should be private. +"},{"lineNumber":882,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":883,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Add a `p` to the start of each field\u0027s prefix to signify that that field should be private. +"},{"lineNumber":884,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Can add `Person` containing any combination of private and public fields in 1 command line. +"},{"lineNumber":885,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Have to modify `AddCommand`, `AddCommandParser`, `ParserUtil` and other classes to detect the new prefix and call a separate constructor when a field is private. +"},{"lineNumber":886,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":887,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** A `Person` is added with all field public, a separate command will then have to be used to set the desired fields to be private. +"},{"lineNumber":888,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Easier implementation, do not have to modify `AddCommand`. +"},{"lineNumber":889,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Requires 2 command lines to create a `Person` with private fields, which takes more time and is more inconvenient for users."},{"lineNumber":890,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":891,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Changing of a Person\u0027s Privacy"},{"lineNumber":892,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":893,"author":{"gitId":"jeffreygohkw"},"content":"`ChangePrivacyCommand` facilitates the setting of an existing person\u0027s field\u0027s privacy. Depending on the user\u0027s input, `ChangePrivacyCommand` will use each field\u0027s `setPrivate()` method to set the value of `isPrivate`."},{"lineNumber":894,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":895,"author":{"gitId":"jeffreygohkw"},"content":"The sequence diagram for `ChangePrivacyCommand` is illustrated below."},{"lineNumber":896,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":897,"author":{"gitId":"jeffreygohkw"},"content":"image::ChangePrivacySequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":898,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.11.1 : Sequence Diagram for changing the privacy of a Person\u0027s fields_"},{"lineNumber":899,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":900,"author":{"gitId":"jeffreygohkw"},"content":"Upon receiving a String containing the arguments from `AddressBookParser`, `ChangePrivacyCommandParser` will create a `PersonPrivacySettings` object."},{"lineNumber":901,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":902,"author":{"gitId":"jeffreygohkw"},"content":"Depending on the input, the `ChangePrivacyCommandParser` will set the privacy values, represented by Booleans, in the `PersonPrivacySettings` object to be `true` or `false`."},{"lineNumber":903,"author":{"gitId":"jeffreygohkw"},"content":"This is illustrated in the code below, which shows how the privacy of `Name` is set in `PersonPrivacySettings`:"},{"lineNumber":904,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":905,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":906,"author":{"gitId":"jeffreygohkw"},"content":"private void checkName(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {"},{"lineNumber":907,"author":{"gitId":"jeffreygohkw"},"content":"    if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":908,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_NAME).toString().equals(\"Optional[true]\")) {"},{"lineNumber":909,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setNameIsPrivate(true);"},{"lineNumber":910,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":911,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (argMultimap.getValue(PREFIX_NAME).toString().equals(\"Optional[false]\")) {"},{"lineNumber":912,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setNameIsPrivate(false);"},{"lineNumber":913,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":914,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":915,"author":{"gitId":"jeffreygohkw"},"content":"                    ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":916,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":917,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":918,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":919,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":920,"author":{"gitId":"jeffreygohkw"},"content":"`ChangePrivacyCommandParser` will then create a new `ChangePrivacyCommand` using the input `Index` and the `PersonPrivacySettings`"},{"lineNumber":921,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":922,"author":{"gitId":"jeffreygohkw"},"content":"When `ChangePrivacyCommand` starts executing, it will create a new `Person` based on the data of the `Person` at the specified `Index`."},{"lineNumber":923,"author":{"gitId":"jeffreygohkw"},"content":"It will then adjust the privacy values based on the input `PersonPrivacySettings`. For example, the new `Name` is created in the code snippet below:"},{"lineNumber":924,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":925,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":926,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":927,"author":{"gitId":"jeffreygohkw"},"content":"private static Name createNameWithPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {"},{"lineNumber":928,"author":{"gitId":"jeffreygohkw"},"content":"    Name name;"},{"lineNumber":929,"author":{"gitId":"jeffreygohkw"},"content":"    try {"},{"lineNumber":930,"author":{"gitId":"jeffreygohkw"},"content":"        if (person.getName().getIsPrivate()) {"},{"lineNumber":931,"author":{"gitId":"jeffreygohkw"},"content":"            person.getName().setPrivate(false);"},{"lineNumber":932,"author":{"gitId":"jeffreygohkw"},"content":"            name \u003d new Name(person.getName().toString());"},{"lineNumber":933,"author":{"gitId":"jeffreygohkw"},"content":"            person.getName().setPrivate(true);"},{"lineNumber":934,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":935,"author":{"gitId":"jeffreygohkw"},"content":"            name \u003d new Name(person.getName().toString());"},{"lineNumber":936,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":937,"author":{"gitId":"jeffreygohkw"},"content":"    } catch (IllegalValueException e) {"},{"lineNumber":938,"author":{"gitId":"jeffreygohkw"},"content":"        throw new AssertionError(\"Invalid Name\");"},{"lineNumber":939,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":940,"author":{"gitId":"jeffreygohkw"},"content":"    if (pps.getNameIsPrivate() !\u003d null) {"},{"lineNumber":941,"author":{"gitId":"jeffreygohkw"},"content":"        name.setPrivate(pps.getNameIsPrivate());"},{"lineNumber":942,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":943,"author":{"gitId":"jeffreygohkw"},"content":"        name.setPrivate(person.getName().getIsPrivate());"},{"lineNumber":944,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":945,"author":{"gitId":"jeffreygohkw"},"content":"    return name;"},{"lineNumber":946,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":947,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":948,"author":{"gitId":"jeffreygohkw"},"content":"Once it is done, it will update the original `Person` with the newly created `Person` in `Model`."},{"lineNumber":949,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":950,"author":{"gitId":"jeffreygohkw"},"content":"[NOTE]"},{"lineNumber":951,"author":{"gitId":"jeffreygohkw"},"content":"If there are missing fields in the input string, the getter methods in `PersonPrivacySettings` will return `false`, but the actual value stored will remain as `null`."},{"lineNumber":952,"author":{"gitId":"jeffreygohkw"},"content":"This allows `isAnyFieldNonNull` to check if the user has input any field at all."},{"lineNumber":953,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":954,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":955,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":956,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of changing of a person\u0027s privacy. +"},{"lineNumber":957,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":958,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Create a separate command to do so. +"},{"lineNumber":959,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** It is clear to users and developers that `changeprivacy` is to modify a person\u0027s privacy while `edit` changes the actual data if the relevant field is not private.  +"},{"lineNumber":960,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Additional command, parser and tests must be created.  +"},{"lineNumber":961,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":962,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Enhance the functionality of EditCommand. +"},{"lineNumber":963,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Can make use of existing code to aid the implementation. +"},{"lineNumber":964,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Increases the complexity of EditCommand for both users and developers. More ambiguous as to how editing a private field will affect the data."},{"lineNumber":965,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":966,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Changing the address book\u0027s privacy level"},{"lineNumber":967,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":968,"author":{"gitId":"jeffreygohkw"},"content":"`PrivacyLevelCommand` allows the user to change the privacy level of Address++, letting users easily reveal data hidden by private fields, or hide persons containing private fields entirely."},{"lineNumber":969,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":970,"author":{"gitId":"jeffreygohkw"},"content":"The sequence diagram for `PrivacyLevelCommand` is illustrated below."},{"lineNumber":971,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":972,"author":{"gitId":"jeffreygohkw"},"content":"image::PrivacyLevelSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":973,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.12.1 : Sequence Diagram for changing the privacy level of the address book_"},{"lineNumber":974,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":975,"author":{"gitId":"jeffreygohkw"},"content":"`PrivacyLevelCommandParser` will accept any integer that is input in the command line, and create a `PrivacyLevelCommand` that stores the integer, which represents the privacy level to switch to."},{"lineNumber":976,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":977,"author":{"gitId":"jeffreygohkw"},"content":"Upon execution,`PrivacyLevelCommand` will first check if the integer falls within the range of the minimum and maximum privacy level. If it does not, a new `CommandException` is thrown, reminding the user of the valid input levels."},{"lineNumber":978,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":979,"author":{"gitId":"jeffreygohkw"},"content":"If the integer is within the valid range, `PrivacyLevelCommand` will update the privacy level of `Model`. Following that, it will proceed to update the privacy level of each person."},{"lineNumber":980,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":981,"author":{"gitId":"jeffreygohkw"},"content":"`Model`, each `Person` and each field that can be set as private all contain a `privacyLevel` variable to indicate the current privacy level. This value should remain the same between all of these objects throughout the operation of Address++."},{"lineNumber":982,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":983,"author":{"gitId":"jeffreygohkw"},"content":"image::PersonClassDiagramPrivacyLevel.png[width\u003d\"800\"]"},{"lineNumber":984,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.12.2 : Class Diagram of Person, which shows which classes contain an integer to indicate the privacy level_"},{"lineNumber":985,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":986,"author":{"gitId":"jeffreygohkw"},"content":"Finally, depending on the privacy level, `PrivacyLevelCommand` will update the call `model.updateFilteredPersonList()` with the appropriate predicate."},{"lineNumber":987,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":988,"author":{"gitId":"jeffreygohkw"},"content":"This process is illustrated in the code snippet below."},{"lineNumber":989,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":990,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":991,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":992,"author":{"gitId":"jeffreygohkw"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":993,"author":{"gitId":"jeffreygohkw"},"content":"    requireNonNull(model);"},{"lineNumber":994,"author":{"gitId":"jeffreygohkw"},"content":"    if (level \u003c MIN_PRIVACY_LEVEL || level \u003e MAX_PRIVACY_LEVEL) {"},{"lineNumber":995,"author":{"gitId":"jeffreygohkw"},"content":"        throw new CommandException(WRONG_PRIVACY_LEVEL_MESSAGE);"},{"lineNumber":996,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":997,"author":{"gitId":"jeffreygohkw"},"content":"    model.setPrivacyLevel(level);"},{"lineNumber":998,"author":{"gitId":"jeffreygohkw"},"content":"    for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":999,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson toReplace \u003d model.getPersonAtIndexFromAddressBook(i);"},{"lineNumber":1000,"author":{"gitId":"jeffreygohkw"},"content":"        Person newPerson \u003d new Person(toReplace);"},{"lineNumber":1001,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.setPrivacyLevel(level);"},{"lineNumber":1002,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":1003,"author":{"gitId":"jeffreygohkw"},"content":"            model.updatePerson(toReplace, newPerson);"},{"lineNumber":1004,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":1005,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":1006,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":1007,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":1008,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1009,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1010,"author":{"gitId":"jeffreygohkw"},"content":"    if (level \u003d\u003d 3) {"},{"lineNumber":1011,"author":{"gitId":"jeffreygohkw"},"content":"        model.updateFilteredPersonList(new ShowAllPrivacyLevelPredicate());"},{"lineNumber":1012,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":1013,"author":{"gitId":"jeffreygohkw"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":1014,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1015,"author":{"gitId":"jeffreygohkw"},"content":"    return new CommandResult(String.format(CHANGE_PRIVACY_LEVEL_SUCCESS, Integer.toString(level)));"},{"lineNumber":1016,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1017,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1018,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1019,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1020,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1021,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** Storing of the privacy level +"},{"lineNumber":1022,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1023,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Have each relevant class store a privacy level integer. +"},{"lineNumber":1024,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Less coupling, less modification of existing code required.  +"},{"lineNumber":1025,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Have to modify every relevant object every time `PrivacyLevelCommand` is called. Runs the risk that an object may accidentally not have its privacy level modified to match the other objects if privacy levels are not properly updated. +"},{"lineNumber":1026,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1027,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Store the privacy level in the model and have any object that needs to check it query from model. +"},{"lineNumber":1028,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Only one integer needs to be modified for the privacy level of the entire address book to change, which also eliminates any possibility that privacy level may be different when used by different objects. +"},{"lineNumber":1029,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Increases coupling, classes such as Name will need to have a Model object as one of its variables to access Model. Large scale modification of existing code and tests are necessary."},{"lineNumber":1030,"author":{"gitId":"jeffreygohkw"},"content":"// end::privacy[]"},{"lineNumber":1031,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1032,"author":{"gitId":"jeffreygohkw"},"content":"// tag::locate[]"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Locating a Person on Google Maps"},{"lineNumber":1034,"author":{"gitId":"-"},"content":""},{"lineNumber":1035,"author":{"gitId":"jeffreygohkw"},"content":"Locating a person\u0027s address allows users to take the address that is stored by a person and search it on Google Maps in the browser."},{"lineNumber":1036,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1037,"author":{"gitId":"-"},"content":"Upon calling the `locate` command, `LocateCommandParser` will parse the input string into an `Index`, and create a new `LocateCommand`. Should the arguments be a non-integer, a `ParseException` will be thrown. +"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"This can be seen from the code snippet below:"},{"lineNumber":1039,"author":{"gitId":"-"},"content":""},{"lineNumber":1040,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1042,"author":{"gitId":"-"},"content":" public LocateCommand parse(String args) throws ParseException {"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"        Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"        return new LocateCommand(index);"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"        throw new ParseException("},{"lineNumber":1048,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"}"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1052,"author":{"gitId":"-"},"content":""},{"lineNumber":1053,"author":{"gitId":"jeffreygohkw"},"content":"Upon execution of `LocateCommand`, it will search the `Model` for the `Person` at the input `Index`. If the `Index` is out of range of the list of persons, a `CommandException` will be thrown."},{"lineNumber":1054,"author":{"gitId":"-"},"content":""},{"lineNumber":1055,"author":{"gitId":"-"},"content":"Otherwise, `LocateCommand` will post a new `BrowserPanelLocateEvent` and pass in the `Person` found to that event. It will then return a `CommandResult` indicating the success of its execution."},{"lineNumber":1056,"author":{"gitId":"-"},"content":""},{"lineNumber":1057,"author":{"gitId":"-"},"content":"This code for this can be found below:"},{"lineNumber":1058,"author":{"gitId":"-"},"content":""},{"lineNumber":1059,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1061,"author":{"gitId":"-"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":1062,"author":{"gitId":"-"},"content":""},{"lineNumber":1063,"author":{"gitId":"-"},"content":"    List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":1064,"author":{"gitId":"-"},"content":""},{"lineNumber":1065,"author":{"gitId":"-"},"content":"    if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"        throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1068,"author":{"gitId":"-"},"content":""},{"lineNumber":1069,"author":{"gitId":"-"},"content":"    EventsCenter.getInstance().post(new BrowserPanelLocateEvent("},{"lineNumber":1070,"author":{"gitId":"-"},"content":"            model.getFilteredPersonList().get(targetIndex.getZeroBased())));"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"    return new CommandResult(String.format(MESSAGE_LOCATE_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":1072,"author":{"gitId":"-"},"content":""},{"lineNumber":1073,"author":{"gitId":"-"},"content":"}"},{"lineNumber":1074,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1075,"author":{"gitId":"-"},"content":""},{"lineNumber":1076,"author":{"gitId":"-"},"content":"BrowserPanel will then use `handleBrowserPanelLocationEvent` to process this newly created event. It will call `loadMapsPage`, which will check if the `Person`\u0027s `Address` is private or not. If their `Address` is public, it will launch the browser, showing the `Address` of that `Person` on Google Maps. Otherwise, an error message will be printed, as can be seen below:"},{"lineNumber":1077,"author":{"gitId":"-"},"content":""},{"lineNumber":1078,"author":{"gitId":"-"},"content":"[source, java]"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1080,"author":{"gitId":"-"},"content":" private void loadMapsPage(ReadOnlyPerson person) {"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"    if (person.getAddress().isPrivate()) {"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"        raise(new NewResultAvailableEvent(PRIVATE_ADDRESS_CANNOT_SEARCH));"},{"lineNumber":1083,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":1084,"author":{"gitId":"-"},"content":"        loadPage(GOOGLE_MAPS_URL_PREFIX + person.getAddress().toString().replaceAll(\" \", \"+\")"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"            + GOOGLE_MAPS_URL_SUFFIX);"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"}"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1089,"author":{"gitId":"-"},"content":""},{"lineNumber":1090,"author":{"gitId":"-"},"content":"The overall sequence of events is illustrated by the following sequence diagram:"},{"lineNumber":1091,"author":{"gitId":"-"},"content":""},{"lineNumber":1092,"author":{"gitId":"-"},"content":"image::LocateSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1093,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.13.1 : Sequence Diagram for Locating a Person\u0027s Address_"},{"lineNumber":1094,"author":{"gitId":"-"},"content":""},{"lineNumber":1095,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1096,"author":{"gitId":"-"},"content":""},{"lineNumber":1097,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the Google Maps to search for a person\u0027s `Address` +"},{"lineNumber":1098,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1099,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Create a separate command `locate`. +"},{"lineNumber":1100,"author":{"gitId":"-"},"content":"**Pros:** No modification needed for existing commands, which makes it clear the purpose of each command. +"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"**Cons:** Additional commands will need to be learnt for both developers and users. +"},{"lineNumber":1102,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1103,"author":{"gitId":"-"},"content":"**Alternative 2:** Add the functionality into `SelectCommand`. +"},{"lineNumber":1104,"author":{"gitId":"-"},"content":"**Pros:** Expands the utility of `SelectCommand` beyond performing a Google search on their name. +"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"**Cons:** Will require significant modification of existing code, and may make it more confusing for users."},{"lineNumber":1106,"author":{"gitId":"jeffreygohkw"},"content":"// end::locate[]"},{"lineNumber":1107,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1108,"author":{"gitId":"jeffreygohkw"},"content":"// tag::navigate[]"},{"lineNumber":1109,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Navigating from one address to another using Google Maps"},{"lineNumber":1110,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1111,"author":{"gitId":"jeffreygohkw"},"content":"When the `navigate` command is entered into the command line, `NavigateCommandParse` will first reset its internal `from`, `to`, `fromIndex`, `toIndex` to null. It will then check for the input prefixes and ensure that only one of the prefixes from the group `fp/`, `ft/`, and `fa/`, which we will subsequently call the `from` prefixes are present. It then does the same with the prefixes from the group `tp/`, `tt/` and `ta/`, which we will call the `to` prefixes. +"},{"lineNumber":1112,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1113,"author":{"gitId":"jeffreygohkw"},"content":"This is done by invoking the `checkFrom` and `checkTo` methods as can be seen from the code snippet below. For the example `checkFrom`, it takes in 3 booleans on whether or not each prefix is present and checks whether or not there is exactly one kind of `from` prefix. It throws an error if there are no `from` prefixes or more than one type of `from` prefixes."},{"lineNumber":1114,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1115,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1116,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1117,"author":{"gitId":"jeffreygohkw"},"content":"private void checkFrom(ArgumentMultimap argumentMultimap, boolean fromAddress, boolean fromPerson, boolean fromTask)"},{"lineNumber":1118,"author":{"gitId":"jeffreygohkw"},"content":"        throws ParseException {"},{"lineNumber":1119,"author":{"gitId":"jeffreygohkw"},"content":"    if (!(fromAddress || fromPerson || fromTask)) {"},{"lineNumber":1120,"author":{"gitId":"jeffreygohkw"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigateCommand.MESSAGE_USAGE));"},{"lineNumber":1121,"author":{"gitId":"jeffreygohkw"},"content":"    } else if ((fromAddress \u0026\u0026 (fromPerson || fromTask)) || (fromPerson \u0026\u0026 fromTask)) {"},{"lineNumber":1122,"author":{"gitId":"jeffreygohkw"},"content":"        // If 2 or more from prefixes are present"},{"lineNumber":1123,"author":{"gitId":"jeffreygohkw"},"content":"        throw new ParseException(NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":1124,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":1125,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":1126,"author":{"gitId":"jeffreygohkw"},"content":"            setArgsForNavigateCommand(argumentMultimap, fromAddress, fromPerson, true);"},{"lineNumber":1127,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":1128,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":1129,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1130,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1131,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1132,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1133,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1134,"author":{"gitId":"jeffreygohkw"},"content":"`checkFrom` calls `setArgsForNavigateCommand`, which sets the variables in the `NavigateCommandParser` to the appropriate values depending on whether the address originates from a person, a task or is a manual input by the user."},{"lineNumber":1135,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1136,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1137,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1138,"author":{"gitId":"jeffreygohkw"},"content":"private void setArgsForNavigateCommand(ArgumentMultimap argumentMultimap, boolean address, boolean person, boolean forFrom) throws IllegalValueException {"},{"lineNumber":1139,"author":{"gitId":"jeffreygohkw"},"content":"    if (address) {"},{"lineNumber":1140,"author":{"gitId":"jeffreygohkw"},"content":"        if (forFrom) {"},{"lineNumber":1141,"author":{"gitId":"jeffreygohkw"},"content":"            from \u003d new Location(ParserUtil.parseLocationFromAddress("},{"lineNumber":1142,"author":{"gitId":"jeffreygohkw"},"content":"                    argumentMultimap.getValue(PREFIX_NAVIGATE_FROM_ADDRESS)).get().toString());"},{"lineNumber":1143,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":1144,"author":{"gitId":"jeffreygohkw"},"content":"            to \u003d new Location(ParserUtil.parseLocationFromAddress("},{"lineNumber":1145,"author":{"gitId":"jeffreygohkw"},"content":"                    argumentMultimap.getValue(PREFIX_NAVIGATE_TO_ADDRESS)).get().toString());"},{"lineNumber":1146,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1147,"author":{"gitId":"jeffreygohkw"},"content":"    } else if (person) {"},{"lineNumber":1148,"author":{"gitId":"jeffreygohkw"},"content":"        if (forFrom) {"},{"lineNumber":1149,"author":{"gitId":"jeffreygohkw"},"content":"            fromIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":1150,"author":{"gitId":"jeffreygohkw"},"content":"                    .getValue(PREFIX_NAVIGATE_FROM_PERSON).get());"},{"lineNumber":1151,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":1152,"author":{"gitId":"jeffreygohkw"},"content":"            toIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":1153,"author":{"gitId":"jeffreygohkw"},"content":"                    .getValue(PREFIX_NAVIGATE_TO_PERSON).get());"},{"lineNumber":1154,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1155,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":1156,"author":{"gitId":"jeffreygohkw"},"content":"        if (forFrom) {"},{"lineNumber":1157,"author":{"gitId":"jeffreygohkw"},"content":"            fromIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":1158,"author":{"gitId":"jeffreygohkw"},"content":"                    .getValue(PREFIX_NAVIGATE_FROM_TASK).get());"},{"lineNumber":1159,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":1160,"author":{"gitId":"jeffreygohkw"},"content":"            toIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":1161,"author":{"gitId":"jeffreygohkw"},"content":"                    .getValue(PREFIX_NAVIGATE_TO_TASK).get());"},{"lineNumber":1162,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1163,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1164,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1165,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1166,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1167,"author":{"gitId":"jeffreygohkw"},"content":"Finally, `NavigateCommandParser` will create a new `NavigateCommand` based on the inputs as set by `setArgsForNavigateCommand`."},{"lineNumber":1168,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1169,"author":{"gitId":"jeffreygohkw"},"content":"When `NavigateCommand` is created, it first checks if there are duplicate `from` or `to` addresses that are passed into it and throws an error if that is the case."},{"lineNumber":1170,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1171,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1172,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1173,"author":{"gitId":"jeffreygohkw"},"content":"private void checkDuplicateFromAndToLocation(Location locationFrom, Location locationTo, Index fromIndex, Index toIndex) throws IllegalArgumentException {"},{"lineNumber":1174,"author":{"gitId":"jeffreygohkw"},"content":"    if (locationFrom !\u003d null \u0026\u0026 fromIndex !\u003d null) {"},{"lineNumber":1175,"author":{"gitId":"jeffreygohkw"},"content":"        throw new IllegalArgumentException(MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":1176,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1177,"author":{"gitId":"jeffreygohkw"},"content":"    if (locationTo !\u003d null \u0026\u0026 toIndex !\u003d null) {"},{"lineNumber":1178,"author":{"gitId":"jeffreygohkw"},"content":"        throw new IllegalArgumentException(MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":1179,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1180,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1181,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1182,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1183,"author":{"gitId":"jeffreygohkw"},"content":"If it passes this check, `NavigateCommand` stores `fromLocation` and `toLocation`, which are the Locations of any manually added address by the user to navigate from and to respectively. It also stores `toIndex` and `fromIndex`, which are the Indexes of the `Person` or `Task` to extract the address from as well as `toIsTask` and `fromIsTask`, which are booleans that indicate whether `toIndex` and `fromIndex` are indexes of Persons or Tasks."},{"lineNumber":1184,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1185,"author":{"gitId":"jeffreygohkw"},"content":"Upon execution of `NavigateCommmand`, it will first check if it has a non-null `fromIndex`, if it does, it will create a new Location based on its `fromIndex` and `fromIsTask` values using the `setLocationByIndex` method. Otherwise, it will set the Location to be the Location in `locationfrom`. This can be seen below:"},{"lineNumber":1186,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1187,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1188,"author":{"gitId":"jeffreygohkw"},"content":"if (fromIndex !\u003d null) {"},{"lineNumber":1189,"author":{"gitId":"jeffreygohkw"},"content":"    try {"},{"lineNumber":1190,"author":{"gitId":"jeffreygohkw"},"content":"        from \u003d setLocationByIndex(fromIndex, fromIsTask);"},{"lineNumber":1191,"author":{"gitId":"jeffreygohkw"},"content":"    } catch (IllegalValueException e) {"},{"lineNumber":1192,"author":{"gitId":"jeffreygohkw"},"content":"        throw new IllegalArgumentException(MESSAGE_PRIVATE_PERSON_ADDRESS_ERROR);"},{"lineNumber":1193,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1194,"author":{"gitId":"jeffreygohkw"},"content":"} else {"},{"lineNumber":1195,"author":{"gitId":"jeffreygohkw"},"content":"    from \u003d locationFrom;"},{"lineNumber":1196,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1197,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1198,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1199,"author":{"gitId":"jeffreygohkw"},"content":"setLocationByIndex throws CommandException if the target Person or Task does not have a valid Address to extract due to the Address being blank, or it being private."},{"lineNumber":1200,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1201,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1202,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1203,"author":{"gitId":"jeffreygohkw"},"content":" private Location setLocationByIndex(Index index, boolean isTask) throws IllegalValueException, CommandException {"},{"lineNumber":1204,"author":{"gitId":"jeffreygohkw"},"content":"    if (isTask) {"},{"lineNumber":1205,"author":{"gitId":"jeffreygohkw"},"content":"        if (model.getFilteredTaskList().get(index.getZeroBased()).getTaskAddress().toString().equals(\"\")) {"},{"lineNumber":1206,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_TASK_HAS_NO_ADDRESS_ERROR, index.getOneBased()));"},{"lineNumber":1207,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":1208,"author":{"gitId":"jeffreygohkw"},"content":"            return new Location(model.getFilteredTaskList().get(index.getZeroBased()).getTaskAddress().toString());"},{"lineNumber":1209,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1210,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":1211,"author":{"gitId":"jeffreygohkw"},"content":"        if (model.getFilteredPersonList().get(index.getZeroBased()).getAddress().toString().equals(\"\")) {"},{"lineNumber":1212,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_PERSON_HAS_NO_ADDRESS_ERROR, index.getOneBased()));"},{"lineNumber":1213,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (model.getFilteredPersonList().get(index.getZeroBased()).getAddress().getIsPrivate()) {"},{"lineNumber":1214,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_PRIVATE_PERSON_ADDRESS_ERROR, index.getOneBased()));"},{"lineNumber":1215,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":1216,"author":{"gitId":"jeffreygohkw"},"content":"            return new Location(model.getFilteredPersonList().get(index.getZeroBased())"},{"lineNumber":1217,"author":{"gitId":"jeffreygohkw"},"content":"                    .getAddress().toString());"},{"lineNumber":1218,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1219,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1220,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1221,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1222,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1223,"author":{"gitId":"jeffreygohkw"},"content":"`NavigateCommand` does the same for the Address to navigate `To` and posts a new `BrowserPanelNavigateEvent`, passing in the `Location` to navigate `From` and the `Location` to navigate `To`. +"},{"lineNumber":1224,"author":{"gitId":"jeffreygohkw"},"content":"`NavigateCommand` will then create a new `CommandResult` to indicate a successful `Command`."},{"lineNumber":1225,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1226,"author":{"gitId":"jeffreygohkw"},"content":"`BrowserPanel` will then get the information from this `BrowserPanelNavigateEvent`, and load the appropriate Google Maps URL after replacing information such as the Unit Number and extra whitespaces. This has to be done as Google Maps does not function properly with Unit Numbers or spaces in its URL."},{"lineNumber":1227,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1228,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1229,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1230,"author":{"gitId":"jeffreygohkw"},"content":"private void loadDirectionsPage(String fromLocation, String toLocation) {"},{"lineNumber":1231,"author":{"gitId":"jeffreygohkw"},"content":"    loadPage(GOOGLE_MAPS_DIRECTIONS_PREFIX + \"\u0026origin\u003d\""},{"lineNumber":1232,"author":{"gitId":"jeffreygohkw"},"content":"            + fromLocation.replaceAll(\"#(\\\\w+)\\\\s*\", \"\").replaceAll(\" \", \"+\")"},{"lineNumber":1233,"author":{"gitId":"jeffreygohkw"},"content":"            .replaceAll(\"-(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":1234,"author":{"gitId":"jeffreygohkw"},"content":"            + \"\u0026destination\u003d\""},{"lineNumber":1235,"author":{"gitId":"jeffreygohkw"},"content":"            + toLocation.replaceAll(\"#(\\\\w+)\\\\s*\", \"\").replaceAll(\" \", \"+\")"},{"lineNumber":1236,"author":{"gitId":"jeffreygohkw"},"content":"            .replaceAll(\"-(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":1237,"author":{"gitId":"jeffreygohkw"},"content":"            + GOOGLE_MAPS_DIRECTIONS_SUFFIX);"},{"lineNumber":1238,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1239,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1240,"author":{"gitId":"jeffreygohkw"},"content":"The overall sequence of events is illustrated by the following sequence diagram:"},{"lineNumber":1241,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1242,"author":{"gitId":"jeffreygohkw"},"content":"image::NavigateSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1243,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.14.1 : Sequence Diagram for Navigating from one Address to another_"},{"lineNumber":1244,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1245,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1246,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1247,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1248,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** How to pass the appropriate information to NavigateCommand +"},{"lineNumber":1249,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1250,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Have a constructor that takes in a large number of arguments so that NavigateCommand can correctly identify what kind of Location to post in BrowserPanelNavigateEvent. +"},{"lineNumber":1251,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Only 1 constructor needed. +"},{"lineNumber":1252,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Additional methods will be needed to properly identify which Location to use for navigation.  +"},{"lineNumber":1253,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1254,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Create many constructors to segregate the different possible scenarios that might happen. +"},{"lineNumber":1255,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** It is clear what information to use to generate the Locations +"},{"lineNumber":1256,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Requires large numbers of constructors to be created, easy for mistakes to occur as Constructors all share the same name but different argument types."},{"lineNumber":1257,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1258,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** How to transfer information of the address from one class to another +"},{"lineNumber":1259,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1260,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Wrap the address in a `Location` class before posting the BrowserPanelNavigateEvent. +"},{"lineNumber":1261,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Only Locations, which indicates that the address is properly parsed, will be passed for the BrowserPanel to read, reducing the possibility of BrowserPanel reading stray unwanted strings as addresses to navigate to and from. The value stored inside each Location cannot be altered once that Location object has been created. +"},{"lineNumber":1262,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** A new class has to be created and Strings, Addresses and TaskAddresses will need to be converted to Locations first.  +"},{"lineNumber":1263,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1264,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Simply pass on a String containing the address from class to class +"},{"lineNumber":1265,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Easy to read and transfer information, lower overhead +"},{"lineNumber":1266,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** It is easier for stray Strings to pollute the information, and the Strings can be unintentionally modified."},{"lineNumber":1267,"author":{"gitId":"jeffreygohkw"},"content":"// end::navigate[]"},{"lineNumber":1268,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1269,"author":{"gitId":"jeffreygohkw"},"content":"// tag::opensaveas[]"},{"lineNumber":1270,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Opening and Saving of the .xml save file"},{"lineNumber":1271,"author":{"gitId":"jeffreygohkw"},"content":"Both `OpenCommand` and `SaveAsCommand` function in a very similar way."},{"lineNumber":1272,"author":{"gitId":"jeffreygohkw"},"content":"When `open` or `save` is input by the user, `AddressBookParser` will create a new `OpenCommand` or `SaveAsCommand`."},{"lineNumber":1273,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1274,"author":{"gitId":"jeffreygohkw"},"content":"These two commands will then post a new `OpenRequestEvent` or a new `SaveAsRequestEvent` and return a successful `CommandResult`."},{"lineNumber":1275,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1276,"author":{"gitId":"jeffreygohkw"},"content":"`MainWindow` will have two methods, `HandleOpenRequestEvent` and `HandleSaveAsRequestEvent` that subscribe to the above two events and will call `handleOpen` and `handleSaveAs`."},{"lineNumber":1277,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1278,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1279,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1280,"author":{"gitId":"jeffreygohkw"},"content":"private void handleOpen() throws IOException, DataConversionException {"},{"lineNumber":1281,"author":{"gitId":"jeffreygohkw"},"content":"    // Set extension filter"},{"lineNumber":1282,"author":{"gitId":"jeffreygohkw"},"content":"    FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter("},{"lineNumber":1283,"author":{"gitId":"jeffreygohkw"},"content":"            \"XML files (*.xml)\", \"*.xml\");"},{"lineNumber":1284,"author":{"gitId":"jeffreygohkw"},"content":"    fileChooser.getExtensionFilters().add(extFilter);"},{"lineNumber":1285,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1286,"author":{"gitId":"jeffreygohkw"},"content":"    // Show open file dialog"},{"lineNumber":1287,"author":{"gitId":"jeffreygohkw"},"content":"    File file \u003d fileChooser.showOpenDialog(primaryStage);"},{"lineNumber":1288,"author":{"gitId":"jeffreygohkw"},"content":"    if (file !\u003d null) {"},{"lineNumber":1289,"author":{"gitId":"jeffreygohkw"},"content":"        // Change file path to the opened file"},{"lineNumber":1290,"author":{"gitId":"jeffreygohkw"},"content":"        storage.changeFilePath(file.getPath(), prefs);"},{"lineNumber":1291,"author":{"gitId":"jeffreygohkw"},"content":"        // Reset data in the model to the data from the opened file"},{"lineNumber":1292,"author":{"gitId":"jeffreygohkw"},"content":"        model.resetData(XmlFileStorage.loadDataFromSaveFile(file));"},{"lineNumber":1293,"author":{"gitId":"jeffreygohkw"},"content":"        // Update the UI"},{"lineNumber":1294,"author":{"gitId":"jeffreygohkw"},"content":"        fillInnerParts();"},{"lineNumber":1295,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1296,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1297,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1298,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1299,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1300,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1301,"author":{"gitId":"jeffreygohkw"},"content":"private void handleSaveAs() throws IOException {"},{"lineNumber":1302,"author":{"gitId":"jeffreygohkw"},"content":"    // Set extension filter"},{"lineNumber":1303,"author":{"gitId":"jeffreygohkw"},"content":"    FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter("},{"lineNumber":1304,"author":{"gitId":"jeffreygohkw"},"content":"            \"XML files (*.xml)\", \"*.xml\");"},{"lineNumber":1305,"author":{"gitId":"jeffreygohkw"},"content":"    fileChooser.getExtensionFilters().add(extFilter);"},{"lineNumber":1306,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1307,"author":{"gitId":"jeffreygohkw"},"content":"    // Show save file dialog"},{"lineNumber":1308,"author":{"gitId":"jeffreygohkw"},"content":"    File file \u003d fileChooser.showSaveDialog(primaryStage);"},{"lineNumber":1309,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1310,"author":{"gitId":"jeffreygohkw"},"content":"    if (file !\u003d null) {"},{"lineNumber":1311,"author":{"gitId":"jeffreygohkw"},"content":"        // Make sure it has the correct extension"},{"lineNumber":1312,"author":{"gitId":"jeffreygohkw"},"content":"        if (!file.getPath().endsWith(\".xml\")) {"},{"lineNumber":1313,"author":{"gitId":"jeffreygohkw"},"content":"            file \u003d new File(file.getPath() + \".xml\");"},{"lineNumber":1314,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":1315,"author":{"gitId":"jeffreygohkw"},"content":"        // Change file path to the new save file"},{"lineNumber":1316,"author":{"gitId":"jeffreygohkw"},"content":"        storage.changeFilePath(file.getPath(), prefs);"},{"lineNumber":1317,"author":{"gitId":"jeffreygohkw"},"content":"        // Save the address book data and the user preferences"},{"lineNumber":1318,"author":{"gitId":"jeffreygohkw"},"content":"        storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":1319,"author":{"gitId":"jeffreygohkw"},"content":"        storage.saveUserPrefs(prefs);"},{"lineNumber":1320,"author":{"gitId":"jeffreygohkw"},"content":"        // Update the UI"},{"lineNumber":1321,"author":{"gitId":"jeffreygohkw"},"content":"        fillInnerParts();"},{"lineNumber":1322,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1323,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1324,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1325,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1326,"author":{"gitId":"jeffreygohkw"},"content":"Both `handleOpen` and `handleSaveAs` will create a new `FileChooser` extension filter that only allows the pop-up window to save files and load files in the .xml format."},{"lineNumber":1327,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1328,"author":{"gitId":"jeffreygohkw"},"content":"Upon successfully selecting a file to load or a location to save as in the pop-up window, both methods will call `changefilepath` in `Storage` to the selected file path."},{"lineNumber":1329,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1330,"author":{"gitId":"jeffreygohkw"},"content":"Finally, both commands diverge as `handleOpen` will call `resetData` to reset the data using the new save file, while `handleSaveAs` will call `saveAddressBook` and `saveUserPrefs` to save the data. Both methods will finally call `fillInnerParts()` to refresh the data displayed on the UI."},{"lineNumber":1331,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1332,"author":{"gitId":"jeffreygohkw"},"content":"This process is illustrated using the sequence diagram below:"},{"lineNumber":1333,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1334,"author":{"gitId":"jeffreygohkw"},"content":"image::OpenSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1335,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.15.1 : Sequence Diagram for Opening a save file_"},{"lineNumber":1336,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1337,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1338,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** How does `OpenCommand` and `SaveAsCommand` determine the file location to save or load the save file from +"},{"lineNumber":1339,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1340,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Open a `FileChooser` window, allowing the user to move through their file directory to acquire their save location and to select the name of the save file. +"},{"lineNumber":1341,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** User friendly, many other applications function similarly when saving and loading. Easier to implement and use as part of the dropdown menu in the User Interface. +"},{"lineNumber":1342,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Not entirely command line based.  +"},{"lineNumber":1343,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1344,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Input the file directory and file name to save or load from as part of the command. +"},{"lineNumber":1345,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Entirely command line based, may be more preferable for users who prefer using the command line. +"},{"lineNumber":1346,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Requires more complex code. Command must check if the file location to save or load from is valid, and that there is a valid file of that name."},{"lineNumber":1347,"author":{"gitId":"jeffreygohkw"},"content":"// end::opensaveas[]"},{"lineNumber":1348,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1349,"author":{"gitId":"jeffreygohkw"},"content":"// tag::theme[]"},{"lineNumber":1350,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Changing the theme of the address book"},{"lineNumber":1351,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1352,"author":{"gitId":"jeffreygohkw"},"content":"The original style of the address book may not be for everyone. `ThemeCommand` allows users to switch between multiple preset themes."},{"lineNumber":1353,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1354,"author":{"gitId":"jeffreygohkw"},"content":"`ThemeCommandParser` trims the arguments after the word `theme` in the command line, removing any whitespaces leading up to and following that word. If the entire String ended up trimmed, then `ThemeCommandParser` will throw a `ParseException`. Otherwise, it creates a new `ThemeCommand`, passing in the trimmed word as seen below:"},{"lineNumber":1355,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1356,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1357,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1358,"author":{"gitId":"jeffreygohkw"},"content":"public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":1359,"author":{"gitId":"jeffreygohkw"},"content":"    String trimmed \u003d args.trim();"},{"lineNumber":1360,"author":{"gitId":"jeffreygohkw"},"content":"    if (trimmed.isEmpty() || trimmed \u003d\u003d null) {"},{"lineNumber":1361,"author":{"gitId":"jeffreygohkw"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":1362,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":1363,"author":{"gitId":"jeffreygohkw"},"content":"        return new ThemeCommand(trimmed);"},{"lineNumber":1364,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1365,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1366,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1367,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1368,"author":{"gitId":"jeffreygohkw"},"content":"When initialising the Address Book, the `AddressBook` class will create a `HashMap\u003cString, String\u003e` to store the keys and values of the themes."},{"lineNumber":1369,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1370,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1371,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1372,"author":{"gitId":"jeffreygohkw"},"content":"private void initialiseStyleMap() {"},{"lineNumber":1373,"author":{"gitId":"jeffreygohkw"},"content":"    styleMap.put(\"dark\", \"DarkTheme.css\");"},{"lineNumber":1374,"author":{"gitId":"jeffreygohkw"},"content":"    styleMap.put(\"Dark\", \"DarkTheme.css\");"},{"lineNumber":1375,"author":{"gitId":"jeffreygohkw"},"content":"    styleMap.put(\"light\", \"LightTheme.css\");"},{"lineNumber":1376,"author":{"gitId":"jeffreygohkw"},"content":"    styleMap.put(\"Light\", \"LightTheme.css\");"},{"lineNumber":1377,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1378,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1379,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1380,"author":{"gitId":"jeffreygohkw"},"content":"The keys correspond to the possible user inputs, such as `light` or `dark`, while the values contain the filepath of the .css files, such as `DarkTheme.css`. This way, users do not need to remember and will not have to know what the .css files are like to use the theme command."},{"lineNumber":1381,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1382,"author":{"gitId":"jeffreygohkw"},"content":"On executing `ThemeCommand`, it first checks if the input string can be found in the set of keys in the HashMap contained by the `AddressBook` class. If it cannot be found, or if the value corresponding to the input string is identical to that of the value of the file path of the .css file stored in Model, then a `CommandException` is thrown, as users cannot change to a non-existent theme, or a theme that is already in use."},{"lineNumber":1383,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1384,"author":{"gitId":"jeffreygohkw"},"content":"If the string is valid, `ThemeCommand` will post a `ChangeThemeRequestEvent` and set the theme to the new file path corresponding to the input String in `Model`. `Model` will then continue on to set the theme in `UserPrefs` as well, so that it can be loaded on starting the application."},{"lineNumber":1385,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1386,"author":{"gitId":"jeffreygohkw"},"content":"`MainWindow` contains a method `handleChangeThemeEvent` that subscribes to the `ChangeThemeRequestEvent`. `handleChangeThemeEvent` calls `handlChangeTheme`, which first checks if there is an existing theme, if there is, it removes it, then sets adds the new theme through the file path that was passed to it."},{"lineNumber":1387,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1388,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1389,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1390,"author":{"gitId":"jeffreygohkw"},"content":"public void handleChangeTheme(String theme) {"},{"lineNumber":1391,"author":{"gitId":"jeffreygohkw"},"content":"    if (getRoot().getStylesheets().size() \u003e 1) {"},{"lineNumber":1392,"author":{"gitId":"jeffreygohkw"},"content":"         getRoot().getStylesheets().remove(1);"},{"lineNumber":1393,"author":{"gitId":"jeffreygohkw"},"content":"     }"},{"lineNumber":1394,"author":{"gitId":"jeffreygohkw"},"content":"     getRoot().getStylesheets().add(VIEW_PATH + theme);"},{"lineNumber":1395,"author":{"gitId":"jeffreygohkw"},"content":" }"},{"lineNumber":1396,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1397,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1398,"author":{"gitId":"jeffreygohkw"},"content":"After all is done, `ThemeCommand` returns a `CommandResult`, indicating the success of the command."},{"lineNumber":1399,"author":{"gitId":"jeffreygohkw"},"content":"The overall execution of `ThemeCommand` is seen in the following code snippet."},{"lineNumber":1400,"author":{"gitId":"jeffreygohkw"},"content":"[source, java]"},{"lineNumber":1401,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1402,"author":{"gitId":"jeffreygohkw"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":1403,"author":{"gitId":"jeffreygohkw"},"content":"    requireNonNull(model);"},{"lineNumber":1404,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1405,"author":{"gitId":"jeffreygohkw"},"content":"    String styleSheet;"},{"lineNumber":1406,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1407,"author":{"gitId":"jeffreygohkw"},"content":"    if (model.getStyleMap().containsKey(style)) {"},{"lineNumber":1408,"author":{"gitId":"jeffreygohkw"},"content":"        styleSheet \u003d model.getStyleMap().get(style);"},{"lineNumber":1409,"author":{"gitId":"jeffreygohkw"},"content":"    } else {"},{"lineNumber":1410,"author":{"gitId":"jeffreygohkw"},"content":"        throw new CommandException(String.format(MESSAGE_THEME_NOT_AVAILABLE, style));"},{"lineNumber":1411,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1412,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1413,"author":{"gitId":"jeffreygohkw"},"content":"    if (model.getTheme().equals(styleSheet)) {"},{"lineNumber":1414,"author":{"gitId":"jeffreygohkw"},"content":"        throw new CommandException(String.format(MESSAGE_THEME_IN_USE, style));"},{"lineNumber":1415,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":1416,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1417,"author":{"gitId":"jeffreygohkw"},"content":"    EventsCenter.getInstance().post(new ChangeThemeRequestEvent(styleSheet));"},{"lineNumber":1418,"author":{"gitId":"jeffreygohkw"},"content":"    model.setTheme(styleSheet);"},{"lineNumber":1419,"author":{"gitId":"jeffreygohkw"},"content":"    return new CommandResult(String.format(MESSAGE_THEME_CHANGE_SUCCESS, style));"},{"lineNumber":1420,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":1421,"author":{"gitId":"jeffreygohkw"},"content":"----"},{"lineNumber":1422,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1423,"author":{"gitId":"jeffreygohkw"},"content":"The sequence diagram for the whole process is show below:"},{"lineNumber":1424,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1425,"author":{"gitId":"jeffreygohkw"},"content":"image::ThemeSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1426,"author":{"gitId":"jeffreygohkw"},"content":"_Figure 3.16.1 : Sequence Diagram for Changing Themes_"},{"lineNumber":1427,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1428,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1429,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** Getting the correct file path to the .css file +"},{"lineNumber":1430,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Store the file path in a HashMap, where the keys are the possible inputs that the user may type and the values are the actual filepaths +"},{"lineNumber":1431,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Easier on the user. They do not need to remember any complicated .css names or file paths, and the input string can be customisable by changing the names of the keys added to the HashMap. +"},{"lineNumber":1432,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Slightly more work needed to initialise the HashMap and check if the file paths are valid. +"},{"lineNumber":1433,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Change the name of the .css file and file paths such that what the user directly inputs can correspond to the actual .css file. +"},{"lineNumber":1434,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** A HashMap is no longer needed, instead, the input string just needs to be parsed to be turned into a file path. This makes it easier to add additional .css files, as developers do not have to keep modifying the initialisation of the HashMap +"},{"lineNumber":1435,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Less flexibility in naming the file, user may break the code if they realise the input string directly used as part of the file path."},{"lineNumber":1436,"author":{"gitId":"jeffreygohkw"},"content":"// end::theme[]"},{"lineNumber":1437,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1438,"author":{"gitId":"jeffreygohkw"},"content":"// tag::adddeletetag[]"},{"lineNumber":1439,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Add/Delete Tag mechanism"},{"lineNumber":1440,"author":{"gitId":"-"},"content":""},{"lineNumber":1441,"author":{"gitId":"-"},"content":"The add/delete tag mechanism is facilitated by `personArrayList`, which resides inside `LogicManager`. It supports add/delete"},{"lineNumber":1442,"author":{"gitId":"-"},"content":"tag for all persons in the address book. This command will inherit from `UndoableCommand`."},{"lineNumber":1443,"author":{"gitId":"-"},"content":""},{"lineNumber":1444,"author":{"gitId":"-"},"content":"The add/delete tag command are executed by `AddTagCommand` and `DeleteTagCommand` are parsed through `AddTagCommandParser` and `DeleteTagCommandParser`."},{"lineNumber":1445,"author":{"gitId":"-"},"content":"It is different from `edit [INDEX] [TAG]` since it allows the user to perform the addition and deletion of tags for multiple people at once."},{"lineNumber":1446,"author":{"gitId":"-"},"content":"If the user wants to add the `t/friends` tag for the first 3 persons in the address book, the `AddTagCommand` (`add tag/ 1 2 3 t/friends`) will be executed."},{"lineNumber":1447,"author":{"gitId":"-"},"content":"The same operation will happen for `delete tag/` command."},{"lineNumber":1448,"author":{"gitId":"-"},"content":""},{"lineNumber":1449,"author":{"gitId":"-"},"content":"The `AddTagCommand` goes through all the persons in the address book and add tag to the persons with specific index. The `DeleteTagCommand` works"},{"lineNumber":1450,"author":{"gitId":"-"},"content":"in a similar way."},{"lineNumber":1451,"author":{"gitId":"-"},"content":""},{"lineNumber":1452,"author":{"gitId":"-"},"content":"The example of how `AddTagCommand` is working:"},{"lineNumber":1453,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":1454,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1455,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":1456,"author":{"gitId":"-"},"content":" * Adds a tag to the persons in the list from the address book."},{"lineNumber":1457,"author":{"gitId":"-"},"content":" */"},{"lineNumber":1458,"author":{"gitId":"-"},"content":"public class AddTagCommand extends AddCommand {"},{"lineNumber":1459,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1460,"author":{"gitId":"-"},"content":"         * Check whether the index within the range then checks whether the specific persons have the tag."},{"lineNumber":1461,"author":{"gitId":"-"},"content":"         * If not, add the tag to the person that doesn\u0027t have the given tag."},{"lineNumber":1462,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":1463,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":1464,"author":{"gitId":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":1465,"author":{"gitId":"-"},"content":""},{"lineNumber":1466,"author":{"gitId":"-"},"content":"            for (Index targetIndex : targetIndexes) {"},{"lineNumber":1467,"author":{"gitId":"-"},"content":"                // check whether the index within the range"},{"lineNumber":1468,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1469,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {"},{"lineNumber":1470,"author":{"gitId":"-"},"content":"                // check whether all persons have the given tag"},{"lineNumber":1471,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1472,"author":{"gitId":"-"},"content":"            // throw exception for duplicated tag"},{"lineNumber":1473,"author":{"gitId":"-"},"content":"            return new CommandResult();"},{"lineNumber":1474,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1475,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1476,"author":{"gitId":"-"},"content":""},{"lineNumber":1477,"author":{"gitId":"-"},"content":"Suppose the user enter the `add tag/ 1 2 t/friends` command. The following sequence diagram shows how the add tag command works:"},{"lineNumber":1478,"author":{"gitId":"-"},"content":""},{"lineNumber":1479,"author":{"gitId":"-"},"content":"image::AddTagSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":1480,"author":{"gitId":"-"},"content":"_Figure 3.17.1 : Add Tag Sequence Diagram for Logic_ +"},{"lineNumber":1481,"author":{"gitId":"-"},"content":"The `delete tag/` command works the same as `add tag/` command with different name only."},{"lineNumber":1482,"author":{"gitId":"-"},"content":""},{"lineNumber":1483,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":1484,"author":{"gitId":"-"},"content":"If the input index does not exist, the `AddTagCommand` and `DeleteTagCommand` will throw an exception. +"},{"lineNumber":1485,"author":{"gitId":"-"},"content":"If the tag to be deleted does not exist, the `DeleteTagCommand` will throw an exception. +"},{"lineNumber":1486,"author":{"gitId":"-"},"content":"If the tag to be added exists in every target person in the address book, the `AddTagCommand` will throw an exception."},{"lineNumber":1487,"author":{"gitId":"-"},"content":""},{"lineNumber":1488,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1489,"author":{"gitId":"-"},"content":""},{"lineNumber":1490,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1491,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the `add tag/` and `delete tag/` +"},{"lineNumber":1492,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** implement the methods in `ModelManager` +"},{"lineNumber":1493,"author":{"gitId":"-"},"content":"**Pros:** Easier to implement. `ModelManager` includes all the methods and variables. +"},{"lineNumber":1494,"author":{"gitId":"-"},"content":"**Cons:** Must modify `Model` also to fit the `ModelManager`. Beginner may have difficulty to understand the different functions in Model component+"},{"lineNumber":1495,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1496,"author":{"gitId":"-"},"content":"**Alternative 2:** Implement the `addtag` and `deletetag` in `AddTagCommand` and `DeleteTagCommand` respectively. +"},{"lineNumber":1497,"author":{"gitId":"-"},"content":"**Pros:** Easier to understand. +"},{"lineNumber":1498,"author":{"gitId":"-"},"content":"**Cons:** Repetitive code. Additional overload constructor needs to be implement. The `AddTagCommand` and `DeleteTagCommand` will have to update the person list."},{"lineNumber":1499,"author":{"gitId":"-"},"content":"This violates the Single Responsibility Principle."},{"lineNumber":1500,"author":{"gitId":"-"},"content":""},{"lineNumber":1501,"author":{"gitId":"-"},"content":"---"},{"lineNumber":1502,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the `AddTagCommand` and `DeleteTagCommand` +"},{"lineNumber":1503,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** create new command `add tag/` and `delete tag/` +"},{"lineNumber":1504,"author":{"gitId":"-"},"content":"**Pros:** Less modification of existing command and parser +"},{"lineNumber":1505,"author":{"gitId":"-"},"content":"**Cons:** Users have to learn how to use the additional commands +"},{"lineNumber":1506,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1507,"author":{"gitId":"-"},"content":"**Alternative 2:** Modify the existing `add` and `delete` command +"},{"lineNumber":1508,"author":{"gitId":"-"},"content":"**Pros:** Users could use the same commands to achieve different purpose +"},{"lineNumber":1509,"author":{"gitId":"-"},"content":"**Cons:** Additional override the constructor for the existing command. It might not be easy for the beginner."},{"lineNumber":1510,"author":{"gitId":"-"},"content":"// end::adddeletetag[]"},{"lineNumber":1511,"author":{"gitId":"-"},"content":""},{"lineNumber":1512,"author":{"gitId":"-"},"content":"// tag::findtag[]"},{"lineNumber":1513,"author":{"gitId":"-"},"content":""},{"lineNumber":1514,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Find Tag mechanism"},{"lineNumber":1515,"author":{"gitId":"-"},"content":""},{"lineNumber":1516,"author":{"gitId":"-"},"content":"The find tag mechanism is facilitated by an ArrayList of Tags, which resides inside `LogicManager`. It supports finding persons by their tags in the address book."},{"lineNumber":1517,"author":{"gitId":"-"},"content":"This command will not inherit from `UndoableCommand`."},{"lineNumber":1518,"author":{"gitId":"-"},"content":""},{"lineNumber":1519,"author":{"gitId":"-"},"content":"The `find tag/` command is executed by `FindTagCommand` and is parsed through `FindTagCommandParser`."},{"lineNumber":1520,"author":{"gitId":"-"},"content":"After parsing through `FindTagCommandParser`, it does not goes to the `FindTagCommand` straightly. The list of tags input will be processed by `NameContainsTagsPredicate` first."},{"lineNumber":1521,"author":{"gitId":"-"},"content":"It is similar to the `find` command since find persons through their names and find persons through their tags are quite similar."},{"lineNumber":1522,"author":{"gitId":"-"},"content":""},{"lineNumber":1523,"author":{"gitId":"-"},"content":"Please take not that although `FindTagCommand` is similar to `FindCommand`, there are still some differences."},{"lineNumber":1524,"author":{"gitId":"-"},"content":"`FindTagCommand` provides exclusive finding whereas `FindCommand` does not. It is achieved in the `NameContainsTagsPredicate`."},{"lineNumber":1525,"author":{"gitId":"-"},"content":""},{"lineNumber":1526,"author":{"gitId":"-"},"content":"This is the example of how `NameContainsTagsPredicate` is working:"},{"lineNumber":1527,"author":{"gitId":"-"},"content":"Firstly, it will convert a Set of Tag to String."},{"lineNumber":1528,"author":{"gitId":"-"},"content":""},{"lineNumber":1529,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":1530,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1531,"author":{"gitId":"-"},"content":"private String convertTagToString(ReadOnlyPerson person) {"},{"lineNumber":1532,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e personTags \u003d person.getTags();"},{"lineNumber":1533,"author":{"gitId":"-"},"content":"        StringBuilder allTagNames \u003d new StringBuilder();"},{"lineNumber":1534,"author":{"gitId":"-"},"content":"        for (Tag tag : personTags) {"},{"lineNumber":1535,"author":{"gitId":"-"},"content":"            allTagNames.append(tag.getTagName());"},{"lineNumber":1536,"author":{"gitId":"-"},"content":"            allTagNames.append(\" \");"},{"lineNumber":1537,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1538,"author":{"gitId":"-"},"content":"        return allTagNames.toString().trim();"},{"lineNumber":1539,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1540,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1541,"author":{"gitId":"-"},"content":"After having a list of string, it will then split strings into two ArrayList. One is for the tags we are looking for and another one"},{"lineNumber":1542,"author":{"gitId":"-"},"content":"is for the tags to be excluded."},{"lineNumber":1543,"author":{"gitId":"-"},"content":""},{"lineNumber":1544,"author":{"gitId":"Esilocke"},"content":"[source,java]"},{"lineNumber":1545,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1546,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":1547,"author":{"gitId":"-"},"content":"     * Update the wantedTag and unwantedTag list"},{"lineNumber":1548,"author":{"gitId":"-"},"content":"     * @param wantedTag list of tags to be searched"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"     * @param unwantedTag list of tags to not be searched"},{"lineNumber":1550,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"    private void updateWantedTagUnwantedTag(List\u003cString\u003e wantedTag, List\u003cString\u003e unwantedTag) {"},{"lineNumber":1552,"author":{"gitId":"-"},"content":"        for (String everyTag : tags) {"},{"lineNumber":1553,"author":{"gitId":"-"},"content":"            if (!everyTag.startsWith(\"/not\")) {"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"                wantedTag.add(everyTag);"},{"lineNumber":1555,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":1556,"author":{"gitId":"-"},"content":"                unwantedTag.add(everyTag.substring(4));"},{"lineNumber":1557,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1558,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1559,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1560,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1561,"author":{"gitId":"-"},"content":""},{"lineNumber":1562,"author":{"gitId":"-"},"content":"Lastly, it will return the result according to the user input. +"},{"lineNumber":1563,"author":{"gitId":"-"},"content":"Suppose the user enter `find tag/ friends` command. The following sequence diagram shows how the find tag command works:"},{"lineNumber":1564,"author":{"gitId":"-"},"content":""},{"lineNumber":1565,"author":{"gitId":"-"},"content":"image::FindTagSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1566,"author":{"gitId":"-"},"content":"_Figure 3.18.1 : Find Tag Sequence Diagram for Logic_ +"},{"lineNumber":1567,"author":{"gitId":"-"},"content":""},{"lineNumber":1568,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":1569,"author":{"gitId":"-"},"content":"If the input index tags do not exist, the `FindTagCommand` will give a empty list."},{"lineNumber":1570,"author":{"gitId":"-"},"content":""},{"lineNumber":1571,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1572,"author":{"gitId":"-"},"content":""},{"lineNumber":1573,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1574,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the `find tag/` +"},{"lineNumber":1575,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** implement a new command `find tag/` +"},{"lineNumber":1576,"author":{"gitId":"-"},"content":"**Pros:** Easier to implement. `find tag/` command will be similar to the `find` command. +"},{"lineNumber":1577,"author":{"gitId":"-"},"content":"**Cons:** Must create `NameContainsTagsPredicate` in model. It does not fully utilize the existing `NameContainsKeywordsPredicate`. +"},{"lineNumber":1578,"author":{"gitId":"-"},"content":""},{"lineNumber":1579,"author":{"gitId":"-"},"content":"**Alternative 2:** Implement the `find tag/` in `FindCommand`. +"},{"lineNumber":1580,"author":{"gitId":"-"},"content":"**Pros:** Easier for user. They do not have to memorize some many commands. +"},{"lineNumber":1581,"author":{"gitId":"-"},"content":"**Cons:** The existing `FindCommand` will not only response for finding persons through names only. This Violates Single Responsibility Principle"},{"lineNumber":1582,"author":{"gitId":"-"},"content":"and Separation of Concerns as FindCommand now needs to do two different things."},{"lineNumber":1583,"author":{"gitId":"-"},"content":"// end::findtag[]"},{"lineNumber":1584,"author":{"gitId":"-"},"content":""},{"lineNumber":1585,"author":{"gitId":"-"},"content":"// tag::favunfav[]"},{"lineNumber":1586,"author":{"gitId":"-"},"content":""},{"lineNumber":1587,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Favourite/Unfavourite Person mechanism"},{"lineNumber":1588,"author":{"gitId":"-"},"content":"To favourite a person is achieved by `FavouriteCommand`. It basically changes the value of the `favourite` status of a `Person` but there is no specific `Favourite` field for person."},{"lineNumber":1589,"author":{"gitId":"-"},"content":""},{"lineNumber":1590,"author":{"gitId":"-"},"content":"In this sense, a boolean value needs to be created to store the favourite status of a contact. As `AddCommand` does not involve `favourite`, the default `favourite` status for every newly added `Person` is false."},{"lineNumber":1591,"author":{"gitId":"-"},"content":""},{"lineNumber":1592,"author":{"gitId":"-"},"content":"The `favourite` status is a boolean value and it will be set as true through `FavouriteCommand`. Then, the target person will be updated."},{"lineNumber":1593,"author":{"gitId":"-"},"content":""},{"lineNumber":1594,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":1595,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1596,"author":{"gitId":"-"},"content":"public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":1597,"author":{"gitId":"-"},"content":""},{"lineNumber":1598,"author":{"gitId":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":1599,"author":{"gitId":"-"},"content":""},{"lineNumber":1600,"author":{"gitId":"-"},"content":"        // throw invalid person index"},{"lineNumber":1601,"author":{"gitId":"-"},"content":""},{"lineNumber":1602,"author":{"gitId":"-"},"content":"        // update favourite status"},{"lineNumber":1603,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToFavourite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":1604,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToFavourite.getName(),"},{"lineNumber":1605,"author":{"gitId":"-"},"content":"                personToFavourite.getPhone(), personToFavourite.getEmail(),"},{"lineNumber":1606,"author":{"gitId":"-"},"content":"                personToFavourite.getAddress(), true,"},{"lineNumber":1607,"author":{"gitId":"-"},"content":"                personToFavourite.getRemark(), personToFavourite.getAvatar(),"},{"lineNumber":1608,"author":{"gitId":"-"},"content":"                personToFavourite.getTags());"},{"lineNumber":1609,"author":{"gitId":"-"},"content":"        // update target person"},{"lineNumber":1610,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":1611,"author":{"gitId":"-"},"content":"            model.updatePerson(personToFavourite, editedPerson);"},{"lineNumber":1612,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":1613,"author":{"gitId":"-"},"content":"            // throw exception"},{"lineNumber":1614,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1615,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":1616,"author":{"gitId":"-"},"content":""},{"lineNumber":1617,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_FAVOURITE_PERSON_SUCCESS, personToFavourite));"},{"lineNumber":1618,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1619,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1620,"author":{"gitId":"-"},"content":"`FavouriteCommand` takes in an integer as its argument. The command is first being parsed in `AddressBookParser` to be identified as an instance of `FavouriteCommand`."},{"lineNumber":1621,"author":{"gitId":"-"},"content":"Then it is parsed by `FavouriteCommandParser` to parse the index. Invalid indexes will be handled by throwing an exception. This is how `FavouriteCommandParser` is implemented:"},{"lineNumber":1622,"author":{"gitId":"-"},"content":"[source,java]"},{"lineNumber":1623,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1624,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":1625,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"},{"lineNumber":1626,"author":{"gitId":"-"},"content":"     * and returns an FavouriteCommand object for execution."},{"lineNumber":1627,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":1628,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1629,"author":{"gitId":"-"},"content":"    public FavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":1630,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":1631,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":1632,"author":{"gitId":"-"},"content":"            return new FavouriteCommand(index);"},{"lineNumber":1633,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":1634,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":1635,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":1636,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1637,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1638,"author":{"gitId":"-"},"content":"----"},{"lineNumber":1639,"author":{"gitId":"-"},"content":""},{"lineNumber":1640,"author":{"gitId":"-"},"content":"The following sequence diagram shows how a `FavouriteCommand` is processed: +"},{"lineNumber":1641,"author":{"gitId":"-"},"content":""},{"lineNumber":1642,"author":{"gitId":"-"},"content":"image::FavouriteSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1643,"author":{"gitId":"-"},"content":"_Figure 3.19.1 : Favourite Sequence Diagram for Logic_ +"},{"lineNumber":1644,"author":{"gitId":"-"},"content":""},{"lineNumber":1645,"author":{"gitId":"-"},"content":"To indicate that a person has been `favoured`, `PersonCard` is modified to contain a `favouriteLabel` that changes its appearance based on the `favourite` status of the person."},{"lineNumber":1646,"author":{"gitId":"-"},"content":"It will first detect the boolean favourite status of the person. If the person is a favourite contact, a heart will be shown."},{"lineNumber":1647,"author":{"gitId":"-"},"content":"The colours of the border and the background of the label are set to transparent, so that only the background picture, which is a heart, will be shown."},{"lineNumber":1648,"author":{"gitId":"-"},"content":""},{"lineNumber":1649,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":1650,"author":{"gitId":"-"},"content":""},{"lineNumber":1651,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of `favourite` +"},{"lineNumber":1652,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** implement a new command `favourite`. +"},{"lineNumber":1653,"author":{"gitId":"-"},"content":"**Pros:** Easier to implement. Does not need to modify existing command. +"},{"lineNumber":1654,"author":{"gitId":"-"},"content":"**Cons:** Must modify `Person` class to update the person status. The constructor of `person` has been modified so all the `person` in the address book must change accordingly. +"},{"lineNumber":1655,"author":{"gitId":"-"},"content":"**Alternative 2:** Implement the `favourite` in `AddCommand` +"},{"lineNumber":1656,"author":{"gitId":"-"},"content":"**Pros:** Easier for user. They do not have to memorize some many commands. +"},{"lineNumber":1657,"author":{"gitId":"-"},"content":"**Cons:** Difficult to implement. The `favourite` status will be treated as an optional field when using `AddCommand`. In order to change `favourite` status, `EditCommand` may be modified which is very troublesome. +"},{"lineNumber":1658,"author":{"gitId":"-"},"content":""},{"lineNumber":1659,"author":{"gitId":"-"},"content":"---"},{"lineNumber":1660,"author":{"gitId":"-"},"content":"**Aspect:** Store `Favourite` values +"},{"lineNumber":1661,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Store it as a `Boolean` value +"},{"lineNumber":1662,"author":{"gitId":"-"},"content":"**Pros:** Easier to implement. Does not need to create another class. +"},{"lineNumber":1663,"author":{"gitId":"-"},"content":"**Cons:** Must modify `Model` and `ModelManager` to update the person status.It is also prone to bugs when developers forget to change the ObjectProperty to `String` in UI classes. +"},{"lineNumber":1664,"author":{"gitId":"-"},"content":""},{"lineNumber":1665,"author":{"gitId":"-"},"content":"**Alternative 2:** Add a new `Favourite` field +"},{"lineNumber":1666,"author":{"gitId":"-"},"content":"**Pros:** Similar way to store other personal information. It also follows the open-close principle and exercises cohesion, where all matters related to `Favourite` field is dealt in its own class. +"},{"lineNumber":1667,"author":{"gitId":"-"},"content":"**Cons:** Difficult to implement. Adding a new field will cause many changes in UI, Logic, Model and Storage. Some test cases will be rewritten."},{"lineNumber":1668,"author":{"gitId":"-"},"content":"// end::favunfav[]"},{"lineNumber":1669,"author":{"gitId":"-"},"content":""},{"lineNumber":1670,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1671,"author":{"gitId":"-"},"content":""},{"lineNumber":1672,"author":{"gitId":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":1673,"author":{"gitId":"-"},"content":""},{"lineNumber":1674,"author":{"gitId":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See link:#configuration[Configuration])"},{"lineNumber":1675,"author":{"gitId":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":1676,"author":{"gitId":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":1677,"author":{"gitId":"-"},"content":""},{"lineNumber":1678,"author":{"gitId":"-"},"content":"*Logging Levels*"},{"lineNumber":1679,"author":{"gitId":"-"},"content":""},{"lineNumber":1680,"author":{"gitId":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":1681,"author":{"gitId":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":1682,"author":{"gitId":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":1683,"author":{"gitId":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":1684,"author":{"gitId":"-"},"content":""},{"lineNumber":1685,"author":{"gitId":"-"},"content":""},{"lineNumber":1686,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1687,"author":{"gitId":"-"},"content":""},{"lineNumber":1688,"author":{"gitId":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":1689,"author":{"gitId":"-"},"content":""},{"lineNumber":1690,"author":{"gitId":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1691,"author":{"gitId":"-"},"content":""},{"lineNumber":1692,"author":{"gitId":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1693,"author":{"gitId":"-"},"content":""},{"lineNumber":1694,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":1695,"author":{"gitId":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1696,"author":{"gitId":"-"},"content":""},{"lineNumber":1697,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1698,"author":{"gitId":"-"},"content":""},{"lineNumber":1699,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1700,"author":{"gitId":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1701,"author":{"gitId":"-"},"content":""},{"lineNumber":1702,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1703,"author":{"gitId":"-"},"content":""},{"lineNumber":1704,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1705,"author":{"gitId":"-"},"content":""},{"lineNumber":1706,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1707,"author":{"gitId":"-"},"content":""},{"lineNumber":1708,"author":{"gitId":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1709,"author":{"gitId":"-"},"content":""},{"lineNumber":1710,"author":{"gitId":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1711,"author":{"gitId":"-"},"content":""},{"lineNumber":1712,"author":{"gitId":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1713,"author":{"gitId":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1714,"author":{"gitId":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1715,"author":{"gitId":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1716,"author":{"gitId":"-"},"content":""},{"lineNumber":1717,"author":{"gitId":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1718,"author":{"gitId":"-"},"content":"_Figure 5.6.1 : Saving documentation as PDF files in Chrome_"},{"lineNumber":1719,"author":{"gitId":"-"},"content":""},{"lineNumber":1720,"author":{"gitId":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1721,"author":{"gitId":"-"},"content":""},{"lineNumber":1722,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1723,"author":{"gitId":"-"},"content":""},{"lineNumber":1724,"author":{"gitId":"-"},"content":"There are three ways to run tests."},{"lineNumber":1725,"author":{"gitId":"-"},"content":""},{"lineNumber":1726,"author":{"gitId":"-"},"content":"[TIP]"},{"lineNumber":1727,"author":{"gitId":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1728,"author":{"gitId":"-"},"content":""},{"lineNumber":1729,"author":{"gitId":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1730,"author":{"gitId":"-"},"content":""},{"lineNumber":1731,"author":{"gitId":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1732,"author":{"gitId":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1733,"author":{"gitId":"-"},"content":""},{"lineNumber":1734,"author":{"gitId":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1735,"author":{"gitId":"-"},"content":""},{"lineNumber":1736,"author":{"gitId":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1737,"author":{"gitId":"-"},"content":""},{"lineNumber":1738,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":1739,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1740,"author":{"gitId":"-"},"content":""},{"lineNumber":1741,"author":{"gitId":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1742,"author":{"gitId":"-"},"content":""},{"lineNumber":1743,"author":{"gitId":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1744,"author":{"gitId":"-"},"content":""},{"lineNumber":1745,"author":{"gitId":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1746,"author":{"gitId":"-"},"content":""},{"lineNumber":1747,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1748,"author":{"gitId":"-"},"content":""},{"lineNumber":1749,"author":{"gitId":"-"},"content":"We have two types of tests:"},{"lineNumber":1750,"author":{"gitId":"-"},"content":""},{"lineNumber":1751,"author":{"gitId":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1752,"author":{"gitId":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1753,"author":{"gitId":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1754,"author":{"gitId":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1755,"author":{"gitId":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1756,"author":{"gitId":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1757,"author":{"gitId":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1758,"author":{"gitId":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1759,"author":{"gitId":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1760,"author":{"gitId":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1761,"author":{"gitId":"-"},"content":""},{"lineNumber":1762,"author":{"gitId":"-"},"content":""},{"lineNumber":1763,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1764,"author":{"gitId":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1765,"author":{"gitId":"-"},"content":""},{"lineNumber":1766,"author":{"gitId":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1767,"author":{"gitId":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1768,"author":{"gitId":"-"},"content":""},{"lineNumber":1769,"author":{"gitId":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1770,"author":{"gitId":"-"},"content":""},{"lineNumber":1771,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1772,"author":{"gitId":"-"},"content":""},{"lineNumber":1773,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1774,"author":{"gitId":"-"},"content":""},{"lineNumber":1775,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1776,"author":{"gitId":"-"},"content":""},{"lineNumber":1777,"author":{"gitId":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1778,"author":{"gitId":"-"},"content":""},{"lineNumber":1779,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1780,"author":{"gitId":"-"},"content":""},{"lineNumber":1781,"author":{"gitId":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1782,"author":{"gitId":"-"},"content":""},{"lineNumber":1783,"author":{"gitId":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1784,"author":{"gitId":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1785,"author":{"gitId":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1786,"author":{"gitId":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1787,"author":{"gitId":"-"},"content":""},{"lineNumber":1788,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1789,"author":{"gitId":"-"},"content":""},{"lineNumber":1790,"author":{"gitId":"Esilocke"},"content":"A project often depends on third-party libraries. For example, Address++ depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1791,"author":{"gitId":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1792,"author":{"gitId":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1793,"author":{"gitId":"-"},"content":""},{"lineNumber":1794,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1795,"author":{"gitId":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1796,"author":{"gitId":"-"},"content":""},{"lineNumber":1797,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1798,"author":{"gitId":"-"},"content":""},{"lineNumber":1799,"author":{"gitId":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1800,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1801,"author":{"gitId":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1802,"author":{"gitId":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1803,"author":{"gitId":"-"},"content":""},{"lineNumber":1804,"author":{"gitId":"Esilocke"},"content":"|`* * *` |user |add a new person | keep track of my contacts"},{"lineNumber":1805,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1806,"author":{"gitId":"Esilocke"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1807,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1808,"author":{"gitId":"Esilocke"},"content":"|`* * *` |user |add a new task | keep track of my tasks and assignments"},{"lineNumber":1809,"author":{"gitId":"-"},"content":""},{"lineNumber":1810,"author":{"gitId":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1811,"author":{"gitId":"-"},"content":""},{"lineNumber":1812,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |user |have a search function |easily search for the contact I am looking for without browsing through thousands of contacts"},{"lineNumber":1813,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1814,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |user |have the option to edit my created contacts |make changes to the contacts that I have added"},{"lineNumber":1815,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1816,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |error-prone user |have the ability to Undo and Redo |automatically undo or redo the changes that I have made"},{"lineNumber":1817,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1818,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |user with secretive friends |be able to add contacts with incomplete data |operate without the need to create dummy values"},{"lineNumber":1819,"author":{"gitId":"-"},"content":""},{"lineNumber":1820,"author":{"gitId":"Esilocke"},"content":"|`* * *` |cautious user |be able to lock my address book application whenever I want with a password | prevent people with malicious intent from making changes to my data"},{"lineNumber":1821,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1822,"author":{"gitId":"-"},"content":"|`* *` |user |hide link:#private-contact-detail[private contact details] by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1823,"author":{"gitId":"-"},"content":""},{"lineNumber":1824,"author":{"gitId":"charlesgoh"},"content":"|`* *` |user |load contact data from any file of my choosing | have more flexibility for my file\u0027s storage location"},{"lineNumber":1825,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1826,"author":{"gitId":"charlesgoh"},"content":"|`* *` |user |save contact data in a directory of my choosing |save the file in a location that fits my needs"},{"lineNumber":1827,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1828,"author":{"gitId":"charlesgoh"},"content":"|`* *` |user |type commands partially and have the application fill in the rest for me | increase typing productivity"},{"lineNumber":1829,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1830,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |multi-tasking user |be able to record things other than contacts, such as tasks |manage myself better"},{"lineNumber":1831,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1832,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user |be able to filter my contacts based on tags |view the people who are relevant to me"},{"lineNumber":1833,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1834,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |organized user |be able to sort my contacts by different fields such as by name and birthday  |better organize my contacts"},{"lineNumber":1835,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1836,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user with multiple devices |be able to import and export my address book |use the address book without having to add all my contacts when I switch platforms"},{"lineNumber":1837,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1838,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user who values privacy |be able to to choose and modify which contacts and what information are to be displayed |hide information I do not want to share from others"},{"lineNumber":1839,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1840,"author":{"gitId":"Esilocke"},"content":"|`* *` |cautious user |be able to back up my address book data | retrieve my back up data in the event I make breaking changes to my actual address book and there is no way of undoing them"},{"lineNumber":1841,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1842,"author":{"gitId":"Esilocke"},"content":"|`* *` |user with poor eyesight |be able to increase the font size | use the application without straining my eyes"},{"lineNumber":1843,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1844,"author":{"gitId":"Esilocke"},"content":"|`* *` |forgetful user |be able to see who is assigned to a task | find my contacts who are in charge more quickly"},{"lineNumber":1845,"author":{"gitId":"-"},"content":""},{"lineNumber":1846,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |lazy user |have an easy way to add a person with his full details into my address book |add new contacts quickly"},{"lineNumber":1847,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1848,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |user who values aesthetics |be able to customize my layout |display self-identity, and use a layout that I like"},{"lineNumber":1849,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1850,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |user |have the ability to add a short description to my contacts |add more information about my contacts"},{"lineNumber":1851,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1852,"author":{"gitId":"Esilocke"},"content":"|`*` |user |be able to mark my favourite contacts |find them more easily"},{"lineNumber":1853,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1854,"author":{"gitId":"Esilocke"},"content":"|`*` |long-time user |be able to access shortcut commands |use the address book more efficiently"},{"lineNumber":1855,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1856,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |user |be able to update the address book application easily when new updates are published |continue using the address book easily with any newly added features"},{"lineNumber":1857,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1858,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1859,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1860,"author":{"gitId":"-"},"content":""},{"lineNumber":1861,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":1862,"author":{"gitId":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1863,"author":{"gitId":"-"},"content":""},{"lineNumber":1864,"author":{"gitId":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1865,"author":{"gitId":"-"},"content":""},{"lineNumber":1866,"author":{"gitId":"-"},"content":"[discrete]"},{"lineNumber":1867,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1868,"author":{"gitId":"-"},"content":""},{"lineNumber":1869,"author":{"gitId":"-"},"content":"*MSS*"},{"lineNumber":1870,"author":{"gitId":"-"},"content":""},{"lineNumber":1871,"author":{"gitId":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1872,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1873,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1874,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1875,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1876,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1877,"author":{"gitId":"-"},"content":""},{"lineNumber":1878,"author":{"gitId":"-"},"content":"*Extensions*"},{"lineNumber":1879,"author":{"gitId":"-"},"content":""},{"lineNumber":1880,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1881,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1882,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1883,"author":{"gitId":"-"},"content":"Use case ends."},{"lineNumber":1884,"author":{"gitId":"-"},"content":""},{"lineNumber":1885,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1886,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1887,"author":{"gitId":"-"},"content":"[none]"},{"lineNumber":1888,"author":{"gitId":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1889,"author":{"gitId":"-"},"content":"+"},{"lineNumber":1890,"author":{"gitId":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1891,"author":{"gitId":"-"},"content":""},{"lineNumber":1892,"author":{"gitId":"Esilocke"},"content":"[discrete]"},{"lineNumber":1893,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Search for person"},{"lineNumber":1894,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1895,"author":{"gitId":"Esilocke"},"content":"*MSS*"},{"lineNumber":1896,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1897,"author":{"gitId":"Esilocke"},"content":"1.  User requests to search for a person with criteria"},{"lineNumber":1898,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook shows a list of persons who match the criteria"},{"lineNumber":1899,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1900,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1901,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1902,"author":{"gitId":"Esilocke"},"content":"*Extensions*"},{"lineNumber":1903,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1904,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1905,"author":{"gitId":"Esilocke"},"content":"* 2a. The list is empty."},{"lineNumber":1906,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1907,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1908,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1909,"author":{"gitId":"Esilocke"},"content":"* 2b. No such person was found."},{"lineNumber":1910,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1911,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1912,"author":{"gitId":"Esilocke"},"content":"** 2b1. AddressBook informs the user that no matching users were found."},{"lineNumber":1913,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1914,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1915,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1916,"author":{"gitId":"Esilocke"},"content":"[discrete]"},{"lineNumber":1917,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Edit person"},{"lineNumber":1918,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1919,"author":{"gitId":"Esilocke"},"content":"*MSS*"},{"lineNumber":1920,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1921,"author":{"gitId":"Esilocke"},"content":"1.  User requests to list persons"},{"lineNumber":1922,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1923,"author":{"gitId":"Esilocke"},"content":"3.  User requests to change the details of a specific person in the list"},{"lineNumber":1924,"author":{"gitId":"Esilocke"},"content":"4.  AddressBook changes the details of the specified person."},{"lineNumber":1925,"author":{"gitId":"Esilocke"},"content":"5.  AddressBook shows the new details of the person."},{"lineNumber":1926,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1927,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1928,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1929,"author":{"gitId":"Esilocke"},"content":"*Extensions*"},{"lineNumber":1930,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1931,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1932,"author":{"gitId":"Esilocke"},"content":"* 2a. The list is empty."},{"lineNumber":1933,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1934,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1935,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1936,"author":{"gitId":"Esilocke"},"content":"* 3a. The given index is invalid."},{"lineNumber":1937,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1938,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1939,"author":{"gitId":"Esilocke"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1940,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1941,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 2."},{"lineNumber":1942,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1943,"author":{"gitId":"Esilocke"},"content":"* 3b. The specified detail to change is invalid."},{"lineNumber":1944,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1945,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1946,"author":{"gitId":"Esilocke"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1947,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1948,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 2."},{"lineNumber":1949,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1950,"author":{"gitId":"Esilocke"},"content":"* 4a. The specified detail to change is exactly the same as the previous detail."},{"lineNumber":1951,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1952,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1953,"author":{"gitId":"Esilocke"},"content":"** 4a1. AddressBook informs the user that no change was made."},{"lineNumber":1954,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1955,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1956,"author":{"gitId":"-"},"content":""},{"lineNumber":1957,"author":{"gitId":"Esilocke"},"content":"[discrete]"},{"lineNumber":1958,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Undo/Redo by multiple steps"},{"lineNumber":1959,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1960,"author":{"gitId":"Esilocke"},"content":"*MSS*"},{"lineNumber":1961,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1962,"author":{"gitId":"Esilocke"},"content":"1.  User requests to undo/redo a specified number of steps"},{"lineNumber":1963,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook undos/redos the last X commands, where X was the number of commands to undo/redo"},{"lineNumber":1964,"author":{"gitId":"Esilocke"},"content":"3.  AddressBook displays a success message"},{"lineNumber":1965,"author":{"gitId":"Esilocke"},"content":"4.  AddressBook displays a list of all the commands that were undone/redone."},{"lineNumber":1966,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1967,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1968,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1969,"author":{"gitId":"Esilocke"},"content":"*Extensions*"},{"lineNumber":1970,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1971,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1972,"author":{"gitId":"Esilocke"},"content":"* 2a. The number of commands entered were less than the specified number of undo commands."},{"lineNumber":1973,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1974,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1975,"author":{"gitId":"Esilocke"},"content":"** 2a1. AddressBook undos all previous commands."},{"lineNumber":1976,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1977,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 3."},{"lineNumber":1978,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1979,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1980,"author":{"gitId":"Esilocke"},"content":"* 2b. The number of commands entered were less than the specified number of redo commands."},{"lineNumber":1981,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1982,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":1983,"author":{"gitId":"Esilocke"},"content":"** 2b1. AddressBook redos all previously undone commands."},{"lineNumber":1984,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1985,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 3"},{"lineNumber":1986,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1987,"author":{"gitId":"Esilocke"},"content":"[discrete]"},{"lineNumber":1988,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Sort"},{"lineNumber":1989,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1990,"author":{"gitId":"Esilocke"},"content":"*MSS*"},{"lineNumber":1991,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1992,"author":{"gitId":"Esilocke"},"content":"1.  User requests to sort by a criteria"},{"lineNumber":1993,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook sorts the contacts by the criteria"},{"lineNumber":1994,"author":{"gitId":"Esilocke"},"content":"3.  AddressBook shows a success message."},{"lineNumber":1995,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":1996,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":1997,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1998,"author":{"gitId":"Esilocke"},"content":"*Extensions*"},{"lineNumber":1999,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":2000,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":2001,"author":{"gitId":"Esilocke"},"content":"* 2a. The list is empty."},{"lineNumber":2002,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":2003,"author":{"gitId":"Esilocke"},"content":"Use case ends."},{"lineNumber":2004,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":2005,"author":{"gitId":"Esilocke"},"content":"* 1a. The given criteria is invalid."},{"lineNumber":2006,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":2007,"author":{"gitId":"Esilocke"},"content":"[none]"},{"lineNumber":2008,"author":{"gitId":"Esilocke"},"content":"** 1a1. AddressBook shows an error message."},{"lineNumber":2009,"author":{"gitId":"Esilocke"},"content":"+"},{"lineNumber":2010,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 1."},{"lineNumber":2011,"author":{"gitId":"-"},"content":""},{"lineNumber":2012,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":2013,"author":{"gitId":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":2014,"author":{"gitId":"-"},"content":""},{"lineNumber":2015,"author":{"gitId":"-"},"content":".  Should work on any link:#mainstream-os[mainstream OS] as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":2016,"author":{"gitId":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":2017,"author":{"gitId":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2018,"author":{"gitId":"charlesgoh"},"content":".  Feature sets are to be rolled out on a regular weekly basis, following the proper forking workflow procedure."},{"lineNumber":2019,"author":{"gitId":"charlesgoh"},"content":".  The application should be intuitive the target users: students (and professionals) who prefer typing over using the mouse."},{"lineNumber":2020,"author":{"gitId":"charlesgoh"},"content":".  Future versions of the application should be backwards compatible with data saved in versions after v1.0."},{"lineNumber":2021,"author":{"gitId":"charlesgoh"},"content":".  The application is not required to handle physical printing."},{"lineNumber":2022,"author":{"gitId":"-"},"content":""},{"lineNumber":2023,"author":{"gitId":"-"},"content":"[appendix]"},{"lineNumber":2024,"author":{"gitId":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2025,"author":{"gitId":"-"},"content":""},{"lineNumber":2026,"author":{"gitId":"-"},"content":"[[mainstream-os]]"},{"lineNumber":2027,"author":{"gitId":"-"},"content":"Mainstream OS"},{"lineNumber":2028,"author":{"gitId":"-"},"content":""},{"lineNumber":2029,"author":{"gitId":"-"},"content":"...."},{"lineNumber":2030,"author":{"gitId":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":2031,"author":{"gitId":"-"},"content":"...."},{"lineNumber":2032,"author":{"gitId":"-"},"content":""},{"lineNumber":2033,"author":{"gitId":"charlesgoh"},"content":"[[backwards-compatible]]"},{"lineNumber":2034,"author":{"gitId":"charlesgoh"},"content":"Backwards Compatible"},{"lineNumber":2035,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2036,"author":{"gitId":"charlesgoh"},"content":"...."},{"lineNumber":2037,"author":{"gitId":"charlesgoh"},"content":"In the context of this project, backwards compatible save data refers to the ability for multiple versions of this application to use the same saved data."},{"lineNumber":2038,"author":{"gitId":"charlesgoh"},"content":"...."},{"lineNumber":2039,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2040,"author":{"gitId":"-"},"content":"[appendix]"}],"authorContributionMap":{"charlesgoh":240,"jeffreygohkw":601,"Esilocke":296,"-":903}},{"path":"docs/UserGuide.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"\u003d Address++ - User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitId":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitId":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitId":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitId":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitId":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitId":"-"},"content":":experimental:"},{"lineNumber":9,"author":{"gitId":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitId":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitId":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitId":"-"},"content":":repoURL: https://github.com/CS2103AUG2017-W09-B2/main"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"By: `Team W09-B2`      Since: `Aug 2017`      Licence: `MIT` +"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"//tag::introduction[]"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"Address++ is an application that keeps track of your contacts and your daily to-dos for you. It is targeted"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"at students who work on projects or assignments frequently, but it can also be used for other purposes."},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d About"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"After reading this user guide, you should be more familiar with how Address++ can be used to maintain your contacts and tasks. +"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"No technical knowledge is required when running the application, although basic knowledge of installation is required to install the prerequisite libraries for Address++ (Java). +"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"//end::introduction[]"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d Getting Started"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":30,"author":{"gitId":"-"},"content":"+"},{"lineNumber":31,"author":{"gitId":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitId":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitId":"-"},"content":"+"},{"lineNumber":35,"author":{"gitId":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":".  Copy the file to the folder you want to use as the home folder for your Address++."},{"lineNumber":37,"author":{"gitId":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":38,"author":{"gitId":"-"},"content":"+"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"image::Ui.png[width\u003d\"800\"]"},{"lineNumber":40,"author":{"gitId":"-"},"content":"+"},{"lineNumber":41,"author":{"gitId":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":42,"author":{"gitId":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":43,"author":{"gitId":"-"},"content":".  Some example commands you can try:"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"* *`help`*: opens this page in a new window"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/This remark is a stub` :"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"adds a contact named `John Doe` to Address++."},{"lineNumber":49,"author":{"gitId":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":".  Refer to the link:#features[Features] section below for details of each command."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003d\u003d Features"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"*Command Format*"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"//tag::fontsize[]"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Changing Font Sizes"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"Are the font sizes too small or too big? Address++ allows you to change your font sizes at will. Here are three"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"ways of changing the font sizes:"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"**Option 1: Menu Font Size Buttons and Keyboard Shortcuts**"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"image::FontSizeUI.png[width\u003d\"540\"]"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"* *Increase Size:* kbd:[CTRL] + kbd:[W] (kbd:[CMD] + kbd:[W] on MacOS)"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"* *Decrease Size:* kbd:[CTRL] + kbd:[E] (kbd:[CMD] + kbd:[E] on MacOS)"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"* *Reset Size:* kbd:[CTRL] + kbd:[R] (kbd:[CMD] + kbd:[R] on MacOS)"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"**Option 3: Handtype command into CLI**:"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"image::FontSizeCLI.png[width\u003d\"540\"]"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"* Increase Size Command: `fontsize increase`"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"* Decrease Size Command: `fs decrease`"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"* Reset Size Command: `fontsize reset`"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"* `fontsize` can be replaced with `fs` for faster input. +"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"//end::fontsize[]"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"If you have trouble figuring out how to do something, or would like to find out about more features, you can click"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"on the **help** menu button. You can also enter the command `help` to access the help window."},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"image::HelpButtonUI.png[width\u003d\"540\"]"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `help` +"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"Alternatively,  you may opt to use the keyboard shortcut kbd:[F1]."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"// tag::addprivacy[]"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"// tag::avatar[]"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"You can use the `add` command to add new people to your address book."},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"`add` can be replaced by `a` for faster input."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"Format: `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/REMARK] [v/AVATAR] [t/TAG]...` +"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"**Things To Note** +"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"* A person can have any number of tags (including 0) +"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"* The `EMAIL` should be in the format address@email.domain +"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"* You can set a person\u0027s `Name`, `Phone`, `Email`, `Address`, `Remark` and `Avatar`, to be private by placing a `p` in front of the prefix. +"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"* As of version v1.5, the avatar fields accepts all URLs, and filenames with the prefix \"file:\""},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"**Example Scenarios**:"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 1** +"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"You made a new friend John Doe, and want to save him into Address++. You could type the following command to add his details:"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/11-11-1995 r/Likes panda bears"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"v/https://helloworld.world/image.png`"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 2** +"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"You meet Ima Hidearu, another one of your group members, but you do not know anything about him other than his name."},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":" Nevertheless, you are still able to add him into Address++:"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `add n/Ima Hidearu r/secretive`"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 3** +"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"Sometimes, you may wish to keep some fields private (i.e. not reveal them in the application). You can use the private"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"option while typing in your command:"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `add pn/Neville Shorttop pp/46492787 pe/nevilleS@gmail.com pa/Gryphon Gate pr/A true hero` +"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"**Note:** you do not have to set all fields as private, and you can choose which specific fields you want to set as private."},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"//end::avatar[]"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"//end::addprivacy[]"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"//tag::addtask[]"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Adding a task: `add task/` (Since V1.2)"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"You can use the `add task/` command to add new tasks to your address book. This allows you to keep track of your"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"assignments and project objectives."},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"Format: `add task/ n/NAME [d/DESCRIPTION] [by/DEADLINE] [p/PRIORITY] [a/ADDRESS]` +"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"`add` can be replaced by `a` for faster input."},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":"**Things To Note** +"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"* A task priority must be a positive integer from 0 to 5 inclusive, with 5 being the highest priority +"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"* Adding a task with a priority of 0 is the same as not adding a priority. Only priority level above 1 will be displayed in the User Interface +"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"* Newly added tasks are marked as incomplete by default."},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"**Examples**:"},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 1** +"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"You are assigned the task of writing a 1500-word essay that is due in 3 weeks. You decide to add this"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"task into Address++."},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `add task/ n/Essay d/Write a 1500-word essay on philosophical thinking t/3 weeks later p/4`"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 2** +"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"You are required to submit at least one forum post to the school forums each week. To remind yourself of this task,"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"you add it into Address++."},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `add task/ n/Weekly forum post p/1`"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"// end::addtask[]"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"// tag::addtag[]"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Adding a tag to persons : `add tag/` (Since V1.2)"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"You can use the `add tag/` command to add tag for multiple persons in the address book. For example, you may wish to add the tag `friends` to the first two persons in the address book. +"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"`add tag/` can be replaced by `a tag/` for faster input. +"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"Format: `add tag/ INDEX... t/[TAG]` +"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"****"},{"lineNumber":193,"author":{"gitId":"-"},"content":"**Things To Note**"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"* You can add the tag of the person at the specific `INDEX`. +"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"* The index refers to the index number shown in the most recent listing. +"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ... +"},{"lineNumber":198,"author":{"gitId":"-"},"content":"* If you don not key in any indexes, `add tag/` will add the tag to all contacts in the address book."},{"lineNumber":199,"author":{"gitId":"-"},"content":"****"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"****"},{"lineNumber":203,"author":{"gitId":"-"},"content":"**Example Scenario 1:** +"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"Suppose you want to add tag `friends` to the 1st and 2nd persons in the address book. You can use `list` to show all the contacts in the address book first,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"then use the `addtag` command to achieve it."},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003e\u003e `add tag/ 1 2 t/friends` +"},{"lineNumber":209,"author":{"gitId":"-"},"content":"****"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"****"},{"lineNumber":212,"author":{"gitId":"-"},"content":"**Example Scenario 2:** +"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"Suppose you want to add a common tag to all the persons in the address book. You can type in the following command:"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003e\u003e `add tag/ t/acquaintance` +"},{"lineNumber":217,"author":{"gitId":"-"},"content":"****"},{"lineNumber":218,"author":{"gitId":"-"},"content":"image::AddTagCommand.png[width\u003d\"790\"]"},{"lineNumber":219,"author":{"gitId":"-"},"content":"_Figure 3.5.1 : AddTagCommand_"},{"lineNumber":220,"author":{"gitId":"-"},"content":"// end::addtag[]"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"Need a quick overview of what needs to be done? You can use the `list` command to quickly show all your contacts and tasks in the address book. +"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"`list` can be replaced by `l` for faster input. +"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"Format: `list` +"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"jeffreygohkw"},"content":"// tag::editprivacy[]"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"You can use the `edit` command to quickly fix mistakes in your entries, or add/remove details in your contacts. You may wish to edit your contacts when they change their phone numbers, for example. +"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"`edit` can be replaced by `e` for faster input. +"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":237,"author":{"gitId":"charlesgoh"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/REMARK] [v/AVATAR] [t/TAG]...` +"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"****"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the last listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":"* You must provide at least one field to edit for each command."},{"lineNumber":242,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":243,"author":{"gitId":"Esilocke"},"content":"* When editing tags, the existing tags of the person will be removed. This means that you cannot cumulatively add tags using multiple `edit` commands."},{"lineNumber":244,"author":{"gitId":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"* A private field will not be modified by the Edit command."},{"lineNumber":246,"author":{"gitId":"jeffreygohkw"},"content":"* An Edit command containing only private fields will result in a error message."},{"lineNumber":247,"author":{"gitId":"jeffreygohkw"},"content":"* An Edit command with both private and public fields will only modify the public fields."},{"lineNumber":248,"author":{"gitId":"-"},"content":"****"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"**Examples**:"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":252,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1** +"},{"lineNumber":253,"author":{"gitId":"Esilocke"},"content":"Your friend John Doe has changed his email. You decide to update his entry in Address++ to reflect this change."},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit 1 p/91234567 e/johndoe@example.com`"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2** +"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"Your friend Betsy is no longer taking part in the same project as you, and has changed her phone number to a new one"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"that you are not aware of. You decide to update her entry in Address++ accordingly."},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit 2 p/ t/`"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"// end::editprivacy[]"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":"// tag::edittask[]"},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Editing a person : `edit task/` (Since V1.2)"},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"You can use the `edit task/` command to quickly fix mistakes in your entries, or add/remove details in your tasks. You may wish to edit your tasks when their requirements change, for example. +"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"`edit` can be replaced by `e` for faster input. +"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":272,"author":{"gitId":"Esilocke"},"content":"Format: `edit task/ INDEX [n/NAME] [d/DESCRIPTION] [by/DEADLINE] [p/PRIORITY] [a/ADDRESS]` +"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":275,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the last listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":277,"author":{"gitId":"Esilocke"},"content":"* Existing values will be updated to the input values."},{"lineNumber":278,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":279,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1** +"},{"lineNumber":282,"author":{"gitId":"Esilocke"},"content":"You had previously added a task reminding you to write a 1500-word essay. However you receive notification that the word requirement"},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"is now 1800 words instead. You edit the task to reflect this change."},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit task/ 2 d/1800 words essay`"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2** +"},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":"One of your assignments has been pushed back and is no longer as urgent as before. You edit the task to reflect this change."},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit task/ 4 deadline/2 months later p/2`"},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":293,"author":{"gitId":"Esilocke"},"content":"// end::edittask[]"},{"lineNumber":294,"author":{"gitId":"Esilocke"},"content":"// tag::edittag[]"},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Renaming existing tags : `edit tag/` (Since v1.2)"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"Esilocke"},"content":"You can use `edit tag/` to rename one existing tag. For example, you may wish to promote all existing \"acquaintances\" into \"friends\", or change all \"CS2103\" project mates to \"CS2101\" project mates instead. +"},{"lineNumber":298,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":299,"author":{"gitId":"Esilocke"},"content":"`edit tag/` can be replaced by `et` for faster input. +"},{"lineNumber":300,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":301,"author":{"gitId":"Esilocke"},"content":"Format: `edit tag/ OLDTAGNAME NEWTAGNAME` +"},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":303,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"* The two tag names must be different."},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":"* This command will not work if none of your contacts have a tag with the `OLDTAGNAME` value."},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:**:"},{"lineNumber":309,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":310,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1** +"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"You have finished a project, and have become good friends with your project mates."},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"You decide to promote all your project mates into friends."},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit tag/ project friends`"},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"// end::edittag[]"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"jeffreygohkw"},"content":"// tag::changeprivacy[]"},{"lineNumber":319,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Changing the Privacy of a person\u0027s details : `changeprivacy`(Since V1.3)"},{"lineNumber":320,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":321,"author":{"gitId":"jeffreygohkw"},"content":"You can use the `changeprivacy` command to set the privacy settings for each field of an existing `Person` in the address book, which allows you to choose specifically what information will be displayed. +"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":323,"author":{"gitId":"jeffreygohkw"},"content":"`changeprivacy` can be replaced by `cp` for faster input. +"},{"lineNumber":324,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":325,"author":{"gitId":"charlesgoh"},"content":"Format: `changeprivacy INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/REMARK] [v/AVATAR]`"},{"lineNumber":326,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":327,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":328,"author":{"gitId":"jeffreygohkw"},"content":"* This command allows you to change the privacy settings for the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":329,"author":{"gitId":"jeffreygohkw"},"content":"* You must provide at least one of the optional fields."},{"lineNumber":330,"author":{"gitId":"jeffreygohkw"},"content":"* You can only provide `true` or `false` as inputs after each prefix."},{"lineNumber":331,"author":{"gitId":"jeffreygohkw"},"content":"* If you choose to input `false`, you will set the privacy of that field for that person to be public. The data in that field will be visible in the UI."},{"lineNumber":332,"author":{"gitId":"jeffreygohkw"},"content":"* If you choose to input `true`, you will set the privacy of that field for that person to be private. The data in that field cannot be modified and will not be visible in the UI."},{"lineNumber":333,"author":{"gitId":"jeffreygohkw"},"content":"* Fields that do not originally contain any data will still remain empty after changing their privacy."},{"lineNumber":334,"author":{"gitId":"jeffreygohkw"},"content":"* If you do not add a prefix for the field in the command, that field will keep its original privacy setting."},{"lineNumber":335,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":336,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":337,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenarios:**:"},{"lineNumber":338,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":339,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 1** +"},{"lineNumber":340,"author":{"gitId":"jeffreygohkw"},"content":"You are meeting some new groupmates for your upcoming project and you are not too comfortable with exposing your family\u0027s particulars. +"},{"lineNumber":341,"author":{"gitId":"jeffreygohkw"},"content":"You decide to hide your family\u0027s phone number, email and home address by setting them to private. +"},{"lineNumber":342,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `changeprivacy 1 p/true e/true a/true`"},{"lineNumber":343,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":344,"author":{"gitId":"jeffreygohkw"},"content":"// end::changeprivacy[]"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"jeffreygohkw"},"content":"// tag::privacylevel[]"},{"lineNumber":347,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Changing the Privacy Level of the address book : `privacylevel`(Since V1.5)"},{"lineNumber":348,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":349,"author":{"gitId":"jeffreygohkw"},"content":"Changing a person\u0027s privacy just to reveal their data or to make a person fully confidential may be time-consuming. If you would like to view all the data hidden by private fields easily, or completely hide a person with private fields, you can use this command to change the Privacy Level of the address book. +"},{"lineNumber":350,"author":{"gitId":"jeffreygohkw"},"content":"At level 1, all data, regardless of whether they are set to be private or public, can be viewed. +"},{"lineNumber":351,"author":{"gitId":"jeffreygohkw"},"content":"At level 2, private fields will have their data hidden by a string, such as `\u003cPrivate Phone\u003e`. +"},{"lineNumber":352,"author":{"gitId":"jeffreygohkw"},"content":"At level 3, any person containing at least one private field will be completely hidden in the address book. +"},{"lineNumber":353,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":354,"author":{"gitId":"jeffreygohkw"},"content":"`privacylevel` can be replaced by `pl` for faster input. +"},{"lineNumber":355,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":356,"author":{"gitId":"Esilocke"},"content":"Format: `privacylevel LEVEL`"},{"lineNumber":357,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":358,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":359,"author":{"gitId":"jeffreygohkw"},"content":"* Address++ always launches in privacy level 2."},{"lineNumber":360,"author":{"gitId":"jeffreygohkw"},"content":"* The `LEVEL` that you input can only contain the values 1, 2, or 3."},{"lineNumber":361,"author":{"gitId":"jeffreygohkw"},"content":"* This does not change the actual privacy setting of each field, thus, changing the privacy level to 1 does not make any of the private fields public."},{"lineNumber":362,"author":{"gitId":"jeffreygohkw"},"content":"** Thus, even if you have set the address book to be privacy level 1, you cannot edit a field that is set as private without setting it back to public."},{"lineNumber":363,"author":{"gitId":"jeffreygohkw"},"content":"** Similarly, since a person is completely hidden in privacy level 3, you will have to set the privacy level back to 2 or 1 to be able to modify that person."},{"lineNumber":364,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":365,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":366,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenarios:**:"},{"lineNumber":367,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":368,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 1** +"},{"lineNumber":369,"author":{"gitId":"jeffreygohkw"},"content":"You have an address book full of various contacts with private fields, however, now you need to access the email addresses of all your contacts to ask them for help in your upcoming survey. +"},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"You decide to use the privacylevel command to reveal all you contacts\u0027 hidden data."},{"lineNumber":371,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `privacylevel 1`"},{"lineNumber":372,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":373,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 2** +"},{"lineNumber":374,"author":{"gitId":"Esilocke"},"content":"You wish to completely hide some of your confidential contacts from view, but your address book is too large, and you do not want to have to individually set every field for every confidential person to be private. +"},{"lineNumber":375,"author":{"gitId":"jeffreygohkw"},"content":"Using the privacylevel command, you set each contact with any private field to be hidden in the address book. +"},{"lineNumber":376,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `privacylevel 3`"},{"lineNumber":377,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":378,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":379,"author":{"gitId":"jeffreygohkw"},"content":"// end::privacylevel[]"},{"lineNumber":380,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"// tag::favourite[]"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Favouriting persons : `favourite` (since V1.3)"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"You can use `favourite` command to make persons in the address book become your favourite contacts. For example, you may wish to set your girlfriend as your favourite contact. You will see a heart png next to your girlfriend\u0027s name"},{"lineNumber":386,"author":{"gitId":"-"},"content":"once you successfully set her as your favourite contact. +"},{"lineNumber":387,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":388,"author":{"gitId":"-"},"content":"`favourite` can be replaced by `fav` for faster input. +"},{"lineNumber":389,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"Format: `favourite INDEX [MORE INDEX]` +"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"****"},{"lineNumber":393,"author":{"gitId":"-"},"content":"**Things To Note**"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"* You can set a person to be the favourite person at the specified `INDEX`."},{"lineNumber":396,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":397,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":398,"author":{"gitId":"Esilocke"},"content":"* You will see a heart shape next to your favourite persons."},{"lineNumber":399,"author":{"gitId":"-"},"content":"****"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"Esilocke"},"content":"**Examples Scenario:** +"},{"lineNumber":402,"author":{"gitId":"-"},"content":"****"},{"lineNumber":403,"author":{"gitId":"-"},"content":"**Example Scenario 1:** +"},{"lineNumber":404,"author":{"gitId":"-"},"content":"Suppose you want to set the 2nd person in the address book to be your favourite contact. You should `list` all the persons first, then use `favourite` command to achieve it."},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":407,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `favourite 2` +"},{"lineNumber":408,"author":{"gitId":"-"},"content":"****"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"****"},{"lineNumber":411,"author":{"gitId":"-"},"content":"**Example Scenario 2:** +"},{"lineNumber":412,"author":{"gitId":"-"},"content":"Suppose you have `Betsy Brandt, Betsy Devos and Betsy Ross` in your address book. You want to set `Betsy Brandt` as your favourite contact."},{"lineNumber":413,"author":{"gitId":"-"},"content":"Instead of `listing` all the contacts, you can `find` all the `Besty` first, then `favourite` her."},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find Betsy` +"},{"lineNumber":416,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `favourite 1` +"},{"lineNumber":417,"author":{"gitId":"-"},"content":"****"},{"lineNumber":418,"author":{"gitId":"-"},"content":"image::FavouriteCommandBeforeAndAfter.png[width\u003d\"790\"]"},{"lineNumber":419,"author":{"gitId":"-"},"content":"_Figure 3.12.1 : FavouriteCommand_"},{"lineNumber":420,"author":{"gitId":"-"},"content":"// end::favourite[]"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"// tag::showfavourite[]"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Listing all favourite persons : `showfavourite` (since V1.3)"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"You can use the `showfavourite` command to quickly show all your favourite contacts in the address book. +"},{"lineNumber":427,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":428,"author":{"gitId":"Esilocke"},"content":"`showfavourite` can be replaced by `sfav` for faster input. +"},{"lineNumber":429,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"Format: `showfavourite` +"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"****"},{"lineNumber":433,"author":{"gitId":"-"},"content":"**Things To Note**"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"* `showfavourite` command: It will return an empty list if there is no favourite persons."},{"lineNumber":436,"author":{"gitId":"-"},"content":"****"},{"lineNumber":437,"author":{"gitId":"-"},"content":"image::ShowFavouriteCommand.png[width\u003d\"250\"]"},{"lineNumber":438,"author":{"gitId":"-"},"content":"_Figure 3.13.1 : ShowFavouriteCommand_"},{"lineNumber":439,"author":{"gitId":"-"},"content":"// end::showfavourite[]"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Locating persons by name : `find`"},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"Esilocke"},"content":"You can use the `find` command to quickly filter out contacts, or tasks who match your criteria. For example, you may wish to find all the tasks marked with the highest priority, or all your contacts who have a certain family name. +"},{"lineNumber":444,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":445,"author":{"gitId":"Esilocke"},"content":"`find` can be replaced by `f` for faster input. +"},{"lineNumber":446,"author":{"gitId":"Esilocke"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":447,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":448,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":449,"author":{"gitId":"Esilocke"},"content":"*Things To Note*"},{"lineNumber":450,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":451,"author":{"gitId":"Esilocke"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":452,"author":{"gitId":"Esilocke"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":453,"author":{"gitId":"Esilocke"},"content":"* Only the names will be searched"},{"lineNumber":454,"author":{"gitId":"Esilocke"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":455,"author":{"gitId":"Esilocke"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":456,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":457,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":458,"author":{"gitId":"Esilocke"},"content":"**Examples Scenario:** +"},{"lineNumber":459,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":460,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":461,"author":{"gitId":"Esilocke"},"content":"You would like to find all the people whose name contains the word \"David\". You first use `list` to show all your contacts,"},{"lineNumber":462,"author":{"gitId":"Esilocke"},"content":"then use `find` to find all the contacts named \"David\"."},{"lineNumber":463,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":464,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":465,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find David` +"},{"lineNumber":466,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":467,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"****"},{"lineNumber":469,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":470,"author":{"gitId":"Esilocke"},"content":"Additionally, you would also like to find people whose name contain the word \"David\" or \"Joe\"."},{"lineNumber":471,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":472,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":473,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find David Joe` +"},{"lineNumber":474,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":475,"author":{"gitId":"Esilocke"},"content":"// tag::findtask[]"},{"lineNumber":476,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Finding a task : `find task/` (Since V1.3)"},{"lineNumber":477,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":478,"author":{"gitId":"Esilocke"},"content":"You can use the `find task/` command to quickly find tasks that match your criteria, as well as tasks that have a certain level of urgency. +"},{"lineNumber":479,"author":{"gitId":"Esilocke"},"content":"Furthermore, you can choose to only retrieve tasks that are either complete, or still in progress. +"},{"lineNumber":480,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":481,"author":{"gitId":"Esilocke"},"content":"`find` can be replaced by `f` for faster input. +"},{"lineNumber":482,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":483,"author":{"gitId":"Esilocke"},"content":"Format: `find task/ KEYWORD [MORE_KEYWORDS] [p/PRIORITY] [done/STATE]` +"},{"lineNumber":484,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":485,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":486,"author":{"gitId":"Esilocke"},"content":"*Things To Note*"},{"lineNumber":487,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":489,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":490,"author":{"gitId":"Esilocke"},"content":"* Both the name and the description will be searched"},{"lineNumber":491,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":492,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":493,"author":{"gitId":"Esilocke"},"content":"* *You must include at least 1 search keyword*, in order to filter the results by their priority, and whether or not it is completed."},{"lineNumber":494,"author":{"gitId":"Esilocke"},"content":"* The `PRIORITY` must be an integer from 1 to 5, inclusive. If the priority search is included, all tasks that have a priority at least that of the specified priority will matced."},{"lineNumber":495,"author":{"gitId":"Esilocke"},"content":"* `STATE` must be either `true` or `false`. If it is `true`, you will only see tasks that have been marked as complete, and if it is `false, you will only see tasks that are not complete, in addition to all other search criteria."},{"lineNumber":496,"author":{"gitId":"-"},"content":"****"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"Esilocke"},"content":"**Examples Scenario:** +"},{"lineNumber":499,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":500,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":501,"author":{"gitId":"Esilocke"},"content":"You would like to find all the tasks related to \"Report\". You first use `list` to show all your tasks,"},{"lineNumber":502,"author":{"gitId":"Esilocke"},"content":"then use `find` to find all the tasks related to \"Report\"."},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":505,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find task/ report` +"},{"lineNumber":506,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":507,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":508,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":509,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":510,"author":{"gitId":"Esilocke"},"content":"Additionally, you would also like to find tasks that have a \"High\" or \"Highest\" priority."},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":513,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find task/ report p/4` +"},{"lineNumber":514,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":515,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":516,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":517,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":518,"author":{"gitId":"Esilocke"},"content":"Furthermore, as you have several tasks related to \"Report\" that are already complete, you only want to see the tasks that are still not done."},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":521,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find task/ report p/4 done/false` +"},{"lineNumber":522,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":523,"author":{"gitId":"Esilocke"},"content":"// end::findtask[]"},{"lineNumber":524,"author":{"gitId":"-"},"content":""},{"lineNumber":525,"author":{"gitId":"-"},"content":"// tag::showtag[]"},{"lineNumber":526,"author":{"gitId":"-"},"content":""},{"lineNumber":527,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Listing all tags : `showtag` (Since V1.5)"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"Esilocke"},"content":"You can use the `showtag` command to quickly show all tags in the address book. Sometimes you may forget `tags` that you have added a few weeks ago. You may use this command to help you. +"},{"lineNumber":530,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":531,"author":{"gitId":"-"},"content":"`showtag` can be replaced by `stag` for faster input. +"},{"lineNumber":532,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"Format: `showtag` +"},{"lineNumber":534,"author":{"gitId":"-"},"content":""},{"lineNumber":535,"author":{"gitId":"-"},"content":"****"},{"lineNumber":536,"author":{"gitId":"-"},"content":"**Things To Note**"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"* `showtag` command: It will return an empty list if there is no tags in the address book."},{"lineNumber":539,"author":{"gitId":"-"},"content":"* You may want to use `showtag` command to help you recall all the `tags` in the address book before you try to use `findtag` to find persons."},{"lineNumber":540,"author":{"gitId":"-"},"content":"****"},{"lineNumber":541,"author":{"gitId":"-"},"content":"// end::showtag[]"},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":"// tag::findtag[]"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Locating persons by tag : `find tag/` (Since V1.4)"},{"lineNumber":546,"author":{"gitId":"-"},"content":""},{"lineNumber":547,"author":{"gitId":"-"},"content":"You can use the `find tag/` command to quickly filter out contacts who match your criteria. For example, you may wish to find contacts who are your `classmates`. +"},{"lineNumber":548,"author":{"gitId":"-"},"content":"If you want to find contacts who are your `classmates` but not your `friends`, you just need to add `/` in front of the `friends`. +"},{"lineNumber":549,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":550,"author":{"gitId":"-"},"content":"`find tag/` can be replaced by `f tag/` for faster input. +"},{"lineNumber":551,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":552,"author":{"gitId":"-"},"content":"Format: `find tag/ KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":553,"author":{"gitId":"-"},"content":""},{"lineNumber":554,"author":{"gitId":"-"},"content":"****"},{"lineNumber":555,"author":{"gitId":"-"},"content":"**Things To Note** +"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"* The search is not case insensitive. e.g `friends` will match `FRIENDS`"},{"lineNumber":558,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `friends classmates` will match `classmates friends`"},{"lineNumber":559,"author":{"gitId":"-"},"content":"* Only the tag is searched for persons."},{"lineNumber":560,"author":{"gitId":"-"},"content":"* Only full words will be matched. e.g. `friend` will not match `friends`"},{"lineNumber":561,"author":{"gitId":"-"},"content":"* There is no space between `/` and tag name. e.g. `/ friends` will not match `/friends`."},{"lineNumber":562,"author":{"gitId":"-"},"content":"****"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":565,"author":{"gitId":"-"},"content":"****"},{"lineNumber":566,"author":{"gitId":"-"},"content":"**Example Scenario 1:** +"},{"lineNumber":567,"author":{"gitId":"-"},"content":"Suppose you want to find contatcs with tag `friends` or `colleagues`, you can just key in the following command."},{"lineNumber":568,"author":{"gitId":"-"},"content":""},{"lineNumber":569,"author":{"gitId":"-"},"content":"\u003e\u003e `find tag/ friends colleagues`"},{"lineNumber":570,"author":{"gitId":"-"},"content":"****"},{"lineNumber":571,"author":{"gitId":"-"},"content":""},{"lineNumber":572,"author":{"gitId":"-"},"content":"****"},{"lineNumber":573,"author":{"gitId":"-"},"content":"**Example Scenario 2:** +"},{"lineNumber":574,"author":{"gitId":"-"},"content":"Suppose you want to find contacts without tag `frineds`, you can key in the following command."},{"lineNumber":575,"author":{"gitId":"-"},"content":""},{"lineNumber":576,"author":{"gitId":"-"},"content":"\u003e\u003e `find tag/ /friends`"},{"lineNumber":577,"author":{"gitId":"-"},"content":"****"},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":"****"},{"lineNumber":580,"author":{"gitId":"-"},"content":"**Example Scenario 3:** +"},{"lineNumber":581,"author":{"gitId":"-"},"content":"Suppose you want to find contacts with tag `friends` but without `colleagues`, you can key in the following command."},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"\u003e\u003e `find tag/ friends /colleagues`"},{"lineNumber":584,"author":{"gitId":"-"},"content":"****"},{"lineNumber":585,"author":{"gitId":"-"},"content":"image::FindTagCommand.png[width\u003d\"790\"]"},{"lineNumber":586,"author":{"gitId":"-"},"content":"_Figure 3.17.1 : FindTagCommand_"},{"lineNumber":587,"author":{"gitId":"-"},"content":"// end::findtag[]"},{"lineNumber":588,"author":{"gitId":"-"},"content":""},{"lineNumber":589,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"Esilocke"},"content":"You can use the `delete` command to remove contacts from the address book. The `delete` command will help you clean up contacts who you may not wish to associate with anymore. +"},{"lineNumber":592,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":593,"author":{"gitId":"Esilocke"},"content":"`delete` can be replaced by `d` for faster input. +"},{"lineNumber":594,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":595,"author":{"gitId":"Esilocke"},"content":"Format: `delete INDEX` +"},{"lineNumber":596,"author":{"gitId":"-"},"content":""},{"lineNumber":597,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":598,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":599,"author":{"gitId":"-"},"content":""},{"lineNumber":600,"author":{"gitId":"Esilocke"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":601,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":602,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":603,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":604,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":605,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":606,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":607,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":608,"author":{"gitId":"Esilocke"},"content":"You wish to delete the first person from your contacts."},{"lineNumber":609,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":610,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete 1`"},{"lineNumber":611,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":612,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":613,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":614,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":615,"author":{"gitId":"Esilocke"},"content":"You wish to delete \"Maribel Edelweiss\" from your contacts. However you have many contacts, and are not sure where Maribel is."},{"lineNumber":616,"author":{"gitId":"Esilocke"},"content":"You thus use `find` to find contacts who are named \"Maribel\", then delete Maribel Edelweiss accordingly."},{"lineNumber":617,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":618,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find Maribel` +"},{"lineNumber":619,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete 3`"},{"lineNumber":620,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":621,"author":{"gitId":"Esilocke"},"content":"// tag::deletetask[]"},{"lineNumber":622,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Deleting a task : `delete task/` (Since V1.2)"},{"lineNumber":623,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":624,"author":{"gitId":"Esilocke"},"content":"You can use the `delete task/` command to remove tasks from the address book. The `delete task/` command will help you clean up obsolete or completed tasks. +"},{"lineNumber":625,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":626,"author":{"gitId":"Esilocke"},"content":"`delete task/` can be replaced by `d task/` for faster input. +"},{"lineNumber":627,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":628,"author":{"gitId":"Esilocke"},"content":"Format: `delete task/ INDEX` +"},{"lineNumber":629,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":630,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":631,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":632,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":633,"author":{"gitId":"Esilocke"},"content":"* Deletes the  task at the specified `INDEX`."},{"lineNumber":634,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent task listing."},{"lineNumber":635,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":636,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":637,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":638,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":639,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":640,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":641,"author":{"gitId":"Esilocke"},"content":"You wish to delete the first task."},{"lineNumber":642,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":643,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete task/ 1`"},{"lineNumber":644,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":645,"author":{"gitId":"-"},"content":""},{"lineNumber":646,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":647,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":648,"author":{"gitId":"Esilocke"},"content":"You wish to delete a task named \"1500-word Essay\". However you have many tasks, and are not sure where it is."},{"lineNumber":649,"author":{"gitId":"Esilocke"},"content":"You thus use `find task/` to find tasks related to \"Essays\", before using `delete task/` to delete \"1500-word Essay\" accordingly."},{"lineNumber":650,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":651,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `find task/ Essay` +"},{"lineNumber":652,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete task/ 3`"},{"lineNumber":653,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":654,"author":{"gitId":"Esilocke"},"content":"// end::deletetask[]"},{"lineNumber":655,"author":{"gitId":"-"},"content":"// tag::deletetag[]"},{"lineNumber":656,"author":{"gitId":"-"},"content":""},{"lineNumber":657,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Deleting a tag of persons : `delete tag/` (Since V1.2)"},{"lineNumber":658,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":659,"author":{"gitId":"Esilocke"},"content":"You can use `delete tag/` to delete the tag of multiple persons from the address book. +"},{"lineNumber":660,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":661,"author":{"gitId":"-"},"content":"`delete tag/` can be replaced by `d tag/` for faster input. +"},{"lineNumber":662,"author":{"gitId":"-"},"content":""},{"lineNumber":663,"author":{"gitId":"Esilocke"},"content":"Format: `delete tag/ INDEX... t/[TAG]` +"},{"lineNumber":664,"author":{"gitId":"-"},"content":""},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"****"},{"lineNumber":667,"author":{"gitId":"-"},"content":"**Things To Note** +"},{"lineNumber":668,"author":{"gitId":"-"},"content":""},{"lineNumber":669,"author":{"gitId":"-"},"content":"* You can delete the tag of the person at the specific `INDEX`."},{"lineNumber":670,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":671,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":672,"author":{"gitId":"Esilocke"},"content":"* If you do not key in any index, delete tag/ will delete the tag from all contacts in the address book."},{"lineNumber":673,"author":{"gitId":"-"},"content":"****"},{"lineNumber":674,"author":{"gitId":"-"},"content":""},{"lineNumber":675,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":676,"author":{"gitId":"-"},"content":"****"},{"lineNumber":677,"author":{"gitId":"-"},"content":"**Example Scenario 1:** +"},{"lineNumber":678,"author":{"gitId":"-"},"content":"Suppose you want to delete `classmates` tag for the first two persons in the address book, you can `list` all the persons first, then"},{"lineNumber":679,"author":{"gitId":"Esilocke"},"content":"use the `delete tag/` command to achieve."},{"lineNumber":680,"author":{"gitId":"-"},"content":""},{"lineNumber":681,"author":{"gitId":"-"},"content":"\u003e\u003e `list` +"},{"lineNumber":682,"author":{"gitId":"-"},"content":"\u003e\u003e `delete tag/ 1 2 t/friends` +"},{"lineNumber":683,"author":{"gitId":"-"},"content":"****"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"-"},"content":"****"},{"lineNumber":686,"author":{"gitId":"-"},"content":"**Example Scenario 2:** +"},{"lineNumber":687,"author":{"gitId":"-"},"content":"Suppose you want to delete `friends` tag from all contacts in the address book."},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"\u003e\u003e `list` +"},{"lineNumber":690,"author":{"gitId":"-"},"content":"\u003e\u003e `delete tag/ t/friends` +"},{"lineNumber":691,"author":{"gitId":"-"},"content":"****"},{"lineNumber":692,"author":{"gitId":"-"},"content":"image::DeleTagCommand.png[width\u003d\"790\"]"},{"lineNumber":693,"author":{"gitId":"-"},"content":"_Figure 3.20.1 : DeleteTagCommand_"},{"lineNumber":694,"author":{"gitId":"-"},"content":"// end::deletetag[]"},{"lineNumber":695,"author":{"gitId":"-"},"content":""},{"lineNumber":696,"author":{"gitId":"charlesgoh"},"content":"// tag::sort[]"},{"lineNumber":697,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Sorting your contact list and tasks : `sort` (Since V1.1)"},{"lineNumber":698,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":699,"author":{"gitId":"charlesgoh"},"content":"Sort your contacts or tasks by using the `sort` command +"},{"lineNumber":700,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":701,"author":{"gitId":"charlesgoh"},"content":"`sort` can be replaced with `so` for faster input. +"},{"lineNumber":702,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":703,"author":{"gitId":"charlesgoh"},"content":"Format: `sort LIST FIELD ORDER` +"},{"lineNumber":704,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":705,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":706,"author":{"gitId":"charlesgoh"},"content":"* Allows you to sort your contacts by any field in either ascending or descending order"},{"lineNumber":707,"author":{"gitId":"charlesgoh"},"content":"* Allows you to sort your tasks by deadline or by priority in ascending or descending order"},{"lineNumber":708,"author":{"gitId":"charlesgoh"},"content":"* Field parameters for person contacts: NAME, PHONE, EMAIL, ADDRESS, REMARK, AVATAR."},{"lineNumber":709,"author":{"gitId":"charlesgoh"},"content":"* Field parameters for tasks: DEADLINE, PRIORITY."},{"lineNumber":710,"author":{"gitId":"jeffreygohkw"},"content":"* Order parameters are limited to the following fields: ASC, DESC."},{"lineNumber":711,"author":{"gitId":"charlesgoh"},"content":"* You can undo this command if you want to revert to the pre-sort ordering of contacts"},{"lineNumber":712,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":713,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":714,"author":{"gitId":"charlesgoh"},"content":"**Example Scenarios**:"},{"lineNumber":715,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":716,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 1** +"},{"lineNumber":717,"author":{"gitId":"charlesgoh"},"content":"You have many contacts on Address++. You decide to make it neater by sorting your contacts"},{"lineNumber":718,"author":{"gitId":"charlesgoh"},"content":"by name in ascending order:"},{"lineNumber":719,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":720,"author":{"gitId":"charlesgoh"},"content":"\u003e\u003e `sort person name asc`"},{"lineNumber":721,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":722,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":723,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 2** +"},{"lineNumber":724,"author":{"gitId":"charlesgoh"},"content":"You add a few tasks of different priorities. You decide to sort the tasks so you can see"},{"lineNumber":725,"author":{"gitId":"charlesgoh"},"content":"the higher priority tasks on the top of the list:"},{"lineNumber":726,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":727,"author":{"gitId":"charlesgoh"},"content":"\u003e\u003e `sort task priority desc`"},{"lineNumber":728,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":729,"author":{"gitId":"charlesgoh"},"content":"//end::sort[]"},{"lineNumber":730,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":731,"author":{"gitId":"charlesgoh"},"content":"//tag::backup[]"},{"lineNumber":732,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Backing up your data : `backup` (Since V1.2)"},{"lineNumber":733,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":734,"author":{"gitId":"charlesgoh"},"content":"You can backup your saved data on Address++ by using the `backup` command. +"},{"lineNumber":735,"author":{"gitId":"-"},"content":""},{"lineNumber":736,"author":{"gitId":"charlesgoh"},"content":"Format: `backup [FILENAME]` +"},{"lineNumber":737,"author":{"gitId":"charlesgoh"},"content":"`backup` can be replaced with `bk` for faster input. +"},{"lineNumber":738,"author":{"gitId":"-"},"content":""},{"lineNumber":739,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":740,"author":{"gitId":"charlesgoh"},"content":"This allows you to backup your saved data on Address++ in another file."},{"lineNumber":741,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":742,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":743,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario**: +"},{"lineNumber":744,"author":{"gitId":"charlesgoh"},"content":"You decide to backup your data just in case you accidentally make changes that"},{"lineNumber":745,"author":{"gitId":"charlesgoh"},"content":"cannot be undone. You type the following code:"},{"lineNumber":746,"author":{"gitId":"-"},"content":""},{"lineNumber":747,"author":{"gitId":"charlesgoh"},"content":"`backup filename.xml`"},{"lineNumber":748,"author":{"gitId":"-"},"content":""},{"lineNumber":749,"author":{"gitId":"charlesgoh"},"content":"The file will then be saved in the same directory location as your `JAR` application file"},{"lineNumber":750,"author":{"gitId":"-"},"content":"****"},{"lineNumber":751,"author":{"gitId":"charlesgoh"},"content":"//end::backup[]"},{"lineNumber":752,"author":{"gitId":"charlesgoh"},"content":"//tag::password[]"},{"lineNumber":753,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":754,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Protecting your data : `lock` `unlock` (Since V1.5)"},{"lineNumber":755,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":756,"author":{"gitId":"charlesgoh"},"content":"Worried about security? Address++ allows your to protect your data with a password."},{"lineNumber":757,"author":{"gitId":"charlesgoh"},"content":"Using the `lock` and `unlock` commands, you can toggle between security modes. +"},{"lineNumber":758,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":759,"author":{"gitId":"charlesgoh"},"content":"Locked address books only allow viewing of data. If anyone attempts to tamper with"},{"lineNumber":760,"author":{"gitId":"charlesgoh"},"content":"your data, they will be greeted with this error:"},{"lineNumber":761,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":762,"author":{"gitId":"charlesgoh"},"content":"image::LockedRestriction.png[width\u003d\"800\"]"},{"lineNumber":763,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":764,"author":{"gitId":"charlesgoh"},"content":"Format for `lock` Command: `lock pw/[PASSWORD]` +"},{"lineNumber":765,"author":{"gitId":"charlesgoh"},"content":"`lock` can be replaced with `lk` for faster input. +"},{"lineNumber":766,"author":{"gitId":"charlesgoh"},"content":"Format for `unlock` Command: `unlock pw/[PASSWORD]` +"},{"lineNumber":767,"author":{"gitId":"charlesgoh"},"content":"`unlock` can be replaced with `ul` for faster input. +"},{"lineNumber":768,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":769,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":770,"author":{"gitId":"Esilocke"},"content":"The default password is `password`"},{"lineNumber":771,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":772,"author":{"gitId":"charlesgoh"},"content":"**Example Scenarios**:"},{"lineNumber":773,"author":{"gitId":"-"},"content":"****"},{"lineNumber":774,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 1** +"},{"lineNumber":775,"author":{"gitId":"charlesgoh"},"content":"You have just finished editing your contacts on Address++ and you decide to have a break away from"},{"lineNumber":776,"author":{"gitId":"charlesgoh"},"content":"your computer. You decide to lock Address++ using the following command:"},{"lineNumber":777,"author":{"gitId":"-"},"content":""},{"lineNumber":778,"author":{"gitId":"charlesgoh"},"content":"\u003e\u003e `lock pw/password`"},{"lineNumber":779,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":780,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":781,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 2** +"},{"lineNumber":782,"author":{"gitId":"charlesgoh"},"content":"When you return to your computer, you decide to continue adding contacts in Address++."},{"lineNumber":783,"author":{"gitId":"charlesgoh"},"content":"To unlock the Address++ application, you use the following command:"},{"lineNumber":784,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":785,"author":{"gitId":"charlesgoh"},"content":"\u003e\u003e `unlock pw/password`"},{"lineNumber":786,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":787,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":788,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Changing your password : `changepassword` (Since V1.5)"},{"lineNumber":789,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":790,"author":{"gitId":"charlesgoh"},"content":"Want to choose a better password? The `changepassword` command allows you to change your"},{"lineNumber":791,"author":{"gitId":"charlesgoh"},"content":"password whenever you want, provided you know the old password."},{"lineNumber":792,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":793,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":794,"author":{"gitId":"charlesgoh"},"content":"The default password is \u0027password\u0027"},{"lineNumber":795,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":796,"author":{"gitId":"charlesgoh"},"content":"image::ChangePasswordImages.png[width\u003d\"800\"]"},{"lineNumber":797,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":798,"author":{"gitId":"charlesgoh"},"content":"Format: `changepassword pw/[PASSWORD] np/[NEWPASSWORD] cfp/[CONFIRMPASSWORD]` +"},{"lineNumber":799,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":800,"author":{"gitId":"charlesgoh"},"content":"**`changepassword` can be replaced with `cpw` for faster input.** +"},{"lineNumber":801,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":802,"author":{"gitId":"charlesgoh"},"content":"**Example Scenarios**:"},{"lineNumber":803,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":804,"author":{"gitId":"charlesgoh"},"content":"**Example Scenario 1** +"},{"lineNumber":805,"author":{"gitId":"charlesgoh"},"content":"You open Address++ for the first time. After reading the user guide, you realize"},{"lineNumber":806,"author":{"gitId":"charlesgoh"},"content":"that the default password (\"password\") is not good enough. You decide to make a new"},{"lineNumber":807,"author":{"gitId":"charlesgoh"},"content":"one with the following command:"},{"lineNumber":808,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":809,"author":{"gitId":"charlesgoh"},"content":"\u003e\u003e `changepassword pw/password np/newpassword cfp/newpassword`"},{"lineNumber":810,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":811,"author":{"gitId":"charlesgoh"},"content":"//end::password[]"},{"lineNumber":812,"author":{"gitId":"-"},"content":""},{"lineNumber":813,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":814,"author":{"gitId":"-"},"content":""},{"lineNumber":815,"author":{"gitId":"Esilocke"},"content":"You can use `select` to pick out one contact, and look at it in greater detail. +"},{"lineNumber":816,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":817,"author":{"gitId":"Esilocke"},"content":"`select` can be replaced by `s` for faster input. +"},{"lineNumber":818,"author":{"gitId":"-"},"content":""},{"lineNumber":819,"author":{"gitId":"Esilocke"},"content":"Format: `select INDEX` +"},{"lineNumber":820,"author":{"gitId":"-"},"content":""},{"lineNumber":821,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":822,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":823,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":824,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":825,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":826,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":827,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":828,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":829,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":830,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":831,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":832,"author":{"gitId":"Esilocke"},"content":"The first person in your contacts has a very long address, and you want to see if it is correct."},{"lineNumber":833,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":834,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":835,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `select 1` +"},{"lineNumber":836,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":837,"author":{"gitId":"Esilocke"},"content":"// tag::selecttask[]"},{"lineNumber":838,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Selecting a task : `select task/` (Since V1.4)"},{"lineNumber":839,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":840,"author":{"gitId":"Esilocke"},"content":"You can use `select task/` to pick out a task, and look at it in greater detail. +"},{"lineNumber":841,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":842,"author":{"gitId":"Esilocke"},"content":"`select` can be replaced by `s` for faster input. +"},{"lineNumber":843,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":844,"author":{"gitId":"Esilocke"},"content":"Format: `select task/ INDEX` +"},{"lineNumber":845,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":846,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":847,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":848,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":849,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":850,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":851,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":852,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":853,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":854,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":855,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":856,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":857,"author":{"gitId":"Esilocke"},"content":"The first task has a very long description, and you want to see it in full."},{"lineNumber":858,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":859,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `list` +"},{"lineNumber":860,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `select task/ 1` +"},{"lineNumber":861,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":862,"author":{"gitId":"Esilocke"},"content":"// end::selecttask[]"},{"lineNumber":863,"author":{"gitId":"jeffreygohkw"},"content":"// tag::locate[]"},{"lineNumber":864,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Locating a person\u0027s address : `locate` (Since V1.4)"},{"lineNumber":865,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":866,"author":{"gitId":"jeffreygohkw"},"content":"If you ever need to visit one of your contacts, you can use `locate` to choose a contact, and search for their address online using Google Maps. +"},{"lineNumber":867,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":868,"author":{"gitId":"jeffreygohkw"},"content":"`locate` can be replaced by `loc` for faster input. +"},{"lineNumber":869,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":870,"author":{"gitId":"jeffreygohkw"},"content":"Format (person): `locate INDEX` +"},{"lineNumber":871,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":872,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenarios:** +"},{"lineNumber":873,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":874,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 1:** +"},{"lineNumber":875,"author":{"gitId":"jeffreygohkw"},"content":"You wish to know where the second person in your address book lives. +"},{"lineNumber":876,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `list` +"},{"lineNumber":877,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `locate 2` +"},{"lineNumber":878,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":879,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 2:** +"},{"lineNumber":880,"author":{"gitId":"jeffreygohkw"},"content":"You wish to know where a specific person in your address book, Betsy, lives. +"},{"lineNumber":881,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `find Betsy` +"},{"lineNumber":882,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `locate 1` +"},{"lineNumber":883,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":884,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":885,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":886,"author":{"gitId":"jeffreygohkw"},"content":"* Depending on the stored value of the address, Google Maps may be unable to find the correct address or may display multiple addresses of the same name. +"},{"lineNumber":887,"author":{"gitId":"jeffreygohkw"},"content":"** It is up to you to provide specific and valid addresses."},{"lineNumber":888,"author":{"gitId":"jeffreygohkw"},"content":"* A person with a private address cannot be searched on Google Maps."},{"lineNumber":889,"author":{"gitId":"jeffreygohkw"},"content":"* A person with no address will open Google Maps, but it will not search for an address as there is no address to search for."},{"lineNumber":890,"author":{"gitId":"jeffreygohkw"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":891,"author":{"gitId":"jeffreygohkw"},"content":"* The index *must be a positive integer* `1, 2, 3, ...` and must be within the range of people in the most recent listing."},{"lineNumber":892,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":893,"author":{"gitId":"jeffreygohkw"},"content":"// end::locate[]"},{"lineNumber":894,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":895,"author":{"gitId":"jeffreygohkw"},"content":"// tag::navigate[]"},{"lineNumber":896,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Navigating from one address to another : `navigate` (Since V1.5)"},{"lineNumber":897,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":898,"author":{"gitId":"jeffreygohkw"},"content":"Although `locate` shows you where a person\u0027s address is, it does not tell you how to get there. The `navigate` command will provide directions, with the help of Google Maps, on how to get from one address to another. +"},{"lineNumber":899,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":900,"author":{"gitId":"jeffreygohkw"},"content":"`navigate` can be replaced by `nav` for faster input. +"},{"lineNumber":901,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":902,"author":{"gitId":"jeffreygohkw"},"content":"Format (person): `navigate [fp/INDEX] [ft/INDEX] [fa/ADDRESS] (Must have only one of three) [tp/INDEX] [tt/INDEX] [ta/ADDRESS] (Must have only one of three)` +"},{"lineNumber":903,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":904,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":905,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenarios:** +"},{"lineNumber":906,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":907,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 1:** +"},{"lineNumber":908,"author":{"gitId":"Esilocke"},"content":"You are planning to go to your friend Roy\u0027s house for their birthday party that afternoon, but you have just ended class at NUS. +"},{"lineNumber":909,"author":{"gitId":"Esilocke"},"content":"You have never been to their house before, and you enlist the aid of Address++ to find the fastest route to their house. +"},{"lineNumber":910,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `find Roy` +"},{"lineNumber":911,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `navigate fa/NUS tp/1`"},{"lineNumber":912,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":913,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 2:** +"},{"lineNumber":914,"author":{"gitId":"jeffreygohkw"},"content":"After the birthday party, you have a group meeting scheduled for your project. You have this meeting schedules as your first task, and you seek help from Address++ to find a path from Roy\u0027s house to the group meeting. +"},{"lineNumber":915,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `navigate fp/1 tt/1`"},{"lineNumber":916,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":917,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 3:** +"},{"lineNumber":918,"author":{"gitId":"jeffreygohkw"},"content":"To conclude your long and busy day, you have to send off your sister at Changi Airport, who is going off on an exchange programme. +"},{"lineNumber":919,"author":{"gitId":"jeffreygohkw"},"content":"Using the navigate command once again, you find an efficient route from the location of your group meeting to the airport. +"},{"lineNumber":920,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `navigate ft/1 ta/Changi Airport`"},{"lineNumber":921,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":922,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":923,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":924,"author":{"gitId":"jeffreygohkw"},"content":"* Depending on the stored value of the address, Google Maps may be unable to find the correct address or may display multiple addresses of the same name. +"},{"lineNumber":925,"author":{"gitId":"jeffreygohkw"},"content":"** It is up to you to provide specific and valid addresses."},{"lineNumber":926,"author":{"gitId":"jeffreygohkw"},"content":"* A person with a private address or a person with no address cannot be navigated from or navigated to."},{"lineNumber":927,"author":{"gitId":"jeffreygohkw"},"content":"* A task with no address cannot be navigated from or navigated to."},{"lineNumber":928,"author":{"gitId":"jeffreygohkw"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":929,"author":{"gitId":"jeffreygohkw"},"content":"* The index *must be a positive integer* `1, 2, 3, ...` and must be within the range of people in the most recent listing."},{"lineNumber":930,"author":{"gitId":"jeffreygohkw"},"content":"* You may only input exactly one of the 3 prefixes from `fp/` `ft/` and `fa/` to indicate the address to navigate from, and exactly one of the 3 prefixes from `tp/` `tt/` and `ta/` to indicate the address to navigate to."},{"lineNumber":931,"author":{"gitId":"jeffreygohkw"},"content":"** If you input any less or any more than 1 of the 3 prefixes from each group, the command will fail."},{"lineNumber":932,"author":{"gitId":"jeffreygohkw"},"content":"** There is no need to match the type of prefixes. You can navigate with any combination of prefixes as long as there is only one prefix to indicate the address to navigate from and only one prefix to indicate the address to navigate to."},{"lineNumber":933,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":934,"author":{"gitId":"jeffreygohkw"},"content":"// end::navigate[]"},{"lineNumber":935,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":936,"author":{"gitId":"Esilocke"},"content":"// tag::setstate[]"},{"lineNumber":937,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Marking tasks as complete : `setcomplete` (Since V1.5)"},{"lineNumber":938,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":939,"author":{"gitId":"Esilocke"},"content":"Have you finally completed a task in the address book? You can use `setcomplete` to mark the specified task as complete. +"},{"lineNumber":940,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":941,"author":{"gitId":"Esilocke"},"content":"`setcomplete` can be replaced by `stc` for faster input. +"},{"lineNumber":942,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":943,"author":{"gitId":"-"},"content":"Format: `setcomplete INDEX` +"},{"lineNumber":944,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":945,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":946,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":947,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":948,"author":{"gitId":"Esilocke"},"content":"* Marks the task at the specified `INDEX` as completed."},{"lineNumber":949,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":950,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":951,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":952,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":953,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":954,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":955,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":956,"author":{"gitId":"Esilocke"},"content":"You have finally completed a task that involves writing a 1500-word essay."},{"lineNumber":957,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":958,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e\u003e `setcomplete 6` +"},{"lineNumber":959,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":960,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":961,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Marking tasks as incomplete : `setincomplete` (Since V1.5)"},{"lineNumber":962,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":963,"author":{"gitId":"Esilocke"},"content":"Did you accidentally mark a task as completed? You can use `setincomplete` to mark the specified task as incomplete. +"},{"lineNumber":964,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":965,"author":{"gitId":"Esilocke"},"content":"`setincomplete` can be replaced by `sti` for faster input. +"},{"lineNumber":966,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":967,"author":{"gitId":"-"},"content":"Format: `setincomplete INDEX` +"},{"lineNumber":968,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":969,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":970,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":971,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":972,"author":{"gitId":"Esilocke"},"content":"* Marks the task at the specified `INDEX` as incomplete."},{"lineNumber":973,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":974,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":975,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":976,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":977,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":978,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":979,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":980,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":981,"author":{"gitId":"Esilocke"},"content":"You realised that you had marked a task as complete, even though it is still in progress."},{"lineNumber":982,"author":{"gitId":"Esilocke"},"content":"Furthermore you are not sure when you had marked it as complete. However, you are still able to safely mark the task as being"},{"lineNumber":983,"author":{"gitId":"Esilocke"},"content":"in progress."},{"lineNumber":984,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":985,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `setincomplete 7`"},{"lineNumber":986,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":987,"author":{"gitId":"Esilocke"},"content":"// end::setstate[]"},{"lineNumber":988,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":989,"author":{"gitId":"Esilocke"},"content":"// tag::assignDismiss[]"},{"lineNumber":990,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Assigning contacts to task : `assign` (Since V1.4)"},{"lineNumber":991,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":992,"author":{"gitId":"Esilocke"},"content":"You can use `assign` to assign contacts to an ongoing task. You may wish to use `assign` when collaborating with others for projects, for example. +"},{"lineNumber":993,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":994,"author":{"gitId":"Esilocke"},"content":"`assign` can be replaced by `as` for faster input. +"},{"lineNumber":995,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":996,"author":{"gitId":"Esilocke"},"content":"Format: `assign PEOPLEINDEX... to/TASKINDEX` +"},{"lineNumber":997,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":998,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":999,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":1000,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1001,"author":{"gitId":"Esilocke"},"content":"* The PEOPLEINDEX refers to the index numbers shown in the most recent *person* listing."},{"lineNumber":1002,"author":{"gitId":"Esilocke"},"content":"* The TASKINDEX refers to the index number shown in the most recent *task* listing."},{"lineNumber":1003,"author":{"gitId":"Esilocke"},"content":"* At least 1 or more PEOPLEINDEX must be present in the command."},{"lineNumber":1004,"author":{"gitId":"Esilocke"},"content":"* PERSONINDEX and TASKINDEX *must be positive integers* 1, 2, 3, ..."},{"lineNumber":1005,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1006,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1007,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1008,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1009,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":1010,"author":{"gitId":"Esilocke"},"content":"You have created a new task to complete a paper model. However you are unable to do it by yourself, and require the help of some of your friends."},{"lineNumber":1011,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1012,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `assign 1 5 7 to/5`"},{"lineNumber":1013,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1014,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1015,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Dismissing contacts from task : `dismiss` (Since V1.4)"},{"lineNumber":1016,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1017,"author":{"gitId":"charlesgoh"},"content":"You can use `dismiss` to remove assignment from tasks. You may wish to use `dismiss` when a contact is no longer in charge of a task, for example. +"},{"lineNumber":1018,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1019,"author":{"gitId":"Esilocke"},"content":"`dismiss` can be replaced by `ds` for faster input. +"},{"lineNumber":1020,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1021,"author":{"gitId":"Esilocke"},"content":"Format: `dismiss PEOPLEINDEX... from/TASKINDEX` +"},{"lineNumber":1022,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1023,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1024,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":1025,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1026,"author":{"gitId":"Esilocke"},"content":"* The PEOPLEINDEX refers to the index numbers shown in the most recent *person* listing."},{"lineNumber":1027,"author":{"gitId":"Esilocke"},"content":"* The TASKINDEX refers to the index number shown in the most recent *task* listing."},{"lineNumber":1028,"author":{"gitId":"Esilocke"},"content":"* At least 1 or more PEOPLEINDEX must be present in the command."},{"lineNumber":1029,"author":{"gitId":"Esilocke"},"content":"* PERSONINDEX and TASKINDEX *must be positive integers* 1, 2, 3, ..."},{"lineNumber":1030,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1031,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1032,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1033,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1034,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1035,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":1036,"author":{"gitId":"Esilocke"},"content":"One of the tasks that you had created previously with many people assigned turned out to be easier than expected."},{"lineNumber":1037,"author":{"gitId":"Esilocke"},"content":"You believe that this task could do with less manpower and would like to remove some of the previously assigned contacts from this task."},{"lineNumber":1038,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1039,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `dismiss 1 5 7 from/5`"},{"lineNumber":1040,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1041,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1042,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Viewing contacts assigned to a task : `viewassign` (Since V1.5)"},{"lineNumber":1043,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1044,"author":{"gitId":"Esilocke"},"content":"You can use `viewassign` to see who is assigned to a particular task. You may wish to use `viewassign` when you want to contact only the people who are assigned to a particular task, for example. +"},{"lineNumber":1045,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1046,"author":{"gitId":"Esilocke"},"content":"`viewassign` can be replaced by `va` for faster input. +"},{"lineNumber":1047,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1048,"author":{"gitId":"Esilocke"},"content":"Format: `viewassign INDEX` +"},{"lineNumber":1049,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1050,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1051,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":1052,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1053,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":1054,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":1055,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1056,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1057,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1058,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1059,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1060,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":1061,"author":{"gitId":"Esilocke"},"content":"2 weeks after assigning some of your contacts to a particular task, you decide to obtain a status report about their current progress. +"},{"lineNumber":1062,"author":{"gitId":"Esilocke"},"content":"However you have forgotten who you have assigned to that task. You thus use `viewassign` to see who is assigned to that task."},{"lineNumber":1063,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1064,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `viewassign 4`"},{"lineNumber":1065,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1066,"author":{"gitId":"Esilocke"},"content":"// end::assignDismiss[]"},{"lineNumber":1067,"author":{"gitId":"-"},"content":""},{"lineNumber":1068,"author":{"gitId":"jeffreygohkw"},"content":"// tag::theme[]"},{"lineNumber":1069,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Changing the Address Book\u0027s theme : `theme` (Since V1.5)"},{"lineNumber":1070,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1071,"author":{"gitId":"jeffreygohkw"},"content":"Perhaps you may not be too fond of the existing style of the address book and you want to have something fresh. The `theme` command changes the address book between two themes, `light` and `dark`."},{"lineNumber":1072,"author":{"gitId":"jeffreygohkw"},"content":"[NOTE]"},{"lineNumber":1073,"author":{"gitId":"jeffreygohkw"},"content":"`theme` can be replaced by `th` for faster input. +"},{"lineNumber":1074,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1075,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenarios:** +"},{"lineNumber":1076,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1077,"author":{"gitId":"jeffreygohkw"},"content":"**Example Scenario 1:** +"},{"lineNumber":1078,"author":{"gitId":"jeffreygohkw"},"content":"It is late at night and the light theme is a little too brightly coloured. Preferring a darker theme, you can choose to input the theme command to make the theme into a darker colour. +"},{"lineNumber":1079,"author":{"gitId":"jeffreygohkw"},"content":"\u003e\u003e `theme dark`"},{"lineNumber":1080,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1081,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1082,"author":{"gitId":"jeffreygohkw"},"content":"Format: `theme` + THEME"},{"lineNumber":1083,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1084,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1085,"author":{"gitId":"jeffreygohkw"},"content":"* There are only two themes as of v1.5, light and dark. More themes of different colours could be added in a future release."},{"lineNumber":1086,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1087,"author":{"gitId":"jeffreygohkw"},"content":"// end::theme[]"},{"lineNumber":1088,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1089,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":1090,"author":{"gitId":"-"},"content":""},{"lineNumber":1091,"author":{"gitId":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":1092,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"`history` can be replaced by `h` for faster input. +"},{"lineNumber":1094,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1095,"author":{"gitId":"-"},"content":"Format: `history` +"},{"lineNumber":1096,"author":{"gitId":"-"},"content":""},{"lineNumber":1097,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1098,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":1099,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1100,"author":{"gitId":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":1101,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1102,"author":{"gitId":"-"},"content":""},{"lineNumber":1103,"author":{"gitId":"Esilocke"},"content":"// tag::undo[]"},{"lineNumber":1104,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":1105,"author":{"gitId":"-"},"content":""},{"lineNumber":1106,"author":{"gitId":"Esilocke"},"content":"Did you make a mistake somewhere? `undo` restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":1107,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1108,"author":{"gitId":"Esilocke"},"content":"`undo` can be replaced by `u` for faster input. +"},{"lineNumber":1109,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1110,"author":{"gitId":"-"},"content":"Format: `undo` +"},{"lineNumber":1111,"author":{"gitId":"-"},"content":""},{"lineNumber":1112,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1113,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":1114,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1115,"author":{"gitId":"Esilocke"},"content":"Undoable commands: Commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":1116,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1117,"author":{"gitId":"-"},"content":""},{"lineNumber":1118,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1119,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1120,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":1121,"author":{"gitId":"Esilocke"},"content":"You have accidentally deleted one of your contacts."},{"lineNumber":1122,"author":{"gitId":"-"},"content":""},{"lineNumber":1123,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete 1` +"},{"lineNumber":1124,"author":{"gitId":"-"},"content":""},{"lineNumber":1125,"author":{"gitId":"Esilocke"},"content":"You realise this immediately and undo your mistake."},{"lineNumber":1126,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1127,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo`"},{"lineNumber":1128,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1129,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1130,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1131,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":1132,"author":{"gitId":"Esilocke"},"content":"You have accidentally deleted one of your contacts. Furthermore, not knowing this, you made a mistake when editing another person\u0027s name."},{"lineNumber":1133,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1134,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete 1` +"},{"lineNumber":1135,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit 5 n/Clarisa Liselote`"},{"lineNumber":1136,"author":{"gitId":"-"},"content":""},{"lineNumber":1137,"author":{"gitId":"Esilocke"},"content":"You realise that something is amiss, and find out that you made not one, but two mistakes. Nevertheless you still manage to recover your contact by using multiple `undo` commands."},{"lineNumber":1138,"author":{"gitId":"-"},"content":""},{"lineNumber":1139,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo` +"},{"lineNumber":1140,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo` +"},{"lineNumber":1141,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1142,"author":{"gitId":"Esilocke"},"content":"Finally, you edit Clarissa\u0027s name correctly."},{"lineNumber":1143,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1144,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `edit 5 n/Clarissa Liselotte`"},{"lineNumber":1145,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1146,"author":{"gitId":"Esilocke"},"content":"// end::undo[]"},{"lineNumber":1147,"author":{"gitId":"-"},"content":""},{"lineNumber":1148,"author":{"gitId":"-"},"content":"// tag::unfavourite[]"},{"lineNumber":1149,"author":{"gitId":"-"},"content":""},{"lineNumber":1150,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Unfavouriting persons : `unfavourite` (since V1.3)"},{"lineNumber":1151,"author":{"gitId":"-"},"content":""},{"lineNumber":1152,"author":{"gitId":"-"},"content":"You can use `unfavourite` command to set your previous favourite persons become the normal persons. For example, +"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"after you break up with your girlfriend, you may wish to set your girlfriend back to normal person. +"},{"lineNumber":1154,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1155,"author":{"gitId":"-"},"content":"`unfavourite` can be replaced by `unfav` for faster input. +"},{"lineNumber":1156,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1157,"author":{"gitId":"-"},"content":"Format: `unfavourite INDEX [MORE INDEX]` +"},{"lineNumber":1158,"author":{"gitId":"-"},"content":""},{"lineNumber":1159,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"**Things To Note** +"},{"lineNumber":1161,"author":{"gitId":"-"},"content":""},{"lineNumber":1162,"author":{"gitId":"-"},"content":"* You can unfavourites the person at the specified `INDEX`."},{"lineNumber":1163,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":1164,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":1165,"author":{"gitId":"-"},"content":"* The heart png will disappear once you `unfavourite` the person."},{"lineNumber":1166,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1167,"author":{"gitId":"-"},"content":""},{"lineNumber":1168,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1169,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1170,"author":{"gitId":"-"},"content":"**Example Scenario 1:** +"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"Suppose you do not want to the 2nd person in the address book to be your favourite contact anymore, you should `list` all the persons first, then use `unfavourite` command to achieve it."},{"lineNumber":1172,"author":{"gitId":"-"},"content":""},{"lineNumber":1173,"author":{"gitId":"-"},"content":"\u003e\u003e `list` +"},{"lineNumber":1174,"author":{"gitId":"-"},"content":"\u003e\u003e `unfavourite 2` +"},{"lineNumber":1175,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1176,"author":{"gitId":"-"},"content":""},{"lineNumber":1177,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1178,"author":{"gitId":"-"},"content":"**Example Scenario 2:** +"},{"lineNumber":1179,"author":{"gitId":"-"},"content":"Suppose you have `Betsy Brandt, Betsy Devos and Betsy Ross` in your address book. You want to `unfavourite` `Betsy Brandt` in the address book."},{"lineNumber":1180,"author":{"gitId":"-"},"content":"Instead of `listing` all the contacts, you can `find` all the `Besty` first, then `unfavourite` `Betsy Brandt`."},{"lineNumber":1181,"author":{"gitId":"-"},"content":""},{"lineNumber":1182,"author":{"gitId":"-"},"content":"\u003e\u003e `find Betsy` +"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"\u003e\u003e `unfavourite 1` +"},{"lineNumber":1184,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1185,"author":{"gitId":"-"},"content":"image::UnfavouriteCommand.png[width\u003d\"790\"]"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"_Figure 3.37.1 : UnfavouriteCommand_"},{"lineNumber":1187,"author":{"gitId":"-"},"content":"// end::unfavourite[]"},{"lineNumber":1188,"author":{"gitId":"-"},"content":""},{"lineNumber":1189,"author":{"gitId":"Esilocke"},"content":"// tag::redo[]"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":1191,"author":{"gitId":"-"},"content":""},{"lineNumber":1192,"author":{"gitId":"Esilocke"},"content":"Perhaps an `undo` was not necessary. `redo` reverses the most recent `undo` command. +"},{"lineNumber":1193,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1194,"author":{"gitId":"Esilocke"},"content":"`redo` can be replaced by `r` for faster input. +"},{"lineNumber":1195,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1196,"author":{"gitId":"-"},"content":"Format: `redo` +"},{"lineNumber":1197,"author":{"gitId":"-"},"content":""},{"lineNumber":1198,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1199,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1200,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":1201,"author":{"gitId":"Esilocke"},"content":"You have deleted one of your contacts."},{"lineNumber":1202,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1203,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete 1` +"},{"lineNumber":1204,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1205,"author":{"gitId":"Esilocke"},"content":"You think that you made a mistake, and undo your mistake."},{"lineNumber":1206,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1207,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo`"},{"lineNumber":1208,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1209,"author":{"gitId":"Esilocke"},"content":"However you realise that you have deleted the correct person. Instead of typing `delete 1`, you choose to `redo` your command instead."},{"lineNumber":1210,"author":{"gitId":"-"},"content":""},{"lineNumber":1211,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `redo`"},{"lineNumber":1212,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1213,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1214,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":1215,"author":{"gitId":"Esilocke"},"content":"You have deleted one of your contacts, as well as two of your tasks."},{"lineNumber":1216,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1217,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete 1` +"},{"lineNumber":1218,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete task/ 5` +"},{"lineNumber":1219,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `delete task/ 8` +"},{"lineNumber":1220,"author":{"gitId":"-"},"content":""},{"lineNumber":1221,"author":{"gitId":"Esilocke"},"content":"You think that you made a mistake, and undo all your previous commands."},{"lineNumber":1222,"author":{"gitId":"-"},"content":""},{"lineNumber":1223,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo` +"},{"lineNumber":1224,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo` +"},{"lineNumber":1225,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `undo`"},{"lineNumber":1226,"author":{"gitId":"-"},"content":""},{"lineNumber":1227,"author":{"gitId":"Esilocke"},"content":"However you realise that no mistake was made. Instead of typing your commands again, you choose to `redo` your commands instead."},{"lineNumber":1228,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1229,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `redo` +"},{"lineNumber":1230,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `redo` +"},{"lineNumber":1231,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `redo`"},{"lineNumber":1232,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1233,"author":{"gitId":"Esilocke"},"content":"// end::redo[]"},{"lineNumber":1234,"author":{"gitId":"Esilocke"},"content":"// tag::clear[]"},{"lineNumber":1235,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":1236,"author":{"gitId":"-"},"content":""},{"lineNumber":1237,"author":{"gitId":"jeffreygohkw"},"content":"If you would like to start fresh on a clean slate, you can use this command to clear all entries from the address book. +"},{"lineNumber":1238,"author":{"gitId":"Esilocke"},"content":"Additionally, if you clear only the contacts list or the task list, you can specify which type to clear in the command. +"},{"lineNumber":1239,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"`clear` can be replaced by `c` for faster input. +"},{"lineNumber":1241,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1242,"author":{"gitId":"-"},"content":"Format: `clear` +"},{"lineNumber":1243,"author":{"gitId":"-"},"content":""},{"lineNumber":1244,"author":{"gitId":"Esilocke"},"content":"To clear only the contacts list, type `clear person/` +"},{"lineNumber":1245,"author":{"gitId":"Esilocke"},"content":"To clear only the tasks list, type `clear task/` +"},{"lineNumber":1246,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1247,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1248,"author":{"gitId":"Esilocke"},"content":"**Things To Note**"},{"lineNumber":1249,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1250,"author":{"gitId":"Esilocke"},"content":"* If both `person/` and `task` are specified, or if neither were specified, the `clear` command will delete all entries in the address book."},{"lineNumber":1251,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1252,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1253,"author":{"gitId":"Esilocke"},"content":"**Example Scenarios:** +"},{"lineNumber":1254,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1255,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 1:** +"},{"lineNumber":1256,"author":{"gitId":"Esilocke"},"content":"You have completed every task in your task list, and want to clean it up."},{"lineNumber":1257,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1258,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `clear task/` +"},{"lineNumber":1259,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1260,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1261,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1262,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":1263,"author":{"gitId":"Esilocke"},"content":"You first start up Address++, and after getting used to how the app works, find that you do not need the initial sample data anymore. However you would still like to keep smome of the tasks for further reference."},{"lineNumber":1264,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1265,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `clear person/` +"},{"lineNumber":1266,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1267,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1268,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1269,"author":{"gitId":"Esilocke"},"content":"**Example Scenario 2:** +"},{"lineNumber":1270,"author":{"gitId":"Esilocke"},"content":"You first start up Address++, and after getting used to how the app works, find that you do not need the initial sample data anymore. You would like to clear everything in Address++ to make space for your own contacts and tasks."},{"lineNumber":1271,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1272,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1273,"author":{"gitId":"Esilocke"},"content":"\u003e\u003e `clear` +"},{"lineNumber":1274,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1275,"author":{"gitId":"Esilocke"},"content":"// end::clear[]"},{"lineNumber":1276,"author":{"gitId":"jeffreygohkw"},"content":"// tag::open[]"},{"lineNumber":1277,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Opening a save file : `open`"},{"lineNumber":1278,"author":{"gitId":"jeffreygohkw"},"content":"Switching between address books is made easy with the `open` command, as it allows you can load different save files into the application. +"},{"lineNumber":1279,"author":{"gitId":"jeffreygohkw"},"content":"You can choose which .xml file to open from the pop up window that appears upon executing this command. +"},{"lineNumber":1280,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1281,"author":{"gitId":"jeffreygohkw"},"content":"`open` can be replaced by `o` for faster input. +"},{"lineNumber":1282,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1283,"author":{"gitId":"jeffreygohkw"},"content":"Format `open`"},{"lineNumber":1284,"author":{"gitId":"jeffreygohkw"},"content":"// end::open[]"},{"lineNumber":1285,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1286,"author":{"gitId":"jeffreygohkw"},"content":"// tag::saveas[]"},{"lineNumber":1287,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Saving the data as a new save file : `save`"},{"lineNumber":1288,"author":{"gitId":"jeffreygohkw"},"content":"If you would like to save a copy of your data in a separate location or with a different name, the `save` command will allow you to do just that. +"},{"lineNumber":1289,"author":{"gitId":"jeffreygohkw"},"content":"You can choose what to name your save file and where to save it from the pop up window that appears upon executing this command. +"},{"lineNumber":1290,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1291,"author":{"gitId":"jeffreygohkw"},"content":"`save` can be replaced by `sa` for faster input. +"},{"lineNumber":1292,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1293,"author":{"gitId":"jeffreygohkw"},"content":"Format: `save`"},{"lineNumber":1294,"author":{"gitId":"jeffreygohkw"},"content":"// end::saveas[]"},{"lineNumber":1295,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1296,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":1297,"author":{"gitId":"-"},"content":""},{"lineNumber":1298,"author":{"gitId":"jeffreygohkw"},"content":"Once you have finished using Address++, you may use this command to exit the program. +"},{"lineNumber":1299,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":1300,"author":{"gitId":"-"},"content":""},{"lineNumber":1301,"author":{"gitId":"jeffreygohkw"},"content":"Alternatively, you may opt to use the keyboard shortcut kbd:[ALT]+kbd:[F4]."},{"lineNumber":1302,"author":{"gitId":"-"},"content":""},{"lineNumber":1303,"author":{"gitId":"jeffreygohkw"},"content":"// tag::opensaveas[]"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":1305,"author":{"gitId":"-"},"content":""},{"lineNumber":1306,"author":{"gitId":"jeffreygohkw"},"content":"Address book data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":1307,"author":{"gitId":"jeffreygohkw"},"content":"There is no need for you to save manually."},{"lineNumber":1308,"author":{"gitId":"-"},"content":""},{"lineNumber":1309,"author":{"gitId":"jeffreygohkw"},"content":"If you want to change the location of the save file, you can use the `save` command, click on `File -\u003e Save As` or use the keyboard shortcut kbd:[CTRL]+kbd:[S] and select the new location and file name for the save file in the pop-up window."},{"lineNumber":1310,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1311,"author":{"gitId":"jeffreygohkw"},"content":"If you want to open a different save file, you can use the `open` command, click on `File -\u003e Open` or use the keyboard shortcut kbd:[CTRL]+kbd:[O] and select the new save file to use from the pop-up window."},{"lineNumber":1312,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1313,"author":{"gitId":"jeffreygohkw"},"content":"// end::opensaveas[]"},{"lineNumber":1314,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1315,"author":{"gitId":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":1316,"author":{"gitId":"-"},"content":""},{"lineNumber":1317,"author":{"gitId":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":1318,"author":{"gitId":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder. The Open command kbd:[CTRL]+kbd:[O] can also be used instead of manually overwriting the file if you wish to keep the original data file or store the new data file in a seperate location."},{"lineNumber":1319,"author":{"gitId":"-"},"content":""},{"lineNumber":1320,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d Command Summary and Cheat Sheet"},{"lineNumber":1321,"author":{"gitId":"-"},"content":""},{"lineNumber":1322,"author":{"gitId":"Esilocke"},"content":"* *Add* : `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/REMARK] [t/TAG]...` +"},{"lineNumber":1323,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 r/Sleeps at 3am t/friend t/colleague`"},{"lineNumber":1324,"author":{"gitId":"Esilocke"},"content":"* *Add person with private fields* : `add pn/NAME [pp/PHONE_NUMBER] [pe/EMAIL] [pa/ADDRESS] [r/REMARK] [t/TAG]...` +"},{"lineNumber":1325,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `add pn/James Ho pp/22224444 pe/jamesho@example.com pa/123, Clementi Rd, 1234665 r/Sleeps at 3am t/friend t/colleague`"},{"lineNumber":1326,"author":{"gitId":"Esilocke"},"content":"* *Add task* : `add task/ n/NAME [d/DESCRIPTION] [by/DEADLINE] [p/PRIORITY] [a/ADDRESS]` +"},{"lineNumber":1327,"author":{"gitId":"Esilocke"},"content":"e.g. `add task/ n/Update Documentation d/Update documentations for V1.1 for CS2103T t/30/10/17 p/high a/NUS`"},{"lineNumber":1328,"author":{"gitId":"Esilocke"},"content":"* *Add tag* : `add tag/ [INDEX...] t/[TAG]` +"},{"lineNumber":1329,"author":{"gitId":"Esilocke"},"content":"e.g. `add tag/ 1 2 t/friends`"},{"lineNumber":1330,"author":{"gitId":"jeffreygohkw"},"content":"* *Change a person\u0027s details\u0027 privacy* : `changeprivacy INDEX [n/TRUE or FALSE] [p/TRUE or FALSE] [e/TRUE or FALSE] [a/TRUE or FALSE] [r/TRUE or FALSE]` +"},{"lineNumber":1331,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `changeprivacy 2 n/true p/false e/true a/false r/true`"},{"lineNumber":1332,"author":{"gitId":"jeffreygohkw"},"content":"* *Changing the privacy level of the address book*: `privacylevel [LEVEL]` +"},{"lineNumber":1333,"author":{"gitId":"jeffreygohkw"},"content":"* *Clear all data* : `clear`"},{"lineNumber":1334,"author":{"gitId":"Esilocke"},"content":"* *Clear persons* : `clear person/`"},{"lineNumber":1335,"author":{"gitId":"Esilocke"},"content":"* *Clear tasks* : `clear task/`"},{"lineNumber":1336,"author":{"gitId":"Esilocke"},"content":"* *Delete person* : `delete INDEX` +"},{"lineNumber":1337,"author":{"gitId":"-"},"content":"e.g. `delete 3`"},{"lineNumber":1338,"author":{"gitId":"Esilocke"},"content":"* *Delete task* : `delete task/ INDEX` +"},{"lineNumber":1339,"author":{"gitId":"Esilocke"},"content":"e.g. `delete task/ 4`"},{"lineNumber":1340,"author":{"gitId":"Esilocke"},"content":"* *Delete tag* : `delete tag/ [INDEX...] t/[TAG]` +"},{"lineNumber":1341,"author":{"gitId":"Esilocke"},"content":"e.g. `delete tag/ 1 2 t/friends`"},{"lineNumber":1342,"author":{"gitId":"charlesgoh"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/REMARK] [v/AVATAR] [t/TAG]...` +"},{"lineNumber":1343,"author":{"gitId":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":1344,"author":{"gitId":"Esilocke"},"content":"* *Edit task* : `edit task/ INDEX [n/NAME] [d/DESCRIPTION] [t/DEADLINE] [p/PRIORITY] [a/ADDRESS]` +"},{"lineNumber":1345,"author":{"gitId":"Esilocke"},"content":"e.g. `edit task/ 2 p/veryhigh`"},{"lineNumber":1346,"author":{"gitId":"Esilocke"},"content":"* *Edit tag* : `edit tag/ TAGTOCHANGE NEWTAGNAME` +"},{"lineNumber":1347,"author":{"gitId":"Esilocke"},"content":"e.g. `edit tag/ friends enemies`"},{"lineNumber":1348,"author":{"gitId":"-"},"content":"* *Favourite persons* :`favourite INDEX` +"},{"lineNumber":1349,"author":{"gitId":"-"},"content":"e.g. `favourite 1`"},{"lineNumber":1350,"author":{"gitId":"-"},"content":"* *Unfavourite persons* :`unfavourite INDEX` +"},{"lineNumber":1351,"author":{"gitId":"-"},"content":"e.g. `unfavourite 1`"},{"lineNumber":1352,"author":{"gitId":"-"},"content":"* *Show favourite list* :`showfavourite` +"},{"lineNumber":1353,"author":{"gitId":"-"},"content":"e.g. `showfavourite`"},{"lineNumber":1354,"author":{"gitId":"Esilocke"},"content":"* *Find person* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1355,"author":{"gitId":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":1356,"author":{"gitId":"Esilocke"},"content":"* *Find tag* : `find tag/ TAG [MORE_TAGS]` +"},{"lineNumber":1357,"author":{"gitId":"Esilocke"},"content":"e.g. `find tag/ friends`"},{"lineNumber":1358,"author":{"gitId":"Esilocke"},"content":"* *Find task* : `find task/ KEYWORD [MORE_KEYWORDS] [p/PRIORITY] [done/STATE]` +"},{"lineNumber":1359,"author":{"gitId":"Esilocke"},"content":"e.g. `find task/ update p/high done/false`"},{"lineNumber":1360,"author":{"gitId":"jeffreygohkw"},"content":"* *Help* : `help`"},{"lineNumber":1361,"author":{"gitId":"jeffreygohkw"},"content":"* *List persons and tasks* : `list`"},{"lineNumber":1362,"author":{"gitId":"-"},"content":"* *List tags* : `showtag`"},{"lineNumber":1363,"author":{"gitId":"jeffreygohkw"},"content":"* *Locate a person\u0027s address* : `locate INDEX`"},{"lineNumber":1364,"author":{"gitId":"jeffreygohkw"},"content":"* *Navigating from one address to another* : ``navigate [fp/INDEX] [ft/INDEX] [fa/ADDRESS] (Must have only one of three) [tp/INDEX] [tt/INDEX] [ta/ADDRESS] (Must have only one of three)` +"},{"lineNumber":1365,"author":{"gitId":"jeffreygohkw"},"content":"e.g. navigate fa/Tampines Mall ta/Sentosa"},{"lineNumber":1366,"author":{"gitId":"Esilocke"},"content":"* *Select person* : `select INDEX` +"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"e.g.`select 2`"},{"lineNumber":1368,"author":{"gitId":"Esilocke"},"content":"* *Select task* : `select task/ INDEX` +"},{"lineNumber":1369,"author":{"gitId":"Esilocke"},"content":"e.g.`select task/ 2`"},{"lineNumber":1370,"author":{"gitId":"-"},"content":"* *Set task as complete* : `setcomplete INDEX` +"},{"lineNumber":1371,"author":{"gitId":"-"},"content":"e.g. `setcomplete 4`"},{"lineNumber":1372,"author":{"gitId":"-"},"content":"* *Set task as incomplete* : `setincomplete INDEX` +"},{"lineNumber":1373,"author":{"gitId":"-"},"content":"e.g. `setincomplete 5`"},{"lineNumber":1374,"author":{"gitId":"Esilocke"},"content":"* *Assign to task* : `assign PERSONINDEX... to/TASKINDEX` +"},{"lineNumber":1375,"author":{"gitId":"Esilocke"},"content":"e.g. `assign 4 1 17 18 to/21`"},{"lineNumber":1376,"author":{"gitId":"Esilocke"},"content":"* *Dismiss from task* : `dismiss PERSONINDEX... from/TASKINDEX` +"},{"lineNumber":1377,"author":{"gitId":"Esilocke"},"content":"e.g. `dismiss 4 1 from/17`"},{"lineNumber":1378,"author":{"gitId":"Esilocke"},"content":"* *View contacts assigned to a task* : `viewassign INDEX` +"},{"lineNumber":1379,"author":{"gitId":"Esilocke"},"content":"e.g. `viewassign 1`"},{"lineNumber":1380,"author":{"gitId":"jeffreygohkw"},"content":"* *Theme* : `theme THEME` +"},{"lineNumber":1381,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `theme light`"},{"lineNumber":1382,"author":{"gitId":"Esilocke"},"content":"* *History* : `history`"},{"lineNumber":1383,"author":{"gitId":"Esilocke"},"content":"* *Undo* : `undo`"},{"lineNumber":1384,"author":{"gitId":"Esilocke"},"content":"* *Redo* : `redo`"},{"lineNumber":1385,"author":{"gitId":"jeffreygohkw"},"content":"* *Open* : `open`"},{"lineNumber":1386,"author":{"gitId":"jeffreygohkw"},"content":"* *Save As* : `save`"},{"lineNumber":1387,"author":{"gitId":"jeffreygohkw"},"content":"* *Exit* : `exit`"},{"lineNumber":1388,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1389,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d Command Shorthand Cheat Sheet"},{"lineNumber":1390,"author":{"gitId":"Esilocke"},"content":"* *Add* : `a n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/REMARK] [t/TAG]...` +"},{"lineNumber":1391,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `a n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 r/Sleeps at 3am t/friend t/colleague`"},{"lineNumber":1392,"author":{"gitId":"Esilocke"},"content":"* *Add person with private fields* : `a pn/NAME [pp/PHONE_NUMBER] [pe/EMAIL] [pa/ADDRESS] [r/REMARK] [t/TAG]...` +"},{"lineNumber":1393,"author":{"gitId":"Esilocke"},"content":"e.g. `a pn/James Ho pp/22224444 pe/jamesho@example.com pa/123, Clementi Rd, 1234665 r/Sleeps at 3am t/friend t/colleague`"},{"lineNumber":1394,"author":{"gitId":"Esilocke"},"content":"* *Add task* : `a task/ n/NAME [d/DESCRIPTION] [by/DEADLINE] [p/PRIORITY] [a/ADDRESS]` +"},{"lineNumber":1395,"author":{"gitId":"Esilocke"},"content":"e.g. `a task/ n/Update Documentation d/Update documentations for V1.1 for CS2103T t/30/10/17 p/high a/NUS`"},{"lineNumber":1396,"author":{"gitId":"Esilocke"},"content":"* *Add tag* : `a tag/ [INDEX...] t/[TAG]` +"},{"lineNumber":1397,"author":{"gitId":"Esilocke"},"content":"e.g. `a tag/ 1 2 t/friends`"},{"lineNumber":1398,"author":{"gitId":"jeffreygohkw"},"content":"* *Change a person\u0027s details\u0027 privacy* : `cp INDEX [n/TRUE or FALSE] [p/TRUE or FALSE] [e/TRUE or FALSE] [a/TRUE or FALSE] [r/TRUE or FALSE]` +"},{"lineNumber":1399,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `cp 2 n/true p/false e/true a/false r/true`"},{"lineNumber":1400,"author":{"gitId":"jeffreygohkw"},"content":"* *Changing the privacy level of the address book*: `pl [LEVEL]` +"},{"lineNumber":1401,"author":{"gitId":"jeffreygohkw"},"content":"* *Clear all data* : `clear`"},{"lineNumber":1402,"author":{"gitId":"jeffreygohkw"},"content":"* *Clear persons* : `c person`"},{"lineNumber":1403,"author":{"gitId":"jeffreygohkw"},"content":"* *Clear tasks* : `c task`"},{"lineNumber":1404,"author":{"gitId":"jeffreygohkw"},"content":"* *Delete person* : `d INDEX` +"},{"lineNumber":1405,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `d 3`"},{"lineNumber":1406,"author":{"gitId":"Esilocke"},"content":"* *Delete task* : `d task/ INDEX` +"},{"lineNumber":1407,"author":{"gitId":"Esilocke"},"content":"e.g. `d task/ 4`"},{"lineNumber":1408,"author":{"gitId":"Esilocke"},"content":"* *Delete tag* : `d tag/ INDEX t/[TAG]` +"},{"lineNumber":1409,"author":{"gitId":"Esilocke"},"content":"e.g. `d tag/ 1 2 t/friends`"},{"lineNumber":1410,"author":{"gitId":"jeffreygohkw"},"content":"* *Edit* : `e INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL]  [a/ADDRESS] [r/REMARK] [t/TAG]...` +"},{"lineNumber":1411,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `e 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":1412,"author":{"gitId":"Esilocke"},"content":"* *Edit task* : `e task INDEX [n/NAME] [d/DESCRIPTION] [t/DEADLINE] [p/PRIORITY] [a/ADDRESS]` +"},{"lineNumber":1413,"author":{"gitId":"Esilocke"},"content":"e.g. `e task/ 2 p/veryhigh`"},{"lineNumber":1414,"author":{"gitId":"Esilocke"},"content":"* *Edit tag* : `e tag/ OLDTAGNAME NEWTAGNAME` +"},{"lineNumber":1415,"author":{"gitId":"Esilocke"},"content":"e.g. `e tag/ friends enemies`"},{"lineNumber":1416,"author":{"gitId":"jeffreygohkw"},"content":"* *Favourite persons* :`fav INDEX` +"},{"lineNumber":1417,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `fav 1`"},{"lineNumber":1418,"author":{"gitId":"jeffreygohkw"},"content":"* *Unfavourite persons* :`unfav INDEX` +"},{"lineNumber":1419,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `unfav 1`"},{"lineNumber":1420,"author":{"gitId":"jeffreygohkw"},"content":"* *Show favourite list* :`sfav` +"},{"lineNumber":1421,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `sfav`"},{"lineNumber":1422,"author":{"gitId":"jeffreygohkw"},"content":"* *Find person* : `f KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1423,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `f James Jake`"},{"lineNumber":1424,"author":{"gitId":"Esilocke"},"content":"* *Find tag* : `f tag/ Tag [MORE_TAGS]` +"},{"lineNumber":1425,"author":{"gitId":"Esilocke"},"content":"e.g. `f tag/ friends`"},{"lineNumber":1426,"author":{"gitId":"Esilocke"},"content":"* *Find task* : `f task/ KEYWORD [MORE_KEYWORDS] [p/PRIORITY]` +"},{"lineNumber":1427,"author":{"gitId":"Esilocke"},"content":"e.g. `f task/ update p/high`"},{"lineNumber":1428,"author":{"gitId":"jeffreygohkw"},"content":"* *List persons and tasks* : `l`"},{"lineNumber":1429,"author":{"gitId":"jeffreygohkw"},"content":"* *List tags* : `stag`"},{"lineNumber":1430,"author":{"gitId":"jeffreygohkw"},"content":"* *Locate a person\u0027s address* : `loc INDEX`"},{"lineNumber":1431,"author":{"gitId":"jeffreygohkw"},"content":"* *Navigating from one address to another* : ``navi [fp/INDEX] [ft/INDEX] [fa/ADDRESS] (Must have only one of three) [tp/INDEX] [tt/INDEX] [ta/ADDRESS] (Must have only one of three)` +"},{"lineNumber":1432,"author":{"gitId":"jeffreygohkw"},"content":"e.g. navi fa/Tampines Mall ta/Sentosa"},{"lineNumber":1433,"author":{"gitId":"jeffreygohkw"},"content":"* *Select person* : `s INDEX` +"},{"lineNumber":1434,"author":{"gitId":"jeffreygohkw"},"content":"e.g.`s 2`"},{"lineNumber":1435,"author":{"gitId":"Esilocke"},"content":"* *Select task* : `s task/ INDEX` +"},{"lineNumber":1436,"author":{"gitId":"Esilocke"},"content":"e.g.`s task/ 2`"},{"lineNumber":1437,"author":{"gitId":"jeffreygohkw"},"content":"* *Set task as complete* : `stc INDEX` +"},{"lineNumber":1438,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `stc 4`"},{"lineNumber":1439,"author":{"gitId":"jeffreygohkw"},"content":"* *Set task as incomplete* : `sti INDEX` +"},{"lineNumber":1440,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `sti 5`"},{"lineNumber":1441,"author":{"gitId":"jeffreygohkw"},"content":"* *Assign to task* : `as PERSONINDEX... to/TASKINDEX` +"},{"lineNumber":1442,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `as 4 1 17 18 to/21`"},{"lineNumber":1443,"author":{"gitId":"jeffreygohkw"},"content":"* *Dismiss from task* : `ds PERSONINDEX... from/TASKINDEX` +"},{"lineNumber":1444,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `ds 4 1 from/17`"},{"lineNumber":1445,"author":{"gitId":"Esilocke"},"content":"* *View contacts assigned to a task* : `va INDEX` +"},{"lineNumber":1446,"author":{"gitId":"Esilocke"},"content":"e.g. `va 1`"},{"lineNumber":1447,"author":{"gitId":"jeffreygohkw"},"content":"* *Theme* : `th THEME` +"},{"lineNumber":1448,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `th light`"},{"lineNumber":1449,"author":{"gitId":"jeffreygohkw"},"content":"* *History* : `h`"},{"lineNumber":1450,"author":{"gitId":"jeffreygohkw"},"content":"* *Undo* : `u`"},{"lineNumber":1451,"author":{"gitId":"jeffreygohkw"},"content":"* *Redo* : `r`"},{"lineNumber":1452,"author":{"gitId":"jeffreygohkw"},"content":"* *Open* : `o`"},{"lineNumber":1453,"author":{"gitId":"jeffreygohkw"},"content":"* *Save As* : `sa`"},{"lineNumber":1454,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1455,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d Keyboard Shortcuts"},{"lineNumber":1456,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1457,"author":{"gitId":"jeffreygohkw"},"content":"* *Exit* : kbd:[ALT]+kbd:[F4]"},{"lineNumber":1458,"author":{"gitId":"jeffreygohkw"},"content":"* *Help* : kbd:[F1]"},{"lineNumber":1459,"author":{"gitId":"jeffreygohkw"},"content":"* *Open* : kbd:[CTRL]+kbd:[O]"},{"lineNumber":1460,"author":{"gitId":"jeffreygohkw"},"content":"* *Save As* : kbd:[CTRL]+kbd:[S]"},{"lineNumber":1461,"author":{"gitId":"charlesgoh"},"content":"* *Increase Size:* kbd:[CTRL] + kbd:[W] (kbd:[CMD] + kbd:[W] on MacOS)"},{"lineNumber":1462,"author":{"gitId":"charlesgoh"},"content":"* *Decrease Size:* kbd:[CTRL] + kbd:[E] (kbd:[CMD] + kbd:[E] on MacOS)"},{"lineNumber":1463,"author":{"gitId":"charlesgoh"},"content":"* *Reset Size:* kbd:[CTRL] + kbd:[R] (kbd:[CMD] + kbd:[R] on MacOS)"},{"lineNumber":1464,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1465,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d v2.0 UI Concept"},{"lineNumber":1466,"author":{"gitId":"charlesgoh"},"content":"This is the concept design of our v2.0 end product. Actual design may vary."},{"lineNumber":1467,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1468,"author":{"gitId":"charlesgoh"},"content":"image::v2UIMockup.png[width\u003d\"800\"]"}],"authorContributionMap":{"charlesgoh":191,"jeffreygohkw":252,"Esilocke":662,"-":363}},{"path":"docs/team/JeffreyGoh.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"\u003d Jeffrey Goh - Project Portfolio"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":":imagesDir: ../images"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d Project: Address++"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"Address++ is a desktop address book application that aims to help users manage their contacts and their time. It is primarily targeted at students with projects, although it may be used in a wide variety of other settings as well. Users will be able to interact with it using a Command Line Interface, and it has a Graphic User Interface created with JavaFX."},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"*Code contributed*: [https://github.com/CS2103AUG2017-W09-B2/main/blob/master/collated/main/jeffreygohkw.md[Functional code]] [https://github.com/CS2103AUG2017-W09-B2/main/blob/master/collated/test/jeffreygohkw.md[Test code]]"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Enhancement Added: Privacy of Fields"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d External behavior (Add and Edit Co-authored with Charles Goh)"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003daddprivacy]"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003deditprivacy]"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dchangeprivacy]"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dprivacylevel]"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"Users may have contacts that they would like to keep confidential or those that they do not feel comfortable displaying in public. Instead of removing the contact from the address book, setting a field to private allows users to choose exactly what information they would like to display and what they would like to hide."},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"In addition, a private name cannot be searched for, and a private address cannot be used in the locate and navigate commands to prevent users from finding out the value of the private field."},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"Having a private field also doubles up as an extra layer of protection against unintentional modifications, as private fields cannot be edited without changing them back to public fields."},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"It may be inconvenient for a user to set a person\u0027s fields to public and back to private every time they would like to have a peek at the data that was hidden, or to set a person\u0027s every field to private if they want to hide them. Thus, having a command to change the privacy level of the address book will make it much more convenient for users to access private information."},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"include::../DeveloperGuide.adoc[tag\u003dprivacy]"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Enhancement Added: Locating a person\u0027s address"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dlocate]"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"While a person\u0027s phone and email address can be used directly, users often are unaware of where exactly their contacts\u0027 addresses are located in real life. The locate command aims to solve this problem by taking the address of a contact and searching for it on Google Maps. This allows the user to find out where exactly their contacts\u0027 addresses are located."},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"include::../DeveloperGuide.adoc[tag\u003dlocate]"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Enhancement Added: Navigating from one address to another"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dnavigate]"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"Locating a contact does not tell users how to arrive at that particular contact\u0027s address. Furthermore, users may face the scenario where they have to travel and meet different groups and different contacts throughout the day. The Navigate command allows users to find out the most efficient path from one address to another with the aid of Google Maps."},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"Users are able to utilize the addresses attached to a person, as well as those attached to a task, in the navigate command. They can also manually input addresses in the custom line if they are looking for directions to or from an address that is not presently stored inside the address book. This greatly enhances the flexibility of the command, and allows users to use the command without having to add a dummy task or person to store new addresses beforehand."},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"include::../DeveloperGuide.adoc[tag\u003dnavigate]"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Enhancement Added: Opening and Saving of the .xml save file"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dopen]"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dsaveas]"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"include::../UserGuide.adoc[tag\u003dopensaveas]"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"Open and Save As will allow users to more easily manage their data. Open allows them to load their data from a .xml file, letting them easily work on multiple different address books. +"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"Save As allows users to save their address book data, letting it serve as backup or allowing them to be placed in a different location on the computer while still remaining operational. +"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"This also allows for easier transfers of save files between devices without having to manually drag and manage the save files to and from the folder where Address++ is located."},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"It can even potentially allow for syncing save files between devices if external software like Dropbox is used."},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"include::../DeveloperGuide.adoc[tag\u003dopensaveas]"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"#End of Extract#"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"---"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Other contributions"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"* Add Menu Icons for Open, Save As, Exit and Help (Pull request https://github.com/CS2103AUG2017-W09-B2/main/pull/10[#10])"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"* Add Keyboard Shortcuts for Open, Save As, Exit and Help (Pull request https://github.com/CS2103AUG2017-W09-B2/main/pull/10[#11], https://github.com/CS2103AUG2017-W09-B2/main/pull/101[#101])"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"* Modified SortCommand to be undoable, and wrote test cases for it (Pull requests https://github.com/CS2103AUG2017-W09-B2/main/pull/29[#29], https://github.com/CS2103AUG2017-W09-B2/main/pull/30[#30])"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"* Created TaskAddress to store the address of tasks (Pull requests https://github.com/CS2103AUG2017-W09-B2/main/pull/129[#129], https://github.com/CS2103AUG2017-W09-B2/main/pull/132[#132])"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"* Added Travis, Coveralls and Appveyor links for Continuous Integration (Pull requests https://github.com/CS2103AUG2017-W09-B2/main/pull/4[#4], https://github.com/CS2103AUG2017-W09-B2/main/pull/22[#22])"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"* Performed Acceptance Testing for Team T16-B2 (Issue https://github.com/CS2103AUG2017-T16-B2/main/issues/102[#102])"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"* Wrote some Manual Testing tests (Pull request https://github.com/CS2103AUG2017-W09-B2/main/pull/162[#162], https://github.com/CS2103AUG2017-W09-B2/main/pull/165[#165])"}],"authorContributionMap":{"jeffreygohkw":159}},{"path":"docs/team/KelvinLin.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"\u003d Lin Ziwen Kelvin - Project Portfolio"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":":imagesDir: ../images"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Project: AddressBook++"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"Address++ is an application that keeps track of your contacts and your daily to-dos for you. It is targeted"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"at students who work on projects or assignments frequently, but it can also be used for other purposes."},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"*Code contributed*: [https://github.com/CS2103AUG2017-W09-B2/main/blob/master/collated/main/Esilocke.md[Functional code]] [https://github.com/CS2103AUG2017-W09-B2/main/blob/master/collated/test/Esilocke.md[Test code]]"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Enhancement Added: Edit Tag"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dedittag]"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"#End of Extract#"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"The user may find a need to change the name of a particular name. +"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"In the context of the target user, suppose that a user wishes to change the tag `CS2103Groupmates` to `friends`, after he has completed the module. +"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"The user would need to delete the tag from all users who are tagged with `CS2103Groupmates`, and add the tag `friends` to them one-by-one. `edittag` thus aims to make this process faster by allowing users to rename all instances of the tag from the address book."},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"The EditTagCommand iterates through each person in the UniquePersonList, and replaces the old tag, if found, with the new tag."},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Enhancement Added: Optional Data Input"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"Optional Data Input allows tasks and persons to have only one compulsory field, the name. All other fields in a person or task can be left unspecified, allowing for a greater range of inputs."},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"We may not always have the opportunity to find contacts or tasks with complete information. +"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"This means that some contacts may not have an address, or email address, while some tasks may not have a deadline, or a description. Without Optional Data Input, the user would need to come up with random placeholder values for each prefix, which would greatly hinder user experience as the user would need to type in unnecessary values to satisfy the command format. +"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"Allowing optional data input thus lifts the restriction of making every field compulsory, and thus allows users to fill in a wider range of input."},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"When a user does not fill in a prefix for a particular field, the parser will create an object corresponding to the missing field with a placeholder value."},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"[source, java]"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"public Phone(String args) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    if (args \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        this.value \u003d PHONE_PLACEHOLDER_VALUE;"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    ..."},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"}"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"public boolean isValidPhone(String args) {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    if (args.equals(PHONE_PLACEHOLDER_VALUE) {"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        return true;"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    ..."},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"}"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"In addition, the isValid method is also updated to accept placeholder values as valid inputs."},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Enhancement Added: Tasks Management"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003daddtask]"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dedittask]"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003ddeletetask]"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dfindtask]"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dselecttask]"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dsetstate]"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dassignDismiss]"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"include::../UserGuide.adoc[tag\u003dclear]"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"#End of Extract#"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"Our intended target audience are primarily NUS students, who are working on projects. In addition to managing their contact details, allowing users to manage their tasks would also greatly improve their user experience, as they would not need to keep track of their project deadlines separately."},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"---"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"include::../DeveloperGuide.adoc[tag\u003dtask]"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"include::../DeveloperGuide.adoc[tag\u003dassignDismiss]"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"#End of Extract#"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Other contributions"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"* Conducted internal acceptance testing [https://github.com/CS2103AUG2017-W09-B2/main/issues/155[Issue #155]]"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"* Conducted Acceptance Testing for other teams [https://github.com/CS2103AUG2017-F09-B1/main/issues/83[F09-B1]] [https://github.com/CS2103AUG2017-F09-B1/main/issues/82[F09-B1]]"}],"authorContributionMap":{"charlesgoh":1,"Esilocke":114}},{"path":"docs/team/charlesgoh.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"\u003d Charles Goh - Project Portfolio"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":":imagesDir: ../images"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Project: Address++"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"Address++ is a desktop address book application that aims to provide students and"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"professionals with an effective tool to help them manage their contacts and their time."},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"This is a snapshot of our User Interface"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"image::Ui.png[width\u003d\"800\"]"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"My contributions to this project are listed below:"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"*Code contributed*: [https://github.com/CS2103AUG2017-W09-B2/main/blob/master/collated/main/charlesgoh.md[Functional code]] [https://github.com/CS2103AUG2017-W09-B2/main/blob/master/collated/test/charlesgoh.md[Test code]]"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Password Protection Commands `lock` `unlock` `changepassword`"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"include::../UserGuide.adoc[tag\u003dpassword]"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"Many users have security related concerns. In order to slow malicious users from causing"},{"lineNumber":33,"author":{"gitId":"-"},"content":"damage to users\u0027 Address++ application, the password protection suite of commands were"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"created."},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"include::../DeveloperGuide.adoc[tag\u003dpassword]"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Sort Command"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"include::../UserGuide.adoc[tag\u003dsort]"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"As more contacts and tasks are added to the application, the lists may get long and disorganized. The Sort Command"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"allows users to sort both contacts and tasks by key fields. Examples include sorting contacts by name and"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"sorting contacts by deadlines."},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"include::../DeveloperGuide.adoc[tag\u003dsort]"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Backup Command"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"include::../UserGuide.adoc[tag\u003dbackup]"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"Users are able to back up their data before making any changes so that in the event of an"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"emergency (e.g. clearing all data and then closing afterwards), the old save data can be restored."},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"include::../DeveloperGuide.adoc[tag\u003dbackup]"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Font Size Command"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"include::../UserGuide.adoc[tag\u003dfontsize]"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"Different monitors render the application differently. On some monitors, the words may appear to be too small. The font size"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"commands and buttons allow users to increase/decrease/reset the font sizes at any time when using the application."},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"include::../DeveloperGuide.adoc[tag\u003dfontsize]"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Avatar and Remark Fields"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d External behavior: Co-authored with Jeffrey Goh"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"include::../UserGuide.adoc[tag\u003davatar]"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"Avatars and remarks help users to identify different contacts. It was also implemented with the intention of making the application"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"more user friendly."},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Implementation for Avatar Field"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"include::../DeveloperGuide.adoc[tag\u003davatar]"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"#End of Extract#"},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"---"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":160,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Other contributions"},{"lineNumber":161,"author":{"gitId":"charlesgoh"},"content":"* Added tests for task related implementations (https://github.com/CS2103AUG2017-W09-B2/main/pull/115/files[#115]) +"},{"lineNumber":162,"author":{"gitId":"charlesgoh"},"content":"* Conducted Acceptance Testing for another team [https://github.com/CS2103AUG2017-W09-B4/main/issues/77[W09-B4]]"}],"authorContributionMap":{"charlesgoh":160,"-":2}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.MainWindow;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, false);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        initEventsCenter();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"        ui.start(primaryStage);"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"        MainWindow mw \u003d ui.getMainWindow();"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"        mw.setMainApp(this);"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"        mw.setStorage(storage);"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"        mw.setModel(model);"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"    public void stop() {"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"        ui.stop();"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IOException e) {"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"        Platform.exit();"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"        System.exit(0);"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"        this.stop();"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"    public static void main(String[] args) {"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"        launch(args);"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":2,"jeffreygohkw":35,"-":181}},{"path":"src/main/java/seedu/address/commons/core/Config.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    private String appTitle \u003d \"Address++\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"-":13}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"                + \", number of tasks \" + data.getTasksList().size();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"-":18}},{"path":"src/main/java/seedu/address/commons/events/ui/BackupRequestEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.Model;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":" * An Event for backing up of data to a selected location."},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"public class BackupRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"    private Model model;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    private String args;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    public BackupRequestEvent(Model model, String args) {"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"        this.model \u003d model;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"        this.args \u003d args;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public Model getModel() {"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"        return model;"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    public void setModel(Model model) {"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"        this.model \u003d model;"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public String getArgs() {"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        return args;"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public void setArgs(String args) {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        this.args \u003d args;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":40}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserPanelLocateEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"public class BrowserPanelLocateEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    private final ReadOnlyPerson person;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    public BrowserPanelLocateEvent(ReadOnlyPerson person) {"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"        this.person \u003d person;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    public ReadOnlyPerson getNewSelection() {"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"        return person;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":26}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserPanelNavigateEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"public class BrowserPanelNavigateEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    private final Location fromLocation;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    private final Location toLocation;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public BrowserPanelNavigateEvent(Location fromLocation, Location toLocation) {"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"        this.fromLocation \u003d fromLocation;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"        this.toLocation \u003d toLocation;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public Location getFromLocation() {"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        return fromLocation;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public Location getToLocation() {"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        return toLocation;"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":33}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeFontSizeEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":" * Represents a font size change triggered by a command or the UI"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"//author charlesgoh"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"public class ChangeFontSizeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"    private static int increaseSizeEventIndex \u003d 0;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"    private static int decreaseSizeEventIndex \u003d 1;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    private static int resetSizeEventIndex \u003d 2;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    private int triggerOption;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public ChangeFontSizeEvent(int triggerOption) {"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"        this.triggerOption \u003d triggerOption;"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        return \"New Event: Font size change\";"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    public static int getIncreaseSizeEventIndex() {"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"        return increaseSizeEventIndex;"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    public static int getDecreaseSizeEventIndex() {"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        return decreaseSizeEventIndex;"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    public static int getResetSizeEventIndex() {"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        return resetSizeEventIndex;"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    public int getTriggerOption() {"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"        return triggerOption;"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    public void setTriggerOption(int triggerOption) {"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        this.triggerOption \u003d triggerOption;"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":45}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeRequestEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangeThemeRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"    private final String styleSheet;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    public ChangeThemeRequestEvent(String styleSheet) {"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"        this.styleSheet \u003d styleSheet;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public String getStyleSheet() {"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        return styleSheet;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":24}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestTaskEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Indicates a request to jump to the list of tasks"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class JumpToListRequestTaskEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public JumpToListRequestTaskEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        //TODO optimize this class"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":23}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenRequestEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * An Event for the opening of a save file from a selected location."},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"public class OpenRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":15}},{"path":"src/main/java/seedu/address/commons/events/ui/SaveAsRequestEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * An Event for the saving of data to a selected location."},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"public class SaveAsRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":15}},{"path":"src/main/java/seedu/address/commons/events/ui/TaskPanelSelectionChangedEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.ui.TaskCard;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Represents a selection change in the Task List Panel"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class TaskPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    private final TaskCard newSelection;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public TaskPanelSelectionChangedEvent(TaskCard newSelection) {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public TaskCard getNewSelection() {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":26}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList();"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":4,"-":27}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    private final Storage storage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        this.storage \u003d null;"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText, model.getLockState());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"            command.setStorageInfo(this.storage);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            return result;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } finally {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            history.add(commandText);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList() {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":12,"Esilocke":8,"-":49}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":" * Represents an undoable command that adds an object to the address book."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"public abstract class AddCommand extends UndoableCommand {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"wangyiming1019":1,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class AddPersonCommand extends AddCommand {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_AVATAR + \"AVATAR] \""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_REMARK + \"Sells sea shells on the sea shore \""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_AVATAR + \"avatar-filepath.png\""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: \\n%1$s\";"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    private final Person personToAdd;"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    public AddPersonCommand(ReadOnlyPerson person) {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        personToAdd \u003d new Person(person);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            model.addPerson(personToAdd);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, personToAdd));"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        } else if (!(other instanceof AddPersonCommand)) {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"            assert (((AddPersonCommand) other).personToAdd !\u003d null); // The personToAdd cannot be null"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            return personToAdd.equals(((AddPersonCommand) other).personToAdd);"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":73}},{"path":"src/main/java/seedu/address/logic/commands/AddTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":" * Adds a tag to the persons in the latest list from the address book."},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommand extends AddCommand {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_FULL"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"            + \": Adds the tag to the persons with the index numbers used in the last person list.\""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            + \" Command is case-sensitive. \\n\""},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"            + \"[INDEX] [MORE INDEXES] (index must be a positive integer)\""},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG_FULL + \" 1 2 t/friends \\n\";"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added Tag: %1$s\";"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in all \""},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            + \"target persons in the current list.\";"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexes;"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    private final Tag addTag;"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     * @param targetIndexes of the persons in the filtered person list to edit"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"     * @param addTag tag to add to given target indexes"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    public AddTagCommand(Tag addTag, ArrayList\u003cIndex\u003e targetIndexes) {"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(targetIndexes);"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(addTag);"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        this.addTag \u003d addTag;"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"     * @param addTag tag to add to all entries in the address book"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    public AddTagCommand(Tag addTag) {"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(addTag);"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        this.addTag \u003d addTag;"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"     * Check whether the index within the range then checks whether the specific persons have the tag."},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"     * If not, add the tag to the person that doesn\u0027t have the given tag."},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        boolean allPersonsContainGivenTag \u003d true;"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        if (targetIndexes.size() \u003d\u003d 0) {"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"            reinitlializeArray(lastShownList.size());"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        // check whether all persons have the given tag"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"            int personIndex \u003d targetIndexes.get(i).getZeroBased();"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson personToAddTag \u003d lastShownList.get(personIndex);"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"            if (!personToAddTag.getTags().contains(addTag)) {"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"                allPersonsContainGivenTag \u003d false;"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"        if (allPersonsContainGivenTag) {"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"            throw  new CommandException(MESSAGE_DUPLICATE_TAG);"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"            model.addTag(this.addTag, this.targetIndexes);"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TAG_SUCCESS, addTag));"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"    private void reinitlializeArray(int size) {"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"            targetIndexes.add(Index.fromZeroBased(i));"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"            return true;"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        if (!(other instanceof AddTagCommand)) {"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"            return false;"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"        // state check"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand e \u003d (AddTagCommand) other;"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"        return targetIndexes.equals(e.targetIndexes)"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 addTag.equals(e.addTag);"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":126}},{"path":"src/main/java/seedu/address/logic/commands/AddTaskCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":" * Adds a task to the address book."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class AddTaskCommand extends AddCommand {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TASK"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \": Adds a task to the address book. \""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            + \"[\" +  PREFIX_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            + \"[\" +  PREFIX_DEADLINE + \"DEADLINE] \""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            + \"[\" +  PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TASK + \" \""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_NAME + \"Buy pencil \""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DESCRIPTION + \"Buy a new pencil from ABS \""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DEADLINE + \"10-10-2017 \""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PRIORITY + \"4 \""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_ADDRESS + \"12 Kent Ridge Crescent, 119275\";"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n%1$s\";"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private final Task taskToAdd;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     * Creates an AddTaskCommand to add the specified {@code ReadOnlyTask}"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public AddTaskCommand(ReadOnlyTask task) {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        super();"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        taskToAdd \u003d new Task(task);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            model.addTask(taskToAdd);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, taskToAdd));"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        } else if (!(other instanceof AddTaskCommand)) {"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            assert (taskToAdd !\u003d null);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            assert (((AddTaskCommand) other).taskToAdd !\u003d null); // The taskToAdd cannot be null"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            return taskToAdd.equals(((AddTaskCommand) other).taskToAdd);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":70}},{"path":"src/main/java/seedu/address/logic/commands/AssignCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"/** Assigns at least 1 person to a specified task in the Address Book**/"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class AssignCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_WORD \u003d \"assign\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_ALIAS \u003d \"as\";"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns people to a task in the Address Book. \""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            + \"PERSON INDEXES... \""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_TARGET + \"TASK \";"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Assigned %1$s people to \\n%2$s\";"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_TARGET_ARGS \u003d \"Only 1 task index should be specified\";"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_PERSONS_ARGS \u003d \"At least 1 person index must be specified\";"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_NONE_ASSIGNED \u003d \"All the specified persons are already assigned to this task\";"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private ArrayList\u003cIndex\u003e personIndexes;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    private Index taskIndex;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    public AssignCommand(ArrayList\u003cIndex\u003e personIndexes, Index taskIndex) {"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        assert(personIndexes.size() \u003e 0);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        this.personIndexes \u003d personIndexes;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e tasksList \u003d model.getFilteredTaskList();"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personIndexes \u003d createPersonsToAssign(this.personIndexes);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        if (taskIndex.getZeroBased() \u003e\u003d tasksList.size()) {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask assignedTask \u003d tasksList.get(taskIndex.getZeroBased());"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"            model.assignToTask(personIndexes, assignedTask);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The specified task cannot be missing\");"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_NONE_ASSIGNED);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personIndexes.size(), assignedTask));"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof AssignCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.personIndexes.equals(((AssignCommand) other).personIndexes)"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.taskIndex.equals(((AssignCommand) other).taskIndex)); // state check"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"     * Creates a {@code ArrayList} that contains all the {@code ReadOnlyPerson} converted from the {@Code Index}"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"     * @throws CommandException if the specified Index is out of range"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    public ArrayList\u003cReadOnlyPerson\u003e createPersonsToAssign (ArrayList\u003cIndex\u003e indexes)  throws CommandException {"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        HashSet\u003cReadOnlyPerson\u003e addedPersons \u003d new HashSet\u003c\u003e();"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personsToAssign \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e personsList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"            for (Index i : personIndexes) {"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"                ReadOnlyPerson toAssign \u003d personsList.get(i.getZeroBased());"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"                if (!addedPersons.contains(toAssign)) {"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"                    addedPersons.add(toAssign);"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"                    personsToAssign.add(toAssign);"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        return personsToAssign;"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":92}},{"path":"src/main/java/seedu/address/logic/commands/BackupCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.BackupRequestEvent;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" * Backs up current addressbook into a user input location."},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"public class BackupCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"backup\";"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"bk\";"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Backs up data to a user input \""},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"            + \"location field [FILEPATH]\\n\""},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"            + \"Parameter: KEYWORD [FILEPATH]\\n\""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"            + \"Example: \" + COMMAND_WORD + \"MyBackUpFile\";"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid Input.\\n\";"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"AddressBook++ data backed up successfully.\";"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    private String args;"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public BackupCommand(String trimmedArgs) {"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        super();"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        this.args \u003d trimmedArgs;"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(model.getAddressBook());"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        EventsCenter.getInstance().post(new BackupRequestEvent(model, args));"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":40}},{"path":"src/main/java/seedu/address/logic/commands/ChangePasswordCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONFIRM_PASSWORD;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PASSWORD;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":" * Changes user\u0027s password provided old password is correct and new passwords match."},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"public class ChangePasswordCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"changepassword\";"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"cpw\";"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password changed successfully\";"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes user password. \\n\""},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_PASSWORD + \"PASSWORD \""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_NEW_PASSWORD + \"NEWPASSWORD \""},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_CONFIRM_PASSWORD + \"CONFIRMPASSWORD \\n\""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PASSWORD + \"password \""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_NEW_PASSWORD + \"mynewpassword111 \" + PREFIX_CONFIRM_PASSWORD + \"mynewpassword111\\n\""},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"            + \"Example 2: \" + COMMAND_ALIAS + \" \" + PREFIX_PASSWORD + \"password \""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_NEW_PASSWORD + \"mynewpassword111 \" + PREFIX_CONFIRM_PASSWORD + \"mynewpassword111\\n\";"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid Input.\\n\";"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_OLD_NEW_PS_SAME \u003d \"New password must be different from your old password\";"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_ERROR_OCCURED \u003d \"An error occured. Please try again.\\n\";"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_PASSWORD_INCORRECT \u003d \"Your password is incorrect. Please try again.\\n\";"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_PASSWORD_CONFIRMATION_INCORRECT \u003d \"Your new password and confirmation password \""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"            + \"do not match. Please try again\\n\";"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ChangePasswordCommand.class);"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    private String oldPassword;"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    private String newPassword;"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    private String confirmationPassword;"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"     * Takes in old password, new password and confirmation password from parser and creates a new"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"     * ChangePasswordCommand object"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"     * @param oldPassword"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"     * @param newPassword"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"     * @param confirmPassword"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"    public ChangePasswordCommand(String oldPassword, String newPassword, String confirmPassword) {"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"        this.oldPassword \u003d oldPassword;"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        this.newPassword \u003d newPassword;"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        this.confirmationPassword \u003d confirmPassword;"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"     * Forward hashes string using SHA256 encryption and returns hashed string"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"     * @param argument"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    private String forwardHash(String argument) {"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"        return Hashing.sha256().hashString(argument, StandardCharsets.UTF_8).toString();"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"     * Forward hashes the user input password and checks if it matches with the encrypted password saved"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"    private boolean isOldPasswordCorrect() {"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"        String forwardHashedInputPassword \u003d forwardHash(oldPassword);"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"        String forwardHashActualPassword;"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"        UserPrefs userPrefs \u003d model.getUserPrefs();"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"        forwardHashActualPassword \u003d userPrefs.getAddressBookEncryptedPassword();"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"        if (forwardHashActualPassword.equals(forwardHashedInputPassword)) {"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Actual password and input password matches\");"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"            return true;"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"            logger.warning(\"Actual password and input password do not match\");"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"     * Takes new input passwords and checks them against one another."},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    private boolean isNewPasswordInputsSame() {"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        return newPassword.equals(confirmationPassword);"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"     * Checks if old password and new password are the same"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    private boolean isOldAndNewPasswordTheSame() {"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        return oldPassword.equals(newPassword);"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"        // Case where old password is incorrect"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"        if (!isOldPasswordCorrect()) {"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"            logger.warning(\"Password is incorrect. Note: Default password is \u0027password\u0027 \");"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"            throw new CommandException(MESSAGE_PASSWORD_INCORRECT);"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        // Case where new password and confirmation password do not match"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"        if (!isNewPasswordInputsSame()) {"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"            logger.warning(\"New password and confirmation password do not match\");"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"            throw new CommandException(MESSAGE_PASSWORD_CONFIRMATION_INCORRECT);"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"        // Case where old and new passwords are the same"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"        if (isOldAndNewPasswordTheSame()) {"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"            logger.warning(\"Old password and new password cannot be the same\");"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"            throw new CommandException(MESSAGE_OLD_NEW_PS_SAME);"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        // Case where user input passes both checks. Password is changed and UserPrefs saved"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"        UserPrefs userPrefs;"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        // Get user prefs file"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        userPrefs \u003d model.getUserPrefs();"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"        // Set new password to user prefs"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        userPrefs.setAddressBookEncryptedPassword(newPassword);"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"        // Logs new password and saved password for debugging purposes"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"        String hashedNewPassword \u003d forwardHash(newPassword);"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"        String userPrefsHashedPassword \u003d userPrefs.getAddressBookEncryptedPassword();"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"New Password: \" + newPassword"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"                + \"\\nEncrypted New Password: \" + hashedNewPassword"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"                + \"\\nEncrypted Password From UserPrefs:\" + userPrefsHashedPassword"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"                + \"\\nCommand\u0027s Password and UserPrefs saved password matches: \""},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"                + Boolean.toString(hashedNewPassword.equals(userPrefsHashedPassword)) + \"\\n\");"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"        // Return command result"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":142}},{"path":"src/main/java/seedu/address/logic/commands/ChangePrivacyCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":" * Changes the privacy setting of a person\u0027s details in the address book"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"changeprivacy\";"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"cp\";"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String TRUE_WORD \u003d \"true\";"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String FALSE_WORD \u003d \"false\";"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the privacy of the details of the person\""},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"            + \" identified by the index number used in the last person listing.\\n\""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_NAME + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\""},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_PHONE + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_EMAIL + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\""},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_ADDRESS + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\\n\""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_AVATAR + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\\n\""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_NAME + TRUE_WORD + \" \""},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_PHONE + FALSE_WORD + \" \""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_EMAIL + TRUE_WORD + \" \""},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_ADDRESS + FALSE_WORD + \" \""},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_AVATAR + FALSE_WORD;"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_CHANGE_PRIVACY_SUCCESS \u003d \"Changed the Privacy of the Person: %1$s\";"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_NO_FIELDS \u003d \"At least one field to change must be provided.\";"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    private final Index index;"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"    private final PersonPrivacySettings pps;"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"     * @param index of the person in the filtered person list to change the privacy of"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    public ChangePrivacyCommand(Index index, PersonPrivacySettings pps) {"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(index);"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(pps);"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        this.pps \u003d pps;"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson personToChange \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        Person newPerson \u003d null;"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"            newPerson \u003d createPersonWithChangedPrivacy(personToChange, pps);"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"            newPerson.setPrivacyLevel(model.getPrivacyLevel());"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"Person must have all fields initialised.\");"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"            model.updatePerson(personToChange, newPerson);"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(MESSAGE_CHANGE_PRIVACY_SUCCESS, newPerson));"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"     * Changes a person\u0027s fields\u0027 privacy"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"     * @param person the person whose privacy we would like to change"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps the settings of privacy for each field"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"    private static Person createPersonWithChangedPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps)"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"            throws IllegalValueException {"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        assert person !\u003d null;"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        Name name \u003d createNameWithPrivacy(person, pps);"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        Phone phone \u003d createPhoneWithPrivacy(person, pps);"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        Email email \u003d createEmailWithPrivacy(person, pps);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        Address address \u003d createAddressWithPrivacy(person, pps);"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        Remark remark \u003d createRemarkWithPrivacy(person, pps);"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        Avatar avatar \u003d person.getAvatar();"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        Boolean favourite \u003d person.getFavourite();"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        Set\u003cTag\u003e tag \u003d person.getTags();"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"        return new Person(name, phone, email, address, favourite, remark, avatar, tag);"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a new (@code Name) based on the input (@code Person) and (@code PersonPrivacySettings)"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A (@code Name) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"     * of the (@code PersonPrivacySettings)"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"    private static Name createNameWithPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        Name name;"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"            if (person.getName().getIsPrivate()) {"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"                person.getName().setPrivate(false);"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"                name \u003d new Name(person.getName().toString());"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"                person.getName().setPrivate(true);"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"                name \u003d new Name(person.getName().toString());"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"Invalid Name\");"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getNameIsPrivate() !\u003d null) {"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"            name.setPrivate(pps.getNameIsPrivate());"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"            name.setPrivate(person.getName().getIsPrivate());"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"        return name;"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a new (@code Phone) based on the input (@code Person) and (@code PersonPrivacySettings)"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A (@code Phone) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"     * of the (@code PersonPrivacySettings)"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"    private static Phone createPhoneWithPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"        Phone phone;"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"            if (person.getPhone().getIsPrivate()) {"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"                person.getPhone().setPrivate(false);"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"                phone \u003d new Phone(person.getPhone().toString());"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"                person.getPhone().setPrivate(true);"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"                phone \u003d new Phone(person.getPhone().toString());"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"Invalid Phone\");"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getPhoneIsPrivate() !\u003d null) {"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"            phone.setPrivate(pps.getPhoneIsPrivate());"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"            phone.setPrivate(person.getPhone().getIsPrivate());"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"        return phone;"},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a new (@code Email) based on the input (@code Person) and (@code PersonPrivacySettings)"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A (@code Email) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"     * of the (@code PersonPrivacySettings)"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"    private static Email createEmailWithPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"        Email email;"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"            if (person.getEmail().getIsPrivate()) {"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"                person.getEmail().setPrivate(false);"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"                email \u003d new Email(person.getEmail().toString());"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"                person.getEmail().setPrivate(true);"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"                email \u003d new Email(person.getEmail().toString());"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"Invalid Email\");"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getEmailIsPrivate() !\u003d null) {"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"            email.setPrivate(pps.getEmailIsPrivate());"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"            email.setPrivate(person.getEmail().getIsPrivate());"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"        return email;"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a new (@code Address) based on the input (@code Person) and (@code PersonPrivacySettings)"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A (@code Address) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"     * of the (@code PersonPrivacySettings)"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"    private static Address createAddressWithPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"        Address address;"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"            if (person.getAddress().getIsPrivate()) {"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"                person.getAddress().setPrivate(false);"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"                address \u003d new Address(person.getAddress().toString());"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"                person.getAddress().setPrivate(true);"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"                address \u003d new Address(person.getAddress().toString());"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"Invalid Address\");"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getAddressIsPrivate() !\u003d null) {"},{"lineNumber":225,"author":{"gitId":"jeffreygohkw"},"content":"            address.setPrivate(pps.getAddressIsPrivate());"},{"lineNumber":226,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":227,"author":{"gitId":"jeffreygohkw"},"content":"            address.setPrivate(person.getAddress().getIsPrivate());"},{"lineNumber":228,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"jeffreygohkw"},"content":"        return address;"},{"lineNumber":230,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":232,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a new (@code Remark) based on the input (@code Person) and (@code PersonPrivacySettings)"},{"lineNumber":234,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A (@code Remark) with the same value as that of the (@code Person)\u0027s but with the privacy set to that"},{"lineNumber":235,"author":{"gitId":"jeffreygohkw"},"content":"     * of the (@code PersonPrivacySettings)"},{"lineNumber":236,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"jeffreygohkw"},"content":"    private static Remark createRemarkWithPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {"},{"lineNumber":238,"author":{"gitId":"jeffreygohkw"},"content":"        Remark remark;"},{"lineNumber":239,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":240,"author":{"gitId":"jeffreygohkw"},"content":"            if (person.getRemark().getIsPrivate()) {"},{"lineNumber":241,"author":{"gitId":"jeffreygohkw"},"content":"                person.getRemark().setPrivate(false);"},{"lineNumber":242,"author":{"gitId":"jeffreygohkw"},"content":"                remark \u003d new Remark(person.getRemark().toString());"},{"lineNumber":243,"author":{"gitId":"jeffreygohkw"},"content":"                person.getRemark().setPrivate(true);"},{"lineNumber":244,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"                remark \u003d new Remark(person.getRemark().toString());"},{"lineNumber":246,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":248,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"Invalid Remark\");"},{"lineNumber":249,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getRemarkIsPrivate() !\u003d null) {"},{"lineNumber":251,"author":{"gitId":"jeffreygohkw"},"content":"            remark.setPrivate(pps.getRemarkIsPrivate());"},{"lineNumber":252,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":253,"author":{"gitId":"jeffreygohkw"},"content":"            remark.setPrivate(person.getRemark().getIsPrivate());"},{"lineNumber":254,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"jeffreygohkw"},"content":"        return remark;"},{"lineNumber":256,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":258,"author":{"gitId":"jeffreygohkw"},"content":"    public Index getIndex() {"},{"lineNumber":259,"author":{"gitId":"jeffreygohkw"},"content":"        return index;"},{"lineNumber":260,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":262,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettings getPps() {"},{"lineNumber":263,"author":{"gitId":"jeffreygohkw"},"content":"        return pps;"},{"lineNumber":264,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":266,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":267,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":268,"author":{"gitId":"jeffreygohkw"},"content":"        // short circuit if same object"},{"lineNumber":269,"author":{"gitId":"jeffreygohkw"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":270,"author":{"gitId":"jeffreygohkw"},"content":"            return true;"},{"lineNumber":271,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":273,"author":{"gitId":"jeffreygohkw"},"content":"        // instanceof handles nulls"},{"lineNumber":274,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(other instanceof ChangePrivacyCommand)) {"},{"lineNumber":275,"author":{"gitId":"jeffreygohkw"},"content":"            return false;"},{"lineNumber":276,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":278,"author":{"gitId":"jeffreygohkw"},"content":"        // state check"},{"lineNumber":279,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand c \u003d (ChangePrivacyCommand) other;"},{"lineNumber":280,"author":{"gitId":"jeffreygohkw"},"content":"        return index.equals(c.index)"},{"lineNumber":281,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 pps.equals(c.pps);"},{"lineNumber":282,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":284,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"jeffreygohkw"},"content":"     * Stores the privacy settings for each field of a person."},{"lineNumber":286,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":287,"author":{"gitId":"jeffreygohkw"},"content":"    public static class PersonPrivacySettings {"},{"lineNumber":288,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean nameIsPrivate;"},{"lineNumber":289,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean phoneIsPrivate;"},{"lineNumber":290,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean emailIsPrivate;"},{"lineNumber":291,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean addressIsPrivate;"},{"lineNumber":292,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean remarkIsPrivate;"},{"lineNumber":293,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":294,"author":{"gitId":"jeffreygohkw"},"content":"        public PersonPrivacySettings() {}"},{"lineNumber":295,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":296,"author":{"gitId":"jeffreygohkw"},"content":"        public PersonPrivacySettings(PersonPrivacySettings toCopy) {"},{"lineNumber":297,"author":{"gitId":"jeffreygohkw"},"content":"            this.nameIsPrivate \u003d toCopy.nameIsPrivate;"},{"lineNumber":298,"author":{"gitId":"jeffreygohkw"},"content":"            this.phoneIsPrivate \u003d toCopy.phoneIsPrivate;"},{"lineNumber":299,"author":{"gitId":"jeffreygohkw"},"content":"            this.emailIsPrivate \u003d toCopy.emailIsPrivate;"},{"lineNumber":300,"author":{"gitId":"jeffreygohkw"},"content":"            this.addressIsPrivate \u003d toCopy.addressIsPrivate;"},{"lineNumber":301,"author":{"gitId":"jeffreygohkw"},"content":"            this.remarkIsPrivate \u003d toCopy.remarkIsPrivate;"},{"lineNumber":302,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":303,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":304,"author":{"gitId":"jeffreygohkw"},"content":"        /**"},{"lineNumber":305,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns true if at least one field is not null."},{"lineNumber":306,"author":{"gitId":"jeffreygohkw"},"content":"         */"},{"lineNumber":307,"author":{"gitId":"jeffreygohkw"},"content":"        public boolean isAnyFieldNonNull() {"},{"lineNumber":308,"author":{"gitId":"jeffreygohkw"},"content":"            return CollectionUtil.isAnyNonNull(this.nameIsPrivate, this.phoneIsPrivate,"},{"lineNumber":309,"author":{"gitId":"jeffreygohkw"},"content":"                    this.emailIsPrivate, this.addressIsPrivate, this.remarkIsPrivate);"},{"lineNumber":310,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":311,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":312,"author":{"gitId":"jeffreygohkw"},"content":"        /**"},{"lineNumber":313,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of nameIsPrivate"},{"lineNumber":314,"author":{"gitId":"jeffreygohkw"},"content":"         */"},{"lineNumber":315,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getNameIsPrivate() {"},{"lineNumber":316,"author":{"gitId":"jeffreygohkw"},"content":"            return nameIsPrivate;"},{"lineNumber":317,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":318,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":319,"author":{"gitId":"jeffreygohkw"},"content":"        public void setNameIsPrivate(boolean nameIsPrivate) {"},{"lineNumber":320,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(nameIsPrivate);"},{"lineNumber":321,"author":{"gitId":"jeffreygohkw"},"content":"            this.nameIsPrivate \u003d nameIsPrivate;"},{"lineNumber":322,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":323,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":324,"author":{"gitId":"jeffreygohkw"},"content":"        /**"},{"lineNumber":325,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of phoneIsPrivate"},{"lineNumber":326,"author":{"gitId":"jeffreygohkw"},"content":"         */"},{"lineNumber":327,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getPhoneIsPrivate() {"},{"lineNumber":328,"author":{"gitId":"jeffreygohkw"},"content":"            return phoneIsPrivate;"},{"lineNumber":329,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":330,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":331,"author":{"gitId":"jeffreygohkw"},"content":"        public void setPhoneIsPrivate(boolean phoneIsPrivate) {"},{"lineNumber":332,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(phoneIsPrivate);"},{"lineNumber":333,"author":{"gitId":"jeffreygohkw"},"content":"            this.phoneIsPrivate \u003d phoneIsPrivate;"},{"lineNumber":334,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":336,"author":{"gitId":"jeffreygohkw"},"content":"        /**"},{"lineNumber":337,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of emailIsPrivate"},{"lineNumber":338,"author":{"gitId":"jeffreygohkw"},"content":"         */"},{"lineNumber":339,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getEmailIsPrivate() {"},{"lineNumber":340,"author":{"gitId":"jeffreygohkw"},"content":"            return emailIsPrivate;"},{"lineNumber":341,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":343,"author":{"gitId":"jeffreygohkw"},"content":"        public void setEmailIsPrivate(boolean emailIsPrivate) {"},{"lineNumber":344,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(emailIsPrivate);"},{"lineNumber":345,"author":{"gitId":"jeffreygohkw"},"content":"            this.emailIsPrivate \u003d emailIsPrivate;"},{"lineNumber":346,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":348,"author":{"gitId":"jeffreygohkw"},"content":"        /**"},{"lineNumber":349,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of addressIsPrivate"},{"lineNumber":350,"author":{"gitId":"jeffreygohkw"},"content":"         */"},{"lineNumber":351,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getAddressIsPrivate() {"},{"lineNumber":352,"author":{"gitId":"jeffreygohkw"},"content":"            return addressIsPrivate;"},{"lineNumber":353,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":354,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":355,"author":{"gitId":"jeffreygohkw"},"content":"        public void setAddressIsPrivate(boolean addressIsPrivate) {"},{"lineNumber":356,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(addressIsPrivate);"},{"lineNumber":357,"author":{"gitId":"jeffreygohkw"},"content":"            this.addressIsPrivate \u003d addressIsPrivate;"},{"lineNumber":358,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":359,"author":{"gitId":"charlesgoh"},"content":"        //@@author charlesgoh"},{"lineNumber":360,"author":{"gitId":"charlesgoh"},"content":"        /**"},{"lineNumber":361,"author":{"gitId":"charlesgoh"},"content":"         * Returns the value of remarkIsPrivate"},{"lineNumber":362,"author":{"gitId":"charlesgoh"},"content":"         */"},{"lineNumber":363,"author":{"gitId":"charlesgoh"},"content":"        public Boolean getRemarkIsPrivate() {"},{"lineNumber":364,"author":{"gitId":"charlesgoh"},"content":"            return remarkIsPrivate;"},{"lineNumber":365,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":366,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":367,"author":{"gitId":"charlesgoh"},"content":"        public void setRemarkIsPrivate(boolean remarkIsPrivate) {"},{"lineNumber":368,"author":{"gitId":"charlesgoh"},"content":"            requireNonNull(remarkIsPrivate);"},{"lineNumber":369,"author":{"gitId":"charlesgoh"},"content":"            this.remarkIsPrivate \u003d remarkIsPrivate;"},{"lineNumber":370,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":371,"author":{"gitId":"charlesgoh"},"content":"        //@@author"},{"lineNumber":372,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":373,"author":{"gitId":"jeffreygohkw"},"content":"        @Override"},{"lineNumber":374,"author":{"gitId":"jeffreygohkw"},"content":"        public boolean equals(Object other) {"},{"lineNumber":375,"author":{"gitId":"jeffreygohkw"},"content":"            // short circuit if same object"},{"lineNumber":376,"author":{"gitId":"jeffreygohkw"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":377,"author":{"gitId":"jeffreygohkw"},"content":"                return true;"},{"lineNumber":378,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":379,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":380,"author":{"gitId":"jeffreygohkw"},"content":"            // instanceof handles nulls"},{"lineNumber":381,"author":{"gitId":"jeffreygohkw"},"content":"            if (!(other instanceof PersonPrivacySettings)) {"},{"lineNumber":382,"author":{"gitId":"jeffreygohkw"},"content":"                return false;"},{"lineNumber":383,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":384,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":385,"author":{"gitId":"jeffreygohkw"},"content":"            // state check"},{"lineNumber":386,"author":{"gitId":"jeffreygohkw"},"content":"            PersonPrivacySettings c \u003d (PersonPrivacySettings) other;"},{"lineNumber":387,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":388,"author":{"gitId":"jeffreygohkw"},"content":"            return getNameIsPrivate().equals(c.getNameIsPrivate())"},{"lineNumber":389,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getPhoneIsPrivate().equals(c.getPhoneIsPrivate())"},{"lineNumber":390,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getEmailIsPrivate().equals(c.getEmailIsPrivate())"},{"lineNumber":391,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getAddressIsPrivate().equals(c.getAddressIsPrivate())"},{"lineNumber":392,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getRemarkIsPrivate().equals(c.getRemarkIsPrivate());"},{"lineNumber":393,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":394,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":395,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":14,"jeffreygohkw":381}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" * Clears all entries in the address book."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the address book. \""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_PERSON + \"] \""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_TASK + \"] \";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(model);"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":15,"wangyiming1019":1,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/ClearPersonCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Clears only the contacts in the address book."},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class ClearPersonCommand extends ClearCommand {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All contacts have been cleared!\";"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        model.resetPartialData(new AddressBook(), PREFIX_PERSON);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":22}},{"path":"src/main/java/seedu/address/logic/commands/ClearTaskCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Clears only the tasks in the address book."},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class ClearTaskCommand extends ClearCommand {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All tasks have been cleared!\";"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        model.resetPartialData(new AddressBook(), PREFIX_TASK);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":22}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    protected Storage storage;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of tasks."},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     * @return summary message for tasks displayed"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    public static String getMessageForTaskListShownSummary(int displaySize) {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        return String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * access to the dependencies."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"    public void setStorageInfo(Storage storage) {"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"        this.storage \u003d storage;"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":6,"Esilocke":10,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":" * Represents an undoable command that deletes an object from the address book."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"public abstract class DeleteCommand extends UndoableCommand {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"wangyiming1019":1,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/DeletePersonCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * Deletes a person from the address book."},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class DeletePersonCommand extends DeleteCommand {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"            + \": Deletes the person identified by the index number used in the last listing.\\n\""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private final Index targetIndex;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public DeletePersonCommand(Index targetIndex) {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e personsList \u003d model.getFilteredPersonList();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d personsList.size()) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyPerson personToDelete \u003d personsList.get(targetIndex.getZeroBased());"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, personToDelete));"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":51}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":" * Deletes a tag from identified persons using the last displayed indexes from the address book."},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommand extends DeleteCommand {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_FULL"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"            + \": Deletes the tag from the persons with the index numbers used in the last person list.\""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            + \" Command is case-sensitive. \\n\""},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"            + \"[INDEX] [MORE INDEXES] (index must be a positive integer) \""},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG_FULL + \" 1 2 t/friends \\n\";"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"The target persons do not have input tags.\";"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexes;"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    private final Tag toDelete;"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"     * @param targetIndexes of the persons in the filtered person list to edit"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"     * @param toDelete tag to delete from given target indexes"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"    public DeleteTagCommand(Tag toDelete, ArrayList\u003cIndex\u003e targetIndexes) {"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(targetIndexes);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toDelete);"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        this.toDelete \u003d toDelete;"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"     * @param toDelete tag to delete from given target indexes"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"    public DeleteTagCommand(Tag toDelete) {"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toDelete);"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        this.toDelete \u003d toDelete;"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"     * Check whether the index within the range then checks whether the tag exists among the specific persons."},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"     * If yes, delete the tag from the specific person in the person list."},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        boolean nonexistentTag \u003d true;"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        if (targetIndexes.size() \u003d\u003d 0) {"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"            reinitlializeArray(lastShownList.size());"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        // check any person have the tag"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"            int targetIndex \u003d targetIndexes.get(i).getZeroBased();"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson readOnlyPerson \u003d lastShownList.get(targetIndex);"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"            if (readOnlyPerson.getTags().contains(toDelete)) {"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"                nonexistentTag \u003d false;"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"        if (nonexistentTag) {"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"            throw  new CommandException(MESSAGE_NONEXISTENT_TAG);"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"            model.deleteTag(this.toDelete, this.targetIndexes);"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, toDelete));"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"    private void reinitlializeArray(int size) {"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"            targetIndexes.add(Index.fromZeroBased(i));"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"        // short circuit if same object"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"            return true;"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        if (!(other instanceof DeleteTagCommand)) {"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"            return false;"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"        // state check"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand e \u003d (DeleteTagCommand) other;"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        return targetIndexes.equals(e.targetIndexes)"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 toDelete.equals(e.toDelete);"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":125}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" * Deletes a task from the address book."},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"public class DeleteTaskCommand extends DeleteCommand {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TASK"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            + \": Deletes the task identified by the index number used in the last listing.\\n\""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    private final Index targetIndex;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public DeleteTaskCommand(Index targetIndex) {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e tasksList \u003d model.getFilteredTaskList();"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d tasksList.size()) {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyTask taskToDelete \u003d tasksList.get(targetIndex.getZeroBased());"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            model.deleteTask(taskToDelete);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, taskToDelete));"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof DeleteTaskCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":56}},{"path":"src/main/java/seedu/address/logic/commands/DismissCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"/** Dismisses at least 1 person from a specified task in the Address Book**/"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class DismissCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_WORD \u003d \"dismiss\";"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_ALIAS \u003d \"ds\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Dismisses people from a task in the Address Book. \""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            + \"PERSON INDEXES... \""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_FROM + \"TASK \";"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Dismissed %1$s people from task \\n%2$s\";"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_TARGET_ARGS \u003d \"Only 1 task index should be specified\";"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_PERSONS_ARGS \u003d \"At least 1 person index must be specified\";"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_NONE_ASSIGNED \u003d \"None of the specified persons are assigned to this task\";"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    private ArrayList\u003cIndex\u003e personIndexes;"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private Index taskIndex;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public DismissCommand(ArrayList\u003cIndex\u003e personIndexes, Index taskIndex) {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        assert(personIndexes.size() \u003e 0);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        this.personIndexes \u003d personIndexes;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e tasksList \u003d model.getFilteredTaskList();"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personIndexes \u003d createPersonsToDismiss(this.personIndexes);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        if (taskIndex.getZeroBased() \u003e\u003d tasksList.size()) {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask dismissedTask \u003d tasksList.get(taskIndex.getZeroBased());"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            model.dismissFromTask(personIndexes, dismissedTask);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The specified task cannot be missing\");"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_NONE_ASSIGNED);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personIndexes.size(), dismissedTask));"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof DismissCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.personIndexes.equals(((DismissCommand) other).personIndexes)"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.taskIndex.equals(((DismissCommand) other).taskIndex)); // state check"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"     * Creates a {@code ArrayList} that contains all the {@code ReadOnlyPerson} converted from the {@Code Index}"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"     * @throws CommandException if the specified Index is out of range"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    public ArrayList\u003cReadOnlyPerson\u003e createPersonsToDismiss (ArrayList\u003cIndex\u003e indexes)  throws CommandException {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personsToDismiss \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e personsList \u003d model.getFilteredPersonList();"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"            for (Index i : indexes) {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"                ReadOnlyPerson toDismiss \u003d personsList.get(i.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"                if (!personsToDismiss.contains(toDismiss)) {"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"                    personsToDismiss.add(toDismiss);"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        return personsToDismiss;"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":89}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":" * Represents an undoable command that edits an object in the address book."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"public abstract class EditCommand extends UndoableCommand {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"wangyiming1019":1,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/EditPersonCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":" * Edits a person in the address book."},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"public class EditPersonCommand extends EditCommand {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_AVATAR + \"AVATAR] \""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Edited Person: \\n%1$s\";"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_ALL_FIELDS_PRIVATE \u003d \"At least one field to be edited must be public.\";"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    private static boolean areFieldsAllPrivate \u003d true;"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    private final Index index;"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(index);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        this.index \u003d index;"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"            Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            editedPerson.setPrivacyLevel(model.getPrivacyLevel());"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, editedPerson));"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_ALL_FIELDS_PRIVATE);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     * A person with private fields cannot be edited"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"                                             EditPersonDescriptor editPersonDescriptor)"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            throws IllegalArgumentException {"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        Name updatedName;"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        Phone updatedPhone;"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        Email updatedEmail;"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        Address updatedAddress;"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        Remark updatedRemark;"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        Set\u003cTag\u003e updatedTags;"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        Boolean updateFavourite;"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        Avatar updatedAvatar;"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        areFieldsAllPrivate \u003d true;"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        updatedName \u003d createUpdatedName(personToEdit, editPersonDescriptor);"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        updatedPhone \u003d createUpdatedPhone(personToEdit, editPersonDescriptor);"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        updatedEmail \u003d createUpdatedEmail(personToEdit, editPersonDescriptor);"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"        updatedAddress \u003d createUpdatedAddress(personToEdit, editPersonDescriptor);"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        updatedRemark \u003d createUpdatedRemark(personToEdit, editPersonDescriptor);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"        updatedTags \u003d createUpdatedTags(personToEdit, editPersonDescriptor);"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        updateFavourite \u003d createUpdatedFavourite(personToEdit, editPersonDescriptor);"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        updatedAvatar \u003d createUpdatedAvatar(personToEdit, editPersonDescriptor);"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        if (areFieldsAllPrivate) {"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"                updateFavourite, updatedRemark, updatedAvatar, updatedTags);"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Name) for use in createEditedPerson"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Name) from either the personToEdit or the editPersonDescriptor depending on privacy"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"    private static Name createUpdatedName(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"        Name updatedName;"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getName().getIsPrivate()) {"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"            updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getName().isPresent()) {"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"            updatedName \u003d personToEdit.getName();"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedName;"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Phone) for use in createEditedPerson"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Phone) from either the personToEdit or the editPersonDescriptor"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"    private static Phone createUpdatedPhone(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"        Phone updatedPhone;"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getPhone().getIsPrivate()) {"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"            updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getPhone().isPresent()) {"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"            updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedPhone;"},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Email) for use in createEditedPerson"},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Email) from either the personToEdit or the editPersonDescriptor"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"    private static Email createUpdatedEmail(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"        Email updatedEmail;"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getEmail().getIsPrivate()) {"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"            updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getEmail().isPresent()) {"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"            updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedEmail;"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Address) for use in createEditedPerson"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Address) from either the personToEdit or the editPersonDescriptor"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"    private static Address createUpdatedAddress(ReadOnlyPerson personToEdit,"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"                                                EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"        Address updatedAddress;"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getAddress().getIsPrivate()) {"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"            updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getAddress().isPresent()) {"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"            updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedAddress;"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"    //**author charlesgoh"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Remark) for use in createEditedPerson"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":224,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Remark) from either the personToEdit or the editPersonDescriptor"},{"lineNumber":225,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input"},{"lineNumber":226,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"jeffreygohkw"},"content":"    private static Remark createUpdatedRemark(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":228,"author":{"gitId":"jeffreygohkw"},"content":"        Remark updatedRemark;"},{"lineNumber":229,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getRemark().getIsPrivate()) {"},{"lineNumber":230,"author":{"gitId":"jeffreygohkw"},"content":"            updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":231,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getRemark().isPresent()) {"},{"lineNumber":232,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;"},{"lineNumber":233,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":234,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":235,"author":{"gitId":"jeffreygohkw"},"content":"            updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":236,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedRemark;"},{"lineNumber":238,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":240,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Avatar) for use in createEditedPerson"},{"lineNumber":242,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":243,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":244,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Avatar) from either the personToEdit or the editPersonDescriptor"},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input"},{"lineNumber":246,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"jeffreygohkw"},"content":"    private static Avatar createUpdatedAvatar(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":248,"author":{"gitId":"jeffreygohkw"},"content":"        Avatar updatedAvatar \u003d editPersonDescriptor.getAvatar().orElse(personToEdit.getAvatar());"},{"lineNumber":249,"author":{"gitId":"jeffreygohkw"},"content":"        if (editPersonDescriptor.getAvatar().isPresent()) {"},{"lineNumber":250,"author":{"gitId":"jeffreygohkw"},"content":"            areFieldsAllPrivate \u003d false;"},{"lineNumber":251,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedAvatar;"},{"lineNumber":253,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"jeffreygohkw"},"content":"    //author"},{"lineNumber":255,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Tag) for use in createEditedPerson"},{"lineNumber":257,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":258,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":259,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Tag) from either the personToEdit or the editPersonDescriptor depending on the input"},{"lineNumber":260,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":261,"author":{"gitId":"jeffreygohkw"},"content":"    private static Set\u003cTag\u003e createUpdatedTags(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":262,"author":{"gitId":"jeffreygohkw"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":263,"author":{"gitId":"jeffreygohkw"},"content":"        if (editPersonDescriptor.getTags().isPresent()) {"},{"lineNumber":264,"author":{"gitId":"jeffreygohkw"},"content":"            areFieldsAllPrivate \u003d false;"},{"lineNumber":265,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedTags;"},{"lineNumber":267,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":269,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Favourite) for use in createEditedPerson"},{"lineNumber":271,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit"},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor"},{"lineNumber":273,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Favourite) from either the personToEdit or the editPersonDescriptor depending on the input"},{"lineNumber":274,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":275,"author":{"gitId":"jeffreygohkw"},"content":"    private static Boolean createUpdatedFavourite(ReadOnlyPerson personToEdit,"},{"lineNumber":276,"author":{"gitId":"jeffreygohkw"},"content":"                                                  EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":277,"author":{"gitId":"jeffreygohkw"},"content":"        Boolean updateFavourite \u003d editPersonDescriptor.getFavourite().orElse(personToEdit.getFavourite());"},{"lineNumber":278,"author":{"gitId":"jeffreygohkw"},"content":"        if (editPersonDescriptor.getFavourite().isPresent()) {"},{"lineNumber":279,"author":{"gitId":"jeffreygohkw"},"content":"            areFieldsAllPrivate \u003d false;"},{"lineNumber":280,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"jeffreygohkw"},"content":"        return updateFavourite;"},{"lineNumber":282,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":284,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls"},{"lineNumber":293,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof EditPersonCommand)) {"},{"lineNumber":294,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":297,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;"},{"lineNumber":298,"author":{"gitId":"Esilocke"},"content":"        return index.equals(e.index) \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":299,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":301,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"Esilocke"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"     * corresponding field value of the person."},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":"        private Name name;"},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"        private Phone phone;"},{"lineNumber":309,"author":{"gitId":"Esilocke"},"content":"        private Email email;"},{"lineNumber":310,"author":{"gitId":"Esilocke"},"content":"        private Address address;"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"        private Boolean favourite;"},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"        private Remark remark;"},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":"        private Avatar avatar;"},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":317,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":321,"author":{"gitId":"Esilocke"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":323,"author":{"gitId":"Esilocke"},"content":"            this.favourite \u003d toCopy.favourite;"},{"lineNumber":324,"author":{"gitId":"Esilocke"},"content":"            this.remark \u003d toCopy.remark;"},{"lineNumber":325,"author":{"gitId":"Esilocke"},"content":"            this.avatar \u003d toCopy.avatar;"},{"lineNumber":326,"author":{"gitId":"Esilocke"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":327,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":329,"author":{"gitId":"Esilocke"},"content":"        /**"},{"lineNumber":330,"author":{"gitId":"Esilocke"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":331,"author":{"gitId":"Esilocke"},"content":"         */"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":333,"author":{"gitId":"Esilocke"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.remark,"},{"lineNumber":334,"author":{"gitId":"Esilocke"},"content":"                    this.avatar, this.tags);"},{"lineNumber":335,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":337,"author":{"gitId":"Esilocke"},"content":"        public void setName(Name name) {"},{"lineNumber":338,"author":{"gitId":"Esilocke"},"content":"            this.name \u003d name;"},{"lineNumber":339,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":340,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":341,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":342,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":343,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":344,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":345,"author":{"gitId":"Esilocke"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":346,"author":{"gitId":"Esilocke"},"content":"            this.phone \u003d phone;"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":348,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":349,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":350,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":351,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":352,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":353,"author":{"gitId":"Esilocke"},"content":"        public void setEmail(Email email) {"},{"lineNumber":354,"author":{"gitId":"Esilocke"},"content":"            this.email \u003d email;"},{"lineNumber":355,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":356,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":357,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cEmail\u003e getEmail()  {"},{"lineNumber":358,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":359,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":361,"author":{"gitId":"Esilocke"},"content":"        public void setAddress(Address address) {"},{"lineNumber":362,"author":{"gitId":"Esilocke"},"content":"            this.address \u003d address;"},{"lineNumber":363,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":364,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":368,"author":{"gitId":"wangyiming1019"},"content":"        //@@author wangyiming1019"},{"lineNumber":369,"author":{"gitId":"wangyiming1019"},"content":"        public void setFavourite(Boolean favourite) {"},{"lineNumber":370,"author":{"gitId":"wangyiming1019"},"content":"            this.favourite \u003d favourite;"},{"lineNumber":371,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":372,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":373,"author":{"gitId":"wangyiming1019"},"content":"        public Optional\u003cBoolean\u003e getFavourite() {"},{"lineNumber":374,"author":{"gitId":"wangyiming1019"},"content":"            return Optional.ofNullable(favourite);"},{"lineNumber":375,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":376,"author":{"gitId":"wangyiming1019"},"content":"        //@@author"},{"lineNumber":377,"author":{"gitId":"Esilocke"},"content":"        public void setRemark(Remark remark) {"},{"lineNumber":378,"author":{"gitId":"Esilocke"},"content":"            this.remark \u003d remark;"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":381,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":382,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(remark);"},{"lineNumber":383,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":384,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":385,"author":{"gitId":"Esilocke"},"content":"        public void setAvatar(Avatar avatar) {"},{"lineNumber":386,"author":{"gitId":"Esilocke"},"content":"            this.avatar \u003d avatar;"},{"lineNumber":387,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":388,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":389,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cAvatar\u003e getAvatar() {"},{"lineNumber":390,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(avatar);"},{"lineNumber":391,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":392,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":393,"author":{"gitId":"Esilocke"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":394,"author":{"gitId":"Esilocke"},"content":"            this.tags \u003d tags;"},{"lineNumber":395,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":397,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":398,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":399,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":400,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":401,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":402,"author":{"gitId":"Esilocke"},"content":"        public boolean equals(Object other) {"},{"lineNumber":403,"author":{"gitId":"Esilocke"},"content":"            // short circuit if same object"},{"lineNumber":404,"author":{"gitId":"Esilocke"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":405,"author":{"gitId":"Esilocke"},"content":"                return true;"},{"lineNumber":406,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":407,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":408,"author":{"gitId":"Esilocke"},"content":"            // instanceof handles nulls"},{"lineNumber":409,"author":{"gitId":"Esilocke"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":410,"author":{"gitId":"Esilocke"},"content":"                return false;"},{"lineNumber":411,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":412,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":413,"author":{"gitId":"Esilocke"},"content":"            // state check"},{"lineNumber":414,"author":{"gitId":"Esilocke"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":416,"author":{"gitId":"Esilocke"},"content":"            return getName().equals(e.getName())"},{"lineNumber":417,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":418,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":419,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":420,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getFavourite().equals(e.getFavourite())"},{"lineNumber":421,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark())"},{"lineNumber":422,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getAvatar().equals(e.getAvatar())"},{"lineNumber":423,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":424,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":425,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":426,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":190,"Esilocke":227,"wangyiming1019":9}},{"path":"src/main/java/seedu/address/logic/commands/EditTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":" * Renames and edits the specified tag in the address book."},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommand extends EditCommand {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_FULL"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            + \": Edits the specified tag \""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            + \"and updates all existing contacts that shares this tag with the new value.\\n\""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: TAGTOCHANGE (must be alphanumerical) \""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            + \"TAGNEWNAME (must be alphanumerical)\\n\""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends enemies\";"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Replaced tag %1$s with %2$s\";"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"No such tag was found in the address book.\";"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INSUFFICIENT_ARGS \u003d \"Only 2 arguments should be provided!\";"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_TAG_NAME \u003d \"Tag names must be alphanumerical.\";"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_TAGS \u003d \"The new name of the tag cannot be the same as the old name.\";"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    private final ArrayList\u003cIndex\u003e affectedIndexes;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    private final Tag toEdit;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private final Tag newTag;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     * @param toEdit The value of the tag to be changed"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"     * @param newTag The new value for the tag"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    public EditTagCommand(Tag toEdit, Tag newTag) {"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toEdit);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(newTag);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        this.toEdit \u003d toEdit;"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        this.newTag \u003d newTag;"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        this.affectedIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson currentlyViewed;"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        Set\u003cTag\u003e tagSet;"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        boolean tagNotPresent \u003d true;"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            currentlyViewed \u003d lastShownList.get(i);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            tagSet \u003d currentlyViewed.getTags();"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            if (tagSet.contains(toEdit)) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"                tagNotPresent \u003d false;"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"                affectedIndexes.add(Index.fromZeroBased(i));"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        if (tagNotPresent) {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_TAG_NOT_FOUND);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            model.editTag(toEdit, newTag, affectedIndexes);"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TAGS);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, toEdit.tagName, newTag.tagName));"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof EditTagCommand)) {"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        // state check"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand e \u003d (EditTagCommand) other;"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        return toEdit.equals(e.toEdit)"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 newTag.equals(e.newTag);"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":98}},{"path":"src/main/java/seedu/address/logic/commands/EditTaskCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Assignees;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":" * Edits a task in the address book."},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"public class EditTaskCommand extends EditCommand {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD  + \" \" + PREFIX_TASK"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            + \": Edits the details of the task identified \""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            + \"by the index number used in the last task listing. \""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DESCRIPTION + \"write 1200-word essay \""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PRIORITY + \"1\";"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Edited Task: \\n%1$s\";"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    private final EditTaskDescriptor editTaskDescriptor;"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    private final Index index;"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"     * @param index of the task in the filtered task list to edit"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"     * @param editTaskDescriptor details to edit the task with"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(index);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editTaskDescriptor);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        this.index \u003d index;"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e lastShownTaskList \u003d model.getFilteredTaskList();"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyTask taskToEdit \u003d lastShownTaskList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, editedTask));"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"     * edited with {@code editTaskDescriptor}."},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    private static Task createEditedTask(ReadOnlyTask taskToEdit,"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"                                         EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        TaskName updatedTaskName;"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        Description updatedDescription;"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        Deadline updatedDeadline;"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        Priority updatedPriority;"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        Assignees assignees;"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        Boolean updatedState;"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        TaskAddress updatedTaskAddress;"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        updatedTaskName \u003d editTaskDescriptor.getTaskName().orElse(taskToEdit.getTaskName());"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        // You cannot edit assignees or state using edit command"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        assignees \u003d taskToEdit.getAssignees();"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        updatedState \u003d taskToEdit.getCompleteState();"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        updatedTaskAddress \u003d editTaskDescriptor.getTaskAddress().orElse(taskToEdit.getTaskAddress());"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        return new Task(updatedTaskName, updatedDescription, updatedDeadline, updatedPriority, assignees, updatedState,"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"                updatedTaskAddress);"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof EditTaskCommand)) {"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand e \u003d (EditTaskCommand) other;"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"     * Stores the details to edit the task with. Each non-empty field value will replace the"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"     * corresponding field value of the task."},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"    public static class EditTaskDescriptor {"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        private TaskName taskName;"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        private Description description;"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        private Deadline deadline;"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        private Priority priority;"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"        private Assignees assignees;"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        private TaskAddress taskAddress;"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        public EditTaskDescriptor() {}"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"            this.taskName \u003d toCopy.taskName;"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"            this.description \u003d toCopy.description;"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"            this.deadline \u003d toCopy.deadline;"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"            this.priority \u003d toCopy.priority;"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"            this.assignees \u003d toCopy.assignees;"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"            this.taskAddress \u003d toCopy.taskAddress;"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"        /**"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"         */"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"            return CollectionUtil.isAnyNonNull(this.taskName, this.description, this.deadline, this.priority,"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"                    this.taskAddress);"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"        public void setTaskName(TaskName taskName) {"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"            this.taskName \u003d taskName;"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cTaskName\u003e getTaskName() {"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(taskName);"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"        public void setDescription(Description description) {"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"            this.description \u003d description;"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cDescription\u003e getDescription() {"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(description);"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"        public void setDeadline(Deadline deadline) {"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"            this.deadline \u003d deadline;"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cDeadline\u003e getDeadline()  {"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(deadline);"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"        public void setPriority(Priority priority) {"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"            this.priority \u003d priority;"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(priority);"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        public void setTaskAddress(TaskAddress taskAddress) {"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"            this.taskAddress \u003d taskAddress;"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cTaskAddress\u003e getTaskAddress() {"},{"lineNumber":199,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(taskAddress);"},{"lineNumber":200,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":202,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":"        public boolean equals(Object other) {"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"            // short circuit if same object"},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"                return true;"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"            // instanceof handles nulls"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"            if (!(other instanceof EditTaskDescriptor)) {"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"                return false;"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"            // state check"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"            return getTaskName().equals(e.getTaskName())"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getDeadline().equals(e.getDeadline())"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getTaskAddress().equals(e.getTaskAddress());"},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":224}},{"path":"src/main/java/seedu/address/logic/commands/FavouriteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" * Favourites a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"favourite\";"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"fav\";"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            + \": Favourites the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_FAVOURITE_PERSON_SUCCESS \u003d \"Favourited Person: %1$s\";"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_FAVOURITE \u003d \"Person is already favourited.\";"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    public FavouriteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToFavourite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        Person editedPerson \u003d new Person(personToFavourite.getName(),"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"                personToFavourite.getPhone(), personToFavourite.getEmail(),"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"                personToFavourite.getAddress(), true,"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"                personToFavourite.getRemark(), personToFavourite.getAvatar(),"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"                personToFavourite.getTags());"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        if (personToFavourite.getFavourite().equals(true)) {"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FAVOURITE);"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"            model.updatePerson(personToFavourite, editedPerson);"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FAVOURITE);"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_FAVOURITE_PERSON_SUCCESS, personToFavourite));"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof FavouriteCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.targetIndex.equals(((FavouriteCommand) other).targetIndex)); // state check"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":75}},{"path":"src/main/java/seedu/address/logic/commands/FavouriteListCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsFavouritePredicate;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":" * Lists all favourited persons in the address book to the user."},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"showfavourite\";"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"sfav\";"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all favourited persons.\";"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    private static final NameContainsFavouritePredicate predicate \u003d new NameContainsFavouritePredicate();"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":23}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":" * Represents a command that finds objects in the address book."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"public abstract class FindCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"wangyiming1019":1,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/FindPersonCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":" * Finds people in the address book."},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class FindPersonCommand extends FindCommand {"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    private final NameContainsKeywordsPredicate personPredicate;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        this.personPredicate \u003d predicate;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        assert(personPredicate !\u003d null);"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredPersonList(personPredicate);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"                || other instanceof FindPersonCommand"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.personPredicate.equals(((FindPersonCommand) other).personPredicate);"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":32}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":" * Finds and lists all persons in address book who has a tag that contains any of the argument keywords."},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":" * Keyword matching is case sensitive."},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommand extends FindCommand {"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_FULL"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"            + \": Finds all persons whose tags contain any of \""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"            + \"the specified tags (not case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG_FULL + \" friends colleagues\";"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    private final NameContainsTagsPredicate predicate;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public FindTagCommand(NameContainsTagsPredicate predicate) {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":38}},{"path":"src/main/java/seedu/address/logic/commands/FindTaskCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" * Finds tasks in the address book."},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"public class FindTaskCommand extends FindCommand {"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD  + \" \" + PREFIX_TASK"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"            + \": Finds all tasks whose names or descriptions \""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"            + \"contain any of the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]... [p/MINIMUM_PRIORITY] [done/TASK_STATE]\\n\""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" task make\";"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_COMPLETE_VALUE \u003d \"The task status should either be \u0027true\u0027 or \u0027false\u0027\";"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_PRIORITY \u003d \"The specified priority should be an integer from 1 to 5\";"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    private final TaskContainsKeywordPredicate taskPredicate;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public FindTaskCommand(TaskContainsKeywordPredicate predicate) {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        this.taskPredicate \u003d predicate;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        assert(taskPredicate !\u003d null);"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredTaskList(taskPredicate);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(getMessageForTaskListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"                || other instanceof FindTaskCommand"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.taskPredicate.equals(((FindTaskCommand) other).taskPredicate);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":37}},{"path":"src/main/java/seedu/address/logic/commands/FontSizeCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.ChangeFontSizeEvent;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":" * Sorts all persons in address book by any field. Sorting can be done in ascending or descending order"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"public class FontSizeCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public static final int MINIMUM_FONT_SIZE_MULTIPLIER \u003d 0;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    public static final int MAXIMUM_FONT_SIZE_MULTIPLIER \u003d 5;"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"fontsize\";"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"fs\";"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final String INCREASE_SIZE_PARAMETER \u003d \"increase\";"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public static final String DECREASE_SIZE_PARAMETER \u003d \"decrease\";"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public static final String RESET_SIZE_PARAMETER \u003d \"reset\";"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    public static final ArrayList\u003cString\u003e ACCEPTED_PARAMETERS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"            INCREASE_SIZE_PARAMETER, DECREASE_SIZE_PARAMETER, RESET_SIZE_PARAMETER));"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Increases, decreases or resets font sizes \\n\""},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"                + \"Parameters: KEYWORD [OPTION]\\n\""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"                + \"Example: \" + COMMAND_WORD + \" increase\\n\""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"                + \"Example 2: \" + COMMAND_ALIAS + \" reset\\n\";"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid Input.\\n\" + MESSAGE_USAGE;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS_INCREASE_FONT \u003d \"Font size increased successfully\";"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS_DECREASE_FONT \u003d \"Font size decreased successfully\";"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS_RESET_FONT \u003d \"Font size reset successfully\";"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    private final String option;"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public FontSizeCommand(String option) {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        this.option \u003d option;"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    public String getOption() {"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        return this.option;"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        switch (option) {"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        case INCREASE_SIZE_PARAMETER:"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"            EventsCenter.getInstance().post(new ChangeFontSizeEvent(ChangeFontSizeEvent.getIncreaseSizeEventIndex()));"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS_INCREASE_FONT);"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        case DECREASE_SIZE_PARAMETER:"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"            EventsCenter.getInstance().post(new ChangeFontSizeEvent(ChangeFontSizeEvent.getDecreaseSizeEventIndex()));"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS_DECREASE_FONT);"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        case RESET_SIZE_PARAMETER:"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"            EventsCenter.getInstance().post(new ChangeFontSizeEvent(ChangeFontSizeEvent.getResetSizeEventIndex()));"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS_RESET_FONT);"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"            System.err.println(\"Parameter is invalid\");"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"            throw new CommandException(MESSAGE_INVALID_INPUT + MESSAGE_USAGE);"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":68}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangyiming1019":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":3,"wangyiming1019":1,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/LocateCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":" * Locates a person\u0027s address on Google Maps identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"locate\";"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"loc\";"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"            + \": Locates the address of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_LOCATE_PERSON_SUCCESS \u003d \"Searching for Person at Index: %1$s\";"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_PRIVATE_ADDRESS_FAILURE \u003d \"Person %1$s has a Private Address\";"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_NO_ADDRESS_FAILURE \u003d \"Person %1$s has no Address\";"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    public LocateCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        if (model.getFilteredPersonList().get(targetIndex.getZeroBased()).getAddress().getIsPrivate()) {"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_PRIVATE_ADDRESS_FAILURE, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        if (model.getFilteredPersonList().get(targetIndex.getZeroBased()).getAddress().toString().equals(\"\")) {"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_NO_ADDRESS_FAILURE, targetIndex.getOneBased()));"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        EventsCenter.getInstance().post(new BrowserPanelLocateEvent("},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"                model.getFilteredPersonList().get(targetIndex.getZeroBased())));"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof LocateCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.targetIndex.equals(((LocateCommand) other).targetIndex)); // state check"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":62}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":" * Sets lock in model to true or false, which allows or restricts the usage of all commands"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"public class LockCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"lk\";"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Locks the application. \""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"            + \"No commands can be executed\\n\""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_PASSWORD + \"PASSWORD \";"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address++ locked successfully\";"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_PASSWORD_INCORRECT \u003d \"Password is incorrect. Please try again\";"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(UnlockCommand.class);"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    private String password;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    public LockCommand(String password) {"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        this.password \u003d password;"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"     * Checks if input password matches the one saved in user prefs."},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    private boolean isPasswordCorrect() {"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        UserPrefs userPrefs \u003d model.getUserPrefs();"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        String hashedPassword \u003d Hashing.sha256()"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"                .hashString(password, StandardCharsets.UTF_8).toString();"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        return hashedPassword.equals(userPrefs.getAddressBookEncryptedPassword());"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        if (isPasswordCorrect()) {"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"            // Case where password is correct"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"            // Access model to lock"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"            model.lockAddressBookFromModel();"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"            // Logs current state"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Lock state is now: \" + Boolean.toString(model.getLockState()));"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"            //Return command result"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"            // Case where password is incorrect"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"            throw new CommandException(MESSAGE_PASSWORD_INCORRECT);"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":67}},{"path":"src/main/java/seedu/address/logic/commands/NavigateCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":" * Navigates from one address to another with the help of Google Maps"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"public class NavigateCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"navigate\";"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"nav\";"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"            + \": Get directions from one address to another.\\n\""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: [fp/INDEX] OR [ft/INDEX] (must be a positive integer) OR [fa/ADDRESS] (Only one of three)\""},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"            + \" AND [tp/INDEX] OR [tt/INDEX] (must be a positive integer) OR [ta/ADDRESS] (Only one of three)\\n\""},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" fp/2 ta/University Town\";"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_NAVIGATE_SUCCESS \u003d \"Navigating from %1$s to %2$s\";"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_MULTIPLE_FROM_ERROR \u003d \"Only one type of From prefix allowed.\";"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_MULTIPLE_TO_ERROR \u003d \"Only one type of To prefix allowed.\";"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_PRIVATE_PERSON_ADDRESS_ERROR \u003d \"Address of the Person at index %1$s is private.\";"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_PERSON_HAS_NO_ADDRESS_ERROR \u003d \"Person at index %1$s does not have an address.\";"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_TASK_HAS_NO_ADDRESS_ERROR \u003d \"Task at index %1$s does not have an address.\";"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    private final Location locationFrom;"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    private final Location locationTo;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    private final Index fromIndex;"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    private final Index toIndex;"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    private final boolean fromIsTask;"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    private final boolean toIsTask;"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    public NavigateCommand(Location locationFrom, Location locationTo, Index fromIndex, Index toIndex,"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"                           boolean fromIsTask, boolean toIsTask) throws IllegalValueException {"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        Location from \u003d null;"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        Location to \u003d null;"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        checkDuplicateFromAndToLocation(locationFrom, locationTo, fromIndex, toIndex);"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        if (locationFrom !\u003d null) {"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"            from \u003d locationFrom;"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        if (locationTo !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"            to \u003d locationTo;"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        this.locationFrom \u003d from;"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        this.locationTo \u003d to;"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        this.toIndex \u003d toIndex;"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        this.fromIndex \u003d fromIndex;"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        this.toIsTask \u003d toIsTask;"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        this.fromIsTask \u003d fromIsTask;"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"     * Throws an IllegalArgumentException if there is both locationFrom and fromIndex are not null,"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"     * or if both locationTo and toIndex are not null."},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkDuplicateFromAndToLocation(Location locationFrom, Location locationTo,"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"                                                 Index fromIndex, Index toIndex) throws IllegalArgumentException {"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        if (locationFrom !\u003d null \u0026\u0026 fromIndex !\u003d null) {"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        if (locationTo !\u003d null \u0026\u0026 toIndex !\u003d null) {"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    private Location setLocationByIndex(Index index, boolean isTask) throws IllegalValueException, CommandException {"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        if (isTask) {"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"            if (model.getFilteredTaskList().get(index.getZeroBased()).getTaskAddress().toString().equals(\"\")) {"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"                throw new CommandException(String.format(MESSAGE_TASK_HAS_NO_ADDRESS_ERROR, index.getOneBased()));"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"                return new Location(model.getFilteredTaskList().get(index.getZeroBased()).getTaskAddress().toString());"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            if (model.getFilteredPersonList().get(index.getZeroBased()).getAddress().toString().equals(\"\")) {"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"                throw new CommandException(String.format(MESSAGE_PERSON_HAS_NO_ADDRESS_ERROR, index.getOneBased()));"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (model.getFilteredPersonList().get(index.getZeroBased()).getAddress().getIsPrivate()) {"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"                throw new CommandException(String.format(MESSAGE_PRIVATE_PERSON_ADDRESS_ERROR, index.getOneBased()));"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"                return new Location(model.getFilteredPersonList().get(index.getZeroBased())"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"                        .getAddress().toString());"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        Location from;"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        Location to;"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        if (fromIndex !\u003d null) {"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"            try {"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"                from \u003d setLocationByIndex(fromIndex, fromIsTask);"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"                throw new IllegalArgumentException(MESSAGE_PRIVATE_PERSON_ADDRESS_ERROR);"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            from \u003d locationFrom;"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        if (toIndex !\u003d null) {"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"            try {"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"                to \u003d setLocationByIndex(toIndex, toIsTask);"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"                throw new IllegalArgumentException(MESSAGE_PRIVATE_PERSON_ADDRESS_ERROR);"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"            to \u003d locationTo;"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        EventsCenter.getInstance().post(new BrowserPanelNavigateEvent(from, to));"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(MESSAGE_NAVIGATE_SUCCESS, from, to));"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"    public Location getLocationFrom() {"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        return locationFrom;"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"    public Location getLocationTo() {"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        return locationTo;"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"    public Index getFromIndex() {"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"        return fromIndex;"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"    public Index getToIndex() {"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        return toIndex;"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean isFromIsTask() {"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        return fromIsTask;"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean isToIsTask() {"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        return toIsTask;"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof NavigateCommand // instanceof handles nulls"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 equalsLocationFrom(other)"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 equalsLocationTo(other)"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 equalsFromIndex(other)"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 equalsToIndex(other)"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 equalsFromIsTask(other)"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 equalsToIsTask(other)); // state check"},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if the (@codde locationFrom) of this object is equal to that of the other Object"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"     * @param other The other Object we are comparing against"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"     * @return True if both are null or both have the same value"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean equalsLocationFrom(Object other) {"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"        if (this.locationFrom \u003d\u003d null) {"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"            return ((NavigateCommand) other).locationFrom \u003d\u003d null;"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"            return this.locationFrom.equals(((NavigateCommand) other).locationFrom);"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if the (@codde locationTo) of this object is equal to that of the other Object"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"     * @param other The other Object we are comparing against"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"     * @return True if both are null or both have the same value"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean equalsLocationTo(Object other) {"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"        if (this.locationTo \u003d\u003d null) {"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"            return ((NavigateCommand) other).locationTo \u003d\u003d null;"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"            return this.locationTo.equals(((NavigateCommand) other).locationTo);"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if the (@codde fromIndex) of this object is equal to that of the other Object"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"     * @param other The other Object we are comparing against"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"     * @return True if both are null or both have the same value"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean equalsFromIndex(Object other) {"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"        if (this.fromIndex \u003d\u003d null) {"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"            return ((NavigateCommand) other).fromIndex \u003d\u003d null;"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"            return this.fromIndex.equals(((NavigateCommand) other).fromIndex);"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if the (@codde toIndex) of this object is equal to that of the other Object"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"     * @param other The other Object we are comparing against"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"     * @return True if both are null or both have the same value"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean equalsToIndex(Object other) {"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"        if (this.toIndex \u003d\u003d null) {"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"            return ((NavigateCommand) other).toIndex \u003d\u003d null;"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"            return this.toIndex.equals(((NavigateCommand) other).toIndex);"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if the (@codde fromIsTask) of this object is equal to that of the other Object"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"     * @param other The other Object we are comparing against"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"     * @return True if both are null or both have the same value"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean equalsFromIsTask(Object other) {"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"        return this.fromIsTask \u003d\u003d (((NavigateCommand) other).fromIsTask);"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if the (@codde toIsTask) of this object is equal to that of the other Object"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"     * @param other The other Object we are comparing against"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"     * @return True if both are null or both have the same value"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean equalsToIsTask(Object other) {"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"        return this.toIsTask \u003d\u003d (((NavigateCommand) other).toIsTask);"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":224}},{"path":"src/main/java/seedu/address/logic/commands/OpenCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.OpenRequestEvent;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" * Opens the data from a desired location"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"public class OpenCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"open\";"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"o\";"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String OPEN_COMMAND_SUCCESS \u003d \"Successfully opened file.\";"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        EventsCenter.getInstance().post(new OpenRequestEvent());"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(OPEN_COMMAND_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":23}},{"path":"src/main/java/seedu/address/logic/commands/PrivacyLevelCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ShowAllPrivacyLevelPredicate;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":" * Handles the changing of Privacy Levels in the address book"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"public class PrivacyLevelCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"privacylevel\";"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"pl\";"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String CHANGE_PRIVACY_LEVEL_SUCCESS \u003d \"Successfully changed privacy level to %1$s.\";"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String WRONG_PRIVACY_LEVEL_MESSAGE \u003d \"Privacy Level can only be 1, 2 or 3\";"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    public static final int MIN_PRIVACY_LEVEL \u003d 1;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public static final int MAX_PRIVACY_LEVEL \u003d 3;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"            + \": Changes the privacy level of the address book. Level 1 shows all data, level 2 hides private fields\""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"            + \" and level 3 hides persons with at least 1 private field.\\n\""},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: LEVEL (must be 1, 2 or 3)\\n\""},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    private final int level;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    public PrivacyLevelCommand(int level) {"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        this.level \u003d level;"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        if (level \u003c MIN_PRIVACY_LEVEL || level \u003e MAX_PRIVACY_LEVEL) {"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(WRONG_PRIVACY_LEVEL_MESSAGE);"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        model.setPrivacyLevel(level);"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"            ReadOnlyPerson toReplace \u003d model.getPersonAtIndexFromAddressBook(i);"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"            Person newPerson \u003d new Person(toReplace);"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"            newPerson.setPrivacyLevel(level);"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"                model.updatePerson(toReplace, newPerson);"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"            } catch (PersonNotFoundException e) {"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        if (level \u003d\u003d 3) {"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"            model.updateFilteredPersonList(new ShowAllPrivacyLevelPredicate());"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(CHANGE_PRIVACY_LEVEL_SUCCESS, Integer.toString(level)));"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    public int getLevel() {"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        return level;"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof PrivacyLevelCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.level \u003d\u003d ((PrivacyLevelCommand) other).level); // state check"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":77}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangyiming1019":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/SaveAsCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.SaveAsRequestEvent;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" * Saves the data to a new save file at a desired location"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"public class SaveAsCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"save\";"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"sa\";"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String SAVE_AS_COMMAND_SUCCESS \u003d \"Successfully saved file.\";"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        EventsCenter.getInstance().post(new SaveAsRequestEvent());"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(SAVE_AS_COMMAND_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":23}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":" * Represents a command that selects an object in the address book."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"public abstract class SelectCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"wangyiming1019":1,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/SelectPersonCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" * Selects a person in the address book and loads the view panel for that person."},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class SelectPersonCommand extends SelectCommand {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private final Index targetIndex;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public SelectPersonCommand(Index targetIndex) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof SelectPersonCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectPersonCommand) other).targetIndex)); // state check"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":47}},{"path":"src/main/java/seedu/address/logic/commands/SelectTaskCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestTaskEvent;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":" * Selects a task in the address book and loads the view panel for that task."},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"public class SelectTaskCommand extends SelectCommand {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TASK"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            + \": Selects the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Selected Task: %1$s\";"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    private final Index targetIndex;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public SelectTaskCommand(Index targetIndex) {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e lastShownTaskList \u003d model.getFilteredTaskList();"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestTaskEvent(targetIndex));"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof SelectTaskCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectTaskCommand) other).targetIndex)); // state check"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":49}},{"path":"src/main/java/seedu/address/logic/commands/SetCompleteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"/** Marks the task at the specified {@code Index} as complete */"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class SetCompleteCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_WORD \u003d \"setcomplete\";"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_ALIAS \u003d \"stc\";"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \": Marks the task at the specified index as \u003cCompleted\u003e\\n\""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Marked Task as completed: %1$s\";"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASK_ALREADY_COMPLETE \u003d \"The specified task is already completed\";"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public SetCompleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            model.setAsComplete(taskToComplete, true);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_TASK_ALREADY_COMPLETE);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"This task cannot be missing\");"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, taskToComplete));"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof SetCompleteCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((SetCompleteCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":59}},{"path":"src/main/java/seedu/address/logic/commands/SetIncompleteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"/** Marks the task at the specified {@code Index} as incomplete */"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class SetIncompleteCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_WORD \u003d \"setincomplete\";"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_ALIAS \u003d \"sti\";"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \": Marks the task at the specified index as \u003cIncomplete\u003e\\n\""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Marked Task as incomplete: %1$s\";"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASK_ALREADY_COMPLETE \u003d \"The specified task is already incomplete\";"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public SetIncompleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            model.setAsComplete(taskToComplete, false);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_TASK_ALREADY_COMPLETE);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"This task cannot be missing\");"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, taskToComplete));"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof SetIncompleteCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((SetIncompleteCommand) other).targetIndex)); // state check"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":60}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" * Sorts all persons in address book by any field. Sorting can be done in ascending or descending order"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public static final ArrayList\u003cString\u003e ACCEPTED_LIST_PARAMETERS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"            \"person\", \"task\"));"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public static final ArrayList\u003cString\u003e ACCEPTED_FIELD_PARAMETERS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"            \"name\", \"phone\", \"email\", \"address\", \"priority\", \"deadline\"));"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public static final ArrayList\u003cString\u003e ACCEPTED_ORDER_PARAMETERS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"            \"asc\", \"desc\"));"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all persons or all tasks by chosen \""},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"                + \"field [NAME/PHONE/EMAIL/ADDRESS -- PRIORITY/DEADLINE] by [ASC/DESC] order. Case insensitive\\n\""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"                + \"Parameters: KEYWORD [LIST] [FIELD] [ORDER]\\n\""},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"                + \"Example: \" + COMMAND_WORD + \" person email desc\\n\""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"                + \"Example 2: \" + COMMAND_WORD + \" task deadline desc\\n\";"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid Input.\\n\""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            + \"Accepted Person Field Values: NAME, PHONE, EMAIL, ADDRESS \\n\""},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"            + \"Accepted Task Field Values: DEADLINE, PRIORITY\\n\""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"            + \"Accepted Order Values: ASC, DESC\";"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS_PERSONS \u003d \"All persons in address book successfully sorted\";"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS_TASKS \u003d \"All tasks in address book successfully sorted\";"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    private final String list;"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    private final String field;"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    private final String order;"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    public SortCommand(String list, String field, String order) {"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        this.field \u003d field;"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        this.order \u003d order;"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"        this.list \u003d list;"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"     * Checks if argument command has the same parameter properties"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"     * @param commandB"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    public boolean sameCommandAs(SortCommand commandB) {"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"        return commandB.getList().equals(this.list) \u0026\u0026 commandB.getField()"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"                .equals(this.field) \u0026\u0026 commandB.getOrder().equals(this.order);"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"    public String getField() {"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"        return this.field;"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"    public String getOrder() {"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"        return this.order;"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"    public String getList() {"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"        return this.list;"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(model);"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"        if (this.list.equals(ACCEPTED_LIST_PARAMETERS.get(0))) {"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"            model.sortPersons(getField(), getOrder());"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS_PERSONS);"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"            model.sortTasks(getField(), getOrder());"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TASKS);"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":81,"jeffreygohkw":2}},{"path":"src/main/java/seedu/address/logic/commands/TagListCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * List all tags in the address book to the user"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class TagListCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"showtag\";"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"stag\";"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_FAILURE \u003d \"There is no tag!\";"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All the tags are here: \";"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(displayTags());"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"     * display all the tags to user"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"     * @return String displayTags"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    private String displayTags() {"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        String displayTags;"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cTag\u003e tagList \u003d getAllTagsInAddressBook();"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        if (tagList.isEmpty()) {"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            displayTags \u003d MESSAGE_FAILURE;"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"            displayTags \u003d MESSAGE_SUCCESS + convertTagToString(tagList);"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        return displayTags;"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"     * get all the tags in the address book without duplication"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"     * @return allTagList"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    private ArrayList\u003cTag\u003e getAllTagsInAddressBook() {"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cTag\u003e allTagList \u003d new ArrayList\u003cTag\u003e();"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        for (ReadOnlyPerson p : model.getAddressBook().getPersonList()) {"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"            for (Tag tag : p.getTags()) {"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"                if (!allTagList.contains(tag)) {"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"                    allTagList.add(tag);"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        return allTagList;"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"     * convert a list of tags to a String"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"     * @return String tags"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    private String convertTagToString(ArrayList\u003cTag\u003e tagList) {"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cString\u003e tagNameList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        for (Tag tag : tagList) {"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"            tagNameList.add(tag.getTagName());"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        Collections.sort(tagNameList);"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        StringBuilder tagNameString \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        for (String tagName : tagNameList) {"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"            tagNameString.append(\"\u003c\").append(tagName).append(\"\u003e \");"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        return tagNameString.toString().trim();"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":75}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" *"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"th\";"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"            + \": Sets the theme based on the specified style.\\n\""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: STYLE\\n\""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\";"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_THEME_CHANGE_SUCCESS \u003d \"Theme Changed to: %1$s\";"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_THEME_NOT_AVAILABLE \u003d \"Theme %1$s is not available.\";"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_THEME_IN_USE \u003d \"Theme %1$s is currently in use.\";"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    private final String style;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public ThemeCommand (String style) {"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        this.style \u003d style;"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"        String styleSheet;"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        if (model.getStyleMap().containsKey(style)) {"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"            styleSheet \u003d model.getStyleMap().get(style);"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_THEME_NOT_AVAILABLE, style));"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        if (model.getTheme().equals(styleSheet)) {"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(String.format(MESSAGE_THEME_IN_USE, style));"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(styleSheet));"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        model.setTheme(styleSheet);"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_CHANGE_SUCCESS, style));"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        return style;"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof ThemeCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.style.equals(((ThemeCommand) other).style)); // state check"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":64}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangyiming1019":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/UnfavouriteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" * Unfavourites a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class UnfavouriteCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"unfavourite\";"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"unfav\";"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            + \": Unfavourites the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_UNFAVOURITE_PERSON_SUCCESS \u003d \"Unfavourited Person: %1$s\";"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_NOTFAVOURITEYET_PERSON \u003d \"Person is not favourited yet.\";"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    public UnfavouriteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToUnfavourite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        Person editedPerson \u003d new Person(personToUnfavourite.getName(),"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"                personToUnfavourite.getPhone(), personToUnfavourite.getEmail(),"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"                personToUnfavourite.getAddress(), false,"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"                personToUnfavourite.getRemark(), personToUnfavourite.getAvatar(),"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"                personToUnfavourite.getTags());"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        if (personToUnfavourite.getFavourite().equals(false)) {"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_NOTFAVOURITEYET_PERSON);"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"            model.updatePerson(personToUnfavourite, editedPerson);"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_NOTFAVOURITEYET_PERSON);"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_UNFAVOURITE_PERSON_SUCCESS, personToUnfavourite));"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof UnfavouriteCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.targetIndex.equals(((UnfavouriteCommand) other).targetIndex)); // state check"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":75}},{"path":"src/main/java/seedu/address/logic/commands/UnlockCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":" * Sets lock in model to true or false, which allows or restricts the usage of all commands"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"public class UnlockCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"unlock\";"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"ul\";"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unlocks the application. \""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"            + \"No commands can be executed\\n\""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_PASSWORD + \"PASSWORD \";"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address++ unlocked successfully\";"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_PASSWORD_INCORRECT \u003d \"Password is incorrect. Please try again\";"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(UnlockCommand.class);"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    private String password;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    public UnlockCommand(String password) {"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        this.password \u003d password;"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"     * Checks if input password matches the one saved in user prefs."},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    private boolean isPasswordCorrect() {"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        UserPrefs userPrefs \u003d model.getUserPrefs();"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        String hashedPassword \u003d Hashing.sha256()"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"                .hashString(password, StandardCharsets.UTF_8).toString();"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        return hashedPassword.equals(userPrefs.getAddressBookEncryptedPassword());"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        if (isPasswordCorrect()) {"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"            // Case where password is correct"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"            // Access model to unlocked"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"            model.unlockAddressBookFromModel();"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"            // Logs current state"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Lock state is now: \" + Boolean.toString(model.getLockState()));"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"            //Return command result"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"            // Case where password is incorrect"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"            throw new CommandException(MESSAGE_PASSWORD_INCORRECT);"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":67}},{"path":"src/main/java/seedu/address/logic/commands/ViewAssignCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" * Displays a list of all persons assigned to a specified task"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class ViewAssignCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_WORD \u003d \"viewassign\";"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_ALIAS \u003d \"va\";"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all persons assigned to a task\\n\""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX\\n\""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private final Index taskIndex;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public ViewAssignCommand(Index taskIndex) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e tasksList \u003d model.getFilteredTaskList();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        if (taskIndex.getZeroBased() \u003e\u003d tasksList.size()) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToFind \u003d tasksList.get(taskIndex.getZeroBased());"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        model.viewAssignees(taskToFind);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"                || other instanceof ViewAssignCommand"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.taskIndex.equals(((ViewAssignCommand) other).taskIndex);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":48}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_TAG_FULL);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_TAG_FULL)) {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_TASK)) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyTask taskToAdd \u003d AddTaskCommandParser.constructTask(args);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            return new AddTaskCommand(taskToAdd);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG_FULL)) {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            String filteredArgs \u003d args.replace(PREFIX_TAG_FULL.getPrefix(), \" \");"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            return new AddTagCommandParser().parse(filteredArgs);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyPerson personToAdd \u003d AddPersonCommandParser.constructPerson(args);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            return new AddPersonCommand(personToAdd);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":28,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_PRIVATE;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR_PRIVATE;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_PRIVATE;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_PRIVATE;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_PRIVATE;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK_PRIVATE;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_PRIVATE;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.Set;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new ReadOnlyPerson object in the context of AddPersonCommand."},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"public class AddPersonCommandParser extends AddCommandParser {"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"     * Constructs a ReadOnlyPerson from the arguments provided."},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    public static ReadOnlyPerson constructPerson(String args) throws ParseException {"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK,"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"                        PREFIX_AVATAR, PREFIX_TAG, PREFIX_NAME_PRIVATE, PREFIX_PHONE_PRIVATE, PREFIX_EMAIL_PRIVATE,"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"                        PREFIX_ADDRESS_PRIVATE, PREFIX_REMARK_PRIVATE, PREFIX_TAG_PRIVATE, PREFIX_AVATAR_PRIVATE);"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_NAME_PRIVATE)))) {"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"            Name name;"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"            Phone phone;"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"            Email email;"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"            Address address;"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"            Remark remark;"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"            Avatar avatar;"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"            name \u003d makeName(argMultimap);"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"            phone \u003d makePhone(argMultimap);"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"            email \u003d makeEmail(argMultimap);"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"            address \u003d mmakeAddress(argMultimap);"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"            avatar \u003d makeAvatar(argMultimap);"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"            remark \u003d makeRemark(argMultimap);"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, false, remark, avatar, tagList);"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"            return person;"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a Name based on the input arguments"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    private static Name makeName(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        Name name;"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        if ((arePrefixesPresent(argMultimap, PREFIX_NAME))) {"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME_PRIVATE), true).get();"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        return name;"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a Phone based on the input arguments"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"    private static Phone makePhone(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        Phone phone;"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        if ((arePrefixesPresent(argMultimap, PREFIX_PHONE))) {"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_PHONE_PRIVATE)) {"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE_PRIVATE), true).get();"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            phone \u003d new Phone(null);"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        return phone;"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an Email based on the input arguments"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"    private static Email makeEmail(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        Email email;"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        if ((arePrefixesPresent(argMultimap, PREFIX_EMAIL))) {"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_EMAIL_PRIVATE)) {"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL_PRIVATE), true).get();"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"            email \u003d new Email(null);"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        return email;"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an Address based on the input arguments"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"    private static Address mmakeAddress(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"        Address address;"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        if ((arePrefixesPresent(argMultimap, PREFIX_ADDRESS))) {"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_ADDRESS_PRIVATE)) {"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS_PRIVATE), true).get();"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"            address \u003d new Address(null);"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        return address;"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an Avatar based on the input arguments"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"    private static Avatar makeAvatar(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"        Avatar avatar;"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"        if ((arePrefixesPresent(argMultimap, PREFIX_AVATAR))) {"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"            avatar \u003d ParserUtil.parseAvatar(argMultimap.getValue(PREFIX_AVATAR)).get();"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"            avatar \u003d new Avatar(null);"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"        return avatar;"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates a Remark based on the input arguments"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"    private static Remark makeRemark(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"        Remark remark;"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"        if ((arePrefixesPresent(argMultimap, PREFIX_REMARK))) {"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"            remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_REMARK_PRIVATE)) {"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"            remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK_PRIVATE), true).get();"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"            remark \u003d new Remark(null);"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"        return remark;"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":164,"Esilocke":2}},{"path":"src/main/java/seedu/address/logic/parser/AddTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.AddTagCommand;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new AddTagCommand object"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommandParser extends AddCommandParser {"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTagCommand"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"     * and returns a AddTagCommand object for execution."},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public AddTagCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"            String tagName \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            Tag toAdd \u003d new Tag(tagName);"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"            String indexes \u003d argMultimap.getPreamble();"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"            if (indexes.trim().isEmpty()) {"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"                return new AddTagCommand(toAdd);"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"            ArrayList\u003cIndex\u003e indexList \u003d toArrayList(indexes);"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"            return new AddTagCommand(toAdd, indexList);"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an ArrayList of the indexes in the given {@code String}"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    protected static ArrayList\u003cIndex\u003e toArrayList(String indexes) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        String[] indexArray \u003d indexes.split(\" \");"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        for (String s: indexArray) {"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"            if (!s.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"                indexList.add(ParserUtil.parseIndex(s));"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        return indexList;"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":63}},{"path":"src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new ReadOnlyTask object in the context of AddTaskCommand."},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"public class AddTaskCommandParser extends AddCommandParser {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * Constructs a ReadOnlyTask from the arguments provided."},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public static ReadOnlyTask constructTask(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_PRIORITY,"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"                        PREFIX_ADDRESS, PREFIX_TASK);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME))) {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            TaskName name;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            Description description;"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            Deadline deadline;"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            Priority priority;"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            TaskAddress address;"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            name \u003d ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            description \u003d arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"                    ? ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)).get()"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"                    : new Description(null);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            deadline \u003d arePrefixesPresent(argMultimap, PREFIX_DEADLINE)"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"                    ? ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).get()"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"                    : new Deadline(null);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            priority \u003d arePrefixesPresent(argMultimap, PREFIX_PRIORITY)"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                    ? ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get()"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                    : new Priority(null);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            address \u003d arePrefixesPresent(argMultimap, PREFIX_ADDRESS)"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"                    ? ParserUtil.parseTaskAddress(argMultimap.getValue(PREFIX_ADDRESS)).get()"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"                    : new TaskAddress(null);"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"            return new Task(name, description, deadline, priority, address);"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":67}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.BackupCommand;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.ChangePasswordCommand;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteListCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.FontSizeCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.NavigateCommand;"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.OpenCommand;"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.PrivacyLevelCommand;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.SaveAsCommand;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetCompleteCommand;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetIncompleteCommand;"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.TagListCommand;"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ViewAssignCommand;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":50,"author":{"gitId":"-"},"content":" */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_NO_ACCESS \u003d \"Not allowed! You must unlock before\""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"            + \" making any changes.\\n\" + UnlockCommand.MESSAGE_USAGE;"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    public Command parseCommand(String userInput, boolean lockState) throws ParseException {"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        // Check lock state"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"Parsing command. Lock state is currently: \" + Boolean.toString(lockState));"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"        Command result \u003d processNonCrudCommands(commandWord, arguments);"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        if (result !\u003d null) {"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"            return result;"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        // Test for lock. If locked, return no access message"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"        if (lockState) {"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(MESSAGE_NO_ACCESS);"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"        // Cases for CRUD related functionality"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"        switch (commandWord) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        case AssignCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        case AssignCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"            return new AssignTaskCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        case DismissCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        case DismissCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"            return new DismissTaskCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        case ChangePrivacyCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        case ChangePrivacyCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"            return new ChangePrivacyCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        case PrivacyLevelCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        case PrivacyLevelCommand.COMMAND_ALIAS:"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"            return new PrivacyLevelCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        case ThemeCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        case SetCompleteCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        case SetCompleteCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"            return new SetTaskCompleteCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        case SetIncompleteCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        case SetIncompleteCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"            return new SetTaskIncompleteCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"        //@@author wangyiming1019"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteCommand.COMMAND_ALIAS:"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"            return new FavouriteCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteListCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteListCommand.COMMAND_ALIAS:"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":"            return new FavouriteListCommand();"},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"        case UnfavouriteCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":"        case UnfavouriteCommand.COMMAND_ALIAS:"},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"            return new UnfavouriteCommandParser().parse(arguments);"},{"lineNumber":149,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":150,"author":{"gitId":"wangyiming1019"},"content":"        case TagListCommand.COMMAND_WORD:"},{"lineNumber":151,"author":{"gitId":"wangyiming1019"},"content":"        case TagListCommand.COMMAND_ALIAS:"},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":"            return new TagListCommand();"},{"lineNumber":153,"author":{"gitId":"wangyiming1019"},"content":"        //@@author"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitId":"wangyiming1019"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":159,"author":{"gitId":"wangyiming1019"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return new UndoCommand();"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":163,"author":{"gitId":"wangyiming1019"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return new RedoCommand();"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":"        case ChangePasswordCommand.COMMAND_WORD:"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":"        case ChangePasswordCommand.COMMAND_ALIAS:"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"            return new ChangePasswordCommandParser().parse(arguments);"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"        case ViewAssignCommand.COMMAND_WORD:"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"        case ViewAssignCommand.COMMAND_ALIAS:"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"            return new ViewAssignCommandParser().parse(arguments);"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":"     * Checks for non crud command words or aliases and returns the relevant commmand if there is one."},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"     * Otherwise control is returned back to the original parseCommand method."},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"     * Note: Code was refactored due to codacy\u0027s recommendation that there was a problem with parseCommand\u0027s"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"     * NPath complexity (i.e. it the code was too long. Makes it less readable and prone to errors)"},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":"     * @param commandWord"},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":"     * @param arguments"},{"lineNumber":190,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"charlesgoh"},"content":"    private Command processNonCrudCommands(String commandWord, String arguments) throws ParseException {"},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":"        // Cases for CRUD related functionality and for locking and unlocking"},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"        switch (commandWord) {"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":"        case OpenCommand.COMMAND_WORD:"},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"        case OpenCommand.COMMAND_ALIAS:"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"            return new OpenCommand();"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":198,"author":{"gitId":"charlesgoh"},"content":"        case SaveAsCommand.COMMAND_WORD:"},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":"        case SaveAsCommand.COMMAND_ALIAS:"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":"            return new SaveAsCommand();"},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":"            return new ExitCommand();"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":"            return new HelpCommand();"},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":208,"author":{"gitId":"charlesgoh"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":209,"author":{"gitId":"charlesgoh"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":210,"author":{"gitId":"charlesgoh"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":211,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":212,"author":{"gitId":"charlesgoh"},"content":"        case LocateCommand.COMMAND_WORD:"},{"lineNumber":213,"author":{"gitId":"charlesgoh"},"content":"        case LocateCommand.COMMAND_ALIAS:"},{"lineNumber":214,"author":{"gitId":"charlesgoh"},"content":"            return new LocateCommandParser().parse(arguments);"},{"lineNumber":215,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":216,"author":{"gitId":"charlesgoh"},"content":"        case NavigateCommand.COMMAND_WORD:"},{"lineNumber":217,"author":{"gitId":"charlesgoh"},"content":"        case NavigateCommand.COMMAND_ALIAS:"},{"lineNumber":218,"author":{"gitId":"charlesgoh"},"content":"            return new NavigateCommandParser().parse(arguments);"},{"lineNumber":219,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":220,"author":{"gitId":"charlesgoh"},"content":"        case BackupCommand.COMMAND_WORD:"},{"lineNumber":221,"author":{"gitId":"charlesgoh"},"content":"        case BackupCommand.COMMAND_ALIAS:"},{"lineNumber":222,"author":{"gitId":"charlesgoh"},"content":"            return new BackupCommandParser().parse(arguments);"},{"lineNumber":223,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":224,"author":{"gitId":"charlesgoh"},"content":"        case FontSizeCommand.COMMAND_WORD:"},{"lineNumber":225,"author":{"gitId":"charlesgoh"},"content":"        case FontSizeCommand.COMMAND_ALIAS:"},{"lineNumber":226,"author":{"gitId":"charlesgoh"},"content":"            return new FontSizeCommandParser().parse(arguments);"},{"lineNumber":227,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":228,"author":{"gitId":"charlesgoh"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":229,"author":{"gitId":"charlesgoh"},"content":"        case LockCommand.COMMAND_ALIAS:"},{"lineNumber":230,"author":{"gitId":"charlesgoh"},"content":"            return new LockCommandParser().parse(arguments);"},{"lineNumber":231,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":232,"author":{"gitId":"charlesgoh"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":233,"author":{"gitId":"charlesgoh"},"content":"        case UnlockCommand.COMMAND_ALIAS:"},{"lineNumber":234,"author":{"gitId":"charlesgoh"},"content":"            return new UnlockCommandParser().parse(arguments);"},{"lineNumber":235,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":236,"author":{"gitId":"charlesgoh"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":237,"author":{"gitId":"charlesgoh"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":238,"author":{"gitId":"charlesgoh"},"content":"            return new ListCommand();"},{"lineNumber":239,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":240,"author":{"gitId":"charlesgoh"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":241,"author":{"gitId":"charlesgoh"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":242,"author":{"gitId":"charlesgoh"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":243,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":244,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":245,"author":{"gitId":"charlesgoh"},"content":"            return null;"},{"lineNumber":246,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":106,"jeffreygohkw":19,"Esilocke":25,"wangyiming1019":29,"-":70}},{"path":"src/main/java/seedu/address/logic/parser/AssignTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"/** Parses input arguments, and creates a new {@code AssignCommand} object**/"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class AssignTaskCommandParser implements Parser\u003cAssignCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the AssignCommand"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * and returns an AssignCommand object for execution."},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public AssignCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TARGET);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        if (!argMultimap.getValue(PREFIX_TARGET).isPresent()) {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        String target \u003d argMultimap.getValue(PREFIX_TARGET).get();"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        String persons \u003d argMultimap.getPreamble();"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e targetIndexes \u003d ParserUtil.parseIndexes(target);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d ParserUtil.parseIndexes(persons);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        if (targetIndexes.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(AssignCommand.MESSAGE_INVALID_TARGET_ARGS);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        } else if (personIndexes.size() \u003c 1) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(AssignCommand.MESSAGE_INVALID_PERSONS_ARGS);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        Index taskIndex \u003d targetIndexes.get(0);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        return new AssignCommand(personIndexes, taskIndex);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":38}},{"path":"src/main/java/seedu/address/logic/parser/BackupCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.BackupCommand;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":" * Parses arguments for backup command and returns a BackupCommand instance. Arguments should consist of only one"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" * filepath."},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"public class BackupCommandParser implements Parser\u003cBackupCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    public static final int SIZE_OF_ARG_ARRAY \u003d 1;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given user input and backs up data into a separate file name."},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"     * @param userInput"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public BackupCommand parse(String userInput) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d userInput.trim();"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BackupCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        // Converts arg arrays to lower case to account for caps entries"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        String[] argKeywords \u003d trimmedArgs.split(\"\\\\s\");"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        if (argKeywords.length !\u003d SIZE_OF_ARG_ARRAY) {"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BackupCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        return new BackupCommand(trimmedArgs);"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":37}},{"path":"src/main/java/seedu/address/logic/parser/ChangePasswordCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONFIRM_PASSWORD;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PASSWORD;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.ChangePasswordCommand;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":" * Parses input arguments and creates a new ChangePassword object"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"public class ChangePasswordCommandParser implements Parser\u003cChangePasswordCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangePasswordCommand"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"     * and returns a ChangePasswordCommand object for execution."},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public ChangePasswordCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"                .tokenize(args, PREFIX_PASSWORD, PREFIX_NEW_PASSWORD, PREFIX_CONFIRM_PASSWORD);"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"        // Check and split arguments before passing them to ChangePasswordCommand"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"                || !argMultimap.getValue(PREFIX_NEW_PASSWORD).isPresent()"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"                || !argMultimap.getValue(PREFIX_CONFIRM_PASSWORD).isPresent()) {"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"            String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            String newPassword \u003d argMultimap.getValue(PREFIX_NEW_PASSWORD).get();"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"            String confirmPassword \u003d argMultimap.getValue(PREFIX_CONFIRM_PASSWORD).get();"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"            return new ChangePasswordCommand(password, newPassword, confirmPassword);"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":38}},{"path":"src/main/java/seedu/address/logic/parser/ChangePrivacyCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new ChangePrivacyCommand object"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommandParser implements Parser\u003cChangePrivacyCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangePrivacyCommand"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an ChangePrivacyCommand object for execution."},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    public ChangePrivacyCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"                        PREFIX_REMARK);"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettings();"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        checkName(argMultimap, pps);"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        checkPhone(argMultimap, pps);"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        checkEmail(argMultimap, pps);"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        checkAddress(argMultimap, pps);"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        checkRemark(argMultimap, pps);"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        if (!pps.isAnyFieldNonNull()) {"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(ChangePrivacyCommand.MESSAGE_NO_FIELDS);"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        return new ChangePrivacyCommand(index, pps);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the name prefix and sets the PersonPrivacySettings depending on the input"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkName(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_NAME).toString().equals(\"Optional[true]\")) {"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setNameIsPrivate(true);"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_NAME).toString().equals(\"Optional[false]\")) {"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setNameIsPrivate(false);"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the phone prefix and sets the PersonPrivacySettings depending on the input"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkPhone(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_PHONE).toString().equals(\"Optional[true]\")) {"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setPhoneIsPrivate(true);"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_PHONE).toString().equals(\"Optional[false]\")) {"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setPhoneIsPrivate(false);"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the email prefix and sets the PersonPrivacySettings depending on the input"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkEmail(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_EMAIL).toString().equals(\"Optional[true]\")) {"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setEmailIsPrivate(true);"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_EMAIL).toString().equals(\"Optional[false]\")) {"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setEmailIsPrivate(false);"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the address prefix and sets the PersonPrivacySettings depending on the input"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkAddress(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_ADDRESS).toString().equals(\"Optional[true]\")) {"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setAddressIsPrivate(true);"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_ADDRESS).toString().equals(\"Optional[false]\")) {"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setAddressIsPrivate(false);"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the address prefix and sets the PersonPrivacySettings depending on the input"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkRemark(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_REMARK).toString().equals(\"Optional[true]\")) {"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setRemarkIsPrivate(true);"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_REMARK).toString().equals(\"Optional[false]\")) {"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setRemarkIsPrivate(false);"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":152}},{"path":"src/main/java/seedu/address/logic/parser/ClearCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearPersonCommand;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearTaskCommand;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new ClearCommand object"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments and returns a {@code ClearCommand}"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     * that either clears the {@code Person} list, the {@code Task} list, or both."},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public ClearCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommand();"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_PERSON);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_PERSON).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TASK).isPresent()) {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommand();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_PERSON).isPresent()) {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            return new ClearPersonCommand();"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TASK).isPresent()) {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            return new ClearTaskCommand();"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":39}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"person/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_TAG_FULL \u003d new Prefix(\"tag/\");"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_AVATAR \u003d new Prefix(\"v/\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAME_PRIVATE \u003d new Prefix(\"pn/\");"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_PHONE_PRIVATE \u003d new Prefix(\"pp/\");"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_EMAIL_PRIVATE \u003d new Prefix(\"pe/\");"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_ADDRESS_PRIVATE \u003d new Prefix(\"pa/\");"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_REMARK_PRIVATE \u003d new Prefix(\"pr/\");"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_TAG_PRIVATE \u003d new Prefix(\"pt/\");"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_AVATAR_PRIVATE \u003d new Prefix(\"pv/\");"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_TASK \u003d new Prefix(\"task/\");"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"by/\");"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_TARGET \u003d new Prefix(\"to/\");"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_STATE \u003d new Prefix(\"done/\");"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAVIGATE_FROM_PERSON \u003d new Prefix(\"fp/\");"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAVIGATE_FROM_TASK \u003d new Prefix(\"ft/\");"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAVIGATE_FROM_ADDRESS \u003d new Prefix(\"fa/\");"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAVIGATE_TO_PERSON \u003d new Prefix(\"tp/\");"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAVIGATE_TO_TASK \u003d new Prefix(\"tt/\");"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAVIGATE_TO_ADDRESS \u003d new Prefix(\"ta/\");"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_NEW_PASSWORD \u003d new Prefix(\"np/\");"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_CONFIRM_PASSWORD \u003d new Prefix(\"cfp/\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":7,"jeffreygohkw":14,"Esilocke":9,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_TAG_FULL);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_TASK).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TASK).isPresent()) {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            String filteredString \u003d args.replace(PREFIX_TASK.getPrefix(), \" \");"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            return new DeleteTaskCommandParser().parse(filteredString);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            String filteredArgs \u003d args.replace(PREFIX_TAG_FULL.getPrefix(), \" \");"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            return new DeleteTagCommandParser().parse(filteredArgs);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            return new DeletePersonCommandParser().parse(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":15,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/DeletePersonCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new DeletePersonCommand object"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class DeletePersonCommandParser extends DeleteCommandParser {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"     * Parses input arguments and creates a new DeletePersonCommand object in the context of DeletePersonCommand."},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            return new DeletePersonCommand(index);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":25}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new DeleteTagCommand object"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"     * and returns a DeleteTagCommand object for execution."},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    public DeleteTagCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"            String indexes \u003d argMultimap.getPreamble();"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            String tagName \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"            Tag toDelete \u003d new Tag(tagName);"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"            if (indexes.trim().isEmpty()) {"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"                return new DeleteTagCommand(toDelete);"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"            ArrayList\u003cIndex\u003e indexList \u003d convertToArrayList(indexes);"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"            return new DeleteTagCommand(toDelete, indexList);"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an ArrayList of the indexes in the given {@code String}"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"    private static ArrayList\u003cIndex\u003e convertToArrayList(String indexes) throws IllegalValueException {"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        String[] indexArray \u003d indexes.split(\" \");"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        for (String s: indexArray) {"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"            if (!s.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"                indexList.add(ParserUtil.parseIndex(s));"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        return indexList;"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":69}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new DeleteTaskCommand object"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class DeleteTaskCommandParser {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"     * Parses input arguments and creates a new DeleteTaskCommand object in the context of DeleteTaskCommand."},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            return new DeleteTaskCommand(index);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":25}},{"path":"src/main/java/seedu/address/logic/parser/DismissTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"/** Parses input arguments, and creates a new {@code DismissCommand} object**/"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class DismissTaskCommandParser implements Parser\u003cDismissCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the DismissCommand"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * and returns an DismissCommand object for execution."},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public DismissCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        if (!argMultimap.getValue(PREFIX_FROM).isPresent()) {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DismissCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        String target \u003d argMultimap.getValue(PREFIX_FROM).get();"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        String persons \u003d argMultimap.getPreamble();"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e targetIndexes \u003d ParserUtil.parseIndexes(target);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d ParserUtil.parseIndexes(persons);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        if (targetIndexes.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(DismissCommand.MESSAGE_INVALID_TARGET_ARGS);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        } else if (personIndexes.size() \u003c 1) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(DismissCommand.MESSAGE_INVALID_PERSONS_ARGS);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        Index taskIndex \u003d targetIndexes.get(0);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        return new DismissCommand(personIndexes, taskIndex);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":39}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_TAG_FULL);"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_TASK).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TASK).isPresent()) {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            String filteredArgs \u003d args.replace(PREFIX_TASK.getPrefix(), \" \");"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return new EditTaskCommandParser().constructTaskDescriptor(filteredArgs);"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            String filteredArgs \u003d args.replace(PREFIX_TAG_FULL.getPrefix(), \" \");"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            return new EditTagCommandParser().parse(filteredArgs);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            return new EditPersonCommandParser().constructPersonDescriptor(args);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":16,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/EditPersonCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new EditPersonCommand object"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"public class EditPersonCommandParser extends EditCommandParser {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    /** Constructs a new EditPersonCommand that edits a Person object. **/"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public EditPersonCommand constructPersonDescriptor(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                        PREFIX_REMARK, PREFIX_AVATAR, PREFIX_TAG);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        Index index;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditPersonCommand.EditPersonDescriptor();"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).ifPresent(editPersonDescriptor::setRemark);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseAvatar(argMultimap.getValue(PREFIX_AVATAR)).ifPresent(editPersonDescriptor::setAvatar);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        return new EditPersonCommand(index, editPersonDescriptor);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        assert tags !\u003d null;"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"            return Optional.empty();"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":74}},{"path":"src/main/java/seedu/address/logic/parser/EditTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_DUPLICATE_TAGS;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_INSUFFICIENT_ARGS;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_INVALID_TAG_NAME;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTagCommand;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"/** Parses input arguments and creates a new EditTagCommand object */"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String EDITTAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}\\\\s]+[\\\\p{Alnum}]+\";"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public static final int EXPECTED_NUMBER_OF_ARGS \u003d 2;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the EditTagCommand"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     * and returns an EditTagCommand object for execution."},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public EditTagCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        String trimmed \u003d args.trim();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        if (!args.matches(EDITTAG_VALIDATION_REGEX)) {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            tags \u003d readTags(trimmed);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_INVALID_TAG_NAME);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        if (tags.size() !\u003d EXPECTED_NUMBER_OF_ARGS) {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_INSUFFICIENT_ARGS);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        Tag toChange \u003d tags.get(0);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        Tag newTag \u003d tags.get(1);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        if (toChange.equals(newTag)) {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_DUPLICATE_TAGS);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        return new EditTagCommand(toChange, newTag);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    /** Atempts to read the string and parse it into a Tag set*/"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    private ArrayList\u003cTag\u003e readTags(String args) throws IllegalValueException {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        String[] splittedArgs \u003d args.split(\"\\\\s+\");"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        for (String s : splittedArgs) {"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            Tag newTag \u003d new Tag(s);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            tagList.add(newTag);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        return tagList;"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":63}},{"path":"src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTaskCommand;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new EditTaskCommand object"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class EditTaskCommandParser extends EditCommandParser {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    /** Constructs a new EditTaskCommand that edits a Task object. **/"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public EditTaskCommand constructTaskDescriptor(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_NAME, PREFIX_DESCRIPTION,"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                        PREFIX_DEADLINE, PREFIX_PRIORITY, PREFIX_ADDRESS);"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        Index index;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editTaskDescriptor::setTaskName);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION))"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"                    .ifPresent(editTaskDescriptor::setDescription);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).ifPresent(editTaskDescriptor::setDeadline);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).ifPresent(editTaskDescriptor::setPriority);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseTaskAddress(argMultimap.getValue(PREFIX_ADDRESS))"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"                    .ifPresent(editTaskDescriptor::setTaskAddress);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        if (!editTaskDescriptor.isAnyFieldEdited()) {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        return new EditTaskCommand(index, editTaskDescriptor);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":53}},{"path":"src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new FavouriteCommand object"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"     * and returns an FavouriteCommand object for execution."},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    public FavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"            return new FavouriteCommand(index);"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":30}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_TAG_FULL);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_TASK).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TASK).isPresent()) {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            return new FindTaskCommandParser().parse(args);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            String filteredArgs \u003d args.replace(PREFIX_TAG_FULL.getPrefix(), \" \");"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return new FindTagCommandParser().parse(filteredArgs);"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            return new FindPersonCommandParser().parse(args);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":15,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/FindPersonCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class FindPersonCommandParser extends FindCommandParser {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * and returns an FindPersonCommand object for execution."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public FindPersonCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":29}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new FindTagCommand object"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"     * and returns an FindTagCommand object for execution."},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public FindTagCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cString\u003e tagToFindList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        for (String tagToFind : tagKeywords) {"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"            tagToFindList.add(tagToFind);"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        return new FindTagCommand(new NameContainsTagsPredicate(tagToFindList));"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":37}},{"path":"src/main/java/seedu/address/logic/parser/FindTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new FindTaskCommand object"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"public class FindTaskCommandParser extends FindCommandParser {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTaskCommand"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"     * and returns an FindTaskCommand object for execution."},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public FindTaskCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        String argsWithNoTaskPrefix \u003d args.replaceFirst(PREFIX_TASK.getPrefix(), \"\");"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsWithNoTaskPrefix, PREFIX_PRIORITY, PREFIX_STATE);"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        String keywords \u003d argMultimap.getPreamble();"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        String trimmedArgs \u003d keywords.trim();"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        boolean isPriorityFindRequired \u003d argMultimap.getValue(PREFIX_PRIORITY).isPresent();"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        boolean isStateFindRequired \u003d argMultimap.getValue(PREFIX_STATE).isPresent();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        int minPriority \u003d 0;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        boolean isComplete \u003d false;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        if (isPriorityFindRequired) {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            minPriority \u003d parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        if (isStateFindRequired) {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            isComplete \u003d parseState(argMultimap.getValue(PREFIX_STATE).get());"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        return new FindTaskCommand(new TaskContainsKeywordPredicate(Arrays.asList(nameKeywords),"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"                isStateFindRequired, isPriorityFindRequired, isComplete, minPriority));"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"     * Parses the given string, and returns an integer corresponding to its value"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"     * Guarantees: The specified value is valid as a priority value"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    private int parsePriority(String args) throws ParseException {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        if (args \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        int priority;"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            priority \u003d Integer.parseInt(args.trim());"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(FindTaskCommand.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        if (priority \u003c 1 || priority \u003e 5) {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(FindTaskCommand.MESSAGE_INVALID_PRIORITY);"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            return priority;"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"     * Parses the given string, and returns a boolean value corresponding to its value"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    private boolean parseState(String args) throws ParseException {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        String trimmed \u003d args.trim();"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        if (\"true\".equals(trimmed) || \"false\".equals(trimmed)) {"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"            return Boolean.valueOf(trimmed);"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(FindTaskCommand.MESSAGE_INVALID_COMPLETE_VALUE);"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":81}},{"path":"src/main/java/seedu/address/logic/parser/FontSizeCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.MESSAGE_INVALID_INPUT;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.FontSizeCommand;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" * Parses input arguments and creates a new SortCommand object based on the field and order parameters provided"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"public class FontSizeCommandParser implements Parser\u003cFontSizeCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final int PARAMETER_POSITION \u003d 0;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given {@code String} of arguments in the context of the FontSizeCommand"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"     * and returns a FontSizeCommand object for execution."},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public FontSizeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FontSizeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"        // Converts arg arrays to lower case to account for caps entries"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        String[] argKeywords \u003d trimmedArgs.split(\"\\\\s\");"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        for (int i \u003d 0; i \u003c argKeywords.length; i++) {"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"            argKeywords[i] \u003d argKeywords[i].toLowerCase();"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        if (argKeywords.length !\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FontSizeCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        if (!FontSizeCommand.ACCEPTED_PARAMETERS.contains(argKeywords[PARAMETER_POSITION])"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"                || !FontSizeCommand.ACCEPTED_PARAMETERS.contains(argKeywords[PARAMETER_POSITION])"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"                || !FontSizeCommand.ACCEPTED_PARAMETERS.contains(argKeywords[PARAMETER_POSITION])) {"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INPUT, FontSizeCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        // If there are no problems with the input, return a new instance of SortCommand"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        return new FontSizeCommand(argKeywords[PARAMETER_POSITION]);"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":48}},{"path":"src/main/java/seedu/address/logic/parser/LocateCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new LocateCommand object"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommandParser implements Parser\u003cLocateCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the LocateCommand"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an LocateCommand object for execution."},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public LocateCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"            return new LocateCommand(index);"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":30}},{"path":"src/main/java/seedu/address/logic/parser/LockCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" * Parses input arguments and returns a new LockCommand object"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"public class LockCommandParser implements Parser\u003cLockCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given {@code String} of arguments in the context of the LockCommand"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"     * and returns a LockCommand object for execution."},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public LockCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"            if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"                throw new ParseException("},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, LockCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"            String[] passwordKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"            return new LockCommand(passwordKeywords[0]);"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"            String[] passwordKeywords \u003d trimmedArgs.split(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            return new LockCommand(passwordKeywords[1]);"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":36}},{"path":"src/main/java/seedu/address/logic/parser/NavigateCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_PERSON;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_TASK;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_ADDRESS;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_PERSON;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_TASK;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.NavigateCommand;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new NavigateCommand object"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"public class NavigateCommandParser implements Parser\u003cNavigateCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    private Location from \u003d null;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    private Location to \u003d null;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private Index fromIndex \u003d null;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    private Index toIndex \u003d null;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the NavigateCommand"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an NavigateCommand object for execution."},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    public NavigateCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        resetValues();"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAVIGATE_FROM_PERSON,"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"                PREFIX_NAVIGATE_FROM_TASK, PREFIX_NAVIGATE_FROM_ADDRESS, PREFIX_NAVIGATE_TO_PERSON,"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"                PREFIX_NAVIGATE_TO_TASK, PREFIX_NAVIGATE_TO_ADDRESS);"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        boolean fromAddress \u003d arePrefixesPresent(argumentMultimap, PREFIX_NAVIGATE_FROM_ADDRESS);"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        boolean fromPerson \u003d arePrefixesPresent(argumentMultimap, PREFIX_NAVIGATE_FROM_PERSON);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        boolean fromTask \u003d arePrefixesPresent(argumentMultimap, PREFIX_NAVIGATE_FROM_TASK);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        boolean toAddress \u003d arePrefixesPresent(argumentMultimap, PREFIX_NAVIGATE_TO_ADDRESS);"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        boolean toPerson \u003d arePrefixesPresent(argumentMultimap, PREFIX_NAVIGATE_TO_PERSON);"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        boolean toTask \u003d arePrefixesPresent(argumentMultimap, PREFIX_NAVIGATE_TO_TASK);"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        checkFrom(argumentMultimap, fromAddress, fromPerson, fromTask);"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        checkTo(argumentMultimap, toAddress, toPerson, toTask);"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"            return new NavigateCommand(from, to, fromIndex, toIndex, fromTask, toTask);"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     * Resets the values stored in NavigateCommandParser object to null"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"    private void resetValues() {"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        from \u003d null;"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        to \u003d null;"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        fromIndex \u003d null;"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        toIndex \u003d null;"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"     * Checksif only 1 To argument is provided"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if there are no To arguments or there are more than 1 To arguements"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkTo(ArgumentMultimap argumentMultimap, boolean toAddress, boolean toPerson, boolean toTask)"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"            throws ParseException {"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(toAddress || toPerson || toTask)) {"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigateCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        } else if ((toAddress \u0026\u0026 (toPerson || toTask)) || (toPerson \u0026\u0026 toTask)) {"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"            // If 2 or more to prefixes are present"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(NavigateCommand.MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"            try {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"                setArgsForNavigateCommand(argumentMultimap, toAddress, toPerson, false);"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(e.getMessage(), e);"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if only 1 From argument is provided"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if there are no From arguments or there are more than 1 From arguments"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkFrom(ArgumentMultimap argumentMultimap, boolean fromAddress, boolean fromPerson, boolean fromTask)"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"            throws ParseException {"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(fromAddress || fromPerson || fromTask)) {"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigateCommand.MESSAGE_USAGE));"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        } else if ((fromAddress \u0026\u0026 (fromPerson || fromTask)) || (fromPerson \u0026\u0026 fromTask)) {"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"            // If 2 or more from prefixes are present"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"            try {"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"                setArgsForNavigateCommand(argumentMultimap, fromAddress, fromPerson, true);"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(e.getMessage(), e);"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"    private void setArgsForNavigateCommand(ArgumentMultimap argumentMultimap, boolean address, boolean person,"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"                                           boolean forFrom) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        if (address) {"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"            if (forFrom) {"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"                from \u003d new Location(ParserUtil.parseLocationFromAddress("},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"                        argumentMultimap.getValue(PREFIX_NAVIGATE_FROM_ADDRESS)).get().toString());"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"                to \u003d new Location(ParserUtil.parseLocationFromAddress("},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"                        argumentMultimap.getValue(PREFIX_NAVIGATE_TO_ADDRESS)).get().toString());"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (person) {"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"            if (forFrom) {"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"                fromIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"                        .getValue(PREFIX_NAVIGATE_FROM_PERSON).get());"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"                toIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"                        .getValue(PREFIX_NAVIGATE_TO_PERSON).get());"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"            if (forFrom) {"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"                fromIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"                        .getValue(PREFIX_NAVIGATE_FROM_TASK).get());"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"                toIndex \u003d ParserUtil.parseIndex(argumentMultimap"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"                        .getValue(PREFIX_NAVIGATE_TO_TASK).get());"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":144}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":31,"author":{"gitId":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_NAME \u003d \"task\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(name);"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean getIsPrivate) which will set the Name to be private if true."},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get(), isPrivate)) : Optional.empty();"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(phone);"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean getIsPrivate) which will set the Phone to be private if true."},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(phone);"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get(), isPrivate)) : Optional.empty();"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(address);"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean getIsPrivate) which will set the Address to be private if true."},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address, boolean isPrivate)"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"            throws IllegalValueException {"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(address);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get(), isPrivate)) : Optional.empty();"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"    //author charlesgoh"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e avatar} into an {@code Optional\u003cAddress\u003e} if {@code avatar} is present."},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cAvatar\u003e parseAvatar(Optional\u003cString\u003e avatar) throws IllegalValueException {"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(avatar);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        return avatar.isPresent() ? Optional.of(new Avatar(avatar.get())) : Optional.empty();"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) throws IllegalValueException {"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(remark);"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        return remark.isPresent() ? Optional.of(new Remark(remark.get())) : Optional.empty();"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean getIsPrivate) which will set the Remark to be private if true."},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark, boolean isPrivate)"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"            throws IllegalValueException {"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(remark);"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"        return remark.isPresent() ? Optional.of(new Remark(remark.get(), isPrivate)) : Optional.empty();"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(email);"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean getIsPrivate) which will set the Email to be private if true."},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(email);"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get(), isPrivate)) : Optional.empty();"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code TaskName} if it is present."},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cTaskName\u003e parseTaskName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(name);"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"        return name.isPresent() ? Optional.of(new TaskName(name.get())) : Optional.empty();"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code Description} if it is present."},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(description);"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":"        return description.isPresent() ? Optional.of(new Description(description.get())) : Optional.empty();"},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":200,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code Deadline} if it is present."},{"lineNumber":202,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cDeadline\u003e parseDeadline(Optional\u003cString\u003e deadline) throws IllegalValueException {"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(deadline);"},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"        return deadline.isPresent() ? Optional.of(new Deadline(deadline.get())) : Optional.empty();"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code Priority} if it is present."},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cPriority\u003e parsePriority(Optional\u003cString\u003e priority) throws IllegalValueException {"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(priority);"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"        return priority.isPresent() ? Optional.of(new Priority(priority.get())) : Optional.empty();"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a string into a {@code TaskAddress} if it is present."},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cTaskAddress\u003e parseTaskAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(address);"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"        return address.isPresent() ? Optional.of(new TaskAddress(address.get())) : Optional.empty();"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":225,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a string into a (@code Location) if it is present."},{"lineNumber":227,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cLocation\u003e parseLocationFromAddress(Optional\u003cString\u003e location) throws IllegalValueException {"},{"lineNumber":229,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(location);"},{"lineNumber":230,"author":{"gitId":"jeffreygohkw"},"content":"        return location.isPresent() ? Optional.of(new Location(location.get())) : Optional.empty();"},{"lineNumber":231,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"     *   Parses the given {@code String} and returns an ArrayList of Indexes that correspond to"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":"     *   the value in the String."},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"     *   @throws ParseException if any of the values in the String cannot be converted into an {@code Index}"},{"lineNumber":238,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"Esilocke"},"content":"    public static ArrayList\u003cIndex\u003e parseIndexes(String args) throws ParseException {"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"        String[] splitted \u003d args.split(\" \");"},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e targetsToAdd \u003d new ArrayList\u003c\u003e();"},{"lineNumber":242,"author":{"gitId":"Esilocke"},"content":"        int parsedInt;"},{"lineNumber":243,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":"            for (String s : splitted) {"},{"lineNumber":245,"author":{"gitId":"Esilocke"},"content":"                if (!s.isEmpty()) {"},{"lineNumber":246,"author":{"gitId":"Esilocke"},"content":"                    parsedInt \u003d Integer.parseInt(s);"},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"                    targetsToAdd.add(Index.fromOneBased(parsedInt));"},{"lineNumber":248,"author":{"gitId":"Esilocke"},"content":"                }"},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":252,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"Esilocke"},"content":"        return targetsToAdd;"},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"charlesgoh":2,"jeffreygohkw":123,"Esilocke":64,"-":66}},{"path":"src/main/java/seedu/address/logic/parser/PrivacyLevelCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.PrivacyLevelCommand;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new PrivacyLevelCommand object"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"public class PrivacyLevelCommandParser implements Parser\u003cPrivacyLevelCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the PrivacyLevelCommand"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an PrivacyLevelCommand object for execution."},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public PrivacyLevelCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"            int level \u003d ParserUtil.parseIndex(args).getOneBased();"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"            return new PrivacyLevelCommand(level);"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrivacyLevelCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":27}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_TASK).isPresent()) {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            String trimmed \u003d args.replaceFirst(PREFIX_TASK.getPrefix(), \"\").trim();"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            return new SelectTaskCommandParser().parse(trimmed);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            return new SelectPersonCommandParser().parse(args);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":7,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/SelectPersonCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new SelectPersonCommand object"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class SelectPersonCommandParser extends SelectCommandParser {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectPersonCommand"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * and returns an SelectPersonCommand object for execution."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public SelectPersonCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        Index index \u003d extractIndex(args);"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        return new SelectPersonCommand(index);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * Extracts one index from the provided string and returns it"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the string does not contain a valid index"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private Index extractIndex(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            return ParserUtil.parseIndex(args);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":36}},{"path":"src/main/java/seedu/address/logic/parser/SelectTaskCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectTaskCommand;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new SelectTaskCommand object"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class SelectTaskCommandParser extends SelectCommandParser {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectTaskCommand"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * and returns an SelectTaskCommand object for execution."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public SelectTaskCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        Index index \u003d extractIndex(args);"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        return new SelectTaskCommand(index);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * Extracts one index from the provided string and returns it"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the string does not contain a valid index"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private Index extractIndex(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            return ParserUtil.parseIndex(args);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectTaskCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":36}},{"path":"src/main/java/seedu/address/logic/parser/SetTaskCompleteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetCompleteCommand;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"/** Parses input arguments and returns a {@code SetCompleteCommand} that changes the state of the given command */"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class SetTaskCompleteCommandParser implements Parser\u003cSetCompleteCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the SetCompleteCommand"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * and returns an SetCompleteCommand object for execution."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public SetCompleteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            return new SetCompleteCommand(index);"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCompleteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":29}},{"path":"src/main/java/seedu/address/logic/parser/SetTaskIncompleteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetIncompleteCommand;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"/** Parses input arguments and returns a {@code SetIncompleteCommand} that changes the state of the given command */"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class SetTaskIncompleteCommandParser implements Parser\u003cSetIncompleteCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the SetIncompleteCommand"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * and returns an SetIncompleteCommand object for execution."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public SetIncompleteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            return new SetIncompleteCommand(index);"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetIncompleteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":29}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.SortCommand.ACCEPTED_FIELD_PARAMETERS;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.SortCommand.ACCEPTED_LIST_PARAMETERS;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_INVALID_INPUT;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":" * Parses input arguments and creates a new SortCommand object based on the field and order parameters provided"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public static final int LIST_ARG_POSITION \u003d 0;"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public static final int FIELD_ARG_POSITION \u003d 1;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final int ORDER_ARG_POSITION \u003d 2;"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public static final int SIZE_OF_ARG_ARRAY \u003d 3;"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    public static final List\u003cString\u003e PERSON_FIELD_ARGS \u003d ACCEPTED_FIELD_PARAMETERS.subList(0, 4);"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    public static final List\u003cString\u003e TASK_FIELD_ARGS \u003d ACCEPTED_FIELD_PARAMETERS.subList(4, 6);"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"     * and returns a SortCommand object for execution."},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        // Eliminate spaces"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"        String[] argKeywords \u003d trimmedArgs.split(\"\\\\s\");"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        // Converts arg arrays to lower case to account for caps entries"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        for (int i \u003d 0; i \u003c argKeywords.length; i++) {"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"            argKeywords[i] \u003d argKeywords[i].toLowerCase();"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        if (argKeywords.length !\u003d SIZE_OF_ARG_ARRAY"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"                || (argKeywords[0].equals(ACCEPTED_LIST_PARAMETERS.get(0))"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 TASK_FIELD_ARGS.contains(argKeywords[1]))"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"                || (argKeywords[0].equals(ACCEPTED_LIST_PARAMETERS.get(1))"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 PERSON_FIELD_ARGS.contains(argKeywords[1]))) {"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"        if (!SortCommand.ACCEPTED_FIELD_PARAMETERS.contains(argKeywords[FIELD_ARG_POSITION])"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"                    || !SortCommand.ACCEPTED_ORDER_PARAMETERS.contains(argKeywords[ORDER_ARG_POSITION])"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"                    || !SortCommand.ACCEPTED_LIST_PARAMETERS.contains(argKeywords[LIST_ARG_POSITION])) {"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INPUT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"        // If there are no problems with the input, return a new instance of SortCommand"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"        return new SortCommand(argKeywords[LIST_ARG_POSITION],"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"                argKeywords[FIELD_ARG_POSITION], argKeywords[ORDER_ARG_POSITION]);"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":66}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new ThemeCommand object"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the ThemeCommand"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an ThemeCommand object for execution."},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"        String trimmed \u003d args.trim();"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"        if (trimmed.isEmpty() || trimmed \u003d\u003d null) {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"            return new ThemeCommand(trimmed);"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":25}},{"path":"src/main/java/seedu/address/logic/parser/UnfavouriteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new UnfavouriteCommand object"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"     * and returns an UnfavouriteCommand object for execution."},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    public UnfavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"            return new UnfavouriteCommand(index);"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":30}},{"path":"src/main/java/seedu/address/logic/parser/UnlockCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" * Parses input arguments and returns a new LockCommand object"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"public class UnlockCommandParser implements Parser\u003cUnlockCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d \"Password is required\";"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given {@code String} of arguments in the context of the UnlockCommand"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"     * and returns a UnlockCommand object for execution."},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public UnlockCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"            if (trimmedArgs.isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"                throw new ParseException("},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlockCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"            String[] passwordKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"            return new UnlockCommand(passwordKeywords[0]);"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            String[] passwordKeywords \u003d trimmedArgs.split(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"            return new UnlockCommand(passwordKeywords[1]);"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":37}},{"path":"src/main/java/seedu/address/logic/parser/ViewAssignCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ViewAssignCommand;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new ViewAssignCommand object"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class ViewAssignCommandParser implements Parser\u003cViewAssignCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"     * Parses input arguments and creates a new DeletePersonCommand object in the context of DeletePersonCommand."},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public ViewAssignCommand parse(String args) throws ParseException {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            return new ViewAssignCommand(index);"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException("},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ViewAssignCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.UniqueTaskList;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    private HashMap\u003cString, String\u003e styleMap;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        styleMap \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    public AddressBook() {"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        initialiseStyleMap();"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    public void setTasks(List\u003c? extends ReadOnlyTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"            setTasks(newData.getTasksList());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"            assert false : \"AddressBooks should not have duplicate tasks\";"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"     * Resets only the existing contact or task data of this {@code AddressBook}."},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    public void resetPartialData(ReadOnlyAddressBook newData, Prefix type) {"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(newData);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(type);"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            if (type.equals(PREFIX_TASK)) {"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"                setTasks(newData.getTasksList());"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"            } else if (type.equals(PREFIX_PERSON)) {"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"                tasks.clearAssignees();"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"                setPersons(newData.getPersonList());"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"                setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"                syncMasterTagListWith(persons);"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"            } else {"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"                throw new AssertionError(\"Type must either be persons or tasks\");"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"            assert false : \"Address books should not have duplicate persons\";"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"            assert false : \"Address books should not have duplicate tasks\";"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // in the person list."},{"lineNumber":140,"author":{"gitId":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *      another existing person in the list."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // in the person list."},{"lineNumber":162,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"     * Sorts persons in person list by any field, in either ascending or descending order"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":"     * @param field"},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":"     * @param order"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"    public void sortPersonsBy(String field, String order) {"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"        persons.sortBy(field, order);"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"     * Sorts persons in person list by any field, in either ascending or descending order"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"     * @param field"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"     * @param order"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"    public void sortTasksBy(String field, String order) {"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"        tasks.sortBy(field, order);"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"     * Returns an array list of {@code Index} corresponding to the index of {@code ReadOnlyPerson} specified"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"    public ArrayList\u003cIndex\u003e extractPersonIndexes(ArrayList\u003cReadOnlyPerson\u003e personsToExtract) {"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"        return persons.extractIndexes(personsToExtract);"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":195,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":196,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"wangyiming1019"},"content":"     * Favourites the given person {@code target} to this {@code AddressBook}."},{"lineNumber":198,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if the {@code target} is not in this {@code AddressBook}."},{"lineNumber":199,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":201,"author":{"gitId":"wangyiming1019"},"content":"        persons.favouritePerson(target);"},{"lineNumber":202,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":204,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"wangyiming1019"},"content":"     * Unfavourites the given person {@code target} from this {@code AddressBook}."},{"lineNumber":206,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if the {@code target} is not in this {@code AddressBook}."},{"lineNumber":207,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"wangyiming1019"},"content":"    public void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":209,"author":{"gitId":"wangyiming1019"},"content":"        persons.unfavouritePerson(target);"},{"lineNumber":210,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        // used for checking person tag references"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":227,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"     * Returns an array containing:"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":"     * Index - The old index of each person in the UniquePersonList"},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"     * Value - The new index of each person after a sort operation"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"    public Index[] getMappings() {"},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":"        return persons.getMappings();"},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    //// tag-level operations"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        tags.add(t);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"    //// task-level operations"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":272,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"     * Adds a task to the address book."},{"lineNumber":275,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if an equivalent task already exists."},{"lineNumber":277,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":278,"author":{"gitId":"Esilocke"},"content":"    public void addTask(ReadOnlyTask t) throws DuplicateTaskException {"},{"lineNumber":279,"author":{"gitId":"Esilocke"},"content":"        Task newTask \u003d new Task(t);"},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"        tasks.add(newTask);"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":"    public boolean removeTask(ReadOnlyTask key) throws TaskNotFoundException {"},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":"        if (tasks.remove(key)) {"},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":293,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":296,"author":{"gitId":"Esilocke"},"content":"    /** Removes the specified person from all assignment lists for every task **/"},{"lineNumber":297,"author":{"gitId":"Esilocke"},"content":"    public void removePersonFromAssignees(Index target) {"},{"lineNumber":298,"author":{"gitId":"Esilocke"},"content":"        tasks.removeAssignee(target);"},{"lineNumber":299,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":301,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":"     * Updates the Assignees for all tasks in the internal tasks list with their new mappings"},{"lineNumber":303,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"    public void updateTaskAssigneeMappings(Index[] mappings) {"},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":"        tasks.updateAssignees(mappings);"},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":309,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":310,"author":{"gitId":"Esilocke"},"content":"     * Replaces the given task {@code target} in the list with {@code editedReadOnlyTask}."},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":"     *      another existing task in the list."},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"    public void updateTask(ReadOnlyTask target, ReadOnlyTask editedReadOnlyTask)"},{"lineNumber":317,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editedReadOnlyTask);"},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":"        Task editedTask \u003d new Task(editedReadOnlyTask);"},{"lineNumber":321,"author":{"gitId":"Esilocke"},"content":"        tasks.setTask(target, editedTask);"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":324,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    //// theme-level operations"},{"lineNumber":326,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":327,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":328,"author":{"gitId":"jeffreygohkw"},"content":"     * Initialises the style map by adding the key value pairs"},{"lineNumber":329,"author":{"gitId":"jeffreygohkw"},"content":"     * for the strings that will be input in ThemeCommand and the file name of the .css file"},{"lineNumber":330,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":331,"author":{"gitId":"jeffreygohkw"},"content":"    private void initialiseStyleMap() {"},{"lineNumber":332,"author":{"gitId":"jeffreygohkw"},"content":"        styleMap.put(\"dark\", \"/view/DarkTheme.css\");"},{"lineNumber":333,"author":{"gitId":"jeffreygohkw"},"content":"        styleMap.put(\"Dark\", \"/view/DarkTheme.css\");"},{"lineNumber":334,"author":{"gitId":"jeffreygohkw"},"content":"        styleMap.put(\"light\", \"/view/LightTheme.css\");"},{"lineNumber":335,"author":{"gitId":"jeffreygohkw"},"content":"        styleMap.put(\"Light\", \"/view/LightTheme.css\");"},{"lineNumber":336,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":338,"author":{"gitId":"jeffreygohkw"},"content":"    public HashMap\u003cString, String\u003e getStyleMap() {"},{"lineNumber":339,"author":{"gitId":"jeffreygohkw"},"content":"        return styleMap;"},{"lineNumber":340,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":346,"author":{"gitId":"Esilocke"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\""},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"                + tasks.asObservableList().size() +  \" tasks\";"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":357,"author":{"gitId":"jeffreygohkw"},"content":"    public ReadOnlyPerson getPersonAtIndexFromPersonList(int index) {"},{"lineNumber":358,"author":{"gitId":"jeffreygohkw"},"content":"        return persons.asObservableList().get(index);"},{"lineNumber":359,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":361,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":362,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":363,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getTasksList() {"},{"lineNumber":364,"author":{"gitId":"Esilocke"},"content":"        return tasks.asObservableList();"},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":376,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":378,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks);"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":385,"author":{"gitId":"Esilocke"},"content":"        return Objects.hash(persons, tags, tasks);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":387,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":21,"jeffreygohkw":25,"Esilocke":131,"wangyiming1019":17,"-":193}},{"path":"src/main/java/seedu/address/model/Location.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * Represents a Location in the address book."},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"public class Location {"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"            \"Location can take any value, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"     * Validates given location."},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws IllegalValueException if given location string is invalid."},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public Location(String location) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        if (location \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        if (!isValidLocation(location)) {"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        this.value \u003d location;"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns true if a given string is a valid location."},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        return value;"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.value.equals(((Location) other).value)); // state check"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        return value.hashCode();"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":61}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    Predicate\u003cReadOnlyTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    /** Clears only part of the existing backing model and replaces with the provided new data. */"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    void resetPartialData(ReadOnlyAddressBook newData, Prefix type);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    /** Deletes given tag from specific persons */"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"    void deleteTag(Tag toDelete, ArrayList\u003cIndex\u003e targetIndexes) throws PersonNotFoundException,"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException;"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /** Adds the given person */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    /** Adds given tag to specific persons */"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    void addTag(Tag toAdd, ArrayList\u003cIndex\u003e targetIndexes) throws PersonNotFoundException,"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException;"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    /** Edits the specified tag, and updates all instances in the address book */"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    void editTag(Tag toChange, Tag newTag, ArrayList\u003cIndex\u003e affectedIndexes) throws PersonNotFoundException,"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            DuplicatePersonException;"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    /** Favourites the given person */"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    /** Unfavourites the given person */"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *      another existing person in the list."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    /** Adds the given task */"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    void addTask(ReadOnlyTask task) throws DuplicateTaskException;"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    /** Deletes the given task */"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    void deleteTask(ReadOnlyTask toDelete) throws TaskNotFoundException;"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"     * Replaces the given task {@code target} with {@code editedTask}."},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"     *      another existing task in the list."},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    void updateTask(ReadOnlyTask target, ReadOnlyTask editedTask)"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException;"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    /** Assigns all specified persons to the specified task */"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    void assignToTask(ArrayList\u003cReadOnlyPerson\u003e personsToAssign, ReadOnlyTask assignedTask)"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException;"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    /** Assigns all specified persons to the specified task */"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    void dismissFromTask(ArrayList\u003cReadOnlyPerson\u003e personsToDismiss, ReadOnlyTask dismissedTask)"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException;"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    /** Changes the state of the specified task */"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    void setAsComplete(ReadOnlyTask toSet, boolean isComplete) throws TaskNotFoundException, DuplicateTaskException;"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    /** Displays all persons assigned to the specified task */"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    void viewAssignees(ReadOnlyTask task);"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"    /** Returns an unmodifiable view of the filtered tasks list */"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"    ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList();"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"    void updateFilteredTaskList(Predicate\u003cReadOnlyTask\u003e predicate);"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"     * Sorts all persons in person list by chosen field in ascending (asc) or descending (desc) order"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"     * @param field"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"     * @param order"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"    void sortPersons(String field, String order);"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"     * Sorts all tasks in task list by chosen field in ascending (asc) or descending (desc) order"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"     * @param field"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"     * @param order"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"    void sortTasks(String field, String order);"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"     * Returns lock state. True means locked. False means unlocked"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"    boolean getLockState();"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"     * Locks address book from model"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"    void lockAddressBookFromModel();"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"     * Unlock address book from model"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"    void unlockAddressBookFromModel();"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"     * Returns a copy of the UserPrefs"},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"    UserPrefs getUserPrefs();"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"    void setPrivacyLevel(int level);"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"    int getPrivacyLevel();"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"    ReadOnlyPerson getPersonAtIndexFromAddressBook(int index);"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"    void setTheme(String theme);"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"    String getTheme();"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"    HashMap\u003cString, String\u003e getStyleMap();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":35,"jeffreygohkw":15,"Esilocke":58,"wangyiming1019":20,"-":46}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.NameContainsFavouritePredicate;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.NameContainsFavouritePrivacyLevelPredicate;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.NameContainsKeywordsPrivacyLevelPredicate;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.NameContainsTagsPrivacyLevelPredicate;"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.PersonCompleteMatchPredicate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ShowAllPrivacyLevelPredicate;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Assignees;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":50,"author":{"gitId":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":51,"author":{"gitId":"-"},"content":" */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    private final FilteredList\u003cReadOnlyTask\u003e filteredTasks;"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    private int privacyLevel;"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    private String theme;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"        this.userPrefs \u003d userPrefs;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTasksList());"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        this.theme \u003d userPrefs.getTheme();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    public void resetPartialData(ReadOnlyAddressBook newData, Prefix type) {"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        assert(type.equals(PREFIX_TASK) || type.equals(PREFIX_PERSON));"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        if (type.equals(PREFIX_TASK)) {"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"            addressBook.resetPartialData(newData, PREFIX_TASK);"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"            indicateAddressBookChanged();"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"            addressBook.resetPartialData(newData, PREFIX_PERSON);"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"            indicateAddressBookChanged();"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        persons.add(target);"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d addressBook.extractPersonIndexes(persons);"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        Index personIndex \u003d personIndexes.get(0);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"        addressBook.removePersonFromAssignees(personIndex);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"     * Delete input tag from the specific persons shown in the last list."},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"    public synchronized void deleteTag(Tag toDelete, ArrayList\u003cIndex\u003e personIndexes) throws PersonNotFoundException,"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException {"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c personIndexes.size(); i++) {"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"            int index \u003d personIndexes.get(i).getZeroBased();"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson personWithTag \u003d this.getFilteredPersonList().get(index);"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"            Person personWithoutTag \u003d new Person(personWithTag);"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(personWithoutTag.getTags());"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"            newTags.remove(toDelete);"},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"            personWithoutTag.setTags(newTags);"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"            addressBook.updatePerson(personWithTag, personWithoutTag);"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"            indicateAddressBookChanged();"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"wangyiming1019"},"content":"     * Adds input tag to the specific persons shown in the last list."},{"lineNumber":150,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":"    public synchronized void addTag(Tag toAdd, ArrayList\u003cIndex\u003e personIndexes) throws PersonNotFoundException,"},{"lineNumber":153,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException {"},{"lineNumber":154,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c personIndexes.size(); i++) {"},{"lineNumber":155,"author":{"gitId":"wangyiming1019"},"content":"            int index \u003d personIndexes.get(i).getZeroBased();"},{"lineNumber":156,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson personWithoutTag \u003d this.getFilteredPersonList().get(index);"},{"lineNumber":157,"author":{"gitId":"wangyiming1019"},"content":"            Person personWithTag \u003d new Person(personWithoutTag);"},{"lineNumber":158,"author":{"gitId":"wangyiming1019"},"content":"            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(personWithTag.getTags());"},{"lineNumber":159,"author":{"gitId":"wangyiming1019"},"content":"            newTags.add(toAdd);"},{"lineNumber":160,"author":{"gitId":"wangyiming1019"},"content":"            personWithTag.setTags(newTags);"},{"lineNumber":161,"author":{"gitId":"wangyiming1019"},"content":"            addressBook.updatePerson(personWithoutTag, personWithTag);"},{"lineNumber":162,"author":{"gitId":"wangyiming1019"},"content":"            indicateAddressBookChanged();"},{"lineNumber":163,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"    public void sortPersons(String field, String order) {"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(field, order);"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"        Index[] updatedIndexes \u003d addressBook.getMappings();"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"        System.out.println(updatedIndexes.length);"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        addressBook.updateTaskAssigneeMappings(updatedIndexes);"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"        indicateAddressBookChanged();"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"    public void sortTasks(String field, String order) {"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortTasksBy(field, order);"},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":"        indicateAddressBookChanged();"},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":191,"author":{"gitId":"charlesgoh"},"content":"    public UserPrefs getUserPrefs() {"},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":"        return userPrefs;"},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"    public boolean getLockState() {"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"        return getUserPrefs().getAddressBookLockState();"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":"    public void lockAddressBookFromModel() {"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":"        getUserPrefs().lockAddressBook();"},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":"    public void unlockAddressBookFromModel() {"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"        getUserPrefs().unlockAddressBook();"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"     * Replaces the toChange Tag with the newTag Tag, for all Person objects denoted by the indexes."},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"     * Guarantees: indexes contains at least 1 person that has the toChange Tag."},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"    public synchronized void editTag(Tag toChange, Tag newTag, ArrayList\u003cIndex\u003e indexes)"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"            throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e allPersons \u003d this.getFilteredPersonList();"},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":"        Set\u003cTag\u003e personTags;"},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"        Person toUpdate;"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson toRead;"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"        int index;"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"        for (Index i : indexes) {"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"            index \u003d i.getZeroBased();"},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"            toRead \u003d allPersons.get(index);"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"            toUpdate \u003d new Person(toRead);"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"            personTags \u003d new HashSet\u003c\u003e(toRead.getTags());"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"            personTags.remove(toChange);"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"            personTags.add(newTag);"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":"            toUpdate.setTags(personTags);"},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"            addressBook.updatePerson(toRead, toUpdate);"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":233,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":234,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":235,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":236,"author":{"gitId":"wangyiming1019"},"content":"        addressBook.favouritePerson(target);"},{"lineNumber":237,"author":{"gitId":"wangyiming1019"},"content":"        indicateAddressBookChanged();"},{"lineNumber":238,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":240,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":241,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":242,"author":{"gitId":"wangyiming1019"},"content":"    public void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":243,"author":{"gitId":"wangyiming1019"},"content":"        addressBook.unfavouritePerson(target);"},{"lineNumber":244,"author":{"gitId":"wangyiming1019"},"content":"        indicateAddressBookChanged();"},{"lineNumber":245,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":248,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":"    public synchronized void addTask(ReadOnlyTask toAdd) throws DuplicateTaskException {"},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"        addressBook.addTask(toAdd);"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":252,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();"},{"lineNumber":253,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":"    public synchronized void deleteTask(ReadOnlyTask toDelete) throws TaskNotFoundException {"},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"        addressBook.removeTask(toDelete);"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"    public void updateTask(ReadOnlyTask target, ReadOnlyTask editedTask)"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"        addressBook.updateTask(target, editedTask);"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();"},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":272,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"    public void assignToTask(ArrayList\u003cReadOnlyPerson\u003e personsToAssign, ReadOnlyTask taskToAssignTo)"},{"lineNumber":275,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException {"},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"        Assignees assignees \u003d taskToAssignTo.getAssignees();"},{"lineNumber":277,"author":{"gitId":"Esilocke"},"content":"        Assignees newAssignees \u003d new Assignees(assignees);"},{"lineNumber":278,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e positions \u003d addressBook.extractPersonIndexes(personsToAssign);"},{"lineNumber":279,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"        boolean atLeastOneAdded \u003d newAssignees.assign(positions);"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":"        if (!atLeastOneAdded) {"},{"lineNumber":282,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask updatedTask \u003d constructTaskWithNewAssignee(taskToAssignTo, newAssignees);"},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"        addressBook.updateTask(taskToAssignTo, updatedTask);"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();"},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":"    public void dismissFromTask(ArrayList\u003cReadOnlyPerson\u003e personsToDismiss, ReadOnlyTask taskToDismissFrom)"},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException {"},{"lineNumber":293,"author":{"gitId":"Esilocke"},"content":"        Assignees assignees \u003d taskToDismissFrom.getAssignees();"},{"lineNumber":294,"author":{"gitId":"Esilocke"},"content":"        Assignees newAssignees \u003d new Assignees(assignees);"},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e positions \u003d addressBook.extractPersonIndexes(personsToDismiss);"},{"lineNumber":296,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":297,"author":{"gitId":"Esilocke"},"content":"        boolean atLeastOneDismissed \u003d newAssignees.dismiss(positions);"},{"lineNumber":298,"author":{"gitId":"Esilocke"},"content":"        if (!atLeastOneDismissed) {"},{"lineNumber":299,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":300,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask updatedTask \u003d constructTaskWithNewAssignee(taskToDismissFrom, newAssignees);"},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":"        addressBook.updateTask(taskToDismissFrom, updatedTask);"},{"lineNumber":303,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"    public void setAsComplete(ReadOnlyTask toSet, boolean isComplete)"},{"lineNumber":309,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException {"},{"lineNumber":310,"author":{"gitId":"Esilocke"},"content":"        TaskName taskName \u003d toSet.getTaskName();"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"        Description description \u003d toSet.getDescription();"},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"        Deadline deadline \u003d toSet.getDeadline();"},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":"        Priority priority \u003d toSet.getPriority();"},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":"        Assignees assignees \u003d toSet.getAssignees();"},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":"        TaskAddress taskAddress \u003d toSet.getTaskAddress();"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"        Boolean state \u003d isComplete;"},{"lineNumber":317,"author":{"gitId":"Esilocke"},"content":"        if (state \u003d\u003d toSet.getCompleteState()) {"},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask updatedTask \u003d new Task(taskName, description, deadline, priority, assignees, state, taskAddress);"},{"lineNumber":321,"author":{"gitId":"Esilocke"},"content":"        updateTask(toSet, updatedTask);"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":324,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":325,"author":{"gitId":"Esilocke"},"content":"    public void viewAssignees(ReadOnlyTask task) {"},{"lineNumber":326,"author":{"gitId":"Esilocke"},"content":"        Assignees assignees \u003d task.getAssignees();"},{"lineNumber":327,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e internalList \u003d assignees.getList();"},{"lineNumber":328,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personsToShow \u003d new ArrayList\u003c\u003e();"},{"lineNumber":329,"author":{"gitId":"Esilocke"},"content":"        for (Index i : internalList) {"},{"lineNumber":330,"author":{"gitId":"Esilocke"},"content":"            assert(i.getZeroBased() \u003c filteredPersons.size());"},{"lineNumber":331,"author":{"gitId":"Esilocke"},"content":"            personsToShow.add(filteredPersons.get(i.getZeroBased()));"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"Esilocke"},"content":"        PersonCompleteMatchPredicate assignedPredicate \u003d new PersonCompleteMatchPredicate(personsToShow);"},{"lineNumber":334,"author":{"gitId":"Esilocke"},"content":"        updateFilteredPersonList(assignedPredicate);"},{"lineNumber":335,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":340,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":341,"author":{"gitId":"-"},"content":"     * {@code addressBook}"},{"lineNumber":342,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":349,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":350,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList() {"},{"lineNumber":351,"author":{"gitId":"Esilocke"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":352,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":354,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":355,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":356,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":357,"author":{"gitId":"jeffreygohkw"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":358,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(predicate);"},{"lineNumber":359,"author":{"gitId":"jeffreygohkw"},"content":"        if (privacyLevel \u003d\u003d 3) {"},{"lineNumber":360,"author":{"gitId":"jeffreygohkw"},"content":"            if (predicate instanceof NameContainsKeywordsPredicate) {"},{"lineNumber":361,"author":{"gitId":"jeffreygohkw"},"content":"                this.updateFilteredPersonList(new NameContainsKeywordsPrivacyLevelPredicate((("},{"lineNumber":362,"author":{"gitId":"jeffreygohkw"},"content":"                        NameContainsKeywordsPredicate) predicate).getKeywords()));"},{"lineNumber":363,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (predicate instanceof NameContainsTagsPredicate) {"},{"lineNumber":364,"author":{"gitId":"jeffreygohkw"},"content":"                this.updateFilteredPersonList(new NameContainsTagsPrivacyLevelPredicate((("},{"lineNumber":365,"author":{"gitId":"jeffreygohkw"},"content":"                        NameContainsTagsPredicate) predicate).getTags()));"},{"lineNumber":366,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (predicate instanceof NameContainsFavouritePredicate) {"},{"lineNumber":367,"author":{"gitId":"jeffreygohkw"},"content":"                this.updateFilteredPersonList(new NameContainsFavouritePrivacyLevelPredicate());"},{"lineNumber":368,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (predicate \u003d\u003d PREDICATE_SHOW_ALL_PERSONS) {"},{"lineNumber":369,"author":{"gitId":"jeffreygohkw"},"content":"                this.updateFilteredPersonList(new ShowAllPrivacyLevelPredicate());"},{"lineNumber":370,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":371,"author":{"gitId":"jeffreygohkw"},"content":"                filteredPersons.setPredicate(predicate);"},{"lineNumber":372,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":373,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":374,"author":{"gitId":"jeffreygohkw"},"content":"            filteredPersons.setPredicate(predicate);"},{"lineNumber":375,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":376,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":378,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":"    public void updateFilteredTaskList(Predicate\u003cReadOnlyTask\u003e predicate) {"},{"lineNumber":381,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(predicate);"},{"lineNumber":382,"author":{"gitId":"Esilocke"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":383,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":384,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":385,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":401,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":402,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"Esilocke"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":406,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":407,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":408,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":409,"author":{"gitId":"Esilocke"},"content":"     * Constructs a new {@code ReadOnlyTask} from an existing ReadOnlyTask, with the specified assignees list."},{"lineNumber":410,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":411,"author":{"gitId":"Esilocke"},"content":"    public ReadOnlyTask constructTaskWithNewAssignee(ReadOnlyTask originalTask, Assignees updatedAssignees) {"},{"lineNumber":412,"author":{"gitId":"Esilocke"},"content":"        TaskName taskName \u003d originalTask.getTaskName();"},{"lineNumber":413,"author":{"gitId":"Esilocke"},"content":"        Description description \u003d originalTask.getDescription();"},{"lineNumber":414,"author":{"gitId":"Esilocke"},"content":"        Deadline deadline \u003d originalTask.getDeadline();"},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":"        Priority priority \u003d originalTask.getPriority();"},{"lineNumber":416,"author":{"gitId":"Esilocke"},"content":"        Boolean state \u003d originalTask.getCompleteState();"},{"lineNumber":417,"author":{"gitId":"Esilocke"},"content":"        TaskAddress taskAddress \u003d originalTask.getTaskAddress();"},{"lineNumber":418,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":419,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask updatedTask \u003d new Task(taskName, description, deadline, priority, updatedAssignees,"},{"lineNumber":420,"author":{"gitId":"Esilocke"},"content":"                state, taskAddress);"},{"lineNumber":421,"author":{"gitId":"Esilocke"},"content":"        return updatedTask;"},{"lineNumber":422,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":423,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":424,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":425,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":426,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":427,"author":{"gitId":"jeffreygohkw"},"content":"        if (level \u003c 1 || level \u003e 3) {"},{"lineNumber":428,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy Level can only be 0, 1 or 2\");"},{"lineNumber":429,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":430,"author":{"gitId":"jeffreygohkw"},"content":"            this.privacyLevel \u003d level;"},{"lineNumber":431,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":432,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":433,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":434,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":435,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":436,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":437,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":438,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":439,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":440,"author":{"gitId":"jeffreygohkw"},"content":"    public ReadOnlyPerson getPersonAtIndexFromAddressBook(int index) {"},{"lineNumber":441,"author":{"gitId":"jeffreygohkw"},"content":"        return addressBook.getPersonAtIndexFromPersonList(index);"},{"lineNumber":442,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":443,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":444,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":445,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":446,"author":{"gitId":"jeffreygohkw"},"content":"    public void setTheme(String theme) {"},{"lineNumber":447,"author":{"gitId":"jeffreygohkw"},"content":"        this.theme \u003d theme;"},{"lineNumber":448,"author":{"gitId":"jeffreygohkw"},"content":"        userPrefs.setTheme(theme);"},{"lineNumber":449,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":450,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":451,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":452,"author":{"gitId":"jeffreygohkw"},"content":"    public String getTheme() {"},{"lineNumber":453,"author":{"gitId":"jeffreygohkw"},"content":"        return theme;"},{"lineNumber":454,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":455,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":456,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":457,"author":{"gitId":"jeffreygohkw"},"content":"    public HashMap\u003cString, String\u003e getStyleMap() {"},{"lineNumber":458,"author":{"gitId":"jeffreygohkw"},"content":"        return addressBook.getStyleMap();"},{"lineNumber":459,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":460,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":35,"jeffreygohkw":72,"Esilocke":186,"wangyiming1019":58,"-":110}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    ObservableList\u003cReadOnlyTask\u003e getTasksList();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":5,"-":24}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UserPrefs {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    private String addressBookName \u003d \"My Address++\";"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    private boolean addressBookLockState \u003d false;"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    private String addressBookEncryptedPassword \u003d Hashing.sha256()"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"            .hashString(\"password\", StandardCharsets.UTF_8).toString();"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    private String theme;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        this.setGuiSettings(1080, 720, 0, 0);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return addressBookName;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"    public String getAddressBookEncryptedPassword() {"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        return addressBookEncryptedPassword;"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"    public void setAddressBookEncryptedPassword(String addressBookPasswordInput) {"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"        this.addressBookEncryptedPassword \u003d Hashing.sha256()"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"                .hashString(addressBookPasswordInput, StandardCharsets.UTF_8).toString();"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"    public void lockAddressBook() {"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        this.addressBookLockState \u003d true;"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    public void unlockAddressBook() {"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"        this.addressBookLockState \u003d false;"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"    public boolean getAddressBookLockState() {"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        return this.addressBookLockState;"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName)"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 Objects.equals(addressBookEncryptedPassword, o.addressBookEncryptedPassword)"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 Objects.equals(addressBookLockState, o.addressBookLockState);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"        sb.append(\"\\nPassword : \" + addressBookEncryptedPassword);"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"        sb.append(\"\\nLock State: \" + Boolean.toString(this.addressBookLockState));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"    public String getTheme() {"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        if (theme \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"            return \"/view/DarkTheme.css\";"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"            return theme;"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"    public void setTheme(String theme) {"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        this.theme \u003d theme;"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":35,"jeffreygohkw":12,"-":74}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String ADDRESS_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    private int privacyLevel \u003d 2;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Validates given address."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public Address(String address) throws IllegalValueException {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d ADDRESS_PLACEHOLDER_VALUE;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            return;"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!isValidAddress(address)) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.value \u003d address;"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    public Address(String address, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        this(address);"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns true if a given string is a valid person address."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(ADDRESS_PLACEHOLDER_VALUE);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        if (privacyLevel \u003d\u003d 1) {"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"            if (isPrivate) {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"                return \"\u003cPrivate Address\u003e\";"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean getIsPrivate() {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        this.privacyLevel \u003d level;"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":44,"Esilocke":6,"-":46}},{"path":"src/main/java/seedu/address/model/person/Avatar.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":" * Represents a Person\u0027s avatar filepath in the address book."},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"public class Avatar {"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_AVATAR_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"            \"Person avatar can take any values, and it should not be blank\";"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    /*"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public static final String AVATAR_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    public static final String AVATAR_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"     * Validates given address."},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    public Avatar(String address) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"            this.value \u003d AVATAR_PLACEHOLDER_VALUE;"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"            return;"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        if (!isValidAvatar(address)) {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalValueException(MESSAGE_AVATAR_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        this.value \u003d address;"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public static boolean isValidAvatar(String test) {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        return test.matches(AVATAR_VALIDATION_REGEX) || test.equals(AVATAR_PLACEHOLDER_VALUE);"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        return value;"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"                || (other instanceof Avatar // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 this.value.equals(((Avatar) other).value)); // state check"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":57,"jeffreygohkw":6}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"-"},"content":"            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String EMAIL_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    private int privacyLevel \u003d 2;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Validates given email."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given email address string is invalid."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    public Email(String email) throws IllegalValueException {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d EMAIL_PLACEHOLDER_VALUE;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (!isValidEmail(trimmedEmail)) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.value \u003d trimmedEmail;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    public Email(String email, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        this(email);"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX) || test.equals(EMAIL_PLACEHOLDER_VALUE);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        if (privacyLevel \u003d\u003d 1) {"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"            if (isPrivate) {"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"                return \"\u003cPrivate Email\u003e\";"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean getIsPrivate() {"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        this.privacyLevel \u003d level;"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":42,"Esilocke":6,"-":43}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    private int privacyLevel \u003d 2;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Validates given name."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    public Name(String name) throws IllegalValueException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        this.value \u003d trimmedName;"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"    public Name(String name, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        this(name);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        if (privacyLevel \u003d\u003d 1) {"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"            if (isPrivate) {"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"                return \"\u003cPrivate Name\u003e\";"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.value.equals(((Name) other).value)); // state check"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        return value.hashCode();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean getIsPrivate() {"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        this.privacyLevel \u003d level;"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":47,"-":48}},{"path":"src/main/java/seedu/address/model/person/NameContainsFavouritePredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} are favoured."},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"public class NameContainsFavouritePredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"    public NameContainsFavouritePredicate() {"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"        return person.getFavourite();"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof NameContainsFavouritePredicate); // instanceof handles nulls"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":24}},{"path":"src/main/java/seedu/address/model/person/NameContainsFavouritePrivacyLevelPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} are favoured and has no private fields"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"public class NameContainsFavouritePrivacyLevelPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    public NameContainsFavouritePrivacyLevelPredicate() {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"        return (person.getFavourite() \u0026\u0026 !person.hasPrivateField());"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof NameContainsFavouritePrivacyLevelPredicate); // instanceof handles nulls"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":24}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().value, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    public List\u003cString\u003e getKeywords() {"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"        return keywords;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":7,"-":30}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPrivacyLevelPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":" * and has no private fields"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"public class NameContainsKeywordsPrivacyLevelPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public NameContainsKeywordsPrivacyLevelPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        return (keywords.stream()"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().value, keyword))"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"                        \u0026\u0026 !person.hasPrivateField());"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof NameContainsKeywordsPrivacyLevelPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPrivacyLevelPredicate) other).keywords)); //state check"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":34}},{"path":"src/main/java/seedu/address/model/person/NameContainsTagsPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches any of the tags given."},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"public class NameContainsTagsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    private final List\u003cString\u003e tags;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public NameContainsTagsPredicate(List\u003cString\u003e tags) {"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"        this.tags \u003d tags;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        String allTagString \u003d convertTagToString(person);"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        final List\u003cString\u003e wantedTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        final List\u003cString\u003e unwantedTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        updateWantedTagUnwantedTag(wantedTag, unwantedTag);"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        boolean isOnlyUnwantedTags \u003d isOnlyUnwantedTagsCheck(wantedTag, unwantedTag);"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        if (isOnlyUnwantedTags) {"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            return !(unwantedTag.stream()"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"                    .anyMatch((inputTag -\u003e StringUtil.containsWordIgnoreCase(allTagString, inputTag))));"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        return wantedTag.stream()"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(allTagString, keyword))"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 !(unwantedTag.stream()"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"                .anyMatch((keyword -\u003e StringUtil.containsWordIgnoreCase(allTagString, keyword))));"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     * check only unwanted tag list has elements"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"     * @return a boolean value"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    private boolean isOnlyUnwantedTagsCheck(List\u003cString\u003e wantedTag,"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"                                            List\u003cString\u003e unwantedTag) {"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        if (wantedTag.isEmpty() \u0026\u0026 !unwantedTag.isEmpty()) {"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"            return false;"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"     * Update the wantedTag and unwantedTag list"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"     * @param wantedTag list of tags to be searched"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"     * @param unwantedTag list of tags to not be searched"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"    private void updateWantedTagUnwantedTag(List\u003cString\u003e wantedTag, List\u003cString\u003e unwantedTag) {"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        for (String everyTag : tags) {"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"            if (!everyTag.startsWith(\"/\")) {"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"                wantedTag.add(everyTag);"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"            } else {"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"                unwantedTag.add(everyTag.substring(1));"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"     * Convert a set of tags to Strings"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    private String convertTagToString(ReadOnlyPerson person) {"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"        Set\u003cTag\u003e personTags \u003d person.getTags();"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        StringBuilder allTagNames \u003d new StringBuilder();"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        for (Tag tag : personTags) {"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"            allTagNames.append(tag.getTagName());"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"            allTagNames.append(\" \");"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        return allTagNames.toString().trim();"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        return tags;"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof NameContainsTagsPredicate // instanceof handles nulls"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.tags.equals(((NameContainsTagsPredicate) other).tags)); // state check"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":6,"wangyiming1019":93}},{"path":"src/main/java/seedu/address/model/person/NameContainsTagsPrivacyLevelPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches any of the tags and hasno private fields."},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"public class NameContainsTagsPrivacyLevelPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    private final List\u003cString\u003e tags;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public NameContainsTagsPrivacyLevelPredicate(List\u003cString\u003e tags) {"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"        this.tags \u003d tags;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        String allTagString \u003d convertTagToString(person);"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"        final List\u003cString\u003e wantedTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        final List\u003cString\u003e unwantedTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"        updateWantedTagUnwantedTag(wantedTag, unwantedTag);"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        boolean isOnlyUnwantedTags \u003d isOnlyUnwantedTagsCheck(wantedTag, unwantedTag);"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        if (isOnlyUnwantedTags) {"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"            return (!(unwantedTag.stream()"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"                    .anyMatch((inputTag -\u003e StringUtil.containsWordIgnoreCase(allTagString, inputTag))))"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 !person.hasPrivateField());"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        return (wantedTag.stream()"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(allTagString, keyword))"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 !(unwantedTag.stream()"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"                .anyMatch((keyword -\u003e StringUtil.containsWordIgnoreCase(allTagString, keyword))))"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 !person.hasPrivateField());"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"     * check only unwanted tag list has elements"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"     * @return a boolean value"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isOnlyUnwantedTagsCheck(List\u003cString\u003e wantedTag,"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"                                            List\u003cString\u003e unwantedTag) {"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        if (wantedTag.isEmpty() \u0026\u0026 !unwantedTag.isEmpty()) {"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"            return false;"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"     * Update the wantedTag and unwantedTag list"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"     * @param wantedTag list of tags to be searched"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"     * @param unwantedTag list of tags to not be searched"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"    private void updateWantedTagUnwantedTag(List\u003cString\u003e wantedTag, List\u003cString\u003e unwantedTag) {"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        for (String everyTag : tags) {"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"            if (!everyTag.startsWith(\"/\")) {"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"                wantedTag.add(everyTag);"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"                unwantedTag.add(everyTag.substring(1));"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"     * Convert a set of tags to Strings"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    private String convertTagToString(ReadOnlyPerson person) {"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        Set\u003cTag\u003e personTags \u003d person.getTags();"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        StringBuilder allTagNames \u003d new StringBuilder();"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        for (Tag tag : personTags) {"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"            allTagNames.append(tag.getTagName());"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            allTagNames.append(\" \");"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        return allTagNames.toString().trim();"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":86}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    private ObjectProperty\u003cBoolean\u003e favourite;"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    private ObjectProperty\u003cRemark\u003e remark;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    private ObjectProperty\u003cAvatar\u003e avatar;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    private int privacyLevel \u003d 2;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"                  Boolean favourite, Remark remark, Avatar avatar, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        this.favourite \u003d new SimpleObjectProperty\u003c\u003e(favourite);"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        this.remark \u003d new SimpleObjectProperty\u003c\u003e(remark);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        this.avatar \u003d new SimpleObjectProperty\u003c\u003e(avatar);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getFavourite(),"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"             source.getRemark(), source.getAvatar(), source.getTags());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return name.get();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return phone.get();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return email.get();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return address.get();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"    public void setFavourite(Boolean favourite) {"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"        this.favourite.set(requireNonNull(favourite));"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"    public ObjectProperty\u003cBoolean\u003e favouriteProperty() {"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        return favourite;"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"    public Boolean getFavourite() {"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        return favourite.get();"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"    public void setRemark(Remark remark) {"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        this.remark.set(requireNonNull(remark));"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"    public ObjectProperty\u003cRemark\u003e remarkProperty() {"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"        return remark;"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"    public Remark getRemark() {"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"        return remark.get();"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"    public void setAvatar(Avatar avatar) {"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"        this.avatar.set(requireNonNull(avatar));"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"    public ObjectProperty\u003cAvatar\u003e avatarProperty() {"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"        return avatar;"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"    public Avatar getAvatar() {"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"        return avatar.get();"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return tags;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"        return Objects.hash(name, phone, email, address, favourite, remark, tags, avatar);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return getAsText();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"        this.getName().setPrivacyLevel(level);"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"        this.getPhone().setPrivacyLevel(level);"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"        this.getEmail().setPrivacyLevel(level);"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"        this.getAddress().setPrivacyLevel(level);"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"        this.getRemark().setPrivacyLevel(level);"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"        this.privacyLevel \u003d level;"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns true if the Person has at least one private field and false otherwise"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean hasPrivateField() {"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"        return (this.getName().getIsPrivate() || this.getPhone().getIsPrivate() || this.getAddress().getIsPrivate()"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"                || this.getEmail().getIsPrivate() || this.getRemark().getIsPrivate());"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":37,"jeffreygohkw":25,"wangyiming1019":20,"-":134}},{"path":"src/main/java/seedu/address/model/person/PersonCompleteMatchPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s matches any one of the keywords"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class PersonCompleteMatchPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    private final List\u003cReadOnlyPerson\u003e keywords;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    public PersonCompleteMatchPredicate(List\u003cReadOnlyPerson\u003e keywords) {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        return keywords.stream()"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"                .anyMatch(person::equals);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof PersonCompleteMatchPredicate // instanceof handles nulls"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.keywords.equals(((PersonCompleteMatchPredicate) other).keywords)); // state check"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":29}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static final String PHONE_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    private int privacyLevel \u003d 2;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Validates given phone number."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given phone string is invalid."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public Phone(String phone) throws IllegalValueException {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d PHONE_PLACEHOLDER_VALUE;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            return;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!isValidPhone(trimmedPhone)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.value \u003d trimmedPhone;"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    public Phone(String phone, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        this(phone);"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return test.matches(PHONE_VALIDATION_REGEX) || test.equals(PHONE_PLACEHOLDER_VALUE);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        if (privacyLevel \u003d\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"            if (isPrivate) {"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"                return \"\u003cPrivate Phone\u003e\";"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean getIsPrivate() {"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        this.privacyLevel \u003d level;"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":44,"Esilocke":6,"-":43}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Name getName();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Phone getPhone();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Email getEmail();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    Address getAddress();"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    ObjectProperty\u003cRemark\u003e remarkProperty();"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    Remark getRemark();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    ObjectProperty\u003cBoolean\u003e favouriteProperty();"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    Boolean getFavourite();"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"    ObjectProperty\u003cAvatar\u003e avatarProperty();"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    Avatar getAvatar();"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    void setPrivacyLevel(int level);"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    int getPrivacyLevel();"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    boolean hasPrivateField();"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress()))"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 other.getFavourite().equals(this.getFavourite())"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 other.getRemark().equals(this.getRemark())"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 other.getAvatar().equals(this.getAvatar());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    default String getAsText() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .append(getAddress())"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"                .append(\" Remark: \")"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"                .append(getRemark())"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"                .append(\" Avatar: \")"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"                .append(getAvatar())"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":10,"jeffreygohkw":5,"wangyiming1019":4,"-":54}},{"path":"src/main/java/seedu/address/model/person/Remark.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"            \"Person remarks can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"     * The first character of the remark must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    private boolean isPrivate \u003d false;"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    private int privacyLevel \u003d 2;"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"     * Validates given remark."},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"     * @throws IllegalValueException if given remark string is invalid."},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    public Remark(String remark) throws IllegalValueException {"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        if (remark \u003d\u003d null) {"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"            this.value \u003d REMARK_PLACEHOLDER_VALUE;"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"            return;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        if (!isValidRemark(remark)) {"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        this.value \u003d remark;"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public Remark(String remark, boolean isPrivate) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        this(remark);"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        this.setPrivate(isPrivate);"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"        return test.matches(REMARK_VALIDATION_REGEX) || test.equals(REMARK_PLACEHOLDER_VALUE);"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        if (privacyLevel \u003d\u003d 1) {"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"            if (isPrivate) {"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"                return \"\u003cPrivate Remark\u003e\";"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"            return value;"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"        return value.hashCode();"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean getIsPrivate() {"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        this.privacyLevel \u003d level;"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        return this.privacyLevel;"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":66,"jeffreygohkw":29}},{"path":"src/main/java/seedu/address/model/person/ShowAllPrivacyLevelPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} are favoured after taking into account privacy level."},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"public class ShowAllPrivacyLevelPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    public ShowAllPrivacyLevelPredicate() {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"        return !person.hasPrivateField();"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof ShowAllPrivacyLevelPredicate); // instanceof handles nulls"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":25}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":25,"author":{"gitId":"-"},"content":" *"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    private final ObservableList\u003cPerson\u003e internalCopy \u003d FXCollections.observableArrayList();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // used by asObservableList()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Adds a person to the list."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"     * Favourites the equivalent person in the list."},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson toFavourite) throws PersonNotFoundException {"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toFavourite);"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        int index \u003d internalList.indexOf(toFavourite);"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        internalList.get(index).setFavourite(true);"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"     * Unfavourites the equivalent person from the list."},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"    public void unfavouritePerson(ReadOnlyPerson toUnfavourite) throws PersonNotFoundException {"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toUnfavourite);"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        int index \u003d internalList.indexOf(toUnfavourite);"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"        internalList.get(index).setFavourite(false);"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            replacement.add(new Person(person));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        setPersons(replacement);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"     * Returns an array list of {@code Index} corresponding to the {@code ReadOnlyPerson} specified"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"    public ArrayList\u003cIndex\u003e extractIndexes(ArrayList\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyPerson p : persons) {"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"            assert(internalList.contains(p));"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"            int position \u003d internalList.indexOf(p);"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"            indexes.add(Index.fromZeroBased(position));"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        return indexes;"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"     * Returns an array containing:"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"     * Index - The old index of each person in the internalList before sorting"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"     * Value - The new index of each person after a sort operation"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"    public Index[] getMappings() {"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"        Index[] mappings \u003d new Index[internalCopy.size()];"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"        int count \u003d 0;"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"        for (Person p : internalCopy) {"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"            assert(internalList.contains(p));"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"            int index \u003d  internalList.indexOf(p);"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"            mappings[count] \u003d Index.fromZeroBased(index);"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"            count++;"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"        return mappings;"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"     * Sorts person list by all persons by any field in ascending or descending order"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"     * @param field"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"     * @param order"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"    public void sortBy(String field, String order) {"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        //sortyBy first chooses the right comparator"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"        System.out.println(internalList.size());"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"        internalCopy.clear();"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":"        for (Person p : internalList) {"},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"            internalCopy.add(p);"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"        System.out.println(internalCopy.size());"},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e comparator \u003d null;"},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":190,"author":{"gitId":"charlesgoh"},"content":"        /**"},{"lineNumber":191,"author":{"gitId":"charlesgoh"},"content":"         * Comparators for the various fields available for sorting"},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":"         */"},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personNameComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"                return o1.getName().value.compareTo(o2.getName().value);"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personPhoneComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {"},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":"                return o1.getPhone().value.compareTo(o2.getPhone().value);"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personEmailComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":208,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":209,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {"},{"lineNumber":210,"author":{"gitId":"charlesgoh"},"content":"                return o1.getEmail().value.compareTo(o2.getEmail().value);"},{"lineNumber":211,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":213,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":214,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personAddressComparator \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":215,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":216,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {"},{"lineNumber":217,"author":{"gitId":"charlesgoh"},"content":"                return o1.getAddress().value.compareTo(o2.getAddress().value);"},{"lineNumber":218,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":220,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":221,"author":{"gitId":"charlesgoh"},"content":"        switch (field) {"},{"lineNumber":222,"author":{"gitId":"charlesgoh"},"content":"        case \"name\":"},{"lineNumber":223,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personNameComparator;"},{"lineNumber":224,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":225,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":226,"author":{"gitId":"charlesgoh"},"content":"        case \"phone\":"},{"lineNumber":227,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personPhoneComparator;"},{"lineNumber":228,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":229,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":230,"author":{"gitId":"charlesgoh"},"content":"        case \"email\":"},{"lineNumber":231,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personEmailComparator;"},{"lineNumber":232,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":233,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":234,"author":{"gitId":"charlesgoh"},"content":"        case \"address\":"},{"lineNumber":235,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personAddressComparator;"},{"lineNumber":236,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":237,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":238,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":239,"author":{"gitId":"charlesgoh"},"content":"            throw new AssertionError(\"Invalid field parameter entered...\\n\");"},{"lineNumber":240,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":242,"author":{"gitId":"charlesgoh"},"content":"        //sortBy then chooses the right ordering"},{"lineNumber":243,"author":{"gitId":"charlesgoh"},"content":"        switch (order) {"},{"lineNumber":244,"author":{"gitId":"charlesgoh"},"content":"        case \"asc\":"},{"lineNumber":245,"author":{"gitId":"charlesgoh"},"content":"            Collections.sort(internalList, comparator);"},{"lineNumber":246,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":247,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":248,"author":{"gitId":"charlesgoh"},"content":"        case \"desc\":"},{"lineNumber":249,"author":{"gitId":"charlesgoh"},"content":"            Collections.sort(internalList, Collections.reverseOrder(comparator));"},{"lineNumber":250,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":251,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":252,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":253,"author":{"gitId":"charlesgoh"},"content":"            throw new AssertionError(\"Invalid field parameter entered...\\n\");"},{"lineNumber":254,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":257,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":267,"author":{"gitId":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":89,"Esilocke":35,"wangyiming1019":31,"-":119}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Validates given tag name."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Tag(String name) throws IllegalValueException {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        if (!isValidTagName(trimmedName)) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.tagName \u003d trimmedName;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":4,"-":58}},{"path":"src/main/java/seedu/address/model/task/Assignees.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Represents the list of {@code ReadOnlyPerson} assigned to a task."},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" * Contains support for some limited modification operations"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"public class Assignees {"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    private ArrayList\u003cIndex\u003e assignedList;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public Assignees(ArrayList\u003cIndex\u003e assignees) {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        this.assignedList \u003d assignees;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public Assignees() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        this.assignedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public Assignees(Assignees toCopy) {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        this.assignedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        assignedList.addAll(toCopy.getList());"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    /** Assigns all {@code ReadOnlyPerson} in the specified list */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public boolean assign(ArrayList\u003cIndex\u003e personsToAssign) {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        boolean atLeastOneAdded \u003d false;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        for (Index i : personsToAssign) {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            if (!assignedList.contains(i)) {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                assignedList.add(i);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"                atLeastOneAdded \u003d true;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        return atLeastOneAdded;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    /** Updates the internal assignedList with the correct Index values after a sort operation */"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    public void updateList(Index[] mappings) {"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e updatedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        for (Index i : assignedList) {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            Index updatedPosition \u003d mappings[i.getZeroBased()];"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            updatedList.add(updatedPosition);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assignedList.clear();"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assignedList.addAll(updatedList);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    /** Removes all {@code ReadOnlyPerson} from the specified list, and returns true if at least 1 person was removed */"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    public boolean dismiss(ArrayList\u003cIndex\u003e personsToDismiss) {"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        return assignedList.removeAll(personsToDismiss);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public ArrayList\u003cIndex\u003e getList() {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        return this.assignedList;"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"     * Deletes the specified index from the internal list, and decrements all other indexes in the assigned list"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"     * that have a value lower than the deleted index by 1."},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    public void decrementIndex(Index deletedIndex) {"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        assignedList.remove(deletedIndex);"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c assignedList.size(); i++) {"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            Index current \u003d assignedList.get(i);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            if (current.getZeroBased() \u003e deletedIndex.getZeroBased()) {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"                int indexValue \u003d current.getZeroBased() - 1;"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"                Index decrementedIndex \u003d Index.fromZeroBased(indexValue);"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"                assignedList.set(i, decrementedIndex);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        return assignedList.size() + \" persons assigned\";"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Assignees // instanceof handles nulls"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.assignedList.equals(((Assignees) other).assignedList)); // state check"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        return assignedList.hashCode();"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":90}},{"path":"src/main/java/seedu/address/model/task/Deadline.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import com.joestelmach.natty.DateGroup;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import com.joestelmach.natty.Parser;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * Represents the deadline of a task in the address book."},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class Deadline {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"            \"The specified date is invalid.\";"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public final Date date;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * Validates given deadline."},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given deadline string is invalid."},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public Deadline(String deadline) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        if (deadline \u003d\u003d null || deadline.equals(DEADLINE_PLACEHOLDER_VALUE)) {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d DEADLINE_PLACEHOLDER_VALUE;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            this.date \u003d null;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            return;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        this.date \u003d setDateFromArgs(deadline);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        this.value \u003d date.toString();"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"     * Returns true if the given string is a valid date."},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     * Guarantees: given string format is valid"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidDeadline(String test) {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        if (test.equals(DEADLINE_PLACEHOLDER_VALUE)) {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            setDateFromArgs(test);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"     * Returns a Date object that represents the given date string."},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    private static Date setDateFromArgs(String date) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        Parser deadlineParser \u003d new Parser();"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        List\u003cDateGroup\u003e groups \u003d deadlineParser.parse(date);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        List\u003cDate\u003e dates \u003d null;"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        for (DateGroup group : groups) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            dates \u003d group.getDates();"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        if (dates \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_DATE);"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            return dates.get(0);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        return value;"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Deadline // instanceof handles nulls"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.value.equals(((Deadline) other).value)); // state check"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        return value.hashCode();"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":86}},{"path":"src/main/java/seedu/address/model/task/Description.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Represents a task description in the address book."},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class Description {"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"            \"Task descriptions can be in any format\";"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * Validates given description."},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given description string is invalid."},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public Description(String description) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d DESCRIPTION_PLACEHOLDER_VALUE;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        if (!isValidDescription(trimmedDescription)) {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        this.value \u003d trimmedDescription;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is a valid description."},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        return test.equals(DESCRIPTION_PLACEHOLDER_VALUE) || test.matches(DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return value;"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.value.equals(((Description) other).value)); // state check"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":64}},{"path":"src/main/java/seedu/address/model/task/Priority.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" * Represents a task priority in the address book."},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"public class Priority {"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"            \"Task priorities must be an integer from 0 to 5, inclusive, where 5 represents the highest priority\";"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String[] PRIORITY_TEXT_STRINGS \u003d {\"\", \"Lowest\", \"Low\", \"Medium\", \"High\", \"Highest\"};"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final int PRIORITY_LOWER_BOUND \u003d 0;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final int PRIORITY_UPPER_BOUND \u003d 5;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[\\\\d].*\";"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public final int value;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * Validates given priority."},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given priority string is invalid."},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public Priority(String priority) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        if (priority \u003d\u003d null || priority.equals(PRIORITY_PLACEHOLDER_VALUE)) {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d 0;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d Integer.parseInt(trimmedPriority);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        if (!isValidPriority(trimmedPriority)) {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is a valid task priority."},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        if (test.equals(PRIORITY_PLACEHOLDER_VALUE)) {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        } else if (!test.matches(PRIORITY_VALIDATION_REGEX)) {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            int intTest \u003d Integer.parseInt(test);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"            return isWithinBounds(intTest);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"     * Returns true if the value is within the upper and lower bounds of priority"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public static boolean isWithinBounds(int test) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        return test \u003c\u003d PRIORITY_UPPER_BOUND \u0026\u0026 test \u003e\u003d PRIORITY_LOWER_BOUND;"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        return PRIORITY_TEXT_STRINGS[value];"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Priority) other).value); // state check"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":75}},{"path":"src/main/java/seedu/address/model/task/ReadOnlyTask.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Provides an immutable interface for a Task in the address book."},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public interface ReadOnlyTask {"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    TaskName getTaskName();"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    Description getDescription();"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    Deadline getDeadline();"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    Priority getPriority();"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    Assignees getAssignees();"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    boolean getCompleteState();"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    String getPrintableState();"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    TaskAddress getTaskAddress();"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cTaskName\u003e taskNameProperty();"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cDescription\u003e descriptionProperty();"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cDeadline\u003e deadlineProperty();"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cPriority\u003e priorityProperty();"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cAssignees\u003e assigneeProperty();"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cTaskAddress\u003e taskAddressProperty();"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cString\u003e stateProperty();"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cString\u003e changeStateProperty();"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    void changeState();"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    default String getAsText() {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        builder.append(getTaskName())"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"                .append(\" Description: \")"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"                .append(getDescription())"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"                .append(\" Deadline: \")"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"                .append(getDeadline())"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"                .append(\" Priority: \")"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"                .append(getPriority())"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"                .append(\" Address: \")"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                .append(getTaskAddress())"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"                .append(\" \")"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"                .append(getPrintableState());"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        return builder.toString();"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    default boolean isSameStateAs(ReadOnlyTask other) {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getTaskName().equals(this.getTaskName()) // state checks here onwards"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getDescription().equals(this.getDescription())"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getDeadline().equals(this.getDeadline())"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getPriority().equals(this.getPriority()))"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getAssignees().equals(this.getAssignees())"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getCompleteState() \u003d\u003d this.getCompleteState()"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getTaskAddress().equals(this.getTaskAddress());"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":59}},{"path":"src/main/java/seedu/address/model/task/Task.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Represents a task object in the address book."},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class Task implements ReadOnlyTask {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_INCOMPLETE \u003d \"\u003cIncomplete\u003e\";"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_COMPLETE \u003d \"\u003cComplete\u003e\";"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cTaskName\u003e taskName;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cDescription\u003e description;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cDeadline\u003e deadline;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cPriority\u003e priority;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cAssignees\u003e assignees;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cBoolean\u003e state;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cTaskAddress\u003e taskAddress;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public Task(TaskName taskName, Description description, Deadline deadline, Priority priority,"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                Assignees assignees, boolean isComplete, TaskAddress taskAddress) {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        this.taskName \u003d new SimpleObjectProperty\u003c\u003e(taskName);"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        this.description \u003d new SimpleObjectProperty\u003c\u003e(description);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        this.deadline \u003d new SimpleObjectProperty\u003c\u003e(deadline);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        this.priority \u003d new SimpleObjectProperty\u003c\u003e(priority);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        this.assignees \u003d new SimpleObjectProperty\u003c\u003e(assignees);"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        this.state \u003d new SimpleObjectProperty\u003c\u003e(isComplete);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        this.taskAddress \u003d new SimpleObjectProperty\u003c\u003e(taskAddress);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"     * Creates a new Task object from the given arguments"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"     * New tasks will not have anyone assigned to them by default, and will be marked as incomplete"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"     * by default."},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public Task(TaskName taskName, Description description, Deadline deadline, Priority priority,"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"                TaskAddress taskAddress) {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        this.taskName \u003d new SimpleObjectProperty\u003c\u003e(taskName);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        this.description \u003d new SimpleObjectProperty\u003c\u003e(description);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        this.deadline \u003d new SimpleObjectProperty\u003c\u003e(deadline);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        this.priority \u003d new SimpleObjectProperty\u003c\u003e(priority);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        this.assignees \u003d new SimpleObjectProperty\u003c\u003e(new Assignees());"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        this.state \u003d new SimpleObjectProperty\u003c\u003e(false);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        this.taskAddress \u003d new SimpleObjectProperty\u003c\u003e(taskAddress);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public Task(ReadOnlyTask task) {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        this(task.getTaskName(), task.getDescription(), task.getDeadline(), task.getPriority(),"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"                task.getAssignees(), task.getCompleteState(), task.getTaskAddress());"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    public TaskName getTaskName() {"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        return taskName.get();"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    public Description getDescription() {"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        return description.get();"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    public Deadline getDeadline() {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        return deadline.get();"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    public Priority getPriority() {"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        return priority.get();"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public Assignees getAssignees() {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        return assignees.get();"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    public boolean getCompleteState() {"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        return state.get();"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    public TaskAddress getTaskAddress() {"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        return taskAddress.get();"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        return getAsText();"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    // JavaFX property functions"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cTaskName\u003e taskNameProperty() {"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        return taskName;"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cDescription\u003e descriptionProperty() {"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        return description;"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cDeadline\u003e deadlineProperty() {"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        return deadline;"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cPriority\u003e priorityProperty() {"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        return priority;"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cAssignees\u003e assigneeProperty() {"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        return assignees;"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"    public void clearAssignees() {"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        this.assignees \u003d new SimpleObjectProperty\u003c\u003e(new Assignees());"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cTaskAddress\u003e taskAddressProperty() {"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        return taskAddress;"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cString\u003e stateProperty() {"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"        String printableState \u003d getPrintableState();"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        return new SimpleObjectProperty\u003c\u003e(printableState);"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cString\u003e changeStateProperty() {"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        boolean state \u003d getCompleteState();"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        if (state) {"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"            return new SimpleObjectProperty\u003c\u003e(\"Set as incomplete\");"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"            return new SimpleObjectProperty\u003c\u003e(\"Set as complete\");"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"    // Setters for TaskBuilder testing"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"    public void setTaskName(TaskName taskName) {"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        this.taskName.set(taskName);"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"    public void setDeadline(Deadline deadline) {"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        this.deadline.set(deadline);"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"    public void setDescription(Description description) {"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"        this.description.set(description);"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"    public void setPriority(Priority priority) {"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"        this.priority.set(priority);"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"    public void setAssignees(Assignees assignees) {"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"        this.assignees.set(assignees);"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"    public void setState(boolean state) {"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"        this.state.set(state);"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"    public void changeState() {"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"        this.setState(!this.getCompleteState());"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"    public void setTaskAddress(TaskAddress taskAddress) {"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        this.taskAddress.set(taskAddress);"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"    public String getPrintableState() {"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"        String printableState;"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"        if (state.get()) {"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"            printableState \u003d TASK_COMPLETE;"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"        } else {"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"            printableState \u003d TASK_INCOMPLETE;"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"        return printableState;"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"            || (other instanceof ReadOnlyTask // instanceof handles nulls"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"            \u0026\u0026 this.isSameStateAs((ReadOnlyTask) other));"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"        return Objects.hash(taskName, description, deadline, priority, assignees, state);"},{"lineNumber":199,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":200}},{"path":"src/main/java/seedu/address/model/task/TaskAddress.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * Represents a Task\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskAddress(String)}"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"public class TaskAddress {"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_TASK_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"            \"Task addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    /*"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String ADDRESS_PLACEHOLDER_VALUE \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public final String taskAddress;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"     * Validates given address."},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public TaskAddress(String address) throws IllegalValueException {"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"            this.taskAddress \u003d ADDRESS_PLACEHOLDER_VALUE;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"            return;"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        if (!isValidTaskAddress(address)) {"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalValueException(MESSAGE_TASK_ADDRESS_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        this.taskAddress \u003d address;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns true if a given string is a valid task address."},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    public static boolean isValidTaskAddress(String test) {"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(ADDRESS_PLACEHOLDER_VALUE);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        return taskAddress;"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof TaskAddress // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.taskAddress.equals(((TaskAddress) other).taskAddress)); // state check"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        return taskAddress.hashCode();"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"}"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":""}],"authorContributionMap":{"jeffreygohkw":61}},{"path":"src/main/java/seedu/address/model/task/TaskContainsKeywordPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Tests that a {@code ReadOnlyTask}\u0027s {@code TaskName} or {@code Description} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class TaskContainsKeywordPredicate  implements Predicate\u003cReadOnlyTask\u003e {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    private boolean needFilterByState;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    private boolean needFilterByPriority;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    private boolean isComplete;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private int basePriority;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public TaskContainsKeywordPredicate(List\u003cString\u003e keywords, boolean isStateCheckRequired,"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"                                        boolean isPriorityCheckRequired, boolean isComplete, int basePriority) {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        this.needFilterByPriority \u003d isPriorityCheckRequired;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        this.needFilterByState \u003d isStateCheckRequired;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        this.isComplete \u003d isComplete;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        this.basePriority \u003d basePriority;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public TaskContainsKeywordPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        this.needFilterByPriority \u003d false;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        this.needFilterByState \u003d false;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        this.isComplete \u003d false;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        this.basePriority \u003d 0;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public boolean test(ReadOnlyTask task) {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        for (String keyword : keywords) {"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            if (needFilterByState \u0026\u0026 task.getCompleteState() !\u003d isComplete) {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                return false;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            } else if (needFilterByPriority \u0026\u0026 task.getPriority().value \u003c basePriority) {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"                return false;"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            } else if (StringUtil.containsWordIgnoreCase(task.getTaskName().taskName, keyword)"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"                    || StringUtil.containsWordIgnoreCase(task.getDescription().value, keyword)) {"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"                return true;"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof TaskContainsKeywordPredicate // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.keywords.equals(((TaskContainsKeywordPredicate) other).keywords)"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.needFilterByPriority \u003d\u003d ((TaskContainsKeywordPredicate) other).needFilterByPriority"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.needFilterByState \u003d\u003d ((TaskContainsKeywordPredicate) other).needFilterByState"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.isComplete \u003d\u003d ((TaskContainsKeywordPredicate) other).isComplete"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.basePriority \u003d\u003d ((TaskContainsKeywordPredicate) other).basePriority); // state check"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":60}},{"path":"src/main/java/seedu/address/model/task/TaskName.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" * Represents a Task name in the address book."},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"public class TaskName {"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"            \"Task names can be in any format, and should not be blank\";"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public final String taskName;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     * Validates given name."},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public TaskName(String name) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        this.taskName \u003d trimmedName;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is a valid task name."},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        return taskName;"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof TaskName // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.taskName.equals(((TaskName) other).taskName)); // state check"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        return taskName.hashCode();"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":62}},{"path":"src/main/java/seedu/address/model/task/UniqueTaskList.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":" *"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" * Supports a minimal set of list operations."},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":" *"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":" * @see Task#equals(Object)"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    // used by asObservableList()"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    private final ObservableList\u003cReadOnlyTask\u003e mappedList \u003d EasyBind.map(internalList, (task) -\u003e task);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    public boolean contains(ReadOnlyTask toCheck) {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toCheck);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"     * Adds a task to the list."},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if the task to add is a duplicate of an existing task in the list."},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public void add(ReadOnlyTask toAdd) throws DuplicateTaskException {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toAdd);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        if (contains(toAdd)) {"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        internalList.add(new Task(toAdd));"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list."},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    public void setTask(ReadOnlyTask target, ReadOnlyTask editedTask)"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editedTask);"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        if (!target.equals(editedTask) \u0026\u0026 internalList.contains(editedTask)) {"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        internalList.set(index, new Task(editedTask));"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if no such task could be found in the list."},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    public boolean remove(ReadOnlyTask toRemove) throws TaskNotFoundException {"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toRemove);"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        return true;"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    public void setTasks(List\u003c? extends ReadOnlyTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        final UniqueTaskList replacement \u003d new UniqueTaskList();"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        for (final ReadOnlyTask task : tasks) {"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"            replacement.add(new Task(task));"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        setTasks(replacement);"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"     * Removes all assignees from all tasks."},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    public void clearAssignees() {"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        for (Task t : internalList) {"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"            t.clearAssignees();"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    /** Removes the specified assignee from all tasks **/"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    public void removeAssignee(Index personIndex) {"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        ObservableList\u003cTask\u003e internalListCopy \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        for (Task t : internalList) {"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"            TaskName name \u003d t.getTaskName();"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"            Description description \u003d t.getDescription();"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"            Deadline deadline \u003d t.getDeadline();"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"            Priority priority \u003d t.getPriority();"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"            TaskAddress taskAddress \u003d t.getTaskAddress();"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"            boolean state \u003d t.getCompleteState();"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"            Assignees assignees \u003d t.getAssignees();"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"            Assignees updated \u003d new Assignees(assignees);"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"            updated.decrementIndex(personIndex);"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"            internalListCopy.add(new Task(name, description, deadline, priority, updated, state, taskAddress));"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        internalList.clear();"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"        internalList.addAll(internalListCopy);"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"     * Updates the assignee list within each task to match that of the newPersonIndexes."},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"     * This method is called after a sort persons operation due to the order change"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"    public void updateAssignees(Index[] newPersonIndexes) {"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        ObservableList\u003cTask\u003e internalListCopy \u003d FXCollections.observableArrayList();"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        for (Task t : internalList) {"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"            TaskName name \u003d t.getTaskName();"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"            Description description \u003d t.getDescription();"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"            Deadline deadline \u003d t.getDeadline();"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"            Priority priority \u003d t.getPriority();"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"            TaskAddress taskAddress \u003d t.getTaskAddress();"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"            boolean state \u003d t.getCompleteState();"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"            Assignees assignees \u003d t.getAssignees();"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"            Assignees updated \u003d new Assignees(assignees);"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"            updated.updateList(newPersonIndexes);"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"            internalListCopy.add(new Task(name, description, deadline, priority, updated, state, taskAddress));"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        internalList.clear();"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        internalList.addAll(internalListCopy);"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e asObservableList() {"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"     * Sorts person list by all persons by any field in ascending or descending order"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"    public void sortBy(String field, String order) {"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"        //sortyBy first chooses the right comparator"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cTask\u003e comparator \u003d null;"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":"        /*"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":"         * Comparators for the various fields available for sorting"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"         */"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cTask\u003e priorityComparator \u003d Comparator.comparingInt(o -\u003e o.getPriority().value);"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cTask\u003e deadlineComparator \u003d (o1, o2) -\u003e {"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"            if (o1.getDeadline().date \u003d\u003d null || o2.getDeadline().date \u003d\u003d null) {"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"                return 0;"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"            } else {"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"                return o1.getDeadline().date.compareTo(o2.getDeadline().date);"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"        switch (field) {"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":"        case \"priority\":"},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d priorityComparator;"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":"        case \"deadline\":"},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d deadlineComparator;"},{"lineNumber":190,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":191,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"            try {"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":"                System.out.println(\"An error occured\");"},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"                throw new Exception(\"Invalid field parameter entered...\\n\");"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"            } catch (Exception e) {"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"                e.printStackTrace();"},{"lineNumber":198,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"        //sortBy then chooses the right ordering"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"        switch (order) {"},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":"        case \"asc\":"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"            Collections.sort(internalList, comparator);"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":"        case \"desc\":"},{"lineNumber":208,"author":{"gitId":"charlesgoh"},"content":"            Collections.sort(internalList, Collections.reverseOrder(comparator));"},{"lineNumber":209,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":210,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":211,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":212,"author":{"gitId":"charlesgoh"},"content":"            try {"},{"lineNumber":213,"author":{"gitId":"charlesgoh"},"content":"                System.out.println(\"An error occured\");"},{"lineNumber":214,"author":{"gitId":"charlesgoh"},"content":"                throw new Exception(\"Invalid field parameter entered...\\n\");"},{"lineNumber":215,"author":{"gitId":"charlesgoh"},"content":"            } catch (Exception e) {"},{"lineNumber":216,"author":{"gitId":"charlesgoh"},"content":"                e.printStackTrace();"},{"lineNumber":217,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":220,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":222,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"        return internalList.iterator();"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"        return internalList.hashCode();"},{"lineNumber":238,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"charlesgoh":60,"Esilocke":179}},{"path":"src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    public DuplicateTaskException() {"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":13}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":" * Signals that the operation could not find the specified task."},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"public class TaskNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":8}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            return new Person[] {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), false,"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Cheerful lad\"), new Avatar(\"\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), false,"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Very friendly\"), new Avatar(\"\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), false,"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"She sells sea shells on the sea shore\"), new Avatar(\"\"),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), false,"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Laughs too much\"), new Avatar(\"\"),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), false,"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Goes to the same coffee shop every morning\"), new Avatar(\"\"),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), false,"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Disappearing act?\"), new Avatar(\"\"),"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            };"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return sampleAb;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        for (String s : strings) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return tags;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":8,"wangyiming1019":6,"-":66}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    void changeFilePath(String fp, UserPrefs u);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":1,"jeffreygohkw":2,"-":43}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.BackupRequestEvent;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"     * Backs up data to a remote location. Subscribes to BackupRequestEvent"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    void handleBackupAddressBook(BackupRequestEvent event) throws IOException;"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":8,"-":38}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.BackupRequestEvent;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"    public void handleBackupAddressBook(BackupRequestEvent event) throws IOException {"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        logger.fine(\"Attempting to write to backup data file in custom location\");"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyAddressBook addressBook \u003d event.getModel().getAddressBook();"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"        String args \u003d event.getArgs();"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"        this.saveAddressBook(addressBook, args);"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    public void changeFilePath(String fp, UserPrefs u) {"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(fp);"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        u.setAddressBookFilePath(fp);"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        addressBookStorage.changeFilePath(fp, u);"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":11,"jeffreygohkw":8,"-":91}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedIndex.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * JAXB-friendly adapted version of the Index."},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class XmlAdaptedIndex {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    private int index;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * Constructs an XmlAdaptedIndex."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public XmlAdaptedIndex() {}"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * Converts a given Index into this class for JAXB use."},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public XmlAdaptedIndex(Index source) {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        index \u003d source.getZeroBased();"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"     * Converts this jaxb-friendly adapted tag object into an Index object."},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if there were any data constraints\\"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public Index toModelType() throws IllegalValueException {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        return Index.fromZeroBased(index);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":40}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean nameIsPrivate;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean phoneIsPrivate;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean emailIsPrivate;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean addressIsPrivate;"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"    private String favourite;"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    private String remark;"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    private Boolean remarkIsPrivate;"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"    private String avatar;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        name \u003d source.getName().value;"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        favourite \u003d source.getFavourite().toString();"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        avatar \u003d source.getAvatar().value;"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        nameIsPrivate \u003d source.getName().getIsPrivate();"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        phoneIsPrivate \u003d source.getPhone().getIsPrivate();"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        emailIsPrivate \u003d source.getEmail().getIsPrivate();"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        addressIsPrivate \u003d source.getAddress().getIsPrivate();"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        remarkIsPrivate \u003d source.getRemark().getIsPrivate();"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        if (nameIsPrivate \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"            nameIsPrivate \u003d false;"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        if (phoneIsPrivate \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"            phoneIsPrivate \u003d false;"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        if (emailIsPrivate \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"            emailIsPrivate \u003d false;"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        if (addressIsPrivate \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"            addressIsPrivate \u003d false;"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        if (remarkIsPrivate \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"            remarkIsPrivate \u003d false;"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        final Name name \u003d new Name(this.name, this.nameIsPrivate);"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        final Phone phone \u003d new Phone(this.phone, this.phoneIsPrivate);"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        final Email email \u003d new Email(this.email, this.emailIsPrivate);"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        final Address address \u003d new Address(this.address, this.addressIsPrivate);"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        final Boolean favourite \u003d new Boolean(this.favourite);"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        final Remark remark \u003d new Remark(this.remark, this.remarkIsPrivate);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        final Avatar avatar \u003d new Avatar(this.avatar);"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        return new Person(name, phone, email, address, favourite, remark, avatar, tags);"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":7,"jeffreygohkw":71,"wangyiming1019":3,"-":40}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Assignees;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"/** JAXB-friendly version of a Task */"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"public class XmlAdaptedTask {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private String description;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private String deadline;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private String priority;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private String state;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    private List\u003cXmlAdaptedIndex\u003e assignees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    public XmlAdaptedTask(ReadOnlyTask source) {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        name \u003d source.getTaskName().taskName;"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        description \u003d source.getDescription().value;"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        deadline \u003d source.getDeadline().value;"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        priority \u003d Integer.toString(source.getPriority().value);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        state \u003d String.valueOf(source.getCompleteState());"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        address \u003d source.getTaskAddress().taskAddress;"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        assignees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        for (Index i : source.getAssignees().getList()) {"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            assignees.add(new XmlAdaptedIndex(i));"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Task object."},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        final TaskName name \u003d new TaskName(this.name);"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        final Deadline deadline \u003d new Deadline(this.deadline);"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        final Priority priority \u003d new Priority(this.priority);"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        final Boolean state \u003d Boolean.valueOf(this.state);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        final TaskAddress address \u003d new TaskAddress(this.address);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        final ArrayList\u003cIndex\u003e assigneeIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        for (XmlAdaptedIndex index : assignees) {"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"            assigneeIndexes.add(index.toModelType());"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        final Assignees assignees \u003d new Assignees(assigneeIndexes);"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        return new Task(name, description, deadline, priority, assignees, state, address);"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":81}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"     * Backs up data to a custom save file name"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"     * @param addressBook"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"     * @param filePath"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"     * @throws IOException"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        logger.fine(\"Attempting to write to backup data file in custom location\");"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        logger.info(filePath);"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        this.saveAddressBook(addressBook, filePath);"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"     * Changes the file path of the save file"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"     * @param filepath the new file path of the save file. Cannot be null"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    public void changeFilePath(String filepath, UserPrefs u) {"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(filepath);"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        filePath \u003d filepath;"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":12,"jeffreygohkw":9,"-":77}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Conversion"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        tasks.addAll(src.getTasksList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                return p.toModelType();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                e.printStackTrace();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                //TODO: better error handling"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(persons);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                return t.toModelType();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                e.printStackTrace();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                //TODO: better error handling"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(tags);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getTasksList() {"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        final ObservableList\u003cReadOnlyTask\u003e tasks \u003d this.tasks.stream().map(t -\u003e {"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            try {"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"                return t.toModelType();"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"                e.printStackTrace();"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"                return null;"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        return FXCollections.unmodifiableObservableList(tasks);"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":19,"-":73}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String PRIVATE_NAME_CANNOT_SEARCH \u003d \"Cannot perform a search on that person. \""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Their name is private.\";"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String GOOGLE_MAPS_URL_PREFIX \u003d \"https://www.google.com.sg/maps/search/\";"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String GOOGLE_MAPS_URL_SUFFIX  \u003d \"/\";"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String PRIVATE_ADDRESS_CANNOT_SEARCH \u003d \"Cannot perform a search on that person\u0027s address. \""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Their address is private.\";"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String GOOGLE_MAPS_DIRECTIONS_PREFIX \u003d \"https://www.google.com.sg/maps/dir/?api\u003d1\";"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String GOOGLE_MAPS_DIRECTIONS_SUFFIX  \u003d \"/\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private WebView browser;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":50,"author":{"gitId":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        loadDefaultPage();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"     * Loads a google search for a person\u0027s name if their name is not private"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"     * Prints out a message on the result display otherwise"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"     * @param person The person we want to search for"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        if (person.getName().getIsPrivate()) {"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"            raise(new NewResultAvailableEvent(PRIVATE_NAME_CANNOT_SEARCH));"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"            loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().value.replaceAll(\" \", \"+\")"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"     * Loads a google search for a person\u0027s address if their address is not private"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"     * Prints out a message on the result display otherwise"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"     * @param person The person\u0027s address we want to search for"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    private void loadMapsPage(ReadOnlyPerson person) {"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        if (person.getAddress().getIsPrivate()) {"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"            raise(new NewResultAvailableEvent(PRIVATE_ADDRESS_CANNOT_SEARCH));"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"            loadPage(GOOGLE_MAPS_URL_PREFIX + person.getAddress().toString().replaceAll(\" \", \"+\")"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"                + GOOGLE_MAPS_URL_SUFFIX);"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"     * Loads Google Maps with directions on how to go from one location to another"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"     * @param fromLocation The location we want to start from"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"     * @param toLocation The location we want to reach"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    private void loadDirectionsPage(String fromLocation, String toLocation) {"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        loadPage(GOOGLE_MAPS_DIRECTIONS_PREFIX + \"\u0026origin\u003d\""},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"                + fromLocation.replaceAll(\"#(\\\\w+)\\\\s*\", \"\").replaceAll(\" \", \"+\")"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"                .replaceAll(\"-(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"                + \"\u0026destination\u003d\""},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"                + toLocation.replaceAll(\"#(\\\\w+)\\\\s*\", \"\").replaceAll(\" \", \"+\")"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"                .replaceAll(\"-(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"                + GOOGLE_MAPS_DIRECTIONS_SUFFIX);"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void freeResources() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        browser \u003d null;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleBrowserPanelLocateEvent(BrowserPanelLocateEvent event) {"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        loadMapsPage(event.getNewSelection());"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleBrowserPanelNavigateEvent(BrowserPanelNavigateEvent event) {"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        loadDirectionsPage(event.getFromLocation().toString(), event.getToLocation().toString());"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":68,"Esilocke":1,"-":65}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import javafx.stage.FileChooser;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.MainApp;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.ChangeFontSizeEvent;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.OpenRequestEvent;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.SaveAsRequestEvent;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.storage.XmlFileStorage;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":45,"author":{"gitId":"-"},"content":" */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"    private static final String ICON \u003d \"/images/address_book_32_alternative.png\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    private final FileChooser fileChooser \u003d new FileChooser();"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    private MainApp mainApp;"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    private Storage storage;"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private Config config;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    private ViewTaskPanel viewTaskPanel;"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    private ViewPersonPanel viewPersonPanel;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    private MenuItem openMenuItem;"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    private MenuItem saveMenuItem;"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    private MenuItem exitMenuItem;"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    private MenuItem increaseSizeMenuItem;"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    private MenuItem decreaseSizeMenuItem;"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    private MenuItem resetSizeMenuItem;"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        this.config \u003d config;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        setIcon(ICON);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        setWindowMinSize();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        setWindowDefaultTheme(prefs);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    private void setAccelerators() {"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(openMenuItem, KeyCombination.valueOf(\"SHORTCUT+O\"));"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(saveMenuItem, KeyCombination.valueOf(\"SHORTCUT+S\"));"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(exitMenuItem, KeyCombination.valueOf(\"ALT+F4\"));"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(increaseSizeMenuItem, KeyCombination.valueOf(\"SHORTCUT+W\"));"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(decreaseSizeMenuItem, KeyCombination.valueOf(\"SHORTCUT+E\"));"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(resetSizeMenuItem, KeyCombination.valueOf(\"SHORTCUT+R\"));"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":158,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":159,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":160,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":162,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":163,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":164,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":165,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":166,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":167,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":168,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":169,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":170,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"     * Is called by the main application to give a reference back to itself."},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"     * @param mainApp the MainApp itself"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"    public void setMainApp(MainApp mainApp) {"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"        this.mainApp \u003d mainApp;"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"     * Is called by the main application to provide MainWindow with Storage"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"     * @param s the Storage used by MainApp"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"    public void setStorage(Storage s) {"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"        this.storage \u003d s;"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"     * Is called by the main application to  provide MainWindow with Model"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"     * @param m the Model used by MainApp"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"    public void setModel(Model m) {"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"        this.model \u003d m;"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"        viewTaskPanel \u003d new ViewTaskPanel();"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"        viewPersonPanel \u003d new ViewPersonPanel();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"charlesgoh"},"content":"        String preferredFilePath \u003d this.prefs.getAddressBookFilePath();"},{"lineNumber":225,"author":{"gitId":"charlesgoh"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(preferredFilePath, logic.getFilteredPersonList().size());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    void hide() {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":250,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the default theme based on user preferences."},{"lineNumber":262,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"jeffreygohkw"},"content":"    private void setWindowDefaultTheme(UserPrefs prefs) {"},{"lineNumber":264,"author":{"gitId":"jeffreygohkw"},"content":"        getRoot().getStylesheets().add(prefs.getTheme());"},{"lineNumber":265,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":"    public String getTheme() {"},{"lineNumber":273,"author":{"gitId":"jeffreygohkw"},"content":"        return getRoot().getStylesheets().get(1);"},{"lineNumber":274,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitId":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":278,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":285,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":286,"author":{"gitId":"charlesgoh"},"content":"     * Handle increase font size command for menu item"},{"lineNumber":287,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":288,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":289,"author":{"gitId":"charlesgoh"},"content":"    public void handleIncreaseFontSize() {"},{"lineNumber":290,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"Handling increase in font size\");"},{"lineNumber":291,"author":{"gitId":"charlesgoh"},"content":"        raise(new ChangeFontSizeEvent(ChangeFontSizeEvent.getIncreaseSizeEventIndex()));"},{"lineNumber":292,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":294,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":295,"author":{"gitId":"charlesgoh"},"content":"     * Handle decrease font size command for menu item"},{"lineNumber":296,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":297,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":298,"author":{"gitId":"charlesgoh"},"content":"    public void handleDecreaseFontSize() {"},{"lineNumber":299,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"Handling decrease in font size\");"},{"lineNumber":300,"author":{"gitId":"charlesgoh"},"content":"        raise(new ChangeFontSizeEvent(ChangeFontSizeEvent.getDecreaseSizeEventIndex()));"},{"lineNumber":301,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":303,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":304,"author":{"gitId":"charlesgoh"},"content":"     * Handle reset font size command"},{"lineNumber":305,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":306,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":307,"author":{"gitId":"charlesgoh"},"content":"    public void handleResetFontSize() {"},{"lineNumber":308,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"Handling reset in font size\");"},{"lineNumber":309,"author":{"gitId":"charlesgoh"},"content":"        raise(new ChangeFontSizeEvent(ChangeFontSizeEvent.getResetSizeEventIndex()));"},{"lineNumber":310,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":312,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":314,"author":{"gitId":"-"},"content":"     * Opens the help window."},{"lineNumber":315,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        helpWindow.show();"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":327,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":328,"author":{"gitId":"jeffreygohkw"},"content":"     * Opens the data from a desired location"},{"lineNumber":329,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":330,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML"},{"lineNumber":331,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleOpen() throws IOException, DataConversionException {"},{"lineNumber":332,"author":{"gitId":"jeffreygohkw"},"content":"        // Set extension filter"},{"lineNumber":333,"author":{"gitId":"jeffreygohkw"},"content":"        FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter("},{"lineNumber":334,"author":{"gitId":"jeffreygohkw"},"content":"                \"XML files (*.xml)\", \"*.xml\");"},{"lineNumber":335,"author":{"gitId":"jeffreygohkw"},"content":"        fileChooser.getExtensionFilters().add(extFilter);"},{"lineNumber":336,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":337,"author":{"gitId":"jeffreygohkw"},"content":"        // Show open file dialog"},{"lineNumber":338,"author":{"gitId":"jeffreygohkw"},"content":"        File file \u003d fileChooser.showOpenDialog(primaryStage);"},{"lineNumber":339,"author":{"gitId":"jeffreygohkw"},"content":"        if (file !\u003d null) {"},{"lineNumber":340,"author":{"gitId":"jeffreygohkw"},"content":"            // Change file path to the opened file"},{"lineNumber":341,"author":{"gitId":"jeffreygohkw"},"content":"            storage.changeFilePath(file.getPath(), prefs);"},{"lineNumber":342,"author":{"gitId":"jeffreygohkw"},"content":"            // Reset data in the model to the data from the opened file"},{"lineNumber":343,"author":{"gitId":"jeffreygohkw"},"content":"            model.resetData(XmlFileStorage.loadDataFromSaveFile(file));"},{"lineNumber":344,"author":{"gitId":"jeffreygohkw"},"content":"            // Update the UI"},{"lineNumber":345,"author":{"gitId":"jeffreygohkw"},"content":"            fillInnerParts();"},{"lineNumber":346,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":349,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":350,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleOpenRequestEvent(OpenRequestEvent event) throws IOException, DataConversionException {"},{"lineNumber":351,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":352,"author":{"gitId":"jeffreygohkw"},"content":"        handleOpen();"},{"lineNumber":353,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":355,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":356,"author":{"gitId":"jeffreygohkw"},"content":"     * Saves the data at a desired location"},{"lineNumber":357,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":358,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML"},{"lineNumber":359,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleSaveAs() throws IOException {"},{"lineNumber":360,"author":{"gitId":"jeffreygohkw"},"content":"        // Set extension filter"},{"lineNumber":361,"author":{"gitId":"jeffreygohkw"},"content":"        FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter("},{"lineNumber":362,"author":{"gitId":"jeffreygohkw"},"content":"                \"XML files (*.xml)\", \"*.xml\");"},{"lineNumber":363,"author":{"gitId":"jeffreygohkw"},"content":"        fileChooser.getExtensionFilters().add(extFilter);"},{"lineNumber":364,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":365,"author":{"gitId":"jeffreygohkw"},"content":"        // Show save file dialog"},{"lineNumber":366,"author":{"gitId":"jeffreygohkw"},"content":"        File file \u003d fileChooser.showSaveDialog(primaryStage);"},{"lineNumber":367,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":368,"author":{"gitId":"jeffreygohkw"},"content":"        if (file !\u003d null) {"},{"lineNumber":369,"author":{"gitId":"jeffreygohkw"},"content":"            // Make sure it has the correct extension"},{"lineNumber":370,"author":{"gitId":"jeffreygohkw"},"content":"            if (!file.getPath().endsWith(\".xml\")) {"},{"lineNumber":371,"author":{"gitId":"jeffreygohkw"},"content":"                file \u003d new File(file.getPath() + \".xml\");"},{"lineNumber":372,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":373,"author":{"gitId":"jeffreygohkw"},"content":"            // Change file path to the new save file"},{"lineNumber":374,"author":{"gitId":"jeffreygohkw"},"content":"            storage.changeFilePath(file.getPath(), prefs);"},{"lineNumber":375,"author":{"gitId":"jeffreygohkw"},"content":"            // Save the address book data and the user preferences"},{"lineNumber":376,"author":{"gitId":"jeffreygohkw"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":377,"author":{"gitId":"jeffreygohkw"},"content":"            storage.saveUserPrefs(prefs);"},{"lineNumber":378,"author":{"gitId":"jeffreygohkw"},"content":"            // Update the UI"},{"lineNumber":379,"author":{"gitId":"jeffreygohkw"},"content":"            fillInnerParts();"},{"lineNumber":380,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":381,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":383,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":384,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleSaveAsRequestEvent(SaveAsRequestEvent event) throws IOException, DataConversionException {"},{"lineNumber":385,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":386,"author":{"gitId":"jeffreygohkw"},"content":"        handleSaveAs();"},{"lineNumber":387,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":388,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":389,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":390,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":391,"author":{"gitId":"jeffreygohkw"},"content":"     * Changes the existing theme to the input theme"},{"lineNumber":392,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":393,"author":{"gitId":"jeffreygohkw"},"content":"    public void handleChangeTheme(String theme) {"},{"lineNumber":394,"author":{"gitId":"jeffreygohkw"},"content":"        if (getRoot().getStylesheets().size() \u003e 1) {"},{"lineNumber":395,"author":{"gitId":"jeffreygohkw"},"content":"            getRoot().getStylesheets().remove(1);"},{"lineNumber":396,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":397,"author":{"gitId":"jeffreygohkw"},"content":"        getRoot().getStylesheets().add(theme);"},{"lineNumber":398,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":399,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        return this.personListPanel;"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"Esilocke"},"content":"    public TaskListPanel getTaskListPanel() {"},{"lineNumber":411,"author":{"gitId":"Esilocke"},"content":"        return this.taskListPanel;"},{"lineNumber":412,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"    void releaseResources() {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        handleHelp();"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":423,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":424,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":425,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":426,"author":{"gitId":"Esilocke"},"content":"    private void handleTaskPanelSelectionChangedEvent(TaskPanelSelectionChangedEvent event) {"},{"lineNumber":427,"author":{"gitId":"Esilocke"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":428,"author":{"gitId":"Esilocke"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":429,"author":{"gitId":"Esilocke"},"content":"        browserPlaceholder.getChildren().add(viewTaskPanel.getRoot());"},{"lineNumber":430,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":431,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":432,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":433,"author":{"gitId":"Esilocke"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":434,"author":{"gitId":"Esilocke"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":435,"author":{"gitId":"Esilocke"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":436,"author":{"gitId":"Esilocke"},"content":"        browserPlaceholder.getChildren().add(viewPersonPanel.getRoot());"},{"lineNumber":437,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":438,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":439,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":440,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":441,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":442,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleBrowserPanelLocateEvent(BrowserPanelLocateEvent event) {"},{"lineNumber":443,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":444,"author":{"gitId":"jeffreygohkw"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":445,"author":{"gitId":"jeffreygohkw"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":446,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":447,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":448,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":449,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleBrowserPanelNavigateEvent(BrowserPanelNavigateEvent event) {"},{"lineNumber":450,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":451,"author":{"gitId":"jeffreygohkw"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":452,"author":{"gitId":"jeffreygohkw"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":453,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":455,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":456,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":457,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":458,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":459,"author":{"gitId":"jeffreygohkw"},"content":"        handleChangeTheme(event.getStyleSheet());"},{"lineNumber":460,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":461,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":42,"jeffreygohkw":172,"Esilocke":35,"-":212}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public static final int DEFAULT_NAME_SIZE \u003d 15;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final int DEFAULT_ATTRIBUTE_SIZE \u003d 10;"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public static final int FONT_SIZE_EXTENDER \u003d 5;"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public static final int DEFAULT_FONT_SIZE_MULTIPLIER \u003d 0;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"     * Preset values for random selection later."},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    private enum Colours {"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        blue, green, brown, purple, navy, crimson, firebrick, maroon, red, black"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    private static HashMap\u003cString, String\u003e colourHash \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    private static Random randomNumber \u003d new Random();"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    private static int nameSize \u003d DEFAULT_NAME_SIZE;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    private static int attributeSize \u003d DEFAULT_ATTRIBUTE_SIZE;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    private Label remark;"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    private int fontSizeMultiplier;"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex, int fontSizeMultiplier) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        this.fontSizeMultiplier \u003d fontSizeMultiplier;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        initTags(person);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        initFavourite(person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        bindListeners(person);"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        updateAttributeSizes();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            tags.getChildren().clear();"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"            initTags(person);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        person.favouriteProperty().addListener((observable, oldValue, newValue) -\u003e initFavourite(person));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"     * display the heart for favourite person"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"    private void initFavourite(ReadOnlyPerson person) {"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        boolean favouriteStatus \u003d person.getFavourite();"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        Label favouriteLabel \u003d new Label();"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"        Image starFilled \u003d new Image(getClass().getResource(\"/images/heart.png\").toExternalForm());"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        if (favouriteStatus) {"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"            favouriteLabel.setGraphic(new ImageView(starFilled));"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"            favouriteLabel.setStyle(\"-fx-background-color: transparent; -fx-border-color: transparent\");"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        cardPane.getChildren().add(favouriteLabel);"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"     * Locate hashed colour for tag. If not found, new colour is assigned to tag"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"     * @param tag"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"     * @return"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"    private String getTagColour(String tag) {"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        if (!colourHash.containsKey(tag)) {"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"            int randomiser \u003d randomNumber.nextInt(Colours.values().length);"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"            String colour \u003d Colours.values()[randomiser].toString();"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"            colourHash.put(tag, colour);"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"        return colourHash.get(tag);"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"     * Assigns each tag a colour"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"     * @param person"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"            Label newTagLabel \u003d new Label(tag.getTagName());"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"            newTagLabel.setStyle(\"-fx-background-color: \" + this.getTagColour(tag.getTagName()));"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"            tags.getChildren().add(newTagLabel);"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"        });"},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"     * Set default size for all attributes"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"    public void updateAttributeSizes() {"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"        nameSize \u003d DEFAULT_NAME_SIZE + (fontSizeMultiplier * FONT_SIZE_EXTENDER);"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"        attributeSize \u003d DEFAULT_ATTRIBUTE_SIZE + (fontSizeMultiplier * FONT_SIZE_EXTENDER);"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"        // Set styles using set name and attribute sizes"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"        name.setStyle(\"-fx-font-size: \" + Integer.toString(nameSize));"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"        id.setStyle(\"-fx-font-size: \" + Integer.toString(nameSize));"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"        phone.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"        address.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"        remark.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"        email.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"    public Label getName() {"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"        return name;"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"    public Label getId() {"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"        return id;"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"    public Label getPhone() {"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"        return phone;"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"    public Label getAddress() {"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"        return address;"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":"    public Label getRemark() {"},{"lineNumber":190,"author":{"gitId":"charlesgoh"},"content":"        return remark;"},{"lineNumber":191,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"    public Label getEmail() {"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":"        return email;"},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"    public int getFontSizeMultiplier() {"},{"lineNumber":198,"author":{"gitId":"charlesgoh"},"content":"        return fontSizeMultiplier;"},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"    public void setFontSizeMultiplier(int fontSizeMultiplier) {"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d fontSizeMultiplier;"},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"    //author"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":67,"Esilocke":2,"wangyiming1019":52,"-":84}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.MAXIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.MINIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.ChangeFontSizeEvent;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    private int fontSizeMultiplier;"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e personList;"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        this.personList \u003d personList;"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d MINIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        setConnections(personList);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map(personList, (person) -\u003e"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"                new PersonCard(person, personList.indexOf(person) + 1, fontSizeMultiplier));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"     * Increases all person cards\u0027 font sizes in person list"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    public void increaseFontSize() {"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"PersonListPanel: Increasing font sizes\");"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        setFontSizeMultiplier(this.fontSizeMultiplier + 1);"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        setConnections(personList);"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"     * Decreases all person cards\u0027 font sizes in person list"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"    public void decreaseFontSize() {"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"PersonListPanel: Decreasing font sizes\");"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"        setFontSizeMultiplier(this.fontSizeMultiplier - 1);"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"        setConnections(personList);"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"     * Resets all person cards\u0027 font sizes in person list"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"    public void resetFontSize() {"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"PersonListPanel: Resetting font sizes\");"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d MINIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        setConnections(personList);"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"     * Gets integer value of font size multiplier"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    public int getFontSizeMultiplier() {"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        return fontSizeMultiplier;"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"     * Set integer value of font size multiplier"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"    public void setFontSizeMultiplier(int fontSizeMultiplier) {"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"        // Set new font size"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d fontSizeMultiplier;"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"        // Restrict from minimum"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d Math.max(MINIMUM_FONT_SIZE_MULTIPLIER, this.fontSizeMultiplier);"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        // Restrict from maximum"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d Math.min(MAXIMUM_FONT_SIZE_MULTIPLIER, this.fontSizeMultiplier);"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"New person font size multiplier: \" + Integer.toString(this.fontSizeMultiplier));"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"     * Handles command induced change font size event for person cards"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"     * @param event"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"    @Subscribe"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"    private void handlePersonCardChangeFontSizeEvent (ChangeFontSizeEvent event) {"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        switch (event.getTriggerOption()) {"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        case 0:"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Attempting to increase font size\");"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"            increaseFontSize();"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"        case 1:"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"            decreaseFontSize();"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Attempting to decrease font size\");"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"        case 2:"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"            resetFontSize();"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Attempting to reset font size\");"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Unable to handle change font size event. Stopping execution now\");"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"     * Listens for change of font size events"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"     * @param event"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleTaskPanelSelectionChangedEvent(TaskPanelSelectionChangedEvent event) {"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(\"Attempting to clear selection in person list view\");"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"        Platform.runLater(personListView.getSelectionModel()::clearSelection);"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"    private void handleBrowserPanelLocateEvent(BrowserPanelLocateEvent event) {"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"        logger.info(\"Attempting to clear selection in person list view\");"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(personListView.getSelectionModel()::clearSelection);"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"    private void handleBrowserPanelNavigateEvent(BrowserPanelNavigateEvent event) {"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"        logger.info(\"Attempting to clear selection in person list view\");"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(personListView.getSelectionModel()::clearSelection);"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":92,"jeffreygohkw":7,"Esilocke":14,"-":86}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    private StatusBar totalPersons;"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    public StatusBarFooter(String saveLocation, int initialTotalPersons) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"        setTotalPersons(initialTotalPersons);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return clock;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"        this.setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) listed\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":9,"-":79}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * A UI component that displays the information of a {@code Task}"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" * */"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class TaskCard  extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final int DEFAULT_NAME_SIZE \u003d 15;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final int DEFAULT_ATTRIBUTE_SIZE \u003d 10;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final int FONT_SIZE_EXTENDER \u003d 5;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final int DEFAULT_FONT_SIZE_MULTIPLIER \u003d 0;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private static int nameSize \u003d DEFAULT_NAME_SIZE;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    private static int attributeSize \u003d DEFAULT_ATTRIBUTE_SIZE;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public final ReadOnlyTask task;"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    private HBox taskCardPane;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    private Label taskName;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    private Label id;"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    private Label state;"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    private Label description;"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    private Label deadline;"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    private Label priority;"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    private Label assignCount;"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    private Label taskAddress;"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    private int fontSizeMultipler;"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    public TaskCard(ReadOnlyTask task, int displayedIndex, int fontSizeMultiplier) {"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        super(FXML);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        this.task \u003d task;"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        this.fontSizeMultipler \u003d fontSizeMultiplier;"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        bindListeners(task);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        updateAttributeSizes();"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"     * Binds the individual UI elements to observe their respective {@code Task} properties"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"     * so that they will be notified of any changes."},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    private void bindListeners(ReadOnlyTask task) {"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        taskName.textProperty().bind(Bindings.convert(task.taskNameProperty()));"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        description.textProperty().bind(Bindings.convert(task.descriptionProperty()));"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        deadline.textProperty().bind(Bindings.convert(task.deadlineProperty()));"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        priority.textProperty().bind(Bindings.convert(task.priorityProperty()));"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        assignCount.textProperty().bind(Bindings.convert(task.assigneeProperty()));"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        taskAddress.textProperty().bind(Bindings.convert(task.taskAddressProperty()));"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        state.textProperty().bind(Bindings.convert(task.stateProperty()));"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"     * Set default size for all attributes"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"    public void updateAttributeSizes() {"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        nameSize \u003d DEFAULT_NAME_SIZE + (fontSizeMultipler * FONT_SIZE_EXTENDER);"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        attributeSize \u003d DEFAULT_ATTRIBUTE_SIZE + (fontSizeMultipler * FONT_SIZE_EXTENDER);"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        // Set styles using set name and attribute sizes"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        taskName.setStyle(\"-fx-font-size: \" + Integer.toString(nameSize));"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"        id.setStyle(\"-fx-font-size: \" + Integer.toString(nameSize));"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"        description.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        deadline.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        priority.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"        taskAddress.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"        assignCount.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"        state.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        // state check"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"    public Label getTaskName() {"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"        return taskName;"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"    public Label getId() {"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"        return id;"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"    public Label getDescription() {"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        return description;"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"    public Label getDeadline() {"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        return deadline;"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"    public Label getPriority() {"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"        return priority;"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"    public Label getTaskAddress() {"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        return taskAddress;"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"    public void setFontSizeMultiplier(int fontSizeMultipler) {"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultipler \u003d fontSizeMultipler;"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"    public int getFontSizeMultiplier() {"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"        return this.fontSizeMultipler;"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"charlesgoh":47,"jeffreygohkw":4,"Esilocke":95}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.MAXIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.MINIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.events.ui.ChangeFontSizeEvent;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestTaskEvent;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":" * Panel containing the list of tasks."},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    private int fontSizeMultiplier;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    private ObservableList\u003cReadOnlyTask\u003e taskList;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public TaskListPanel(ObservableList\u003cReadOnlyTask\u003e taskList) {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        fontSizeMultiplier \u003d MINIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        setConnections(taskList);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    private void setConnections(ObservableList\u003cReadOnlyTask\u003e taskList) {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"                taskList, (task) -\u003e new TaskCard(task, taskList.indexOf(task) + 1, fontSizeMultiplier));"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        taskListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"                        raise(new TaskPanelSelectionChangedEvent(newValue));"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"                    }"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"                });"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"     * Increases all task cards\u0027 font sizes in person list"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"    public void increaseFontSize() {"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"TaskListPanel: Increasing font sizes\");"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        setFontSizeMultiplier(fontSizeMultiplier + 1);"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"        setConnections(taskList);"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"     * Decreases all task cards\u0027 font sizes in person list"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"    public void decreaseFontSize() {"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"TaskListPanel: Decreasing font sizes\");"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"        setFontSizeMultiplier(fontSizeMultiplier - 1);"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        setConnections(taskList);"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"     * Resets all task cards\u0027 font sizes in person list"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"    public void resetFontSize() {"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"TaskListPanel: Resetting font sizes\");"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d MINIMUM_FONT_SIZE_MULTIPLIER;"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"        setConnections(taskList);"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"     * Gets integer value of font size multiplier"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"    public int getFontSizeMultiplier() {"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        return fontSizeMultiplier;"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"     * Set integer value of font size multiplier"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"    public void setFontSizeMultiplier(int fontSizeMultiplier) {"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"        // Set new font size"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d fontSizeMultiplier;"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        // Restrict from minimum"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d Math.max(MINIMUM_FONT_SIZE_MULTIPLIER, this.fontSizeMultiplier);"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        // Restrict from maximum"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultiplier \u003d Math.min(MAXIMUM_FONT_SIZE_MULTIPLIER, this.fontSizeMultiplier);"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"        logger.info(\"New task font size multiplier: \" + Integer.toString(this.fontSizeMultiplier));"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"     * Handles command induced change font size event for task cards"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"     * @param event"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"    @Subscribe"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"    private void handleTaskCardChangeFontSizeEvent (ChangeFontSizeEvent event) {"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        switch (event.getTriggerOption()) {"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"        case 0:"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Attempting to increase font size\");"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"            increaseFontSize();"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"        case 1:"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"            decreaseFontSize();"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Attempting to decrease font size\");"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"        case 2:"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"            resetFontSize();"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Attempting to reset font size\");"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"            break;"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"        default:"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"            logger.info(\"Unable to handle change font size event. Stopping execution now\");"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"    private void scrollTo(int index) {"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"        });"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"    private void handleJumpToListRequestTaskEvent(JumpToListRequestTaskEvent event) {"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"        logger.info(\"Attempting to clear selection in task list view\");"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(taskListView.getSelectionModel()::clearSelection);"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"    private void handleBrowserPanelLocateEvent(BrowserPanelLocateEvent event) {"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"        logger.info(\"Attempting to clear selection in person list view\");"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(taskListView.getSelectionModel()::clearSelection);"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"    private void handleBrowserPanelNavigateEvent(BrowserPanelNavigateEvent event) {"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"        logger.info(\"Attempting to clear selection in person list view\");"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(taskListView.getSelectionModel()::clearSelection);"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"            super.updateItem(task, empty);"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"                setGraphic(null);"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"                setText(null);"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"            } else {"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"charlesgoh":81,"jeffreygohkw":1,"Esilocke":114}},{"path":"src/main/java/seedu/address/ui/Ui.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /** Stops the UI. */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    /** Gets the main window. */"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    MainWindow getMainWindow();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":2,"-":16}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32_alternative.png\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    private static UserPrefs prefs;"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Config config;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.config \u003d config;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":54,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        prefs.setTheme(mainWindow.getTheme());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        mainWindow.hide();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    public MainWindow getMainWindow() {"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        return mainWindow;"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        alert.getDialogPane().getStylesheets().add(String.format(\"view/\", prefs.getTheme()));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Subscribe"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                event.exception);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":1,"jeffreygohkw":8,"-":118}},{"path":"src/main/java/seedu/address/ui/ViewPersonPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":" * Contains the details of a person."},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"public class ViewPersonPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final int DEFAULT_NAME_SIZE \u003d 15;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final int DEFAULT_ATTRIBUTE_SIZE \u003d 10;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public static final int FONT_SIZE_EXTENDER \u003d 5;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public static final int DEFAULT_FONT_SIZE_MULTIPLIER \u003d 0;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private static final String FXML \u003d \"ViewPersonPanel.fxml\";"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"     * Preset values for random selection later."},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    private enum Colours {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        blue, green, brown, purple, navy, crimson, firebrick, maroon, red, black"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    private static HashMap\u003cString, String\u003e colourHash \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private static Random randomNumber \u003d new Random();"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    private static int nameSize \u003d DEFAULT_NAME_SIZE;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    private static int attributeSize \u003d DEFAULT_ATTRIBUTE_SIZE;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    private VBox personPanel;"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    private Label name;"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    private Label phone;"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    private Label address;"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    private Label remark;"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    private ImageView avatarImage;"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    private Label email;"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    private int fontSizeMultipler;"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    public ViewPersonPanel(ReadOnlyPerson person, int fontSizeMultiplier) {"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        super(FXML);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        this.person \u003d person;"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        this.fontSizeMultipler \u003d fontSizeMultiplier;"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        initializeWithPerson(person);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        initializeAvatar();"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        updateAttributeSizes();"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    public ViewPersonPanel() {"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        super(FXML);"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"     * so that they will be notified of any changes."},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    private void initializeWithPerson(ReadOnlyPerson person) {"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    //author charlesgoh"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"     * Sets avatar to a URL or filepath and falls back to the placeholder avatar if specified path fits in"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"     * neither categories"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    private void initializeAvatar() {"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        String avatarPath \u003d person.getAvatar().value;"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"            logger.info(\"Attempting to set avatar to image at specified URL or filepath\");"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"            Image newImage \u003d new Image(avatarPath);"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"            avatarImage.setImage(newImage);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalArgumentException ex) {"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"            logger.warning(\"Saved path is not a valid filepath or URL path. Setting avatar to placeholder\");"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            Image imagePlaceholder \u003d new Image(\"file:docs/images/Avatar.png\");"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"            avatarImage.setImage(imagePlaceholder);"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"     * Set default size for all attributes"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"    public void updateAttributeSizes() {"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"        nameSize \u003d DEFAULT_NAME_SIZE + (fontSizeMultipler * FONT_SIZE_EXTENDER);"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"        attributeSize \u003d DEFAULT_ATTRIBUTE_SIZE + (fontSizeMultipler * FONT_SIZE_EXTENDER);"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        // Set styles using set name and attribute sizes"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"        name.setStyle(\"-fx-font-size: \" + Integer.toString(nameSize));"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"        phone.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        address.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        remark.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"        email.setStyle(\"-fx-font-size: \" + Integer.toString(attributeSize));"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"            return true;"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof ViewPersonPanel)) {"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"            return false;"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        // state check"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"        ViewPersonPanel card \u003d (ViewPersonPanel) other;"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"        return person.equals(card.person);"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"    public Label getName() {"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"        return name;"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"    public Label getPhone() {"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        return phone;"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"    public Label getAddress() {"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"        return address;"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"    public Label getRemark() {"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"        return remark;"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"    public Label getEmail() {"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"        return email;"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"    public int getFontSizeMultipler() {"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":"        return fontSizeMultipler;"},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"    public void setFontSizeMultipler(int fontSizeMultipler) {"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"        this.fontSizeMultipler \u003d fontSizeMultipler;"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"        this.person \u003d event.getNewSelection().person;"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"        initializeWithPerson(person);"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        initializeAvatar();"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"charlesgoh":28,"Esilocke":155}},{"path":"src/main/java/seedu/address/ui/ViewTaskPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":" * Contains details of a Task."},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"public class ViewTaskPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    private static final String FXML \u003d \"ViewTaskPanel.fxml\";"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    private Label taskName;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private Label description;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private Label deadline;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    private Label priority;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    private Label state;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private ReadOnlyTask task;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public ViewTaskPanel(ReadOnlyTask task) {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        if (task !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            this.task \u003d task;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            initializeWithTask(task);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    public ViewTaskPanel() {"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"     * Binds the individual UI elements to observe their respective {@code Task} properties"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"     * so that they will be notified of any changes."},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    private void initializeWithTask(ReadOnlyTask task) {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        taskName.textProperty().bind(Bindings.convert(task.taskNameProperty()));"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        description.textProperty().bind(Bindings.convert(task.descriptionProperty()));"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        deadline.textProperty().bind(Bindings.convert(task.deadlineProperty()));"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        priority.textProperty().bind(Bindings.convert(task.priorityProperty()));"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        state.textProperty().bind(Bindings.convert(task.stateProperty()));"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    @Subscribe"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    private void handleTaskPanelSelectionChangedEvent(TaskPanelSelectionChangedEvent event) {"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        initializeWithTask(event.getNewSelection().task);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":67}},{"path":"src/test/data/ManualTesting/[W09-B2][Address++]TestScript.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"\u003d Address++ - Test Script"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":":toc:"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":":experimental:"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":":repoURL: https://github.com/CS2103AUG2017-W09-B2/main"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"By: `Team W09-B2`      Since: `Aug 2017`      Licence: `MIT` +"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d Getting Started"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"Ensure that you have the [W09-B2][Address++].jar file and the [W09-B2][Address++]SampleData.xml available on your computer and a working internet connection."},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Importing the test data"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":". Launch [W09-B2][Address++].jar."},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":". On initial launch, it should contain sample data of 6 different persons and 0 tasks."},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":". Type `open` to open a pop up window."},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":". Navigate to the location of the [W09-B2][Address++]SampleData.xml file and click Open to open it."},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":". The sample data containing 20 different persons and 7 different tasks should be loaded."},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":". You are now ready to begin testing."},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d User Interface"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"* The Menu on the top of the screen contains 3 buttons: `File`, `Help` and `Font Size`."},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"* Below the menu is the command line, you can type your commands in here."},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"* The box below the command line will show feedback when you type in commands, such as if the command is successful or if you have typed an erroneous command."},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"* The leftmost panel contains the list of persons in the address book."},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"* The middle panel contains the list of tasks in the address book."},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"* The rightmost panel contains either the details of the selected task or person, or the in-application browser."},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"* The bottom bar contains miscellaneous information about the address book, such as the file where the save data will be stored and the number of persons in the address book."},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d Testing"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"Unless explicitly stated, each test section for each command is assumed to be carried out continuously. +"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"This means that you *should carry out the tests in the given order*. +"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"Each test section is carried out independently. This means that you are recommended to `undo` to restore the address book after each test section."},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d HelpCommand"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"*Opening the help window*"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"help"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"The User Guide appears in a separate window."},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"Opened help window."},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d AddPersonCommand"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"*Adding a person with all details*"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"add n/Svea Lisenhower p/98009621 e/svea_li@example.com a/Jurong West Street 65 Blk 667A r/Russian Exchange Student v/https://example.com/image.png"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"A person named Svea Lisenhower, with the details as stated above is added to the address book at index 21. +"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"New person added: +"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"Svea Lisenhower Phone: 98009621 Email: svea_li@example.com Address: Jurong West Street 65 Blk 667A Remark: Russian Exchange Student Avatar: https://example.com/image.png Tags:"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"*Adding a person with missing compulsory details*"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"add p/98009621 e/svea_li@example.com a/Jurong West Street 65 Blk 667A r/Russian Exchange Student v/https://example.com/image.png"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"An error message is printed out, as name is a compulsory field and cannot be missing."},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"Invalid command format! +"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"add: Adds a person to the address book. Parameters: n/NAME [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/REMARK] [v/AVATAR] [t/TAG]... +"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"Example: add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 r/Sells sea shells on the sea shore v/avatar-filepath.pngt/friends t/owesMoney"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"*Adding a person with missing optional details*"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"add n/Kent Seethis"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"A person named Kent Seethis, but with no other details is added to the address book at index 22. +"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"New person added: +"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"Kent Seethis Phone:  Email:  Address:  Remark:  Avatar:  Tags:"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"*Adding a person with invalid phones*"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"add n/Fionnes Karl p/@"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified phone is invalid."},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"Phone numbers can only contain numbers, and should be at least 3 digits long"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"*Adding a person with invalid emails*"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"add n/Fionnes Karl e/here"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified email is invalid."},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"*Adding a person with invalid tags*"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"add n/Fionnes Karl t/@"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified tag is invalid."},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"Tags names should be alphanumeric"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d AddTaskCommand"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"*Adding a task with all details*"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"add task/ n/Buy pencils d/Buy 4 pencils from Popular by/18 November 7pm p/2 a/West Point"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"A task named \"Buy pencils\", with a description of \"Buy 4 pencils from Popular\", with a deadline of \"Sat Nov 18 19:00:00 SGT 2017\","},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"a priority of \"Low\", and an address of \"West Point\" is added to the addresss book at index 8 in the task list. +"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"New task added: +"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"Buy pencils Description: Buy 4 pencils from Popular Deadline: Sat Nov 18 19:00:00 SGT 2017 Priority: Low Address: West Point \u003cIncomplete\u003e +"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"*Adding a task with missing compulsory details*"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"add task/ d/Buy 4 pencils from Popular by/18 November 7pm p/2 a/West Point"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"An error message is printed out, as name is a compulsory field and cannot be missing."},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"Invalid command format! +"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"add task/: Adds a task to the address book. Parameters: n/NAME [d/DESCRIPTION] [by/DEADLINE] [p/PRIORITY] [a/ADDRESS] +"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"Example: add task/ n/Buy pencil d/Buy a new pencil from ABS by/10-10-2017 p/4 a/12 Kent Ridge Crescent, 119275"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"*Adding a task with missing optional details*"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"add task/ n/Create better task"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"A task with the name \"Create better task\", and no other details present is added to the address book at index 9 in the task list. +"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"New task added:"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":"Create better task Description:  Deadline:  Priority:  Address:  \u003cIncomplete\u003e"},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":199,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":200,"author":{"gitId":"Esilocke"},"content":"*Adding a task with invalid deadlines*"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":202,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"add task/ n/Create better task by/AAAAAAAAAAAAA"},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified deadline is invalid."},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"The specified date is invalid."},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"*Adding a task with invalid priority*"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"add task/ n/Create better task p/99999999"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified priority is invalid."},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"Task priorities must be an integer from 0 to 5, inclusive, where 5 represents the highest priority"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d AddTagCommand"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"*Adding tags to persons in Address++*"},{"lineNumber":231,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":232,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":233,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"add tag/ 1 2 t/friends"},{"lineNumber":235,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":236,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"The first two person in the person list will have the tag `friends` but it will not show in the person panel."},{"lineNumber":238,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":239,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"Added Tag: [friends]"},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":242,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":243,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":"add tag/ t/friends"},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":246,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"All persons in the Address++ will have the tag `friends`."},{"lineNumber":248,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"Added Tag: [friends]"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":252,"author":{"gitId":"Esilocke"},"content":"*Failing to add tags to persons if all of them having the input tags*"},{"lineNumber":253,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":254,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":255,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"add tag/ 1 3 t/friends"},{"lineNumber":257,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":258,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"An error message will displayed since all of them have the tag `friends` already."},{"lineNumber":260,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":261,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"This tag already exists in all target persons in the current list."},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"*Failing to add tags to persons with invalid index*"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":267,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"add tag/ 23 t/friends"},{"lineNumber":269,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":"An error message will displayed since there is no 23rd person in the person list."},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"The person index provided is invalid."},{"lineNumber":275,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"*Failing to add tags to persons with no input tags*"},{"lineNumber":277,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":278,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":279,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"add tag/ 1 t/"},{"lineNumber":281,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":282,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"An error message will displayed since there is no input tags."},{"lineNumber":284,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":285,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"Tags names should be alphanumeric"},{"lineNumber":287,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d ListCommand"},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"*List all entries*"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":292,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":293,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":294,"author":{"gitId":"Esilocke"},"content":"list"},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":296,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":297,"author":{"gitId":"Esilocke"},"content":"All tasks and persons in the address book are listed."},{"lineNumber":298,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":299,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":300,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":301,"author":{"gitId":"Esilocke"},"content":"Listed all entries"},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":303,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d EditPersonCommand"},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"*Editing a person for all entries*"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":309,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":310,"author":{"gitId":"Esilocke"},"content":"edit 7 n/Laura Edelweiss p/1111111 a/House of Edelweiss e/laura@example.com r/Heiress to the House of Edelweiss t/Heiress v/https://example.com/validimage2.png"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":"The person at index 7 (Elizabeth Edelweiss) is updated and now has new details matching the command."},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":317,"author":{"gitId":"Esilocke"},"content":"Edited Person: +"},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":"Laura Edelweiss Phone: 1111111 Email: laura@example.com Address: House of Edelweiss Remark: Heiress to the House of Edelweiss Avatar: https://example.com/validimage2.png Tags: [Heiress]"},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":321,"author":{"gitId":"Esilocke"},"content":"*Editing a person with only 1 entry*"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":323,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":324,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":325,"author":{"gitId":"Esilocke"},"content":"edit 7 n/Elizabath Edelweiss"},{"lineNumber":326,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":327,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":328,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":329,"author":{"gitId":"Esilocke"},"content":"Only the name of the person at index 7 (Now named Laura Edelweiss) is changed to Elizabeth Edelweiss. All other details remain the same."},{"lineNumber":330,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":331,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":333,"author":{"gitId":"Esilocke"},"content":"Edited Person: +"},{"lineNumber":334,"author":{"gitId":"Esilocke"},"content":"Elizabath Edelweiss Phone: 1111111 Email: laura@example.com Address: House of Edelweiss Remark: Heiress to the House of Edelweiss Avatar: https://example.com/validimage2.png Tags: [Heiress]"},{"lineNumber":335,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":336,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":337,"author":{"gitId":"Esilocke"},"content":"*Editing a task with invalid details*"},{"lineNumber":338,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":339,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":340,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":341,"author":{"gitId":"Esilocke"},"content":"edit 7 n/"},{"lineNumber":342,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":343,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":344,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified name is invalid."},{"lineNumber":345,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":346,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":348,"author":{"gitId":"Esilocke"},"content":"Person names should only contain alphanumeric characters and spaces, and it should not be blank"},{"lineNumber":349,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":350,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":351,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":352,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":353,"author":{"gitId":"Esilocke"},"content":"edit 7 p/ppp"},{"lineNumber":354,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":355,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":356,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified phone is invalid."},{"lineNumber":357,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":358,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":359,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":360,"author":{"gitId":"Esilocke"},"content":"Phone numbers can only contain numbers, and should be at least 3 digits long"},{"lineNumber":361,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":362,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":363,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":364,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":"edit 7 e/ppp"},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":368,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified email is invalid."},{"lineNumber":369,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":371,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":372,"author":{"gitId":"Esilocke"},"content":"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027"},{"lineNumber":373,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":374,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":375,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":376,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":377,"author":{"gitId":"Esilocke"},"content":"edit 7 t/@@@@@@"},{"lineNumber":378,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified name is invalid."},{"lineNumber":381,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":382,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":383,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":384,"author":{"gitId":"Esilocke"},"content":"Tags names should be alphanumeric"},{"lineNumber":385,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":386,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":387,"author":{"gitId":"Esilocke"},"content":"*Editing a private person*"},{"lineNumber":388,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":389,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":390,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":391,"author":{"gitId":"Esilocke"},"content":"edit 11 n/Unhide me"},{"lineNumber":392,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":393,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":394,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the person\u0027s name is private."},{"lineNumber":395,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":396,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":397,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":398,"author":{"gitId":"Esilocke"},"content":"At least one field to be edited must be public."},{"lineNumber":399,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":400,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":401,"author":{"gitId":"Esilocke"},"content":"*Editing an invalid person*"},{"lineNumber":402,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":403,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":404,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":405,"author":{"gitId":"Esilocke"},"content":"edit 19999 n/Unhide me"},{"lineNumber":406,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":407,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":408,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the index is invalid."},{"lineNumber":409,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":410,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":411,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":412,"author":{"gitId":"Esilocke"},"content":"The person index provided is invalid"},{"lineNumber":413,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":414,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d EditTaskCommand"},{"lineNumber":416,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":417,"author":{"gitId":"Esilocke"},"content":"*Editing a task for all entries*"},{"lineNumber":418,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":419,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":420,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":421,"author":{"gitId":"Esilocke"},"content":"edit task/ 7 n/Paper Castle d/Castle Garde by/9 December 2017 8pm p/1 a/NUS"},{"lineNumber":422,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":423,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":424,"author":{"gitId":"Esilocke"},"content":"The task at index 7 is updated and now has new details matching the command."},{"lineNumber":425,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":426,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":427,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":428,"author":{"gitId":"Esilocke"},"content":"Edited Task: +"},{"lineNumber":429,"author":{"gitId":"Esilocke"},"content":"Paper Castle Description: Castle Garde Deadline: Sat Dec 09 20:00:00 SGT 2017 Priority: Lowest Address: NUS \u003cIncomplete\u003e"},{"lineNumber":430,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":431,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":432,"author":{"gitId":"Esilocke"},"content":"*Editing a task with only 1 entry*"},{"lineNumber":433,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":434,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":435,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":436,"author":{"gitId":"Esilocke"},"content":"edit task/ 7 n/Sandcastle"},{"lineNumber":437,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":438,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":439,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":440,"author":{"gitId":"Esilocke"},"content":"Only the name of the task at index 7 (Now named Paper Castle) is changed to Sandcastle. All other details remain the same."},{"lineNumber":441,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":442,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":443,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":444,"author":{"gitId":"Esilocke"},"content":"Edited Task: +"},{"lineNumber":445,"author":{"gitId":"Esilocke"},"content":"Sandcastle Description: Castle Garde Deadline: Sat Dec 09 20:00:00 SGT 2017 Priority: Lowest Address: NUS \u003cIncomplete\u003e"},{"lineNumber":446,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":447,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":448,"author":{"gitId":"Esilocke"},"content":"*Editing a task with invalid details*"},{"lineNumber":449,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":450,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":451,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":452,"author":{"gitId":"Esilocke"},"content":"edit task/ 7 n/"},{"lineNumber":453,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":454,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":455,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified name is invalid."},{"lineNumber":456,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":457,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":458,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":459,"author":{"gitId":"Esilocke"},"content":"Task names can be in any format, and should not be blank"},{"lineNumber":460,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":461,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":462,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":463,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":464,"author":{"gitId":"Esilocke"},"content":"edit task/ 7 by/AAAAAAAA"},{"lineNumber":465,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":466,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":467,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified phone is invalid."},{"lineNumber":468,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":469,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":470,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":471,"author":{"gitId":"Esilocke"},"content":"The specified date is invalid."},{"lineNumber":472,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":473,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":474,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":475,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":476,"author":{"gitId":"Esilocke"},"content":"edit task/ 7 e/ppp"},{"lineNumber":477,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":478,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":479,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the specified email is invalid."},{"lineNumber":480,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":481,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":482,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":483,"author":{"gitId":"Esilocke"},"content":"Task priorities must be an integer from 0 to 5, inclusive, where 5 represents the highest priority"},{"lineNumber":484,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":485,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":486,"author":{"gitId":"Esilocke"},"content":"*Editing an invalid task*"},{"lineNumber":487,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":488,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":489,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":490,"author":{"gitId":"Esilocke"},"content":"edit task/ 19999 n/Tiny, tiny house"},{"lineNumber":491,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":492,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":493,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the index is invalid."},{"lineNumber":494,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":495,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":496,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":497,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":498,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":499,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":500,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d EditTagCommand"},{"lineNumber":501,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":502,"author":{"gitId":"Esilocke"},"content":"*Renaming a tag in the address book*"},{"lineNumber":503,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":504,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":505,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":506,"author":{"gitId":"Esilocke"},"content":"edit tag/ friends goodFriends"},{"lineNumber":507,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":508,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":509,"author":{"gitId":"Esilocke"},"content":"All instances of \"friends\" tags are replaced with \"goodFriends\" tags (at indexes 1, 3, 10, 11, 12, 17). +"},{"lineNumber":510,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":511,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":512,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":513,"author":{"gitId":"Esilocke"},"content":"Replaced tag friends with goodFriends"},{"lineNumber":514,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":515,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":516,"author":{"gitId":"Esilocke"},"content":"*Renaming a non-existant tag in the address book*"},{"lineNumber":517,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":518,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":519,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":520,"author":{"gitId":"Esilocke"},"content":"edit tag/ friends nemesis"},{"lineNumber":521,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":522,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":523,"author":{"gitId":"Esilocke"},"content":"As \"friends\" were renamed to \"goodFriends\", there are no more \"friends\" tags. +"},{"lineNumber":524,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the tag \"friends\" is not in any of the contacts."},{"lineNumber":525,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":526,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":527,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":528,"author":{"gitId":"Esilocke"},"content":"No such tag was found in the address book."},{"lineNumber":529,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":530,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":531,"author":{"gitId":"Esilocke"},"content":"*Renaming a tag to another one with the exact same name*"},{"lineNumber":532,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":533,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":534,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":535,"author":{"gitId":"Esilocke"},"content":"edit tag/ goodFriends goodFriends"},{"lineNumber":536,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":537,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":538,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the two tag names are exactly the same. +"},{"lineNumber":539,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":540,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":541,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":542,"author":{"gitId":"Esilocke"},"content":"The new name of the tag cannot be the same as the old name."},{"lineNumber":543,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":544,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":545,"author":{"gitId":"Esilocke"},"content":"*Renaming a tag to another one with an invalid name*"},{"lineNumber":546,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":547,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":548,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":549,"author":{"gitId":"Esilocke"},"content":"edit tag/ goodFriends @@@@"},{"lineNumber":550,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":551,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":552,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the new tag name is invalid. +"},{"lineNumber":553,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":554,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":555,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":556,"author":{"gitId":"Esilocke"},"content":"Invalid command format! +"},{"lineNumber":557,"author":{"gitId":"Esilocke"},"content":"edit tag/: Edits the specified tag and updates all existing contacts that shares this tag with the new value. +"},{"lineNumber":558,"author":{"gitId":"Esilocke"},"content":"Parameters: TAGTOCHANGE (must be alphanumerical) TAGNEWNAME (must be alphanumerical) +"},{"lineNumber":559,"author":{"gitId":"Esilocke"},"content":"Example: edit friends enemies"},{"lineNumber":560,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":561,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":562,"author":{"gitId":"Esilocke"},"content":"*Renaming a tag to another one with an invalid name*"},{"lineNumber":563,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":564,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":565,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":566,"author":{"gitId":"Esilocke"},"content":"edit tag/ goodFriends @@@@"},{"lineNumber":567,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":568,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":569,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the new tag name is invalid. +"},{"lineNumber":570,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":571,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":572,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":573,"author":{"gitId":"Esilocke"},"content":"Invalid command format! +"},{"lineNumber":574,"author":{"gitId":"Esilocke"},"content":"edit tag/: Edits the specified tag and updates all existing contacts that shares this tag with the new value. +"},{"lineNumber":575,"author":{"gitId":"Esilocke"},"content":"Parameters: TAGTOCHANGE (must be alphanumerical) TAGNEWNAME (must be alphanumerical) +"},{"lineNumber":576,"author":{"gitId":"Esilocke"},"content":"Example: edit friends enemies"},{"lineNumber":577,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":578,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":579,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d ChangePrivacyCommand"},{"lineNumber":580,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":581,"author":{"gitId":"Esilocke"},"content":"*Changing the privacy of public fields*"},{"lineNumber":582,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":583,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":584,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":585,"author":{"gitId":"Esilocke"},"content":"changeprivacy 20 n/true p/true e/true a/true r/true"},{"lineNumber":586,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":587,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":588,"author":{"gitId":"Esilocke"},"content":"The 20th person has all of their fields set as private, and the original data is hidden in the UI."},{"lineNumber":589,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":590,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":591,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":592,"author":{"gitId":"Esilocke"},"content":"Changed the Privacy of the Person: \u003cPrivate Name\u003e Phone: \u003cPrivate Phone\u003e Email: \u003cPrivate Email\u003e Address: \u003cPrivate Address\u003e Remark: \u003cPrivate Remark\u003e Avatar:  Tags: [project]"},{"lineNumber":593,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":594,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":595,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":596,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":597,"author":{"gitId":"Esilocke"},"content":"changeprivacy 6 n/false"},{"lineNumber":598,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":599,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":600,"author":{"gitId":"Esilocke"},"content":"The 6th person\u0027s name, being originally public, remains public."},{"lineNumber":601,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":602,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":603,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":604,"author":{"gitId":"Esilocke"},"content":"Changed the Privacy of the Person: David Ng Phone: 87877003 Email: david_ng@example.com Address: \u003cPrivate Address\u003e Remark:  Avatar:  Tags:"},{"lineNumber":605,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":606,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":607,"author":{"gitId":"Esilocke"},"content":"*Changing the privacy of private fields*"},{"lineNumber":608,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":609,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":610,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":611,"author":{"gitId":"Esilocke"},"content":"changeprivacy 20 n/false p/false e/false a/false r/false"},{"lineNumber":612,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":613,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":614,"author":{"gitId":"Esilocke"},"content":"The 20th person has all of their fields set as public, revealing all the original data in the UI."},{"lineNumber":615,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":616,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":617,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":618,"author":{"gitId":"Esilocke"},"content":"Changed the Privacy of the Person: Myuria Plumley Phone: 99831115 Email: myuria@example.com Address: #02, Bukit Timah Street 56 Remark: Wears her hair on her right Avatar:  Tags: [project]"},{"lineNumber":619,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":620,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":621,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":622,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":623,"author":{"gitId":"Esilocke"},"content":"changeprivacy 6 a/true"},{"lineNumber":624,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":625,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":626,"author":{"gitId":"Esilocke"},"content":"The 6th person\u0027s address, being originally private, remains private."},{"lineNumber":627,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":628,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":629,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":630,"author":{"gitId":"Esilocke"},"content":"Changed the Privacy of the Person: David Ng Phone: 87877003 Email: david_ng@example.com Address: \u003cPrivate Address\u003e Remark:  Avatar:  Tags:"},{"lineNumber":631,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":632,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":633,"author":{"gitId":"Esilocke"},"content":"*Changing the privacy of empty fields*"},{"lineNumber":634,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":635,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":636,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":637,"author":{"gitId":"Esilocke"},"content":"changeprivacy 2 r/true"},{"lineNumber":638,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":639,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":640,"author":{"gitId":"Esilocke"},"content":"The 2nd person has their remark set to private."},{"lineNumber":641,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":642,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":643,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":644,"author":{"gitId":"Esilocke"},"content":"Changed the Privacy of the Person: Antoinette Chan Phone: 89912301 Email: antoinette@example.com Address:  Remark: \u003cPrivate Remark\u003e Avatar:  Tags: [GEQ2000]"},{"lineNumber":645,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":646,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":647,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":648,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":649,"author":{"gitId":"Esilocke"},"content":"changeprivacy 2 r/false"},{"lineNumber":650,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":651,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":652,"author":{"gitId":"Esilocke"},"content":"The 2nd person has their remark set to public, but since it is empty, it does not display any data."},{"lineNumber":653,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":654,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":655,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":656,"author":{"gitId":"Esilocke"},"content":"Changed the Privacy of the Person: Antoinette Chan Phone: 89912301 Email: antoinette@example.com Address:  Remark:  Avatar:  Tags: [GEQ2000]"},{"lineNumber":657,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":658,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":659,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d PrivacyLevelCommand"},{"lineNumber":660,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":661,"author":{"gitId":"Esilocke"},"content":"*Changing the privacy level*"},{"lineNumber":662,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":663,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":664,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":665,"author":{"gitId":"Esilocke"},"content":"privacylevel 1"},{"lineNumber":666,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":667,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":668,"author":{"gitId":"Esilocke"},"content":"All persons are listed with any private data revealed."},{"lineNumber":669,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":670,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":671,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":672,"author":{"gitId":"Esilocke"},"content":"Successfully changed privacy level to 1."},{"lineNumber":673,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":674,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":675,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":676,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":677,"author":{"gitId":"Esilocke"},"content":"privacylevel 3"},{"lineNumber":678,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":679,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":680,"author":{"gitId":"Esilocke"},"content":"Lists all persons except those that have at least one private field."},{"lineNumber":681,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":682,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":683,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":684,"author":{"gitId":"Esilocke"},"content":"Successfully changed privacy level to 3."},{"lineNumber":685,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":686,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":687,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":688,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":689,"author":{"gitId":"Esilocke"},"content":"privacylevel 2"},{"lineNumber":690,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":691,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":692,"author":{"gitId":"Esilocke"},"content":"List all persons. Fields that are private will have their data hidden."},{"lineNumber":693,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":694,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":695,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":696,"author":{"gitId":"Esilocke"},"content":"Successfully changed privacy level to 2."},{"lineNumber":697,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":698,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":699,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d FavouriteCommand"},{"lineNumber":700,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":701,"author":{"gitId":"Esilocke"},"content":"*Setting a person in the Address++ to be the favourite person*"},{"lineNumber":702,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":703,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":704,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":705,"author":{"gitId":"Esilocke"},"content":"list +"},{"lineNumber":706,"author":{"gitId":"Esilocke"},"content":"favourite 2"},{"lineNumber":707,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":708,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":709,"author":{"gitId":"Esilocke"},"content":"The 2nd person in the Address++ will be favoured and a heart picture will be shown next to his name."},{"lineNumber":710,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":711,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":712,"author":{"gitId":"Esilocke"},"content":"Favourited Person: Antoinette Chan Phone: 89912301 Email: antoinette@example.com Address:  Remark:  Avatar:  Tags: [GEQ2000]"},{"lineNumber":713,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":714,"author":{"gitId":"Esilocke"},"content":"*Failing to set a favourite person if he has been favoured*"},{"lineNumber":715,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":716,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":717,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":718,"author":{"gitId":"Esilocke"},"content":"list +"},{"lineNumber":719,"author":{"gitId":"Esilocke"},"content":"favourite 1"},{"lineNumber":720,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":721,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":722,"author":{"gitId":"Esilocke"},"content":"An error message will display since the first person in the Address++ has been favoured."},{"lineNumber":723,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":724,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":725,"author":{"gitId":"Esilocke"},"content":"Person is already favourited."},{"lineNumber":726,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":727,"author":{"gitId":"Esilocke"},"content":"*Failing to set a favourite person with invalid index*"},{"lineNumber":728,"author":{"gitId":"-"},"content":""},{"lineNumber":729,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":730,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":731,"author":{"gitId":"Esilocke"},"content":"favourite 56"},{"lineNumber":732,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":733,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":734,"author":{"gitId":"Esilocke"},"content":"An error message will display since there is no 56th person in the current list."},{"lineNumber":735,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":736,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":737,"author":{"gitId":"Esilocke"},"content":"The person index provided is invalid"},{"lineNumber":738,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":739,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d FavouriteListCommand"},{"lineNumber":740,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":741,"author":{"gitId":"Esilocke"},"content":"*Listing all favoured persons in the Address++*"},{"lineNumber":742,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":743,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":744,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":745,"author":{"gitId":"Esilocke"},"content":"showfavourite"},{"lineNumber":746,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":747,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":748,"author":{"gitId":"Esilocke"},"content":"List all the favoured persons."},{"lineNumber":749,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":750,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":751,"author":{"gitId":"Esilocke"},"content":"Listed all favourited persons."},{"lineNumber":752,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":753,"author":{"gitId":"Esilocke"},"content":"*Listing empty list with no favoured person in the Address++*"},{"lineNumber":754,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":755,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":756,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":757,"author":{"gitId":"Esilocke"},"content":"showfavourite"},{"lineNumber":758,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":759,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":760,"author":{"gitId":"Esilocke"},"content":"An empty list but with successful message."},{"lineNumber":761,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":762,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":763,"author":{"gitId":"Esilocke"},"content":"Listed all favourited persons."},{"lineNumber":764,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":765,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d FindPersonCommand"},{"lineNumber":766,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":767,"author":{"gitId":"Esilocke"},"content":"*Finding one keyword*"},{"lineNumber":768,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":769,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":770,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":771,"author":{"gitId":"Esilocke"},"content":"find plumley"},{"lineNumber":772,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":773,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":774,"author":{"gitId":"Esilocke"},"content":"All contacts with the word \"plumley\", case insensitive, in their name are displayed. +"},{"lineNumber":775,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":776,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":777,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":778,"author":{"gitId":"Esilocke"},"content":"2 persons listed!"},{"lineNumber":779,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":780,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":781,"author":{"gitId":"Esilocke"},"content":"*Finding multiple keywords*"},{"lineNumber":782,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":783,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":784,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":785,"author":{"gitId":"Esilocke"},"content":"find plumley edelweiss"},{"lineNumber":786,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":787,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":788,"author":{"gitId":"Esilocke"},"content":"All contacts with the word \"plumley\" or \"edelweiss\", case insensitive, in their name are displayed. +"},{"lineNumber":789,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":790,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":791,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":792,"author":{"gitId":"Esilocke"},"content":"4 persons listed!"},{"lineNumber":793,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":794,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":795,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d FindTaskCommand"},{"lineNumber":796,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":797,"author":{"gitId":"Esilocke"},"content":"*Finding one keyword*"},{"lineNumber":798,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":799,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":800,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":801,"author":{"gitId":"Esilocke"},"content":"find task/ on"},{"lineNumber":802,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":803,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":804,"author":{"gitId":"Esilocke"},"content":"All tasks with the word \"on\", case insensitive, in their name or description are displayed. +"},{"lineNumber":805,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":806,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":807,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":808,"author":{"gitId":"Esilocke"},"content":"2 tasks listed!"},{"lineNumber":809,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":810,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":811,"author":{"gitId":"Esilocke"},"content":"*Finding multiple keywords*"},{"lineNumber":812,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":813,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":814,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":815,"author":{"gitId":"Esilocke"},"content":"find task/ on stew"},{"lineNumber":816,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":817,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":818,"author":{"gitId":"Esilocke"},"content":"All tasks with the word \"on\" or \"stew\", case insensitive, in their name or description are displayed. +"},{"lineNumber":819,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":820,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":821,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":822,"author":{"gitId":"Esilocke"},"content":"3 tasks listed!"},{"lineNumber":823,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":824,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":825,"author":{"gitId":"Esilocke"},"content":"*Finding multiple keywords with priority search*"},{"lineNumber":826,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":827,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":828,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":829,"author":{"gitId":"Esilocke"},"content":"find task/ on stew p/4"},{"lineNumber":830,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":831,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":832,"author":{"gitId":"Esilocke"},"content":"All tasks with the word \"on\" or \"stew\", case insensitive, in their name or description, and have a priority of \"High\" or above are displayed. +"},{"lineNumber":833,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":834,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":835,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":836,"author":{"gitId":"Esilocke"},"content":"1 tasks listed!"},{"lineNumber":837,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":838,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":839,"author":{"gitId":"Esilocke"},"content":"*Finding multiple keywords with state search*"},{"lineNumber":840,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":841,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":842,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":843,"author":{"gitId":"Esilocke"},"content":"find task/ on stew done/true"},{"lineNumber":844,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":845,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":846,"author":{"gitId":"Esilocke"},"content":"All tasks with the word \"on\" or \"stew\", case insensitive, in their name or description, and are currently complete are displayed. +"},{"lineNumber":847,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":848,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":849,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":850,"author":{"gitId":"Esilocke"},"content":"2 tasks listed!"},{"lineNumber":851,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":852,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":853,"author":{"gitId":"Esilocke"},"content":"*Finding multiple keywords with state and priority search*"},{"lineNumber":854,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":855,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":856,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":857,"author":{"gitId":"Esilocke"},"content":"find task/ on stew done/true p/3"},{"lineNumber":858,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":859,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":860,"author":{"gitId":"Esilocke"},"content":"All tasks with the word \"on\" or \"stew\", case insensitive, in their name or description, with a priority of at least \"medium\", and are currently complete are displayed. +"},{"lineNumber":861,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":862,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":863,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":864,"author":{"gitId":"Esilocke"},"content":"1 tasks listed!"},{"lineNumber":865,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":866,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":867,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d TagListCommand"},{"lineNumber":868,"author":{"gitId":"-"},"content":""},{"lineNumber":869,"author":{"gitId":"-"},"content":"*Listing all the tag in the Address++*"},{"lineNumber":870,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":871,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":872,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":873,"author":{"gitId":"-"},"content":"showtag"},{"lineNumber":874,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":875,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":876,"author":{"gitId":"-"},"content":"Tags contain capital letter will displayed in front. All the tags (with or without capital letter) will be displayed in alphabetical order."},{"lineNumber":877,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":878,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":879,"author":{"gitId":"-"},"content":"All the tags are here: \u003cGEQ2000\u003e \u003cacquaintance\u003e \u003cclassmates\u003e \u003cenemy\u003e \u003cfamily\u003e \u003cfriends\u003e \u003cneighbours\u003e \u003cproject\u003e \u003csecretive\u003e \u003ctutee\u003e"},{"lineNumber":880,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":881,"author":{"gitId":"-"},"content":"*Listing empty tag list with no tags in Address++*"},{"lineNumber":882,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":883,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":884,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":885,"author":{"gitId":"-"},"content":"showtag"},{"lineNumber":886,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":887,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":888,"author":{"gitId":"-"},"content":"There is no tag list."},{"lineNumber":889,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":890,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":891,"author":{"gitId":"-"},"content":"There is no tag!"},{"lineNumber":892,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":893,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d FindTagCommand"},{"lineNumber":894,"author":{"gitId":"-"},"content":""},{"lineNumber":895,"author":{"gitId":"-"},"content":"*Finding person in the Address++ with specific tags*"},{"lineNumber":896,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":897,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":898,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":899,"author":{"gitId":"-"},"content":"find tag/ friends"},{"lineNumber":900,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":901,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":902,"author":{"gitId":"-"},"content":"List all the persons who have tag `friends`."},{"lineNumber":903,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":904,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":905,"author":{"gitId":"-"},"content":"6 persons listed!"},{"lineNumber":906,"author":{"gitId":"-"},"content":""},{"lineNumber":907,"author":{"gitId":"-"},"content":"*Finding person in the Address++ without specific tags*"},{"lineNumber":908,"author":{"gitId":"-"},"content":""},{"lineNumber":909,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":910,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":911,"author":{"gitId":"-"},"content":"find tag/ /friends"},{"lineNumber":912,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":913,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":914,"author":{"gitId":"-"},"content":"List all the persons without tag `friends`."},{"lineNumber":915,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":916,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":917,"author":{"gitId":"-"},"content":"14 persons listed!"},{"lineNumber":918,"author":{"gitId":"-"},"content":""},{"lineNumber":919,"author":{"gitId":"-"},"content":"*Finding person in the Address++ with \"TAGA\" but without \"TAGB\"*"},{"lineNumber":920,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":921,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":922,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":923,"author":{"gitId":"-"},"content":"find tag/ friends /classmates"},{"lineNumber":924,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":925,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":926,"author":{"gitId":"-"},"content":"Persons have tag `friends` but do not have tag `classmates` will be listed."},{"lineNumber":927,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":928,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":929,"author":{"gitId":"-"},"content":"5 persons listed!"},{"lineNumber":930,"author":{"gitId":"-"},"content":""},{"lineNumber":931,"author":{"gitId":"-"},"content":"*Failing to find persons in the Address++ with valid tags*"},{"lineNumber":932,"author":{"gitId":"-"},"content":""},{"lineNumber":933,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":934,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":935,"author":{"gitId":"-"},"content":"find tag/ fff"},{"lineNumber":936,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":937,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":938,"author":{"gitId":"-"},"content":"Although it is a valid tag, there is no person with tag `fff`. Hence, no person will be listed."},{"lineNumber":939,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":940,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":941,"author":{"gitId":"-"},"content":"0 persons listed!"},{"lineNumber":942,"author":{"gitId":"-"},"content":""},{"lineNumber":943,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d DeletePersonCommand"},{"lineNumber":944,"author":{"gitId":"-"},"content":""},{"lineNumber":945,"author":{"gitId":"Esilocke"},"content":"*Deleting a person*"},{"lineNumber":946,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":947,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":948,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":949,"author":{"gitId":"Esilocke"},"content":"delete 20"},{"lineNumber":950,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":951,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":952,"author":{"gitId":"Esilocke"},"content":"The contact at index 20, Myuria Plumley is deleted from the address book. +"},{"lineNumber":953,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":954,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":955,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":956,"author":{"gitId":"Esilocke"},"content":"Deleted Person: Myuria Plumley Phone: 99831115 Email: myuria@example.com Address: #02, Bukit Timah Street 56 Remark: Wears her hair on her right Avatar:  Tags: [project]"},{"lineNumber":957,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":958,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":959,"author":{"gitId":"Esilocke"},"content":"*Deleting a person with an invalid index*"},{"lineNumber":960,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":961,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":962,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":963,"author":{"gitId":"Esilocke"},"content":"delete 2000"},{"lineNumber":964,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":965,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":966,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":967,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":968,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":969,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":970,"author":{"gitId":"Esilocke"},"content":"The person index provided is invalid"},{"lineNumber":971,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":972,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":973,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d DeleteTaskCommand"},{"lineNumber":974,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":975,"author":{"gitId":"Esilocke"},"content":"*Deleting a person*"},{"lineNumber":976,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":977,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":978,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":979,"author":{"gitId":"Esilocke"},"content":"delete task/ 7"},{"lineNumber":980,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":981,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":982,"author":{"gitId":"Esilocke"},"content":"The task at index 7, \"Paper Model for project\" is deleted from the address book. +"},{"lineNumber":983,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":984,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":985,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":986,"author":{"gitId":"Esilocke"},"content":"Deleted Task: Paper Model for project Description: Paper model of Himeji castle for project. Myucel/Myuria twins in charge Deadline: Wed Dec 13 17:00:00 SGT 2017 Priority: Medium Address:  \u003cIncomplete\u003e"},{"lineNumber":987,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":988,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":989,"author":{"gitId":"Esilocke"},"content":"*Deleting a person with an invalid index*"},{"lineNumber":990,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":991,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":992,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":993,"author":{"gitId":"Esilocke"},"content":"delete task/ 7000"},{"lineNumber":994,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":995,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":996,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":997,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":998,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":999,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1000,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1001,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1002,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1003,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d DeleteTagCommand"},{"lineNumber":1004,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1005,"author":{"gitId":"Esilocke"},"content":"*Deleting tags from persons in the Address++*"},{"lineNumber":1006,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1007,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1008,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1009,"author":{"gitId":"Esilocke"},"content":"delete tag/ 1 2 t/friends"},{"lineNumber":1010,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1011,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1012,"author":{"gitId":"Esilocke"},"content":"The tag `friends` for the first person will be deleted. The rest tags remain no change."},{"lineNumber":1013,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1014,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1015,"author":{"gitId":"Esilocke"},"content":"Deleted Tag: [friends]"},{"lineNumber":1016,"author":{"gitId":"-"},"content":""},{"lineNumber":1017,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1018,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1019,"author":{"gitId":"Esilocke"},"content":"delete tag/ t/friends"},{"lineNumber":1020,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1021,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1022,"author":{"gitId":"Esilocke"},"content":"All persons in the Address++ will not have the tag `friends`."},{"lineNumber":1023,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1024,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1025,"author":{"gitId":"Esilocke"},"content":"Deleted Tag: [friends]"},{"lineNumber":1026,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1027,"author":{"gitId":"Esilocke"},"content":"*Failing to delete tags from persons if none of them have the input tags*"},{"lineNumber":1028,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1029,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1030,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1031,"author":{"gitId":"Esilocke"},"content":"delete tag/ 1 2 t/neighbour"},{"lineNumber":1032,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1033,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1034,"author":{"gitId":"Esilocke"},"content":"An error message will display since target persons do not have tag `neighbour`."},{"lineNumber":1035,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1036,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1037,"author":{"gitId":"Esilocke"},"content":"The target persons do not have input tags."},{"lineNumber":1038,"author":{"gitId":"-"},"content":""},{"lineNumber":1039,"author":{"gitId":"Esilocke"},"content":"*Failing to delete tags from persons with invalid index*"},{"lineNumber":1040,"author":{"gitId":"-"},"content":""},{"lineNumber":1041,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1042,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1043,"author":{"gitId":"Esilocke"},"content":"delete tag/ 23 t/friends"},{"lineNumber":1044,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1046,"author":{"gitId":"Esilocke"},"content":"An error message will displayed since there is no 23rd person in the person list."},{"lineNumber":1047,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1048,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"The person index provided is invalid"},{"lineNumber":1050,"author":{"gitId":"-"},"content":""},{"lineNumber":1051,"author":{"gitId":"Esilocke"},"content":"*Failing to delete tags from persons with no input tags*"},{"lineNumber":1052,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1053,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1054,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1055,"author":{"gitId":"Esilocke"},"content":"delete tag/ 1 t/"},{"lineNumber":1056,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1057,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1058,"author":{"gitId":"Esilocke"},"content":"An error message will displayed since there is no input tags."},{"lineNumber":1059,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1060,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1061,"author":{"gitId":"Esilocke"},"content":"Tags names should be alphanumeric"},{"lineNumber":1062,"author":{"gitId":"-"},"content":""},{"lineNumber":1063,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d SelectPersonCommand"},{"lineNumber":1064,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1065,"author":{"gitId":"Esilocke"},"content":"*Selecting a person*"},{"lineNumber":1066,"author":{"gitId":"-"},"content":""},{"lineNumber":1067,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1068,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1069,"author":{"gitId":"Esilocke"},"content":"select 19"},{"lineNumber":1070,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1072,"author":{"gitId":"Esilocke"},"content":"The person at index 19, \"Myucel Plumley\" is selected, and her details are listed in the UI panel. +"},{"lineNumber":1073,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1074,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1075,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1076,"author":{"gitId":"Esilocke"},"content":"Selected Person: 19"},{"lineNumber":1077,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1078,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1079,"author":{"gitId":"Esilocke"},"content":"*Selecting a person with an invalid index*"},{"lineNumber":1080,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1081,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1082,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1083,"author":{"gitId":"Esilocke"},"content":"select 19999"},{"lineNumber":1084,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1085,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1086,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1087,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1088,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1089,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1090,"author":{"gitId":"Esilocke"},"content":"The person index provided is invalid"},{"lineNumber":1091,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1092,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1093,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d SelectTaskCommand"},{"lineNumber":1094,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1095,"author":{"gitId":"Esilocke"},"content":"*Selecting a task*"},{"lineNumber":1096,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1097,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1098,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1099,"author":{"gitId":"Esilocke"},"content":"select task/ 7"},{"lineNumber":1100,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1101,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1102,"author":{"gitId":"Esilocke"},"content":"The task at index 7, \"Paper Model for project\" is selected and its details are shown in the UI panel. +"},{"lineNumber":1103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1104,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1105,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1106,"author":{"gitId":"Esilocke"},"content":"Selected Task: 7"},{"lineNumber":1107,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1108,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1109,"author":{"gitId":"Esilocke"},"content":"*Selecting a task with an invalid index*"},{"lineNumber":1110,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1111,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1112,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1113,"author":{"gitId":"Esilocke"},"content":"select task/ 7000"},{"lineNumber":1114,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1115,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1116,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1117,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1118,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1119,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1120,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1121,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1122,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1123,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d LocateCommand"},{"lineNumber":1124,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1125,"author":{"gitId":"jeffreygohkw"},"content":"*Locating a person\u0027s address on Google Maps*"},{"lineNumber":1126,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1127,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1128,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1129,"author":{"gitId":"jeffreygohkw"},"content":"locate 1"},{"lineNumber":1130,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1131,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1132,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and searches for the first person\u0027s address. +"},{"lineNumber":1133,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1134,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1135,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1136,"author":{"gitId":"jeffreygohkw"},"content":"Searching for Person at Index: 1"},{"lineNumber":1137,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1138,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1139,"author":{"gitId":"jeffreygohkw"},"content":"*Failing to locate a person with no address*"},{"lineNumber":1140,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1141,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1142,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1143,"author":{"gitId":"jeffreygohkw"},"content":"locate 2"},{"lineNumber":1144,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1145,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1146,"author":{"gitId":"jeffreygohkw"},"content":"An error message is printed, as the person at index 2 has no address. +"},{"lineNumber":1147,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1148,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1149,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1150,"author":{"gitId":"jeffreygohkw"},"content":"Person 2 has no Address"},{"lineNumber":1151,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1152,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1153,"author":{"gitId":"Esilocke"},"content":"*Failing to locate a person with a private address*"},{"lineNumber":1154,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1155,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1156,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1157,"author":{"gitId":"Esilocke"},"content":"locate 6"},{"lineNumber":1158,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1159,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1160,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the person at index 6 has a private address. +"},{"lineNumber":1161,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1162,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1163,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1164,"author":{"gitId":"Esilocke"},"content":"Person 6 has a Private Address"},{"lineNumber":1165,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1166,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1167,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d NavigateCommand"},{"lineNumber":1168,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1169,"author":{"gitId":"Esilocke"},"content":"*Navigating from Person to Person*"},{"lineNumber":1170,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1171,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1172,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1173,"author":{"gitId":"Esilocke"},"content":"navigate fp/1 tp/3"},{"lineNumber":1174,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1175,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1176,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from the first person\u0027s address to the third person\u0027s address. +"},{"lineNumber":1177,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1178,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1179,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1180,"author":{"gitId":"Esilocke"},"content":"Navigating from Blk 30 Geylang Street 29, #06-40 to Blk 30 Lorong 3 Serangoon Gardens, #07-18"},{"lineNumber":1181,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1182,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1183,"author":{"gitId":"Esilocke"},"content":"*Navigating from Person to Task*"},{"lineNumber":1184,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1185,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1186,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1187,"author":{"gitId":"Esilocke"},"content":"navigate fp/4 tt/1"},{"lineNumber":1188,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1189,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1190,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from the fourth person\u0027s address to the first task\u0027s address. +"},{"lineNumber":1191,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1192,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1193,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1194,"author":{"gitId":"Esilocke"},"content":"Navigating from Blk 11 Ang Mo Kio Street 74, #11-04 to Blk 45 Aljunied Street 85, #11-31"},{"lineNumber":1195,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1196,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1197,"author":{"gitId":"Esilocke"},"content":"*Navigating from Person to Address*"},{"lineNumber":1198,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1199,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1200,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1201,"author":{"gitId":"Esilocke"},"content":"navigate fp/4 ta/NUS"},{"lineNumber":1202,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1203,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1204,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from the fourth person\u0027s address to NUS. +"},{"lineNumber":1205,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1206,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1207,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1208,"author":{"gitId":"Esilocke"},"content":"Navigating from Blk 11 Ang Mo Kio Street 74, #11-04 to NUS"},{"lineNumber":1209,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1210,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1211,"author":{"gitId":"Esilocke"},"content":"*Navigating from Task to Person*"},{"lineNumber":1212,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1213,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1214,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1215,"author":{"gitId":"Esilocke"},"content":"navigate ft/1 tp/3"},{"lineNumber":1216,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1217,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1218,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from the first task\u0027s address to the third person\u0027s address. +"},{"lineNumber":1219,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1220,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1221,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1222,"author":{"gitId":"Esilocke"},"content":"Navigating from Blk 45 Aljunied Street 85, #11-31 to Blk 30 Lorong 3 Serangoon Gardens, #07-18"},{"lineNumber":1223,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1224,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1225,"author":{"gitId":"Esilocke"},"content":"*Navigating from Task to Task*"},{"lineNumber":1226,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1227,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1228,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1229,"author":{"gitId":"Esilocke"},"content":"navigate ft/1 tt/4"},{"lineNumber":1230,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1231,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1232,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from the first task\u0027s address to the fourth task\u0027s address. +"},{"lineNumber":1233,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1234,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1235,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1236,"author":{"gitId":"Esilocke"},"content":"Navigating from Blk 45 Aljunied Street 85, #11-31 to SR-1, COM-1 NUS"},{"lineNumber":1237,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1238,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1239,"author":{"gitId":"Esilocke"},"content":"*Navigating from Task to Address*"},{"lineNumber":1240,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1241,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1242,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1243,"author":{"gitId":"Esilocke"},"content":"navigate ft/1 ta/NUS"},{"lineNumber":1244,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1245,"author":{"gitId":"jeffreygohkw"},"content":"Expected Result: +"},{"lineNumber":1246,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from the first task\u0027s address to NUS. +"},{"lineNumber":1247,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1248,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1249,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1250,"author":{"gitId":"Esilocke"},"content":"Navigating from Blk 45 Aljunied Street 85, #11-31 to NUS"},{"lineNumber":1251,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1252,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1253,"author":{"gitId":"Esilocke"},"content":"*Navigating from Address to Person*"},{"lineNumber":1254,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1255,"author":{"gitId":"jeffreygohkw"},"content":"Input Command: +"},{"lineNumber":1256,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1257,"author":{"gitId":"Esilocke"},"content":"navigate fa/NUS tp/3"},{"lineNumber":1258,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1259,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1260,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from NUS to the third person\u0027s address. +"},{"lineNumber":1261,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1262,"author":{"gitId":"jeffreygohkw"},"content":"Expected Message: +"},{"lineNumber":1263,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1264,"author":{"gitId":"Esilocke"},"content":"Navigating from NUS to Blk 30 Lorong 3 Serangoon Gardens, #07-18"},{"lineNumber":1265,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1266,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1267,"author":{"gitId":"Esilocke"},"content":"*Navigating from Address to Task*"},{"lineNumber":1268,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1269,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1270,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1271,"author":{"gitId":"Esilocke"},"content":"navigate fa/NTU tt/4"},{"lineNumber":1272,"author":{"gitId":"jeffreygohkw"},"content":"****"},{"lineNumber":1273,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1274,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from NTU to the fourth task\u0027s address. +"},{"lineNumber":1275,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1276,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1277,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1278,"author":{"gitId":"Esilocke"},"content":"Navigating from NTU to SR-1, COM-1 NUS"},{"lineNumber":1279,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1280,"author":{"gitId":"-"},"content":""},{"lineNumber":1281,"author":{"gitId":"Esilocke"},"content":"*Navigating from Address to Address*"},{"lineNumber":1282,"author":{"gitId":"-"},"content":""},{"lineNumber":1283,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1285,"author":{"gitId":"Esilocke"},"content":"navigate fa/SMU ta/NUS"},{"lineNumber":1286,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1287,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1288,"author":{"gitId":"Esilocke"},"content":"Google Maps opens, and provides directions from SMU to NUS. +"},{"lineNumber":1289,"author":{"gitId":"-"},"content":""},{"lineNumber":1290,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1291,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1292,"author":{"gitId":"Esilocke"},"content":"Navigating from SMU to NUS"},{"lineNumber":1293,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1294,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1295,"author":{"gitId":"Esilocke"},"content":"*Failing to navigate if a person has a private address*"},{"lineNumber":1296,"author":{"gitId":"-"},"content":""},{"lineNumber":1297,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1298,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1299,"author":{"gitId":"Esilocke"},"content":"navigate fp/6 ta/Changi Airport"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1301,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1302,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the person at index 6 has a private address. +"},{"lineNumber":1303,"author":{"gitId":"-"},"content":""},{"lineNumber":1304,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1305,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1306,"author":{"gitId":"Esilocke"},"content":"Address of the Person at index 6 is private."},{"lineNumber":1307,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1308,"author":{"gitId":"-"},"content":""},{"lineNumber":1309,"author":{"gitId":"Esilocke"},"content":"*Failing to navigate if a person has no address*"},{"lineNumber":1310,"author":{"gitId":"-"},"content":""},{"lineNumber":1311,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1312,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1313,"author":{"gitId":"Esilocke"},"content":"navigate fp/8 ta/Changi Airport"},{"lineNumber":1314,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1315,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1316,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the person at index 8 has no address. +"},{"lineNumber":1317,"author":{"gitId":"-"},"content":""},{"lineNumber":1318,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1319,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1320,"author":{"gitId":"Esilocke"},"content":"Person at index 8 does not have an address."},{"lineNumber":1321,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1322,"author":{"gitId":"-"},"content":""},{"lineNumber":1323,"author":{"gitId":"Esilocke"},"content":"*Failing to navigate if a task has no address*"},{"lineNumber":1324,"author":{"gitId":"-"},"content":""},{"lineNumber":1325,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1326,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1327,"author":{"gitId":"Esilocke"},"content":"navigate ft/2 ta/Changi Airport"},{"lineNumber":1328,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1329,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1330,"author":{"gitId":"Esilocke"},"content":"An error message is printed, as the task at index 2 has no address. +"},{"lineNumber":1331,"author":{"gitId":"-"},"content":""},{"lineNumber":1332,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1333,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1334,"author":{"gitId":"Esilocke"},"content":"Task at index 2 does not have an address."},{"lineNumber":1335,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1336,"author":{"gitId":"-"},"content":""},{"lineNumber":1337,"author":{"gitId":"Esilocke"},"content":"*Error when no arguments are entered*"},{"lineNumber":1338,"author":{"gitId":"-"},"content":""},{"lineNumber":1339,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1340,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1341,"author":{"gitId":"Esilocke"},"content":"navigate"},{"lineNumber":1342,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1343,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1344,"author":{"gitId":"Esilocke"},"content":"The command fails, printing a message to tell the user of the proper input."},{"lineNumber":1345,"author":{"gitId":"-"},"content":""},{"lineNumber":1346,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1347,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1348,"author":{"gitId":"Esilocke"},"content":"Invalid command format! +"},{"lineNumber":1349,"author":{"gitId":"Esilocke"},"content":"navigate: Get directions from one address to another. +"},{"lineNumber":1350,"author":{"gitId":"Esilocke"},"content":"Parameters: [fp/INDEX] OR [ft/INDEX] (must be a positive integer) OR [fa/ADDRESS] (Only one of three) AND [tp/INDEX] OR [tt/INDEX] (must be a positive integer) OR [ta/ADDRESS] (Only one of three) +"},{"lineNumber":1351,"author":{"gitId":"Esilocke"},"content":"Example: navigate fp/2 ta/University Town"},{"lineNumber":1352,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1353,"author":{"gitId":"-"},"content":""},{"lineNumber":1354,"author":{"gitId":"Esilocke"},"content":"*Error when no address after a fa/ or ta/ prefix is entered*"},{"lineNumber":1355,"author":{"gitId":"-"},"content":""},{"lineNumber":1356,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1357,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1358,"author":{"gitId":"Esilocke"},"content":"navigate fa/ tp/1"},{"lineNumber":1359,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1360,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1361,"author":{"gitId":"Esilocke"},"content":"The command fails, printing a message to tell the user of the proper input."},{"lineNumber":1362,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1363,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1364,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1365,"author":{"gitId":"Esilocke"},"content":"Location can take any value, and it should not be blank"},{"lineNumber":1366,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1367,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1368,"author":{"gitId":"Esilocke"},"content":"*Error when no integer after a fp/, tp/, ft/ or tt/ prefix is entered*"},{"lineNumber":1369,"author":{"gitId":"-"},"content":""},{"lineNumber":1370,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1371,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1372,"author":{"gitId":"Esilocke"},"content":"navigate ft/ tp/1"},{"lineNumber":1373,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1375,"author":{"gitId":"Esilocke"},"content":"The command fails, printing a message to tell the user of the proper input."},{"lineNumber":1376,"author":{"gitId":"-"},"content":""},{"lineNumber":1377,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1378,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1379,"author":{"gitId":"Esilocke"},"content":"Index is not a non-zero unsigned integer."},{"lineNumber":1380,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1381,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1382,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d SetCompleteCommand"},{"lineNumber":1383,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1384,"author":{"gitId":"Esilocke"},"content":"*Marking an existing task as complete*"},{"lineNumber":1385,"author":{"gitId":"-"},"content":""},{"lineNumber":1386,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1387,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1388,"author":{"gitId":"Esilocke"},"content":"setcomplete 3"},{"lineNumber":1389,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1391,"author":{"gitId":"Esilocke"},"content":"The task at index 3, \"Visit David\u0027s house\" is marked as completed. +"},{"lineNumber":1392,"author":{"gitId":"-"},"content":""},{"lineNumber":1393,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1394,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1395,"author":{"gitId":"Esilocke"},"content":"Marked Task as completed: Visit David\u0027s house Description: Visit to David Li\u0027s house next Saturday Deadline: Sat Nov 18 12:00:00 SGT 2017 Priority: Low Address: Blk 436 Serangoon Gardens Street 26, #16-43 \u003cIncomplete\u003e"},{"lineNumber":1396,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1397,"author":{"gitId":"-"},"content":""},{"lineNumber":1398,"author":{"gitId":"Esilocke"},"content":"*Marking an already complete task as complete*"},{"lineNumber":1399,"author":{"gitId":"-"},"content":""},{"lineNumber":1400,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1401,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1402,"author":{"gitId":"Esilocke"},"content":"setcomplete 3"},{"lineNumber":1403,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1405,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the task is already complete +"},{"lineNumber":1406,"author":{"gitId":"-"},"content":""},{"lineNumber":1407,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1408,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1409,"author":{"gitId":"Esilocke"},"content":"The specified task is already completed"},{"lineNumber":1410,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1411,"author":{"gitId":"-"},"content":""},{"lineNumber":1412,"author":{"gitId":"Esilocke"},"content":"*Marking a task with an invalid index*"},{"lineNumber":1413,"author":{"gitId":"-"},"content":""},{"lineNumber":1414,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1415,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1416,"author":{"gitId":"Esilocke"},"content":"setcomplete 7000"},{"lineNumber":1417,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1418,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1419,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1420,"author":{"gitId":"-"},"content":""},{"lineNumber":1421,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1422,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1423,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1424,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1425,"author":{"gitId":"-"},"content":""},{"lineNumber":1426,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d SetInompleteCommand"},{"lineNumber":1427,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1428,"author":{"gitId":"Esilocke"},"content":"*Marking an existing task as incomplete*"},{"lineNumber":1429,"author":{"gitId":"-"},"content":""},{"lineNumber":1430,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1431,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1432,"author":{"gitId":"Esilocke"},"content":"setincomplete 1"},{"lineNumber":1433,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1434,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1435,"author":{"gitId":"Esilocke"},"content":"The task at index 1, \"Tuition\" is marked as incomplete. +"},{"lineNumber":1436,"author":{"gitId":"-"},"content":""},{"lineNumber":1437,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1438,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1439,"author":{"gitId":"Esilocke"},"content":"Marked Task as incomplete: Tuition Description: Roy\u0027s math tuition on Friday Deadline: Fri Nov 10 17:00:00 SGT 2017 Priority: Medium Address: Blk 45 Aljunied Street 85, #11-31 \u003cComplete\u003e"},{"lineNumber":1440,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1441,"author":{"gitId":"-"},"content":""},{"lineNumber":1442,"author":{"gitId":"Esilocke"},"content":"*Marking an already incomplete task as incomplete*"},{"lineNumber":1443,"author":{"gitId":"-"},"content":""},{"lineNumber":1444,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1445,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1446,"author":{"gitId":"Esilocke"},"content":"setincomplete 1"},{"lineNumber":1447,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1448,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1449,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the task is already incomplete +"},{"lineNumber":1450,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1451,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1452,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1453,"author":{"gitId":"Esilocke"},"content":"The specified task is already incomplete"},{"lineNumber":1454,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1455,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1456,"author":{"gitId":"Esilocke"},"content":"*Marking a task with an invalid index*"},{"lineNumber":1457,"author":{"gitId":"-"},"content":""},{"lineNumber":1458,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1459,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1460,"author":{"gitId":"Esilocke"},"content":"setincomplete 7000"},{"lineNumber":1461,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1462,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1463,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1464,"author":{"gitId":"-"},"content":""},{"lineNumber":1465,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1466,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1467,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1468,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1469,"author":{"gitId":"-"},"content":""},{"lineNumber":1470,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d AssignCommand"},{"lineNumber":1471,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1472,"author":{"gitId":"Esilocke"},"content":"*Assigning 1 contact to a task*"},{"lineNumber":1473,"author":{"gitId":"-"},"content":""},{"lineNumber":1474,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1475,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1476,"author":{"gitId":"Esilocke"},"content":"assign 19 to/1"},{"lineNumber":1477,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1478,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1479,"author":{"gitId":"Esilocke"},"content":"The contact at index 1, Myucel Plumley is assigned to the first task, Tuition. The task now has 4 people assigned to it instead of 3. +"},{"lineNumber":1480,"author":{"gitId":"-"},"content":""},{"lineNumber":1481,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1482,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1483,"author":{"gitId":"Esilocke"},"content":"Assigned 1 people to  +"},{"lineNumber":1484,"author":{"gitId":"Esilocke"},"content":"Tuition Description: Roy\u0027s math tuition on Friday Deadline: Fri Nov 10 17:00:00 SGT 2017 Priority: Medium Address: Blk 45 Aljunied Street 85, #11-31 \u003cComplete\u003e"},{"lineNumber":1485,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1486,"author":{"gitId":"-"},"content":""},{"lineNumber":1487,"author":{"gitId":"Esilocke"},"content":"*Assigning multiple contacts to a task*"},{"lineNumber":1488,"author":{"gitId":"-"},"content":""},{"lineNumber":1489,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1490,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1491,"author":{"gitId":"Esilocke"},"content":"assign 18 20 to/1"},{"lineNumber":1492,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1493,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1494,"author":{"gitId":"Esilocke"},"content":"The contacts at index 18 and 20, Myuria Plumley and Clarissa Liselotte are assigned to the first task, Tuition. The task now has 6 people assigned to it instead of 4. +"},{"lineNumber":1495,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1496,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1497,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1498,"author":{"gitId":"Esilocke"},"content":"Assigned 2 people to  +"},{"lineNumber":1499,"author":{"gitId":"Esilocke"},"content":"Tuition Description: Roy\u0027s math tuition on Friday Deadline: Fri Nov 10 17:00:00 SGT 2017 Priority: Medium Address: Blk 45 Aljunied Street 85, #11-31 \u003cComplete\u003e"},{"lineNumber":1500,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1501,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1502,"author":{"gitId":"Esilocke"},"content":"*Assigning contacts who are already assigned to a task*"},{"lineNumber":1503,"author":{"gitId":"-"},"content":""},{"lineNumber":1504,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1505,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1506,"author":{"gitId":"Esilocke"},"content":"assign 19 to/1"},{"lineNumber":1507,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1508,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1509,"author":{"gitId":"Esilocke"},"content":"Myucel Plumley was already assigned to the task Tuition. An error message is printed out as she is already assigned to the task. +"},{"lineNumber":1510,"author":{"gitId":"-"},"content":""},{"lineNumber":1511,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1512,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1513,"author":{"gitId":"Esilocke"},"content":"All the specified persons are already assigned to this task"},{"lineNumber":1514,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1515,"author":{"gitId":"-"},"content":""},{"lineNumber":1516,"author":{"gitId":"Esilocke"},"content":"*Assigning no contacts to a task*"},{"lineNumber":1517,"author":{"gitId":"-"},"content":""},{"lineNumber":1518,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1519,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1520,"author":{"gitId":"Esilocke"},"content":"assign to/1"},{"lineNumber":1521,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1522,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1523,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as no person indexes were specified."},{"lineNumber":1524,"author":{"gitId":"-"},"content":""},{"lineNumber":1525,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1526,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1527,"author":{"gitId":"Esilocke"},"content":"At least 1 person index must be specified"},{"lineNumber":1528,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1529,"author":{"gitId":"-"},"content":""},{"lineNumber":1530,"author":{"gitId":"Esilocke"},"content":"*Assigning to a task with an invalid index*"},{"lineNumber":1531,"author":{"gitId":"-"},"content":""},{"lineNumber":1532,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1533,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1534,"author":{"gitId":"Esilocke"},"content":"assign 5 to/7000"},{"lineNumber":1535,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1536,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1537,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1538,"author":{"gitId":"-"},"content":""},{"lineNumber":1539,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1540,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1541,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1542,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1543,"author":{"gitId":"-"},"content":""},{"lineNumber":1544,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d DismissCommand"},{"lineNumber":1545,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1546,"author":{"gitId":"Esilocke"},"content":"*Dismissing 1 contact from a task*"},{"lineNumber":1547,"author":{"gitId":"-"},"content":""},{"lineNumber":1548,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1550,"author":{"gitId":"Esilocke"},"content":"dismiss 1 from/1"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1552,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1553,"author":{"gitId":"Esilocke"},"content":"The contact at index 1, Alex Yeoh is assigned to the first task, Tuition. The task now has 2 people assigned to it instead of 3. +"},{"lineNumber":1554,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1555,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1556,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1557,"author":{"gitId":"Esilocke"},"content":"Dismissed 1 people from task +"},{"lineNumber":1558,"author":{"gitId":"Esilocke"},"content":"Tuition Description: Roy\u0027s math tuition on Friday Deadline: Fri Nov 10 17:00:00 SGT 2017 Priority: Medium Address: Blk 45 Aljunied Street 85, #11-31 \u003cComplete\u003e"},{"lineNumber":1559,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1560,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1561,"author":{"gitId":"Esilocke"},"content":"*Dismissing multiple contacts from a task*"},{"lineNumber":1562,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1563,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1564,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1565,"author":{"gitId":"Esilocke"},"content":"dismiss 6 8 from/1"},{"lineNumber":1566,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1567,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1568,"author":{"gitId":"Esilocke"},"content":"The contacts at index 6 and 8, David Ng and Ima Hidearu are assigned to the first task, Tuition. The task now has 0 people assigned to it instead of 2. +"},{"lineNumber":1569,"author":{"gitId":"-"},"content":""},{"lineNumber":1570,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1571,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1572,"author":{"gitId":"Esilocke"},"content":"Dismissed 2 people from task  +"},{"lineNumber":1573,"author":{"gitId":"Esilocke"},"content":"Tuition Description: Roy\u0027s math tuition on Friday Deadline: Fri Nov 10 17:00:00 SGT 2017 Priority: Medium Address: Blk 45 Aljunied Street 85, #11-31 \u003cComplete\u003e"},{"lineNumber":1574,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1575,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1576,"author":{"gitId":"Esilocke"},"content":"*Dismissing contacts who are already assigned from a task*"},{"lineNumber":1577,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1578,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1579,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1580,"author":{"gitId":"Esilocke"},"content":"dismiss 1 from/1"},{"lineNumber":1581,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1582,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1583,"author":{"gitId":"Esilocke"},"content":"There are no contacts assigned to the task Tuition."},{"lineNumber":1584,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as none of the specified contacts were assigned to the task."},{"lineNumber":1585,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1586,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1587,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1588,"author":{"gitId":"Esilocke"},"content":"None of the specified persons are assigned to this task"},{"lineNumber":1589,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1590,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1591,"author":{"gitId":"Esilocke"},"content":"*Dismissing no contacts from a task*"},{"lineNumber":1592,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1593,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1594,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1595,"author":{"gitId":"Esilocke"},"content":"dismiss from/1"},{"lineNumber":1596,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1597,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1598,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as no person indexes were specified."},{"lineNumber":1599,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1600,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1601,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1602,"author":{"gitId":"Esilocke"},"content":"At least 1 person index must be specified"},{"lineNumber":1603,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1604,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1605,"author":{"gitId":"Esilocke"},"content":"*Dismissing from a task with an invalid index*"},{"lineNumber":1606,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1607,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1608,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1609,"author":{"gitId":"Esilocke"},"content":"dismiss 5 from/7000"},{"lineNumber":1610,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1611,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1612,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1613,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1614,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1615,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1616,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1617,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1618,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1619,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d ViewAssignCommand"},{"lineNumber":1620,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1621,"author":{"gitId":"Esilocke"},"content":"*Viewing a task with no persons assigned to it*"},{"lineNumber":1622,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1623,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1624,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1625,"author":{"gitId":"Esilocke"},"content":"viewassign 2"},{"lineNumber":1626,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1627,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1628,"author":{"gitId":"Esilocke"},"content":"No contacts are listed +"},{"lineNumber":1629,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1630,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1631,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1632,"author":{"gitId":"-"},"content":"0 persons listed!"},{"lineNumber":1633,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1634,"author":{"gitId":"-"},"content":""},{"lineNumber":1635,"author":{"gitId":"Esilocke"},"content":"*Viewing a task with some persons assigned to it*"},{"lineNumber":1636,"author":{"gitId":"-"},"content":""},{"lineNumber":1637,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1638,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1639,"author":{"gitId":"Esilocke"},"content":"viewassign 1"},{"lineNumber":1640,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1641,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1642,"author":{"gitId":"Esilocke"},"content":"3 contacts are listed, Alex Yeoh, David Ng, Ima Hidearu +"},{"lineNumber":1643,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1644,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1645,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1646,"author":{"gitId":"Esilocke"},"content":"3 persons listed!"},{"lineNumber":1647,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1648,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1649,"author":{"gitId":"Esilocke"},"content":"*Viewing from a task with an invalid index*"},{"lineNumber":1650,"author":{"gitId":"-"},"content":""},{"lineNumber":1651,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1652,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1653,"author":{"gitId":"Esilocke"},"content":"viewassign 99999"},{"lineNumber":1654,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1655,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1656,"author":{"gitId":"Esilocke"},"content":"An error message is printed out as the index is invalid. +"},{"lineNumber":1657,"author":{"gitId":"-"},"content":""},{"lineNumber":1658,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1659,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1660,"author":{"gitId":"Esilocke"},"content":"The task index provided is invalid"},{"lineNumber":1661,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1662,"author":{"gitId":"-"},"content":""},{"lineNumber":1663,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d ThemeCommand"},{"lineNumber":1664,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1665,"author":{"gitId":"Esilocke"},"content":"*Changing the theme of the address book*"},{"lineNumber":1666,"author":{"gitId":"-"},"content":""},{"lineNumber":1667,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1668,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1669,"author":{"gitId":"Esilocke"},"content":"theme light"},{"lineNumber":1670,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1671,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1672,"author":{"gitId":"Esilocke"},"content":"The address book\u0027s colour scheme changes to a bright colour. +"},{"lineNumber":1673,"author":{"gitId":"-"},"content":""},{"lineNumber":1674,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1675,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1676,"author":{"gitId":"Esilocke"},"content":"Theme Changed to: light"},{"lineNumber":1677,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1678,"author":{"gitId":"-"},"content":""},{"lineNumber":1679,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1680,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1681,"author":{"gitId":"Esilocke"},"content":"theme dark"},{"lineNumber":1682,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1683,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1684,"author":{"gitId":"Esilocke"},"content":"The address book\u0027s colour scheme changes to a dark colour.+"},{"lineNumber":1685,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1686,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1687,"author":{"gitId":"Esilocke"},"content":"Theme Changed to: dark"},{"lineNumber":1688,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1689,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1690,"author":{"gitId":"Esilocke"},"content":"*Error when no arguments are entered*"},{"lineNumber":1691,"author":{"gitId":"-"},"content":""},{"lineNumber":1692,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1693,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1694,"author":{"gitId":"Esilocke"},"content":"theme"},{"lineNumber":1695,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1696,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1697,"author":{"gitId":"Esilocke"},"content":"The command fails, printing a message to tell the user of the proper input."},{"lineNumber":1698,"author":{"gitId":"-"},"content":""},{"lineNumber":1699,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1700,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1701,"author":{"gitId":"Esilocke"},"content":"Invalid command format! +"},{"lineNumber":1702,"author":{"gitId":"Esilocke"},"content":"theme: Sets the theme based on the specified style. +"},{"lineNumber":1703,"author":{"gitId":"Esilocke"},"content":"Parameters: STYLE +"},{"lineNumber":1704,"author":{"gitId":"Esilocke"},"content":"Example: theme dark"},{"lineNumber":1705,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1706,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1707,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d HistoryCommand"},{"lineNumber":1708,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1709,"author":{"gitId":"Esilocke"},"content":"*Lists all commands done in reverser chronological order*"},{"lineNumber":1710,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1711,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1712,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1713,"author":{"gitId":"Esilocke"},"content":"notacommand +"},{"lineNumber":1714,"author":{"gitId":"Esilocke"},"content":"alsonotacommand +"},{"lineNumber":1715,"author":{"gitId":"Esilocke"},"content":"history"},{"lineNumber":1716,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1717,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1718,"author":{"gitId":"Esilocke"},"content":"The two previous commands are listed in the box below the command line in reverse chronological order from top to bottom. +"},{"lineNumber":1719,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1720,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1721,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1722,"author":{"gitId":"Esilocke"},"content":"Entered commands (from most recent to earliest): +"},{"lineNumber":1723,"author":{"gitId":"Esilocke"},"content":"alsonotacommand +"},{"lineNumber":1724,"author":{"gitId":"Esilocke"},"content":"notacommand"},{"lineNumber":1725,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1726,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1727,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d UndoCommand"},{"lineNumber":1728,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1729,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1730,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1731,"author":{"gitId":"Esilocke"},"content":"delete 1 +"},{"lineNumber":1732,"author":{"gitId":"Esilocke"},"content":"undo"},{"lineNumber":1733,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1734,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1735,"author":{"gitId":"Esilocke"},"content":"The first person gets deleted from the address book, but gets restored after an undo. +"},{"lineNumber":1736,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1737,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1738,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1739,"author":{"gitId":"Esilocke"},"content":"Undo success!"},{"lineNumber":1740,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1741,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1742,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1743,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1744,"author":{"gitId":"Esilocke"},"content":"undo +"},{"lineNumber":1745,"author":{"gitId":"Esilocke"},"content":"add n/Reed Richards p/94444444 e/reed@futurefoundation.com a/Baxter Building r/Loves to stretch +"},{"lineNumber":1746,"author":{"gitId":"Esilocke"},"content":"undo"},{"lineNumber":1747,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1748,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1749,"author":{"gitId":"Esilocke"},"content":"A new person is added, then removed with an undo."},{"lineNumber":1750,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1751,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1752,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1753,"author":{"gitId":"Esilocke"},"content":"Undo success!"},{"lineNumber":1754,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1755,"author":{"gitId":"-"},"content":""},{"lineNumber":1756,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d UnfavouriteCommand"},{"lineNumber":1757,"author":{"gitId":"-"},"content":""},{"lineNumber":1758,"author":{"gitId":"-"},"content":"*Setting a favoured person in the Address++ to be the unfavoured person*"},{"lineNumber":1759,"author":{"gitId":"-"},"content":""},{"lineNumber":1760,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1761,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1762,"author":{"gitId":"-"},"content":"list +"},{"lineNumber":1763,"author":{"gitId":"-"},"content":"unfavourite 1"},{"lineNumber":1764,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1765,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1766,"author":{"gitId":"-"},"content":"The 1st person in the Address++ will be unfavoured and the heart picture will disappear."},{"lineNumber":1767,"author":{"gitId":"-"},"content":""},{"lineNumber":1768,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1769,"author":{"gitId":"-"},"content":"Unfavourited Person: Alex Yeoh Phone: 87438807 Email: alexyeoh@example.com Address: Blk 30 Geylang Street 29, #06-40 Remark: Cheerful lad Avatar:  Tags: [friends]"},{"lineNumber":1770,"author":{"gitId":"-"},"content":""},{"lineNumber":1771,"author":{"gitId":"-"},"content":"*Failing to set a unfavored person if he has not been favoured*"},{"lineNumber":1772,"author":{"gitId":"-"},"content":""},{"lineNumber":1773,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1774,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1775,"author":{"gitId":"-"},"content":"list +"},{"lineNumber":1776,"author":{"gitId":"-"},"content":"unfavourite 2"},{"lineNumber":1777,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1778,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1779,"author":{"gitId":"-"},"content":"An error message will display since the second person in the Address++ has bot been favoured."},{"lineNumber":1780,"author":{"gitId":"-"},"content":""},{"lineNumber":1781,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1782,"author":{"gitId":"-"},"content":"Person is not favourited yet."},{"lineNumber":1783,"author":{"gitId":"-"},"content":""},{"lineNumber":1784,"author":{"gitId":"-"},"content":"*Failing to set a unfavoured person with invalid index*"},{"lineNumber":1785,"author":{"gitId":"-"},"content":""},{"lineNumber":1786,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1787,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1788,"author":{"gitId":"-"},"content":"unfavourite 56"},{"lineNumber":1789,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1790,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1791,"author":{"gitId":"-"},"content":"An error message will display since there is no 56th person in the current list."},{"lineNumber":1792,"author":{"gitId":"-"},"content":""},{"lineNumber":1793,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1794,"author":{"gitId":"-"},"content":"The person index provided is invalid"},{"lineNumber":1795,"author":{"gitId":"-"},"content":""},{"lineNumber":1796,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d RedoCommand"},{"lineNumber":1797,"author":{"gitId":"-"},"content":""},{"lineNumber":1798,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1799,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1800,"author":{"gitId":"Esilocke"},"content":"delete 1 +"},{"lineNumber":1801,"author":{"gitId":"Esilocke"},"content":"undo +"},{"lineNumber":1802,"author":{"gitId":"Esilocke"},"content":"redo"},{"lineNumber":1803,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1804,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1805,"author":{"gitId":"Esilocke"},"content":"The first person gets deleted from the address book, but gets restored after an undo and deleted again after a redo. +"},{"lineNumber":1806,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1807,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1808,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1809,"author":{"gitId":"Esilocke"},"content":"Redo success!"},{"lineNumber":1810,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1811,"author":{"gitId":"-"},"content":""},{"lineNumber":1812,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1813,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1814,"author":{"gitId":"Esilocke"},"content":"undo +"},{"lineNumber":1815,"author":{"gitId":"Esilocke"},"content":"add n/Peter Parker p/92241783 e/ceo@parkerindustries.com a/New York City r/Top 10 smartest people in the world +"},{"lineNumber":1816,"author":{"gitId":"Esilocke"},"content":"undo +"},{"lineNumber":1817,"author":{"gitId":"Esilocke"},"content":"redo"},{"lineNumber":1818,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1819,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1820,"author":{"gitId":"Esilocke"},"content":"A new person is added, then removed with an undo and added again with a redo."},{"lineNumber":1821,"author":{"gitId":"-"},"content":""},{"lineNumber":1822,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1823,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1824,"author":{"gitId":"Esilocke"},"content":"Redo success!"},{"lineNumber":1825,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1826,"author":{"gitId":"-"},"content":""},{"lineNumber":1827,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1828,"author":{"gitId":"Esilocke"},"content":"You may wish to use `undo` to restore the address book to its original state before continuing with testing."},{"lineNumber":1829,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1830,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d ClearCommand"},{"lineNumber":1831,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1832,"author":{"gitId":"Esilocke"},"content":"*Clearing all entries*"},{"lineNumber":1833,"author":{"gitId":"-"},"content":""},{"lineNumber":1834,"author":{"gitId":"-"},"content":"Input Command: +"},{"lineNumber":1835,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1836,"author":{"gitId":"Esilocke"},"content":"clear"},{"lineNumber":1837,"author":{"gitId":"-"},"content":"****"},{"lineNumber":1838,"author":{"gitId":"-"},"content":"Expected Result: +"},{"lineNumber":1839,"author":{"gitId":"Esilocke"},"content":"All persons and tasks vanish from the leftmost and middle columns, leaving them empty. +"},{"lineNumber":1840,"author":{"gitId":"-"},"content":""},{"lineNumber":1841,"author":{"gitId":"-"},"content":"Expected Message: +"},{"lineNumber":1842,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1843,"author":{"gitId":"Esilocke"},"content":"Address book has been cleared!"},{"lineNumber":1844,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1845,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1846,"author":{"gitId":"Esilocke"},"content":"*Clearing persons only*"},{"lineNumber":1847,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1848,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1849,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1850,"author":{"gitId":"Esilocke"},"content":"clear person/"},{"lineNumber":1851,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1852,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1853,"author":{"gitId":"Esilocke"},"content":"All persons vanish from the leftmost column, leaving them empty. +"},{"lineNumber":1854,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1855,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1856,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1857,"author":{"gitId":"Esilocke"},"content":"All contacts have been cleared!"},{"lineNumber":1858,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1859,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1860,"author":{"gitId":"Esilocke"},"content":"*Clearing tasks only*"},{"lineNumber":1861,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1862,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1863,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1864,"author":{"gitId":"Esilocke"},"content":"clear task/"},{"lineNumber":1865,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1866,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1867,"author":{"gitId":"Esilocke"},"content":"All tasks vanish from the middle columns, leaving them empty. +"},{"lineNumber":1868,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1869,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1870,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1871,"author":{"gitId":"Esilocke"},"content":"All tasks have been cleared!"},{"lineNumber":1872,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1873,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1874,"author":{"gitId":"Esilocke"},"content":"*Both person and task specified*"},{"lineNumber":1875,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1876,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1877,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1878,"author":{"gitId":"Esilocke"},"content":"clear task/ person/ task/ task/ person/"},{"lineNumber":1879,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1880,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1881,"author":{"gitId":"Esilocke"},"content":"All persons and tasks vanish from the leftmost and middle columns, leaving them empty. +"},{"lineNumber":1882,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1883,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1884,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1885,"author":{"gitId":"Esilocke"},"content":"Address book has been cleared!"},{"lineNumber":1886,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1887,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1888,"author":{"gitId":"Esilocke"},"content":"[NOTE]"},{"lineNumber":1889,"author":{"gitId":"Esilocke"},"content":"You may wish to use `undo` to restore the address book before continuing with testing."},{"lineNumber":1890,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1891,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d OpenCommand and SaveAsCommand"},{"lineNumber":1892,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1893,"author":{"gitId":"Esilocke"},"content":"*Saves data as a new .xml file and switches to that file*"},{"lineNumber":1894,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1895,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1896,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1897,"author":{"gitId":"Esilocke"},"content":"save +"},{"lineNumber":1898,"author":{"gitId":"Esilocke"},"content":"Navigate to the file path where you saved [W09-B2][Address++]SampleData.xml. +"},{"lineNumber":1899,"author":{"gitId":"Esilocke"},"content":"Save the new save file as test.xml. +"},{"lineNumber":1900,"author":{"gitId":"Esilocke"},"content":"Click save."},{"lineNumber":1901,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1902,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1903,"author":{"gitId":"Esilocke"},"content":"Expected Result: The file path in the bottom right corner changes to the location of where you saved the file followed by test.xml. +"},{"lineNumber":1904,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1905,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1906,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1907,"author":{"gitId":"Esilocke"},"content":"Successfully saved file."},{"lineNumber":1908,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1909,"author":{"gitId":"Esilocke"},"content":"*Opens and switches to a new .xml save file*"},{"lineNumber":1910,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1911,"author":{"gitId":"Esilocke"},"content":"Following the above save command:"},{"lineNumber":1912,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1913,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1914,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1915,"author":{"gitId":"Esilocke"},"content":"clear"},{"lineNumber":1916,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1917,"author":{"gitId":"Esilocke"},"content":"To differentiate the test.xml with the [W09-B2][Address++]SampleData.xml. +"},{"lineNumber":1918,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1919,"author":{"gitId":"Esilocke"},"content":"Expected Result: +"},{"lineNumber":1920,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1921,"author":{"gitId":"Esilocke"},"content":"The address book contains no more persons or tasks."},{"lineNumber":1922,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1923,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1924,"author":{"gitId":"Esilocke"},"content":"Input Command: +"},{"lineNumber":1925,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1926,"author":{"gitId":"Esilocke"},"content":"open +"},{"lineNumber":1927,"author":{"gitId":"Esilocke"},"content":"Navigate to the file path where you saved [W09-B2][Address++]SampleData.xml and select [W09-B2][Address++]SampleData.xml. +"},{"lineNumber":1928,"author":{"gitId":"Esilocke"},"content":"Click open."},{"lineNumber":1929,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1930,"author":{"gitId":"Esilocke"},"content":"Expected Result: The file path in the bottom right corner changes to the location of where you saved the [W09-B2][Address++]SampleData.xml followed by the name [W09-B2][Address++]SampleData.xml. +"},{"lineNumber":1931,"author":{"gitId":"Esilocke"},"content":"The original data is restored in the address book. +"},{"lineNumber":1932,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1933,"author":{"gitId":"Esilocke"},"content":"Expected Message: +"},{"lineNumber":1934,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1935,"author":{"gitId":"Esilocke"},"content":"Successfully opened file."},{"lineNumber":1936,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1937,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1938,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d ExitCommand"},{"lineNumber":1939,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1940,"author":{"gitId":"Esilocke"},"content":"*Exits Address++*"},{"lineNumber":1941,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1942,"author":{"gitId":"Esilocke"},"content":"Input Command:"},{"lineNumber":1943,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1944,"author":{"gitId":"Esilocke"},"content":"exit"},{"lineNumber":1945,"author":{"gitId":"Esilocke"},"content":"****"},{"lineNumber":1946,"author":{"gitId":"Esilocke"},"content":"Expected Result: Address++ closes."},{"lineNumber":1947,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1948,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1949,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1950,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1951,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1952,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1953,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1954,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1955,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":1956,"author":{"gitId":"-"},"content":""},{"lineNumber":1957,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Sort Command"},{"lineNumber":1958,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":1959,"author":{"gitId":"charlesgoh"},"content":"*Sorts persons by name in ascending order*"},{"lineNumber":1960,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1961,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":1962,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1963,"author":{"gitId":"charlesgoh"},"content":"sort person name asc"},{"lineNumber":1964,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1965,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":1966,"author":{"gitId":"charlesgoh"},"content":"Person list panel will sort all persons by their names in ascending order +"},{"lineNumber":1967,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1968,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":1969,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1970,"author":{"gitId":"charlesgoh"},"content":"All persons in address book successfully sorted"},{"lineNumber":1971,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1972,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1973,"author":{"gitId":"charlesgoh"},"content":"*Sorts tasks by priority in descending order*"},{"lineNumber":1974,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1975,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":1976,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1977,"author":{"gitId":"charlesgoh"},"content":"sort task priority desc +"},{"lineNumber":1978,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1979,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":1980,"author":{"gitId":"charlesgoh"},"content":"Task list panel will sort all tasks by their priorities in descending order +"},{"lineNumber":1981,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1982,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":1983,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1984,"author":{"gitId":"charlesgoh"},"content":"All tasks in address book successfully sorted"},{"lineNumber":1985,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1986,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1987,"author":{"gitId":"charlesgoh"},"content":"*Incorrect Input Format*"},{"lineNumber":1988,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1989,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":1990,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1991,"author":{"gitId":"charlesgoh"},"content":"sort task priority desc +"},{"lineNumber":1992,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1993,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":1994,"author":{"gitId":"charlesgoh"},"content":"Error message with usage message will appear in the result command box +"},{"lineNumber":1995,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":1996,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":1997,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":1998,"author":{"gitId":"charlesgoh"},"content":"Invalid command format! +"},{"lineNumber":1999,"author":{"gitId":"charlesgoh"},"content":"sort: Sorts all persons or all tasks by chosen field [NAME/PHONE/EMAIL/ADDRESS -- PRIORITY/DEADLINE] by [ASC/DESC] order. Case insensitive +"},{"lineNumber":2000,"author":{"gitId":"charlesgoh"},"content":"Parameters: KEYWORD [LIST] [FIELD] [ORDER] +"},{"lineNumber":2001,"author":{"gitId":"charlesgoh"},"content":"Example: sort person email desc +"},{"lineNumber":2002,"author":{"gitId":"charlesgoh"},"content":"Example 2: sort task deadline desc +"},{"lineNumber":2003,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2004,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2005,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Backup Command"},{"lineNumber":2006,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2007,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":2008,"author":{"gitId":"charlesgoh"},"content":"Currently supports mac relative file paths. No guarantee of support for other operating system."},{"lineNumber":2009,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2010,"author":{"gitId":"charlesgoh"},"content":"*Incorrect Input Format*"},{"lineNumber":2011,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2012,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2013,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2014,"author":{"gitId":"charlesgoh"},"content":"backup +"},{"lineNumber":2015,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2016,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2017,"author":{"gitId":"charlesgoh"},"content":"Error message with usage message will appear in the result command box +"},{"lineNumber":2018,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2019,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2020,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2021,"author":{"gitId":"charlesgoh"},"content":"Invalid command format! +"},{"lineNumber":2022,"author":{"gitId":"charlesgoh"},"content":"backup: Backs up data to a user input location field [FILEPATH] +"},{"lineNumber":2023,"author":{"gitId":"charlesgoh"},"content":"Parameter: KEYWORD [FILEPATH] +"},{"lineNumber":2024,"author":{"gitId":"charlesgoh"},"content":"Example: backupMyBackUpFile +"},{"lineNumber":2025,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2026,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2027,"author":{"gitId":"charlesgoh"},"content":"*Backs up data to same file path*"},{"lineNumber":2028,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2029,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2030,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2031,"author":{"gitId":"charlesgoh"},"content":"backup filename.xml"},{"lineNumber":2032,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2033,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2034,"author":{"gitId":"charlesgoh"},"content":"filename.xml with a copy of the save data will appear in the same directory as the jar file +"},{"lineNumber":2035,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2036,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2037,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2038,"author":{"gitId":"charlesgoh"},"content":"AddressBook++ data backed up successfully."},{"lineNumber":2039,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2040,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2041,"author":{"gitId":"charlesgoh"},"content":"*Backs up data to relative file path*"},{"lineNumber":2042,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2043,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2044,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2045,"author":{"gitId":"charlesgoh"},"content":"backup ./../filename.xml +"},{"lineNumber":2046,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2047,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2048,"author":{"gitId":"charlesgoh"},"content":"filename.xml with a copy of the save data will appear in the directory preceding one level above the jar file +"},{"lineNumber":2049,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2050,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2051,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2052,"author":{"gitId":"charlesgoh"},"content":"AddressBook++ data backed up successfully."},{"lineNumber":2053,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2054,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2055,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Change Password Command"},{"lineNumber":2056,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2057,"author":{"gitId":"charlesgoh"},"content":"*Invalid Command Format Input*"},{"lineNumber":2058,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2059,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2060,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2061,"author":{"gitId":"charlesgoh"},"content":"changepassword +"},{"lineNumber":2062,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2063,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2064,"author":{"gitId":"charlesgoh"},"content":"Invalid command format error message with usage message +"},{"lineNumber":2065,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2066,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2067,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2068,"author":{"gitId":"charlesgoh"},"content":"Invalid command format! +"},{"lineNumber":2069,"author":{"gitId":"charlesgoh"},"content":"changepassword: Changes user password. +"},{"lineNumber":2070,"author":{"gitId":"charlesgoh"},"content":"pw/PASSWORD np/NEWPASSWORD cfp/CONFIRMPASSWORD +"},{"lineNumber":2071,"author":{"gitId":"charlesgoh"},"content":"Example: changepassword pw/password np/mynewpassword111 cfp/mynewpassword111 +"},{"lineNumber":2072,"author":{"gitId":"charlesgoh"},"content":"Example 2: cpw pw/password np/mynewpassword111 cfp/mynewpassword111 +"},{"lineNumber":2073,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2074,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2075,"author":{"gitId":"charlesgoh"},"content":"*Change Password with valid inputs*"},{"lineNumber":2076,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2077,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2078,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2079,"author":{"gitId":"charlesgoh"},"content":"changepassword pw/password np/newpassword cfp/newpassword +"},{"lineNumber":2080,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2081,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2082,"author":{"gitId":"charlesgoh"},"content":"Application password will change to `newpassword` +"},{"lineNumber":2083,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2084,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2085,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2086,"author":{"gitId":"charlesgoh"},"content":"Password changed successfully"},{"lineNumber":2087,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2088,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2089,"author":{"gitId":"charlesgoh"},"content":"*Incorrect Password entered*"},{"lineNumber":2090,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2091,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":2092,"author":{"gitId":"charlesgoh"},"content":"Run this after running the previous command. Otherwise change the password to something incorrect. Default password"},{"lineNumber":2093,"author":{"gitId":"charlesgoh"},"content":"is `password`"},{"lineNumber":2094,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2095,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2096,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2097,"author":{"gitId":"charlesgoh"},"content":"changepassword pw/password np/newpassword cfp/newpassword +"},{"lineNumber":2098,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2099,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2100,"author":{"gitId":"charlesgoh"},"content":"Application password will remain as `newpassword` and reject input +"},{"lineNumber":2101,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2102,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2103,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2104,"author":{"gitId":"charlesgoh"},"content":"Your password is incorrect. Please try again."},{"lineNumber":2105,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2106,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2107,"author":{"gitId":"charlesgoh"},"content":"*Old and new passwords are the same*"},{"lineNumber":2108,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2109,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2110,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2111,"author":{"gitId":"charlesgoh"},"content":"changepassword pw/newpassword np/newpassword cfp/newpassword +"},{"lineNumber":2112,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2113,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2114,"author":{"gitId":"charlesgoh"},"content":"Command exception. Error message will be displayed +"},{"lineNumber":2115,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2116,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2117,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2118,"author":{"gitId":"charlesgoh"},"content":"New password must be different from your old password"},{"lineNumber":2119,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2120,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2121,"author":{"gitId":"charlesgoh"},"content":"*New password and confirmation passwords do not match*"},{"lineNumber":2122,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2123,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2124,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2125,"author":{"gitId":"charlesgoh"},"content":"changepassword pw/newpassword np/evennewerpassword cfp/wutwutWUUUUUT? +"},{"lineNumber":2126,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2127,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2128,"author":{"gitId":"charlesgoh"},"content":"Command exception. Error message will be displayed +"},{"lineNumber":2129,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2130,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2131,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2132,"author":{"gitId":"charlesgoh"},"content":"Your new password and confirmation password do not match. Please try again"},{"lineNumber":2133,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2134,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2135,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Lock Command"},{"lineNumber":2136,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2137,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":2138,"author":{"gitId":"charlesgoh"},"content":"The following tests assume that the password has been set to `newpassword` from the above tests. If you opened the application"},{"lineNumber":2139,"author":{"gitId":"charlesgoh"},"content":"for the first time, use the default password `password`."},{"lineNumber":2140,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2141,"author":{"gitId":"charlesgoh"},"content":"*Lock Application failure with incorrect password*"},{"lineNumber":2142,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2143,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2144,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2145,"author":{"gitId":"charlesgoh"},"content":"lock pw/wrongpasswordlol +"},{"lineNumber":2146,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2147,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2148,"author":{"gitId":"charlesgoh"},"content":"Application will fail to lock +"},{"lineNumber":2149,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2150,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2151,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2152,"author":{"gitId":"charlesgoh"},"content":"Password is incorrect. Please try again"},{"lineNumber":2153,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2154,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2155,"author":{"gitId":"charlesgoh"},"content":"*Lock Application with correct password*"},{"lineNumber":2156,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2157,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2158,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2159,"author":{"gitId":"charlesgoh"},"content":"lock pw/newpassword"},{"lineNumber":2160,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2161,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2162,"author":{"gitId":"charlesgoh"},"content":"Locks application. Try performing any CRUD statements after locking (i.e. add or edit. It will fail) +"},{"lineNumber":2163,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2164,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2165,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2166,"author":{"gitId":"charlesgoh"},"content":"Address++ locked successfully"},{"lineNumber":2167,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2168,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2169,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Unlock Command"},{"lineNumber":2170,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2171,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":2172,"author":{"gitId":"charlesgoh"},"content":"This section is a continuation of the previous section on the Lock Command"},{"lineNumber":2173,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2174,"author":{"gitId":"charlesgoh"},"content":"*Fail to unlock application with incorrect password*"},{"lineNumber":2175,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2176,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2177,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2178,"author":{"gitId":"charlesgoh"},"content":"unlock pw/wrongpassword:P"},{"lineNumber":2179,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2180,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2181,"author":{"gitId":"charlesgoh"},"content":"Fails to unlock application. You will still not be able to execute CRUD commands +"},{"lineNumber":2182,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2183,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2184,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2185,"author":{"gitId":"charlesgoh"},"content":"Password is incorrect. Please try again"},{"lineNumber":2186,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2187,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2188,"author":{"gitId":"charlesgoh"},"content":"*Unlock application with correct password*"},{"lineNumber":2189,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2190,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2191,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2192,"author":{"gitId":"charlesgoh"},"content":"unlock pw/newpassword:P"},{"lineNumber":2193,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2194,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2195,"author":{"gitId":"charlesgoh"},"content":"Unlocks application. You can now execute CRUD commands +"},{"lineNumber":2196,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2197,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2198,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2199,"author":{"gitId":"charlesgoh"},"content":"Address++ unlocked successfully"},{"lineNumber":2200,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2201,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2202,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Font Size Command"},{"lineNumber":2203,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2204,"author":{"gitId":"charlesgoh"},"content":"*Increase font size*"},{"lineNumber":2205,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2206,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2207,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2208,"author":{"gitId":"charlesgoh"},"content":"fontsize increase"},{"lineNumber":2209,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2210,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2211,"author":{"gitId":"charlesgoh"},"content":"Increases font size by 1 level +"},{"lineNumber":2212,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2213,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2214,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2215,"author":{"gitId":"charlesgoh"},"content":"Font size increased successfully"},{"lineNumber":2216,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2217,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2218,"author":{"gitId":"charlesgoh"},"content":"*Decrease font size*"},{"lineNumber":2219,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2220,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2221,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2222,"author":{"gitId":"charlesgoh"},"content":"fs decrease"},{"lineNumber":2223,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2224,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2225,"author":{"gitId":"charlesgoh"},"content":"Decrease font size by 1 level +"},{"lineNumber":2226,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2227,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2228,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2229,"author":{"gitId":"charlesgoh"},"content":"Font size decreased successfully"},{"lineNumber":2230,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2231,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2232,"author":{"gitId":"charlesgoh"},"content":"*Reset font size*"},{"lineNumber":2233,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2234,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":2235,"author":{"gitId":"charlesgoh"},"content":"You can try increasing the font size a few more times. There will be a max font size to prevent you from"},{"lineNumber":2236,"author":{"gitId":"charlesgoh"},"content":"increasing too much."},{"lineNumber":2237,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2238,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2239,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2240,"author":{"gitId":"charlesgoh"},"content":"fontsize reset +"},{"lineNumber":2241,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2242,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2243,"author":{"gitId":"charlesgoh"},"content":"Resets font size in the application +"},{"lineNumber":2244,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2245,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2246,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2247,"author":{"gitId":"charlesgoh"},"content":"Font size reset successfully"},{"lineNumber":2248,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2249,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2250,"author":{"gitId":"charlesgoh"},"content":"*Incorrect input format*"},{"lineNumber":2251,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2252,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2253,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2254,"author":{"gitId":"charlesgoh"},"content":"fontsize +"},{"lineNumber":2255,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2256,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2257,"author":{"gitId":"charlesgoh"},"content":"Displays invalid command format error and the usage message +"},{"lineNumber":2258,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2259,"author":{"gitId":"charlesgoh"},"content":"Expected Message: +"},{"lineNumber":2260,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2261,"author":{"gitId":"charlesgoh"},"content":"Invalid command format! +"},{"lineNumber":2262,"author":{"gitId":"charlesgoh"},"content":"fontsize: Increases, decreases or resets font sizes +"},{"lineNumber":2263,"author":{"gitId":"charlesgoh"},"content":"Parameters: KEYWORD [OPTION] +"},{"lineNumber":2264,"author":{"gitId":"charlesgoh"},"content":"Example: fontsize increase +"},{"lineNumber":2265,"author":{"gitId":"charlesgoh"},"content":"Example 2: fs reset +"},{"lineNumber":2266,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2267,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2268,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Setting Avatars"},{"lineNumber":2269,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2270,"author":{"gitId":"charlesgoh"},"content":"[NOTE]"},{"lineNumber":2271,"author":{"gitId":"charlesgoh"},"content":"There is full support for URLs. No guarantee for local file paths. Local file paths must add a local prefix `file:`"},{"lineNumber":2272,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2273,"author":{"gitId":"charlesgoh"},"content":"*Add avatar URL*"},{"lineNumber":2274,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":2275,"author":{"gitId":"charlesgoh"},"content":"Input Command: +"},{"lineNumber":2276,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2277,"author":{"gitId":"charlesgoh"},"content":"edit 1 v/[URL] +"},{"lineNumber":2278,"author":{"gitId":"charlesgoh"},"content":"Replace [URL] with a valid image online."},{"lineNumber":2279,"author":{"gitId":"charlesgoh"},"content":"****"},{"lineNumber":2280,"author":{"gitId":"charlesgoh"},"content":"Expected Result: +"},{"lineNumber":2281,"author":{"gitId":"charlesgoh"},"content":"Replaces placeholder avatar with the online image +"}],"authorContributionMap":{"charlesgoh":324,"jeffreygohkw":186,"Esilocke":1500,"-":271}},{"path":"src/test/java/guitests/AddressBookGuiTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.rules.TestName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A GUI Test class for AddressBook."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public abstract class AddressBookGuiTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /* The TestName Rule makes the current test name available inside test methods */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public TestName name \u003d new TestName();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    protected Stage stage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    protected MainWindowHandle mainWindowHandle;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void setupOnce() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setup() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.stage \u003d stage;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        FxToolkit.setupApplication(() -\u003e new TestApp(this::getInitialData, getDataFileLocation()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        mainWindowHandle.focus();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Override this in child classes to set the initial local data."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Return null to use the data in the file specified in {@link #getDataFileLocation()}"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        return TypicalPersons.getTypicalPersonsAddressBook();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    protected CommandBoxHandle getCommandBox() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected MainMenuHandle getMainMenu() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    protected BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    protected StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    protected ResultDisplayHandle getResultDisplay() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Runs {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @return true if the command was executed successfully."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    protected boolean runCommand(String command) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Override this in child classes to set the data file location."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void cleanup() throws Exception {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        FxToolkit.cleanupStages();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":1,"-":114}},{"path":"src/test/java/guitests/guihandles/TaskCardHandle.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":" * Provides a handle to a task card in the task list panel."},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"    private static final String TASK_NAME_ID \u003d \"#taskName\";"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    private static final String DESCRIPTION_ID \u003d \"#description\";"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    private static final String DEADLINE_ID \u003d \"#deadline\";"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    private static final String PRIORITY_ID \u003d \"#priority\";"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    private final Label idLabel;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    private final Label taskNameLabel;"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    private final Label descriptionLabel;"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    private final Label deadlineLabel;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    private final Label priorityLabel;"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public TaskCardHandle(Node cardNode) {"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        super(cardNode);"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"        this.taskNameLabel \u003d getChildNode(TASK_NAME_ID);"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        this.descriptionLabel \u003d getChildNode(DESCRIPTION_ID);"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        this.priorityLabel \u003d getChildNode(PRIORITY_ID);"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        this.deadlineLabel \u003d getChildNode(DEADLINE_ID);"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    public String getId() {"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        return idLabel.getText();"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    public String getTaskName() {"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        return taskNameLabel.getText();"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        return descriptionLabel.getText();"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    public String getDeadline() {"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        return deadlineLabel.getText();"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    public String getPriority() {"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"        return priorityLabel.getText();"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":52}},{"path":"src/test/java/guitests/guihandles/TaskListPanelHandle.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.ui.TaskCard;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTaskCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    private Optional\u003cTaskCard\u003e lastRememberedSelectedTaskCard;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public TaskListPanelHandle(ListView\u003cTaskCard\u003e taskListPanelNode) {"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"        super(taskListPanelNode);"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"     * Returns a handle to the selected {@code TaskCardHandle}."},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public TaskCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        List\u003cTaskCard\u003e taskList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        if (taskList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"            throw new AssertionError(\"Task list size expected 1.\");"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        return new TaskCardHandle(taskList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        List\u003cTaskCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"     * Navigates the listview to display and select the task."},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"    public void navigateToCard(ReadOnlyTask task) {"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        List\u003cTaskCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"        Optional\u003cTaskCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.task.equals(task)).findFirst();"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"Task does not exist.\");"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        });"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"     * Returns the task card handle of a task associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"    public TaskCardHandle getTaskCardHandle(int index) {"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        return getTaskCardHandle(getRootNode().getItems().get(index).task);"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"     * Returns the {@code TaskCardHandle} of the specified {@code task} in the list."},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"    public TaskCardHandle getTaskCardHandle(ReadOnlyTask task) {"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        Optional\u003cTaskCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"                .filter(card -\u003e card.task.equals(task))"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"                .map(card -\u003e new TaskCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Task does not exist.\"));"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"     * Selects the {@code TaskCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"     * Remembers the selected {@code TaskCard} in the list."},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"    public void rememberSelectedTaskCard() {"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"     * {@code rememberSelectedTaskCard()} call."},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"    public boolean isSelectedTaskCardChanged() {"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"            return lastRememberedSelectedTaskCard.isPresent();"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"        } else {"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"            return !lastRememberedSelectedTaskCard.isPresent()"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":135}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"        String defaultConfigAsString \u003d \"App title : Address++\\n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32_alternative.png\"));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":1,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"public class AddPersonCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personInList \u003d new Person(model.getAddressBook().getPersonList().get(0));"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"     * Generates a new {@code AddPersonCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    private AddPersonCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        AddPersonCommand command \u003d new AddPersonCommand(person);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":9,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"public class AddPersonCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        ModelStub modelStub \u003d new ModelStubAlwaysThrowingDuplicateException();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        thrown.expectMessage(AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        // different person/task -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"     * Generates a new AddPersonCommand with the details of the given person."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    private AddPersonCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        AddPersonCommand command \u003d new AddPersonCommand(person);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return command;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person or task."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    private class ModelStubAlwaysThrowingDuplicateException extends ModelStub {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"     * A Model stub that always accept the person or task being added."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":18,"wangyiming1019":2,"-":100}},{"path":"src/test/java/seedu/address/logic/commands/AddTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code AddTagCommand}."},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommandTest {"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public void execute_validIndexAndTagUnfilteredListSuccess() throws Exception {"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"teacher\");"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, tagToAdd);"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addTag(tagToAdd, indexes);"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexUnfilteredListThrowsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexAndTagFilteredListSuccess() throws Exception {"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"stranger\");"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, tagToAdd);"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(expectedModel);"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addTag(tagToAdd, indexes);"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexFilteredListThrowsCommandException() throws Exception {"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagUnfilteredListThrowsCommandException() throws Exception {"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_DUPLICATE_TAG);"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagFilteredListThrowsCommandException() throws Exception {"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_DUPLICATE_TAG);"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() throws Exception {"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes1 \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes2 \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_FIRST_PERSON);"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_SECOND_PERSON);"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        indexes2.add(INDEX_SECOND_PERSON);"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        Tag secondTag \u003d new Tag(\"classmates\");"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"        final AddTagCommand standardCommand \u003d new AddTagCommand(firstTag, indexes1);"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand commandWithSameValues \u003d new AddTagCommand(firstTag, indexes1);"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"        // different target indexes -\u003e returns false"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(firstTag, indexes2)));"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        // different target tag -\u003e returns false"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(secondTag, indexes1)));"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an {@code AddTagCommand} with parameters {@code targetIndexes} and {@code tagToAdd}"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":"    private AddTagCommand prepareCommand(Tag tagToAdd, ArrayList\u003cIndex\u003e targetIndexes) {"},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(tagToAdd, targetIndexes);"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":"        addTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"        return addTagCommand;"},{"lineNumber":149,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"wangyiming1019"},"content":"}"},{"lineNumber":151,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":""}],"authorContributionMap":{"wangyiming1019":152}},{"path":"src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"public class AddTaskCommandTest {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        AddTaskCommandTest.ModelStubAcceptingTaskAdded modelStub \u003d new AddTaskCommandTest.ModelStubAcceptingTaskAdded();"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        CommandResult commandResult \u003d prepareCommand(validTask, modelStub).execute();"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        assertEquals(String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        ModelStub modelStub \u003d new AddTaskCommandTest.ModelStubAlwaysThrowingDuplicateException();"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        thrown.expectMessage(AddTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        prepareCommand(validTask, modelStub).execute();"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        Task paper \u003d new TaskBuilder().withTaskName(\"Paper\").build();"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        Task pencil \u003d new TaskBuilder().withTaskName(\"Pencil\").build();"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        AddTaskCommand addPaperCommand \u003d new AddTaskCommand(paper);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        AddTaskCommand addPencilCommand \u003d new AddTaskCommand(pencil);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        assertTrue(addPaperCommand.equals(addPaperCommand));"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        AddTaskCommand addPaperCommandCopy \u003d new AddTaskCommand(paper);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        assertTrue(addPaperCommand.equals(addPaperCommandCopy));"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addPaperCommand.equals(\"\"));"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addPaperCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        // different task -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addPaperCommand.equals(addPencilCommand));"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"     * Generates a new AddTaskCommand with the details of the given task."},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    private AddTaskCommand prepareCommand(Task task, Model model) {"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        AddTaskCommand command \u003d new AddTaskCommand(task);"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"     * A Model stub that always throw a DuplicateTaskException when trying to add a task."},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    private class ModelStubAlwaysThrowingDuplicateException extends ModelStub {"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        public void addTask(ReadOnlyTask task) throws DuplicateTaskException {"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"            return new AddressBook();"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        private final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        public void addTask(ReadOnlyTask task) throws DuplicateTaskException {"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"            tasksAdded.add(new Task(task));"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"            return new AddressBook();"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":119}},{"path":"src/test/java/seedu/address/logic/commands/AssignCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"public class AssignCommandTest {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public void execute_assignOnePerson_success() throws Exception {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toAssign \u003d Arrays.asList(INDEX_FIRST_PERSON);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask assignedTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson assignedPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        persons.add(assignedPerson);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignCommand \u003d prepareCommand(toAssign, INDEX_FIRST_TASK);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        expectedModel.assignToTask(persons, assignedTask);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_SUCCESS, toAssign.size(),"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"                assignedTask);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    public void execute_assignManyPersons_success() throws Exception {"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toAssign \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask assignedTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson secondPerson \u003d model.getFilteredPersonList().get(1);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson thirdPerson \u003d model.getFilteredPersonList().get(2);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        persons.add(firstPerson);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        persons.add(secondPerson);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        persons.add(thirdPerson);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignCommand \u003d prepareCommand(toAssign, INDEX_FIRST_TASK);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        expectedModel.assignToTask(persons, assignedTask);"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_SUCCESS, toAssign.size(),"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"                assignedTask);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public void execute_assignDuplicates_success() throws Exception {"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toAssign \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_FIRST_PERSON, INDEX_FIRST_PERSON);"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask assignedTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson assignedPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        persons.add(assignedPerson);"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignCommand \u003d prepareCommand(toAssign, INDEX_FIRST_TASK);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_SUCCESS, 1, assignedTask);"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        expectedModel.assignToTask(persons, assignedTask);"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidPersonIndex_throwsCommandException() throws Exception {"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        Index outOfRangeIndex \u003d Index.fromZeroBased(model.getFilteredPersonList().size());"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toAssign \u003d Arrays.asList(INDEX_FIRST_PERSON, outOfRangeIndex, INDEX_SECOND_PERSON);"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignCommand \u003d prepareCommand(toAssign, INDEX_FIRST_TASK);"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(assignCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidTaskIndex_throwsCommandException() throws Exception {"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        Index outOfRangeIndex \u003d Index.fromZeroBased(model.getFilteredTaskList().size());"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toAssign \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignCommand \u003d prepareCommand(toAssign, outOfRangeIndex);"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(assignCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    public void execute_allPersonsAlreadyAssigned_throwsCommandException() throws Exception {"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toAssign \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON);"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask assignedTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson secondPerson \u003d model.getFilteredPersonList().get(1);"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson thirdPerson \u003d model.getFilteredPersonList().get(2);"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        persons.add(firstPerson);"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        persons.add(secondPerson);"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        persons.add(thirdPerson);"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignCommand \u003d prepareCommand(toAssign, INDEX_FIRST_TASK);"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        expectedModel.assignToTask(persons, assignedTask);"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        assignCommand.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(assignCommand, expectedModel, AssignCommand.MESSAGE_NONE_ASSIGNED);"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e assignFirstThree \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON,"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"                INDEX_SECOND_PERSON, INDEX_THIRD_PERSON));"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e assignFirstTwo \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON));"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignTwoToFirst \u003d new AssignCommand(assignFirstTwo, INDEX_FIRST_TASK);"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignThreeToFirst \u003d new AssignCommand(assignFirstThree, INDEX_FIRST_TASK);"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignTwoToSecond \u003d new AssignCommand(assignFirstTwo, INDEX_SECOND_TASK);"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"        assertTrue(assignTwoToFirst.equals(assignTwoToFirst));"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        AssignCommand assignTwoToFirstCopy \u003d new AssignCommand(assignFirstTwo, INDEX_FIRST_TASK);"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"        assertTrue(assignTwoToFirst.equals(assignTwoToFirstCopy));"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        assertFalse(assignTwoToFirst.equals(1));"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        assertFalse(assignTwoToFirst.equals(null));"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        // different person/task indexes -\u003e returns false"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"        assertFalse(assignTwoToFirst.equals(assignThreeToFirst));"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"        assertFalse(assignTwoToFirst.equals(assignTwoToSecond));"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"     * Generates a new AssignCommand with the specified targets."},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"    private AssignCommand prepareCommand(List\u003cIndex\u003e personsToAssign, Index taskIndex) {"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e listIndexes \u003d new ArrayList\u003c\u003e(personsToAssign);"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        AssignCommand command \u003d new AssignCommand(listIndexes, taskIndex);"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":156}},{"path":"src/test/java/seedu/address/logic/commands/ChangePasswordCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import com.google.common.hash.Hashing;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.ChangePasswordCommandParser;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":" * Tests for lock and unlock functionality. Covers implementation across userprefs and model classes"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"public class ChangePasswordCommandTest {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    private static final String DEFAULT_PASSWORD \u003d \"password\";"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    private static final String DEFAULT_SECOND_PASSWORD \u003d \"password2\";"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    private ChangePasswordCommandParser parser;"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"    @Before"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        userPrefs \u003d new UserPrefs();"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        parser \u003d new ChangePasswordCommandParser();"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    public void parseWrongArgumentsFailure() {"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        // No arguments failure"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, ChangePasswordCommand"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, ChangePasswordCommand"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        // Wrong number of arguments"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, ChangePasswordCommand"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \"one two?\", String"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"                .format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        // No prefixes"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, ChangePasswordCommand"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \"password password2 password3\", String"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"                .format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"    public void testUserPrefsPasswords() {"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"        // Check original password"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        String expectedPassword \u003d getHashed256(DEFAULT_PASSWORD);"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(userPrefs.getAddressBookEncryptedPassword().equals(expectedPassword));"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"        // Lock address book and check if state has changed"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        userPrefs.setAddressBookEncryptedPassword(DEFAULT_SECOND_PASSWORD);"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"        expectedPassword \u003d getHashed256(DEFAULT_SECOND_PASSWORD);"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(userPrefs.getAddressBookEncryptedPassword().equals(expectedPassword));"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"     * Helps to convert string to SHA256 counterpart"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"    private String getHashed256(String password) {"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        return Hashing.sha256().hashString(password, StandardCharsets.UTF_8).toString();"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":74}},{"path":"src/test/java/seedu/address/logic/commands/ChangePrivacyCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonPrivacySettingsBuilder;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommandTest {"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public void personPrivacySettingsTests() {"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettings();"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(pps.isAnyFieldNonNull());"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsByBuilder \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\")"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"            .setPhonePrivate(\"false\").setEmailPrivate(\"true\").setAddressPrivate(\"true\")"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"            .setRemarkPrivate(\"false\").build();"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setNameIsPrivate(true);"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setPhoneIsPrivate(false);"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setEmailIsPrivate(true);"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setAddressIsPrivate(true);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setRemarkIsPrivate(false);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getAddressIsPrivate(), pps.getAddressIsPrivate());"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getEmailIsPrivate(), pps.getEmailIsPrivate());"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getNameIsPrivate(), pps.getNameIsPrivate());"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getPhoneIsPrivate(), pps.getPhoneIsPrivate());"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getRemarkIsPrivate(), pps.getRemarkIsPrivate());"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.isAnyFieldNonNull(), pps.isAnyFieldNonNull());"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsCopy \u003d new PersonPrivacySettings(pps);"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsCopy.getAddressIsPrivate(), pps.getAddressIsPrivate());"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsCopy.getEmailIsPrivate(), pps.getEmailIsPrivate());"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsCopy.getNameIsPrivate(), pps.getNameIsPrivate());"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsCopy.getPhoneIsPrivate(), pps.getPhoneIsPrivate());"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsCopy.getRemarkIsPrivate(), pps.getRemarkIsPrivate());"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        Person newPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\").build();"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getName().setPrivate(true);"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getPhone().setPrivate(true);"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getEmail().setPrivate(true);"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getAddress().setPrivate(true);"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.setRemark(model.getFilteredPersonList().get(0).getRemark());"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getRemark().setPrivate(true);"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(newPerson).setNamePrivate(\"true\")"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"true\").setEmailPrivate(\"true\").setAddressPrivate(\"true\").setRemarkPrivate(\"true\")"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"                .build();"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommand \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, pps);"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommand.model \u003d model;"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, newPerson);"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), newPerson);"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsPublic \u003d new PersonPrivacySettingsBuilder(newPerson).setNamePrivate(\"false\")"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"false\").setEmailPrivate(\"false\").setAddressPrivate(\"false\").setRemarkPrivate(\"false\")"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"                .build();"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getName().setPrivate(false);"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getPhone().setPrivate(false);"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getEmail().setPrivate(false);"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getAddress().setPrivate(false);"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getRemark().setPrivate(false);"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommandPublic \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, ppsPublic);"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommandPublic.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessagePublic \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, newPerson);"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), newPerson);"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommandPublic, model, expectedMessagePublic, expectedModel);"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        Person personInList \u003d new PersonBuilder().withName(lastPerson.getName().toString())"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"                .withPhone(lastPerson.getPhone().toString()).withEmail(lastPerson.getEmail().toString())"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"                .withAddress(lastPerson.getAddress().toString()).withRemark(lastPerson.getRemark().toString())"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"                .withFavourite(lastPerson.getFavourite().toString())"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"                .build();"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.setTags(lastPerson.getTags());"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getName().setPrivate(true);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getPhone().setPrivate(true);"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(personInList).setNamePrivate(\"true\")"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"true\").build();"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommand \u003d new ChangePrivacyCommand(indexLastPerson, pps);"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, personInList);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(lastPerson, personInList);"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommand, model, expectedMessage, expectedModel);"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsPublic \u003d new PersonPrivacySettingsBuilder(personInList).setNamePrivate(\"false\")"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"false\").build();"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getName().setPrivate(false);"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getPhone().setPrivate(false);"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommandPublic \u003d new ChangePrivacyCommand(indexLastPerson, ppsPublic);"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommandPublic.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessagePublic \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, personInList);"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(lastPerson, personInList);"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommandPublic, model, expectedMessagePublic, expectedModel);"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":149}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":4,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/ClearPersonCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class ClearPersonCommandTest {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearPersonCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearPersonCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"     * Generates a new {@code ClearPersonCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private ClearPersonCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        ClearPersonCommand command \u003d new ClearPersonCommand();"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":36}},{"path":"src/test/java/seedu/address/logic/commands/ClearTaskCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class ClearTaskCommandTest {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearTaskCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        // Verify that only the tasks are cleared"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearTaskCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"     * Generates a new {@code ClearTaskCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private ClearTaskCommand prepareCommand(Model model) {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        ClearTaskCommand command \u003d new ClearTaskCommand();"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":39}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_NAME_CHRIS \u003d \"Chris Chan\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_PHONE_CHRIS \u003d \"33333333\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_EMAIL_CHRIS \u003d \"chris@example.com\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_ADDRESS_CHRIS \u003d \"Block 132, Chris Street 5\";"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_REMARK_AMY \u003d \"She sells sea shells on the sea shore\";"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_REMARK_BOB \u003d \"He eats, shoots and leaves\";"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_REMARK_CHRIS \u003d \"He likes swimming\";"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_AVATAR_AMY \u003d \"amyavatar\";"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_AVATAR_BOB \u003d \"bobavatar\";"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_AVATAR_CHRIS \u003d \"chirsavatar\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_FAVOURITE_ALICE \u003d \"false\";"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_FAVOURITE_BOB \u003d \"true\";"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_TAG_COLLEAGUE \u003d \"colleague\";"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_TAG_CHRISTAG \u003d \"special\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_TASK_NAME_PENCIL \u003d \"Buy pencil\";"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_TASK_NAME_PAPER \u003d \"Buy paper\";"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DESCRIPTION_PENCIL \u003d \"Buy mechanical pencil from ABS\";"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DESCRIPTION_PAPER \u003d \"Buy 500 pieces of paper\";"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DEADLINE_PENCIL \u003d \"04-04-2017 12pm\";"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DEADLINE_PAPER \u003d \"05-04-2017 12pm\";"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_PRIORITY_PENCIL \u003d \"1\";"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_PRIORITY_PAPER \u003d \"3\";"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String VALID_TASK_ADDRESS_PENCIL \u003d \"12 Kent Ridge Cres\";"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String VALID_TASK_ADDRESS_PAPER \u003d \"Bedok Mall\";"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    public static final String NAME_DESC_CHRIS \u003d \" \" + PREFIX_NAME + VALID_NAME_CHRIS;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"    public static final String PHONE_DESC_CHRIS \u003d \" \" + PREFIX_PHONE + VALID_PHONE_CHRIS;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"    public static final String EMAIL_DESC_CHRIS \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_CHRIS;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"    public static final String ADDRESS_DESC_CHRIS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_CHRIS;"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"    public static final String REMARK_DESC_CHRIS \u003d \" \" + PREFIX_REMARK + VALID_REMARK_CHRIS;"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    public static final String AVATAR_DESC_AMY \u003d \" \" + PREFIX_AVATAR + VALID_AVATAR_AMY;"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    public static final String AVATAR_DESC_BOB \u003d \" \" + PREFIX_AVATAR + VALID_AVATAR_BOB;"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    public static final String AVATAR_DESC_CHRIS \u003d \" \" + PREFIX_AVATAR + VALID_REMARK_CHRIS;"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_NAME_DESC_PENCIL \u003d \" \" + PREFIX_NAME + VALID_TASK_NAME_PENCIL;"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_NAME_DESC_PAPER \u003d \" \" + PREFIX_NAME + VALID_TASK_NAME_PAPER;"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_DESC_PENCIL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PENCIL;"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_DESC_PAPER \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PAPER;"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_DESC_PENCIL \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_PENCIL;"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_DESC_PAPER \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_PAPER;"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_DESC_PENCIL \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PENCIL;"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_DESC_PAPER \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PAPER;"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String TASK_ADDRESS_DESC_PENCIL \u003d \" \" + PREFIX_ADDRESS + VALID_TASK_ADDRESS_PENCIL;"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String TASK_ADDRESS_DESC_PAPER \u003d \" \" + PREFIX_ADDRESS + VALID_TASK_ADDRESS_PAPER;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"    public static final String INVALID_TASK_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \"; // task name cannot be blank"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"TIMELESS AGES\"; // not a date"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"6\"; // priority is out of bounds"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + \" \"; // priority is out of bounds"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_SEPARATOR \u003d \" \" + PREFIX_TASK + \" \";"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"    public static final EditTaskCommand.EditTaskDescriptor DESC_PENCIL;"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"    public static final EditTaskCommand.EditTaskDescriptor DESC_PAPER;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        //TODO: Change avatar filename to a real filename"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"                .withRemark(VALID_REMARK_AMY).withAvatar(VALID_AVATAR_AMY).withFavourite(VALID_FAVOURITE_ALICE)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"                .withRemark(VALID_REMARK_BOB).withAvatar(VALID_AVATAR_BOB).withFavourite(VALID_FAVOURITE_ALICE)"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        DESC_PENCIL \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_PENCIL)"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PENCIL)"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PENCIL).withPriority(VALID_PRIORITY_PENCIL).build();"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        DESC_PAPER \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_PAPER)"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PAPER)"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).withPriority(VALID_PRIORITY_PAPER).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":167,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            command.execute();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"        final String[] splitName \u003d person.getName().value.split(\"\\\\s+\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first task in the {@code model}\u0027s address book."},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"    public static void showFirstTaskOnly(Model model) {"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask task \u003d model.getAddressBook().getTasksList().get(0);"},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"        final String[] splitName \u003d task.getTaskName().taskName.split(\"\\\\s+\");"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredTaskList(new TaskContainsKeywordPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"        assert model.getFilteredTaskList().size() \u003d\u003d 1;"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first task in the {@code model}\u0027s address book."},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"    public static void showSecondTaskOnly(Model model) {"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask task \u003d model.getAddressBook().getTasksList().get(1);"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"        final String[] splitName \u003d task.getTaskName().taskName.split(\"\\\\s+\");"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredTaskList(new TaskContainsKeywordPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"        assert model.getFilteredTaskList().size() \u003d\u003d 1;"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"    public static void deleteFirstTask(Model model) {"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask firstTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"            model.deleteTask(firstTask);"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"Task in filtered list must exist in model.\", pnfe);"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":237,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":238,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"wangyiming1019"},"content":"     * Favourites the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":240,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"wangyiming1019"},"content":"    public static void favouriteFirstPerson(Model model) {"},{"lineNumber":242,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson firstPerson \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":243,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":244,"author":{"gitId":"wangyiming1019"},"content":"            model.favouritePerson(firstPerson);"},{"lineNumber":245,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":246,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":247,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":248,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":15,"jeffreygohkw":5,"Esilocke":81,"wangyiming1019":25,"-":124}},{"path":"src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeletePersonCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"public class DeletePersonCommandTest {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_SUCCESS, personToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_SUCCESS, personToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code DeletePersonCommand} with the parameter {@code index}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    private DeletePersonCommand prepareCommand(Index index) {"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(index);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        return deletePersonCommand;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":22,"-":96}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code RemoveTagCommand}."},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommandTest {"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexAndTagUnfilteredListSuccess() throws Exception {"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.deleteTag(tagToDelete, indexes);"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexAndTagFilteredListSuccess() throws Exception {"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(expectedModel);"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.deleteTag(tagToDelete, indexes);"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexUnfilteredListThrowsCommandException() throws Exception {"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexFilteredListThrowsCommandException() throws Exception {"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagUnfilteredListThrowsCommandException() throws Exception {"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"someone\");"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_NONEXISTENT_TAG);"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagFilteredListThrowsCommandException() throws Exception {"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"someone\");"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_NONEXISTENT_TAG);"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidTagNotInUnFilteredListThrowsCommandException() throws Exception {"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"teacher\");"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_NONEXISTENT_TAG);"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() throws Exception {"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes1 \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes2 \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_FIRST_PERSON);"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_SECOND_PERSON);"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"        indexes2.add(INDEX_SECOND_PERSON);"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"        Tag secondTag \u003d new Tag(\"classmates\");"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"        final DeleteTagCommand standardCommand \u003d new DeleteTagCommand(firstTag, indexes1);"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand commandWithSameValues \u003d new DeleteTagCommand(firstTag, indexes1);"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false"},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false"},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"        // different target indexes -\u003e returns false"},{"lineNumber":149,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new DeleteTagCommand(firstTag, indexes2)));"},{"lineNumber":150,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":151,"author":{"gitId":"wangyiming1019"},"content":"        // different target tag -\u003e returns false"},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new DeleteTagCommand(secondTag, indexes1)));"},{"lineNumber":153,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":155,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an {@code RemoveTagCommand} with parameters {@code targetIndexes} and {@code tagToDelete}"},{"lineNumber":157,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"wangyiming1019"},"content":"    private DeleteTagCommand prepareCommand(ArrayList\u003cIndex\u003e targetIndexes, Tag tagToDelete) {"},{"lineNumber":159,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(tagToDelete, targetIndexes);"},{"lineNumber":160,"author":{"gitId":"wangyiming1019"},"content":"        deleteTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":161,"author":{"gitId":"wangyiming1019"},"content":"        return deleteTagCommand;"},{"lineNumber":162,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"wangyiming1019"},"content":"}"},{"lineNumber":164,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":165,"author":{"gitId":"wangyiming1019"},"content":""}],"authorContributionMap":{"wangyiming1019":165}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstTaskOnly;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasksOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"public class DeleteTaskCommandTest {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalTasksOnlyAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_SUCCESS, taskToDelete);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_SUCCESS, taskToDelete);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        showNoTask(expectedModel);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTasksList().size());"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteFirstCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteSecondCommand \u003d new DeleteTaskCommand(INDEX_SECOND_TASK);"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteFirstCommandCopy \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        // different task -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code DeleteTaskCommand} with the parameter {@code index}."},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    private DeleteTaskCommand prepareCommand(Index index) {"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(index);"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        deleteTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        return deleteTaskCommand;"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"     * Updates {@code model}\u0027s filtered list to show no tasks."},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"    private void showNoTask(Model model) {"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredTaskList(p -\u003e false);"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        assert model.getFilteredTaskList().isEmpty();"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":115}},{"path":"src/test/java/seedu/address/logic/commands/DismissCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"public class DismissCommandTest {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public void execute_dismissOnePerson_success() throws Exception {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toDismiss \u003d Arrays.asList(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask dismissedTask \u003d model.getFilteredTaskList().get(5);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson dismissedPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        persons.add(dismissedPerson);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissCommand \u003d prepareCommand(toDismiss, Index.fromZeroBased(5));"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        expectedModel.dismissFromTask(persons, dismissedTask);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DismissCommand.MESSAGE_SUCCESS, toDismiss.size(),"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"                dismissedTask);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(dismissCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public void execute_dismissManyPersons_success() throws Exception {"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toDismiss \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask dismissedTask \u003d model.getFilteredTaskList().get(5);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson secondPerson \u003d model.getFilteredPersonList().get(1);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson thirdPerson \u003d model.getFilteredPersonList().get(2);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        persons.add(firstPerson);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        persons.add(secondPerson);"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        persons.add(thirdPerson);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissCommand \u003d prepareCommand(toDismiss, Index.fromZeroBased(5));"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        expectedModel.dismissFromTask(persons, dismissedTask);"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DismissCommand.MESSAGE_SUCCESS, toDismiss.size(),"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"                dismissedTask);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(dismissCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    public void execute_dismissDuplicates_success() throws Exception {"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toDismiss \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_FIRST_PERSON, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask dismissedTask \u003d model.getFilteredTaskList().get(5);"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson dismissedPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        persons.add(dismissedPerson);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissCommand \u003d prepareCommand(toDismiss, Index.fromZeroBased(5));"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(DismissCommand.MESSAGE_SUCCESS, 1, dismissedTask);"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        expectedModel.dismissFromTask(persons, dismissedTask);"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(dismissCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidPersonIndex_throwsCommandException() throws Exception {"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        Index outOfRangeIndex \u003d Index.fromZeroBased(model.getFilteredPersonList().size());"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toDismiss \u003d Arrays.asList(INDEX_FIRST_PERSON, outOfRangeIndex, INDEX_SECOND_PERSON);"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissCommand \u003d prepareCommand(toDismiss, INDEX_FIRST_TASK);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(dismissCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidTaskIndex_throwsCommandException() throws Exception {"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        Index outOfRangeIndex \u003d Index.fromZeroBased(model.getFilteredTaskList().size());"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toDismiss \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissCommand \u003d prepareCommand(toDismiss, outOfRangeIndex);"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(dismissCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    public void execute_noneDismissed_throwsCommandException() throws Exception {"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        List\u003cIndex\u003e toDismiss \u003d Arrays.asList(INDEX_FIRST_PERSON);"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson dismissedPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        persons.add(dismissedPerson);"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissCommand \u003d prepareCommand(toDismiss, INDEX_FIRST_TASK);"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(dismissCommand, model, DismissCommand.MESSAGE_NONE_ASSIGNED);"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e dismissFirstThree \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON,"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"                INDEX_SECOND_PERSON, INDEX_THIRD_PERSON));"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e dismissFirstTwo \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON));"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissTwoToFirst \u003d new DismissCommand(dismissFirstTwo, INDEX_FIRST_TASK);"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissThreeToFirst \u003d new DismissCommand(dismissFirstThree, INDEX_FIRST_TASK);"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissTwoToSecond \u003d new DismissCommand(dismissFirstTwo, INDEX_SECOND_TASK);"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        assertTrue(dismissTwoToFirst.equals(dismissTwoToFirst));"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        DismissCommand dismissTwoToFirstCopy \u003d new DismissCommand(dismissFirstTwo, INDEX_FIRST_TASK);"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"        assertTrue(dismissTwoToFirst.equals(dismissTwoToFirstCopy));"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        assertFalse(dismissTwoToFirst.equals(1));"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        assertFalse(dismissTwoToFirst.equals(null));"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        // different person/task indexes -\u003e returns false"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        assertFalse(dismissTwoToFirst.equals(dismissThreeToFirst));"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"        assertFalse(dismissTwoToFirst.equals(dismissTwoToSecond));"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"     * Generates a new DismissCommand with the specified targets."},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"    private DismissCommand prepareCommand(List\u003cIndex\u003e personsToDismiss, Index taskIndex) {"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e listIndexes \u003d new ArrayList\u003c\u003e(personsToDismiss);"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"        DismissCommand command \u003d new DismissCommand(listIndexes, taskIndex);"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":151}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPersonCommand."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"public class EditPersonCommandTest {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_SUCCESS, editedPerson);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_SUCCESS, editedPerson);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_SUCCESS, editedPerson);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_privateFields_success() throws Exception {"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getName().setPrivate(true);"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        Name originalName \u003d personInFilteredList.getName();"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getPhone().setPrivate(true);"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        Phone originalPhone \u003d personInFilteredList.getPhone();"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getEmail().setPrivate(true);"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        Email originalEmail \u003d personInFilteredList.getEmail();"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getAddress().setPrivate(true);"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        Address originalAddress \u003d personInFilteredList.getAddress();"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getRemark().setPrivate(true);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        Remark originalRemark \u003d personInFilteredList.getRemark();"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_ALL_FIELDS_PRIVATE);"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), personInFilteredList);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(editPersonCommand, model, expectedMessage);"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getName(), originalName);"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getPhone(), originalPhone);"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getEmail(), originalEmail);"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getAddress(), originalAddress);"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getRemark(), originalRemark);"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getName().setPrivate(false);"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getPhone().setPrivate(false);"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getEmail().setPrivate(false);"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getAddress().setPrivate(false);"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getRemark().setPrivate(false);"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_ALL_FIELDS_PRIVATE);"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(editPersonCommand, model, expectedMessage);"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"     * Returns an {@code EditPersonCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":"    private EditPersonCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(index, descriptor);"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"        editPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"        return editPersonCommand;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":61,"Esilocke":31,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVATAR_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVOURITE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        // different remarks -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        // different avatar -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAvatar(VALID_AVATAR_BOB).build();"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        // different favourite status -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withFavourite(VALID_FAVOURITE_BOB).build();"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":16,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/EditTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLLEAGUE;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_EDIT_TAG_SUCCESS;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_TAG_NOT_FOUND;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTaglessAddressBook;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommandTest {"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public void noTagsPresent_throwsCommandException() throws IllegalValueException {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        Model taglessModel \u003d new ModelManager(getTaglessAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        Model blankModel \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        String absentTag \u003d \"notInAddressBook\";"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand noPersonCommand \u003d prepareCommand(VALID_TAG_FRIEND, absentTag, blankModel);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand noTagsCommand \u003d prepareCommand(VALID_TAG_FRIEND, absentTag, taglessModel);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand absentTagCommand \u003d prepareCommand(VALID_TAG_FRIEND, absentTag, model);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        // No people are in this address book"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(noPersonCommand, taglessModel, MESSAGE_TAG_NOT_FOUND);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        // All persons do not have tags"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(noTagsCommand, taglessModel, MESSAGE_TAG_NOT_FOUND);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        // No persons in address book has the required tag"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(absentTagCommand, model, MESSAGE_TAG_NOT_FOUND);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    public void editTagSubset_success() throws IllegalValueException, PersonNotFoundException {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d prepareAddressBook();"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        Model testModel \u003d new ModelManager(testBook, new UserPrefs());"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand tagChangeColleagueToHusband \u003d prepareCommand(VALID_TAG_COLLEAGUE, VALID_TAG_HUSBAND, testModel);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EDIT_TAG_SUCCESS, VALID_TAG_COLLEAGUE, VALID_TAG_HUSBAND);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        Tag husbandTag \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        Tag colleagueTag \u003d new Tag(VALID_TAG_COLLEAGUE);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        // Attempt to change some Person objects"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        indices.add(Index.fromZeroBased(0));"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        indices.add(Index.fromZeroBased(2));"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        expectedModel.editTag(colleagueTag, husbandTag, indices);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(tagChangeColleagueToHusband, testModel, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public void editTagAll_success() throws IllegalValueException, PersonNotFoundException {"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d prepareAddressBook();"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        Model testModel \u003d new ModelManager(testBook, new UserPrefs());"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand tagChangeFriendToHusband \u003d prepareCommand(VALID_TAG_FRIEND, VALID_TAG_HUSBAND, testModel);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EDIT_TAG_SUCCESS, VALID_TAG_FRIEND, VALID_TAG_HUSBAND);"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        Tag friendTag \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        Tag husbandTag \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        // Attempt to change all Person objects"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"            indices.add(Index.fromZeroBased(i));"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        expectedModel.editTag(friendTag, husbandTag, indices);"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(tagChangeFriendToHusband, testModel, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    /** Returns a new EditTagCommand with the parameters */"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    public EditTagCommand prepareCommand(String toChange, String newValue, Model model) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        Tag changedTag \u003d new Tag(toChange);"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        Tag newTag \u003d new Tag(newValue);"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand editTagCommand \u003d new EditTagCommand(changedTag, newTag);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        editTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        return editTagCommand;"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    /** Returns a pre-made Address Book for testing purposes */"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    private AddressBook prepareAddressBook() throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson alice \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_COLLEAGUE).build();"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson bernice \u003d new PersonBuilder().withName(\"Bernice Applecut\")"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson clarice \u003d new PersonBuilder().withName(\"Clarice Fenderbunt\")"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_COLLEAGUE).build();"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson denise \u003d new PersonBuilder().withName(\"Denise Lieselocke\")"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toAdd \u003d new ArrayList\u003c\u003e(Arrays.asList(alice, bernice, clarice, denise));"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        AddressBook preparedBook \u003d new AddressBook();"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyPerson r : toAdd) {"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            preparedBook.addPerson(r);"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        return preparedBook;"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":112}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PAPER;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PENCIL;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PAPER;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PAPER;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstTaskOnly;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasksOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditTaskCommand."},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"public class EditTaskCommandTest {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalTasksOnlyAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand editTaskCommand \u003d prepareCommand(Index.fromZeroBased(3), descriptor);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(3), editedTask);"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        Task editedTask \u003d taskInList.withTaskName(VALID_TASK_NAME_PAPER).withDescription(VALID_DESCRIPTION_PAPER)"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).build();"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"                .withTaskName(VALID_TASK_NAME_PAPER).withDescription(VALID_DESCRIPTION_PAPER)"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).build();"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand editTaskCommand \u003d prepareCommand(indexLastTask, descriptor);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        expectedModel.updateTask(lastTask, editedTask);"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withTaskName(VALID_TASK_NAME_PAPER).build();"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand editTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"                new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_PAPER).build());"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"                .withTaskName(VALID_TASK_NAME_PAPER).build();"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand editTaskCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(editTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"     * but smaller than size of address book"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidTaskIndexFilteredList_failure() {"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTasksList().size());"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand editTaskCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"                new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_PAPER).build());"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(editTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        final EditTaskCommand standardCommand \u003d new EditTaskCommand(INDEX_FIRST_TASK, DESC_PENCIL);"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor copyDescriptor \u003d new EditTaskCommand.EditTaskDescriptor(DESC_PENCIL);"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand commandWithSameValues \u003d new EditTaskCommand(INDEX_FIRST_TASK, copyDescriptor);"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        // different index -\u003e returns false"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        assertFalse(standardCommand.equals(new EditTaskCommand(INDEX_SECOND_TASK, DESC_PENCIL)));"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        assertFalse(standardCommand.equals(new EditTaskCommand(INDEX_FIRST_TASK, DESC_PAPER)));"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"     * Returns an {@code EditTaskCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"    private EditTaskCommand prepareCommand(Index index, EditTaskCommand.EditTaskDescriptor descriptor) {"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(index, descriptor);"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"        editTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"        return editTaskCommand;"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":152}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PAPER;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PENCIL;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PAPER;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PAPER;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PAPER;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ADDRESS_PAPER;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class EditTaskDescriptorTest {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_PENCIL);"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        assertTrue(DESC_PENCIL.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        assertTrue(DESC_PENCIL.equals(DESC_PENCIL));"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(null));"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(5));"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(DESC_PAPER));"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL)"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"                .withTaskName(VALID_TASK_NAME_PAPER).build();"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        // different description -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withDescription(VALID_DESCRIPTION_PAPER).build();"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        // different deadline -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withDeadline(VALID_DEADLINE_PAPER).build();"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        // different priority -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withPriority(VALID_PRIORITY_PAPER).build();"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        // different task address -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withTaskAddress(VALID_TASK_ADDRESS_PAPER).build();"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":59}},{"path":"src/test/java/seedu/address/logic/commands/FavouriteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommandTest {"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexValidPersonSuccess() throws Exception {"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"                .withFavourite(\"True\").build();"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToFavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(FavouriteCommand.MESSAGE_FAVOURITE_PERSON_SUCCESS, personToFavourite);"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult commandResult \u003d favouriteCommand.execute();"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexThrowsCommandException() throws Exception {"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(favouriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() {"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteFirstCommand \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteSecondCommand \u003d new FavouriteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommand));"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteFirstCommandCopy \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommandCopy));"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(1));"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(null));"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        // different person -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(favouriteSecondCommand));"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"     * Returns a {@code FavouriteCommand} with the parameter {@code index}."},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"    private FavouriteCommand prepareCommand(Index index) {"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(index);"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        favouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"        return favouriteCommand;"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":78}},{"path":"src/test/java/seedu/address/logic/commands/FavouriteListCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.favouriteFirstPerson;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteListCommandTest {"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    private Model model;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    private Model expectedModel;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    private FavouriteListCommand favouriteListCommand;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    @Before"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        favouriteListCommand \u003d new FavouriteListCommand();"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        favouriteListCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public void executeEmptyFavouriteListShowsNothing() {"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult result \u003d favouriteListCommand.execute();"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(result.feedbackToUser, FavouriteListCommand.MESSAGE_SUCCESS);"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    public void executeFavouriteListNotEmptyShowsPerson() {"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        favouriteFirstPerson(model);"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        favouriteFirstPerson(expectedModel);"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(model, expectedModel);"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult result \u003d favouriteListCommand.execute();"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(result.feedbackToUser, FavouriteListCommand.MESSAGE_SUCCESS);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":47}},{"path":"src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"public class FindPersonCommandTest {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"     * Parses {@code userInput} into a {@code FindPersonCommand}."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    private FindPersonCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand command \u003d"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    private void assertCommandSuccess(FindPersonCommand command, String expectedMessage,"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":15,"-":84}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Collections;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTagCommand}."},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":" */"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommandTest {"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        NameContainsTagsPredicate firstPredicate \u003d"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        NameContainsTagsPredicate secondPredicate \u003d"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand findFirstCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand findSecondCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        // different person -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"    public void executeZeroKeywordsNoPersonFound() {"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"    public void executeMultipleKeywordsMultiplePersonsFound() {"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d prepareCommand(\"friends owesMoney\");"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"    public void executeOneKeywordMultiplePersonsFound() {"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d prepareCommand(\"friends\");"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"     * Parses {@code userInput} into a {@code FindTagCommand}."},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"    private FindTagCommand prepareCommand(String userInput) {"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"                new FindTagCommand(new NameContainsTagsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"        return command;"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"    private void assertCommandSuccess(FindTagCommand command, String expectedMessage,"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":111}},{"path":"src/test/java/seedu/address/logic/commands/FindTaskCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.ACCEPT;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.DATE;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.GRADLE;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasksOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"public class FindTaskCommandTest {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalTasksOnlyAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"                new TaskContainsKeywordPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"                new TaskContainsKeywordPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand findFirstCommand \u003d new FindTaskCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand findSecondCommand \u003d new FindTaskCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand findFirstCommandCopy \u003d new FindTaskCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        // different task -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public void execute_zeroKeywords_noTaskFound() {"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand command \u003d prepareCommand(\" \");"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    public void execute_multipleKeywords_multipleTasksFound() {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand command \u003d prepareCommand(\"Resolve Acceptance Date\");"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ACCEPT, DATE, GRADLE));"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"     * Parses {@code userInput} into a {@code FindTaskCommand}."},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    private FindTaskCommand prepareCommand(String userInput) {"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand command \u003d"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"                new FindTaskCommand(new TaskContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"     *     - the {@code FilteredList\u003cReadOnlyTask\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    private void assertCommandSuccess(FindTaskCommand command, String expectedMessage,"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"                                      List\u003cReadOnlyTask\u003e expectedList) {"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedList, model.getFilteredTaskList());"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":97}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"-":42}},{"path":"src/test/java/seedu/address/logic/commands/LocateCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":" * Contains integration tests (interaction with the Model) for {@code LocateCommand}."},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommandTest {"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    @Before"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateFirstCommand \u003d new LocateCommand(INDEX_FIRST_PERSON);"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateSecondCommand \u003d new LocateCommand(INDEX_SECOND_PERSON);"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(locateFirstCommand.equals(locateFirstCommand));"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateFirstCommandCopy \u003d new LocateCommand(INDEX_FIRST_PERSON);"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(locateFirstCommand.equals(locateFirstCommandCopy));"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(locateFirstCommand.equals(1));"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(locateFirstCommand.equals(null));"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        // different person -\u003e returns false"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(locateFirstCommand.equals(locateSecondCommand));"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes a {@code LocateCommand} with the given {@code index}, and checks that {@code BrowserPanelLocateEvent}"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"     * is raised with the correct index."},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateCommand \u003d prepareCommand(index);"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson p \u003d model.getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"            CommandResult commandResult \u003d locateCommand.execute();"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"            assertEquals(String.format(LocateCommand.MESSAGE_LOCATE_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        BrowserPanelLocateEvent lastEvent \u003d"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"                (BrowserPanelLocateEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(p, lastEvent.getNewSelection());"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes a {@code LocateCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateCommand \u003d prepareCommand(index);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"            locateCommand.execute();"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns a {@code LocateCommand} with parameters {@code index}."},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"    private LocateCommand prepareCommand(Index index) {"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateCommand \u003d new LocateCommand(index);"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        locateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        return locateCommand;"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":143}},{"path":"src/test/java/seedu/address/logic/commands/NavigateCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":" * Contains integration tests (interaction with the Model) for {@code NavigateCommand}."},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"public class NavigateCommandTest {"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    @Before"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_fromAddress_success() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        Location from \u003d new Location(\"NUS\");"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        Location to \u003d new Location(\"Sentosa\");"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand navi \u003d prepareCommand(from, to, null, null, false, false);"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(navi);"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_fromPersons_success() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand navi \u003d prepareCommand(null, null,"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, false, false);"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(navi);"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_fromTasks_success() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand navi \u003d prepareCommand(null, null,"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_THIRD_TASK, INDEX_FIRST_TASK, true, true);"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(navi);"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_invalidArgs_failure() throws IllegalValueException {"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        Location from \u003d new Location(\"NUS\");"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        Location to \u003d new Location(\"Sentosa\");"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        thrown.expectMessage(NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand navi \u003d prepareCommand(from, to,"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, false, false);"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        thrown.expectMessage(NavigateCommand.MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand naviOne \u003d prepareCommand(from, to,"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"                null, INDEX_SECOND_PERSON, false, false);"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes the input (@code NavigateCommand) and checks that (@code BrowserPanelNavigateEvent) is raised with"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"     * the correct locations"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionSuccess(NavigateCommand navi) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        Location from;"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        Location to;"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"            if (navi.getLocationFrom() !\u003d null) {"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"                from \u003d navi.getLocationFrom();"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (navi.isFromIsTask()) {"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"                from \u003d new Location(model.getFilteredTaskList().get(navi.getFromIndex().getZeroBased())"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"                        .getTaskAddress().toString());"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"                from \u003d new Location(model.getFilteredPersonList().get(navi.getFromIndex().getZeroBased())"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"                        .getAddress().toString());"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            if (navi.getLocationTo() !\u003d null) {"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"                to \u003d navi.getLocationTo();"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (navi.isToIsTask()) {"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"                to \u003d new Location(model.getFilteredTaskList().get(navi.getToIndex().getZeroBased())"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"                        .getTaskAddress().toString());"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"            } else {"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"                to \u003d new Location(model.getFilteredPersonList().get(navi.getToIndex().getZeroBased())"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"                        .getAddress().toString());"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"            CommandResult commandResult \u003d navi.execute();"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"            assertEquals(String.format(NavigateCommand.MESSAGE_NAVIGATE_SUCCESS,"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"                    from, to),"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        BrowserPanelNavigateEvent lastEvent \u003d"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"                (BrowserPanelNavigateEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(from, lastEvent.getFromLocation());"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(to, lastEvent.getToLocation());"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns a {@code NavigateCommand} based on input parameters."},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"    private NavigateCommand prepareCommand(Location locationFrom, Location locationTo, Index fromIndex, Index toIndex,"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"                                           boolean fromIsTask, boolean toIsTask) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand navi \u003d new NavigateCommand(locationFrom, locationTo, fromIndex, toIndex, fromIsTask, toIsTask);"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        navi.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        return navi;"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":135}},{"path":"src/test/java/seedu/address/logic/commands/OpenCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.OpenCommand.OPEN_COMMAND_SUCCESS;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.OpenRequestEvent;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"public class OpenCommandTest {"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_exit_success() {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        CommandResult result \u003d new OpenCommand().execute();"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(OPEN_COMMAND_SUCCESS, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof OpenRequestEvent);"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":25}},{"path":"src/test/java/seedu/address/logic/commands/PrivacyLevelCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Assert;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":" * Contains integration tests (interaction with the Model) for {@code PrivacyLevelCommand}."},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"public class PrivacyLevelCommandTest {"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    @Before"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_validIndex_success() {"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        //valid levels"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand onePlc \u003d prepareCommand(1);"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand twoPlc \u003d prepareCommand(2);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand threePlc \u003d prepareCommand(3);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(onePlc);"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(twoPlc);"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(threePlc);"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        //Negative level"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand negativePlc \u003d prepareCommand(-1);"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        //Zero level"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand zeroPlc \u003d prepareCommand(0);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        //Level greater than the maximum level allowed"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand tooBigPlc \u003d prepareCommand(5);"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(negativePlc, PrivacyLevelCommand.WRONG_PRIVACY_LEVEL_MESSAGE);"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(zeroPlc, PrivacyLevelCommand.WRONG_PRIVACY_LEVEL_MESSAGE);"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(tooBigPlc, PrivacyLevelCommand.WRONG_PRIVACY_LEVEL_MESSAGE);"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes a {@code PrivacyLevelCommand} and checks that the privacy level of the model and each person has been"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"     * changed to that of the level as specified in the input (@code PrivacyLevelCommand)"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionSuccess(PrivacyLevelCommand plc) {"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        CommandResult commandResult;"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"            commandResult \u003d plc.execute();"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"            assertEquals(String.format(PrivacyLevelCommand.CHANGE_PRIVACY_LEVEL_SUCCESS, plc.getLevel()),"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        //Check the model\u0027s privacy level"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(model.getPrivacyLevel() \u003d\u003d plc.getLevel());"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        //Iterate through the list of persons in the model"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        for (int i \u003d 0; i \u003c model.getAddressBook().getPersonList().size(); i++) {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            //Check the person\u0027s Privacy Level"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"            ReadOnlyPerson p \u003d model.getAddressBook().getPersonList().get(i);"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"            //Check Privacy Level of all fields of each person that can be private"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(p.getName().getPrivacyLevel() \u003d\u003d plc.getLevel());"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(p.getPhone().getPrivacyLevel() \u003d\u003d plc.getLevel());"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(p.getEmail().getPrivacyLevel() \u003d\u003d plc.getLevel());"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(p.getAddress().getPrivacyLevel() \u003d\u003d plc.getLevel());"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(p.getRemark().getPrivacyLevel() \u003d\u003d plc.getLevel());"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes a {@code PrivacyLevelCommand} and checks that a {@code CommandException}"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"     * is thrown with the {@code expectedMessage}"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionFailure(PrivacyLevelCommand plc, String expectedMessage) {"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"            plc.execute();"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"            Assert.assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns a {@code LocateCommand} with parameters {@code index}."},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"    private PrivacyLevelCommand prepareCommand(int level) {"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        PrivacyLevelCommand privacyLevelCommand \u003d new PrivacyLevelCommand(level);"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        privacyLevelCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        return privacyLevelCommand;"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":116}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private final Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private final DeletePersonCommand deletePersonCommandOne \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private final DeletePersonCommand deletePersonCommandTwo \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                Collections.emptyList(), Arrays.asList(deletePersonCommandTwo, deletePersonCommandOne));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // single command in redoStack"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // no command in redoStack"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":8,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/SaveAsCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.SaveAsCommand.SAVE_AS_COMMAND_SUCCESS;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.SaveAsRequestEvent;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"public class SaveAsCommandTest {"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_exit_success() {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        CommandResult result \u003d new SaveAsCommand().execute();"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(SAVE_AS_COMMAND_SUCCESS, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof SaveAsRequestEvent);"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":25}},{"path":"src/test/java/seedu/address/logic/commands/SelectPersonCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectPersonCommand}."},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"public class SelectPersonCommandTest {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    @Before"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand selectFirstCommand \u003d new SelectPersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand selectSecondCommand \u003d new SelectPersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand selectFirstCommandCopy \u003d new SelectPersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        // different person -\u003e returns false"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"     * Executes a {@code SelectPersonCommand} with the given {@code index}, and checks that"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"     * {@code JumpToListRequestEvent} is raised with the correct index."},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand selectPersonCommand \u003d prepareCommand(index);"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(SelectPersonCommand.MESSAGE_SUCCESS, index.getOneBased());"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"            CommandResult commandResult \u003d selectPersonCommand.execute();"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        } catch (CommandException ce) {"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        JumpToListRequestEvent lastEvent \u003d"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"                (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"     * Executes a {@code SelectPersonCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"     * is thrown with the ."},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand selectPersonCommand \u003d prepareCommand(index);"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"            selectPersonCommand.execute();"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        } catch (CommandException ce) {"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code SelectPersonCommand} with parameters {@code index}."},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"    private SelectPersonCommand prepareCommand(Index index) {"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand selectPersonCommand \u003d new SelectPersonCommand(index);"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        selectPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        return selectPersonCommand;"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":139}},{"path":"src/test/java/seedu/address/logic/commands/SelectTaskCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstTaskOnly;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestTaskEvent;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"public class SelectTaskCommandTest {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private Model model;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    @Before"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        Index lastTaskIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(INDEX_FIRST_TASK);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(INDEX_THIRD_TASK);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(lastTaskIndex);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        assertExecutionSuccess(INDEX_FIRST_TASK);"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getTasksList().size());"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        SelectTaskCommand selectFirstCommand \u003d new SelectTaskCommand(INDEX_FIRST_TASK);"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        SelectTaskCommand selectSecondCommand \u003d new SelectTaskCommand(INDEX_SECOND_TASK);"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        SelectTaskCommand selectFirstCommandCopy \u003d new SelectTaskCommand(INDEX_FIRST_TASK);"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        // different person -\u003e returns false"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"     * Executes a {@code SelectTaskCommand} with the given {@code index}, and checks that"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"     * {@code JumpToListRequestTaskEvent} is raised with the correct index."},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        SelectTaskCommand selectTaskCommand \u003d prepareCommand(index);"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(SelectTaskCommand.MESSAGE_SUCCESS, index.getOneBased());"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"            CommandResult commandResult \u003d selectTaskCommand.execute();"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        } catch (CommandException ce) {"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        JumpToListRequestTaskEvent lastEvent \u003d"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"                (JumpToListRequestTaskEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"     * Executes a {@code SelectTaskCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"     * is thrown with the ."},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        SelectTaskCommand selectTaskCommand \u003d prepareCommand(index);"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"            selectTaskCommand.execute();"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        } catch (CommandException ce) {"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code SelectTaskCommand} with parameters {@code index}."},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"    private SelectTaskCommand prepareCommand(Index index) {"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"        SelectTaskCommand selectTaskCommand \u003d new SelectTaskCommand(index);"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        selectTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        return selectTaskCommand;"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":136}},{"path":"src/test/java/seedu/address/logic/commands/SetCompleteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstTaskOnly;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasksOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"public class SetCompleteCommandTest {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalTasksOnlyAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public void execute_unfilteredListValidIndex_success() throws Exception {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToChange \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setCompleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(SetCompleteCommand.MESSAGE_SUCCESS, taskToChange);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        expectedModel.setAsComplete(taskToChange, true);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(setCompleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public void execute_unfilteredListInvalidIndex_failure() throws Exception {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        Index outOfRangeIndex \u003d Index.fromZeroBased(model.getFilteredTaskList().size());"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setCompleteCommand \u003d prepareCommand(outOfRangeIndex);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(setCompleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public void execute_changeCompletedTask_failure() throws Exception {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToChange \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        expectedModel.setAsComplete(taskToChange, true);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setCompleteCommand \u003d new SetCompleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        setCompleteCommand.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(setCompleteCommand, expectedModel, SetCompleteCommand.MESSAGE_TASK_ALREADY_COMPLETE);"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public void execute_filteredListValidIndex_success() throws Exception {"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToChange \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setCompleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(SetCompleteCommand.MESSAGE_SUCCESS, taskToChange);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        expectedModel.setAsComplete(taskToChange, true);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(expectedModel);"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(setCompleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public void execute_filteredListInvalidIndex_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTasksList().size());"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setCompleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(setCompleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setFirstCommand \u003d new SetCompleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setSecondCommand \u003d new SetCompleteCommand(INDEX_SECOND_TASK);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        assertTrue(setFirstCommand.equals(setFirstCommand));"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand setFirstCommandCopy \u003d new SetCompleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        assertTrue(setFirstCommand.equals(setFirstCommandCopy));"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        assertFalse(setFirstCommand.equals(1));"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        assertFalse(setFirstCommand.equals(null));"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        // different task -\u003e returns false"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        assertFalse(setFirstCommand.equals(setSecondCommand));"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code SetCompleteCommand} with the parameter {@code index}."},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    public SetCompleteCommand prepareCommand(Index taskIndex) {"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand command \u003d new SetCompleteCommand(taskIndex);"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":118}},{"path":"src/test/java/seedu/address/logic/commands/SetIncompleteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstTaskOnly;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showSecondTaskOnly;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasksOnlyAddressBook;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"public class SetIncompleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalTasksOnlyAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public void execute_validTaskIndex_success() throws Exception {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToChange \u003d model.getFilteredTaskList().get(INDEX_THIRD_TASK.getZeroBased());"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setIncompleteCommand \u003d prepareCommand(INDEX_THIRD_TASK);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(SetIncompleteCommand.MESSAGE_SUCCESS, taskToChange);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        expectedModel.setAsComplete(taskToChange, false);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(setIncompleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidTaskIndex_failure() throws Exception {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        Index outOfRangeIndex \u003d Index.fromZeroBased(model.getFilteredTaskList().size());"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setIncompleteCommand \u003d prepareCommand(outOfRangeIndex);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(setIncompleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    public void execute_changeIncompleteTask_failure() throws Exception {"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setIncompleteCommand \u003d new SetIncompleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        setIncompleteCommand.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(setIncompleteCommand, expectedModel, SetIncompleteCommand.MESSAGE_TASK_ALREADY_COMPLETE);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setFirstCommand \u003d new SetIncompleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setSecondCommand \u003d new SetIncompleteCommand(INDEX_SECOND_TASK);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        assertTrue(setFirstCommand.equals(setFirstCommand));"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setFirstCommandCopy \u003d new SetIncompleteCommand(INDEX_FIRST_TASK);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        assertTrue(setFirstCommand.equals(setFirstCommandCopy));"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        assertFalse(setFirstCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        assertFalse(setFirstCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        // different task -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        assertFalse(setFirstCommand.equals(setSecondCommand));"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    public void execute_filteredListValidIndex_success() throws Exception {"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        showSecondTaskOnly(model);"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToChange \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setIncompleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(SetIncompleteCommand.MESSAGE_SUCCESS, taskToChange);"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        expectedModel.setAsComplete(taskToChange, false);"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        showSecondTaskOnly(expectedModel);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(setIncompleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    public void execute_filteredListInvalidIndex_throwsCommandException() {"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTasksList().size());"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand setIncompleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(setIncompleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code SetIncompleteCommand} with the parameter {@code index}."},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"    public SetIncompleteCommand prepareCommand(Index taskIndex) {"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand command \u003d new SetIncompleteCommand(taskIndex);"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        return command;"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":117}},{"path":"src/test/java/seedu/address/logic/commands/TagListCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHRISTAG;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.CHRIS;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.CHRIS_WITH_NEW_TAG;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTaglessAddressBook;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"public class TagListCommandTest {"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    private Model expectedModel;"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    private TagListCommand listTagsCommand;"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    private String expectedMessage;"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    @Before"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        model \u003d new ModelManager(getTaglessAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        listTagsCommand \u003d new TagListCommand();"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        listTagsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        StringBuilder expectedMessageString \u003d new StringBuilder(listTagsCommand.MESSAGE_SUCCESS);"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        for (ReadOnlyPerson p : model.getAddressBook().getPersonList()) {"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"            for (Tag tag : p.getTags()) {"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"                if (!tagList.contains(tag)) {"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"                    tagList.add(tag);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"                    expectedMessageString.append(\"\u003c\").append(tag.getTagName()).append(\"\u003e \");"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        expectedMessage \u003d expectedMessageString.toString().trim();"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"    public void executeTagListNotEmpty() {"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(listTagsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    public void executeEmptyTagListShowNothing() throws DuplicatePersonException {"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        Model expectedModelWithNoTags \u003d new ModelManager();"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessageWithNoTags \u003d listTagsCommand.MESSAGE_FAILURE;"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        TagListCommand tagListCommandWithNoTags \u003d new TagListCommand();"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        tagListCommandWithNoTags.setData(expectedModelWithNoTags, new CommandHistory(),"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"                new UndoRedoStack());"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(tagListCommandWithNoTags, expectedModelWithNoTags,"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"                expectedMessageWithNoTags, expectedModelWithNoTags);"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    public void executeUpdateTagListWithPersonAdd() throws DuplicatePersonException {"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        model.addPerson(CHRIS);"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addPerson(CHRIS);"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        String newExpectedMessage \u003d expectedMessage + \" \u003c\" + VALID_TAG_CHRISTAG + \"\u003e\";"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(listTagsCommand, model, newExpectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"    public void executeUpdateTagListWithTagEdited() throws"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"            PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        model.addPerson(CHRIS);"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addPerson(CHRIS);"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        String newExpectedMessage \u003d expectedMessage + \" \u003c\" + VALID_TAG_CHRISTAG + \"\u003e\";"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(listTagsCommand, model, newExpectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"        model.updatePerson(CHRIS, CHRIS_WITH_NEW_TAG);"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.updatePerson(CHRIS, CHRIS_WITH_NEW_TAG);"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(listTagsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":88}},{"path":"src/test/java/seedu/address/logic/commands/ThemeCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.ThemeCommand.MESSAGE_THEME_CHANGE_SUCCESS;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.ThemeCommand.MESSAGE_THEME_IN_USE;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.ThemeCommand.MESSAGE_THEME_NOT_AVAILABLE;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"public class ThemeCommandTest {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand lightThemeCommand \u003d new ThemeCommand(\"light\");"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand darkThemeCommand \u003d new ThemeCommand(\"Dark\");"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(lightThemeCommand.equals(lightThemeCommand));"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        // same values -\u003e returns true"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand lightThemeCommandCopy \u003d new ThemeCommand(\"light\");"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(lightThemeCommand.equals(lightThemeCommandCopy));"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(lightThemeCommand.equals(1));"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(lightThemeCommand.equals(null));"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        // different theme -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(lightThemeCommand.equals(darkThemeCommand));"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_correctTheme_success() throws CommandException {"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        model.setTheme(model.getStyleMap().get(\"Dark\"));"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand command \u003d prepareCommand(\"light\");"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(command, String.format(MESSAGE_THEME_CHANGE_SUCCESS, \"light\"));"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        model.setTheme(model.getStyleMap().get(\"light\"));"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand darkCommand \u003d prepareCommand(\"dark\");"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(darkCommand, String.format(MESSAGE_THEME_CHANGE_SUCCESS, \"dark\"));"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_wrongArguments_failure() {"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand command \u003d prepareCommand(\"notATheme\");"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(command, model, String.format(MESSAGE_THEME_NOT_AVAILABLE, \"notATheme\"));"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_themeAlreadyLoaded_failure() {"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        model.setTheme(model.getStyleMap().get(\"Dark\"));"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand command \u003d prepareCommand(\"dark\");"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(command, model, String.format(MESSAGE_THEME_IN_USE, \"dark\"));"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        model.setTheme(model.getStyleMap().get(\"light\"));"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand lightCommand \u003d prepareCommand(\"light\");"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(lightCommand, model, String.format(MESSAGE_THEME_IN_USE, \"light\"));"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses {@code userInput} into a {@code ThemeCommand}."},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    private ThemeCommand prepareCommand(String userInput) {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand command \u003d new ThemeCommand(userInput);"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        return command;"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"     * Asserts that {@code command} is successfully executed"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertCommandSuccess(ThemeCommand command, String expectedMessage) throws CommandException {"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ab.getStyleMap().get(command.toString()), model.getTheme());"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ab.getStyleMap().get(command.toString()), model.getUserPrefs().getTheme());"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":98}},{"path":"src/test/java/seedu/address/logic/commands/UnFavouriteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.favouriteFirstPerson;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"public class UnFavouriteCommandTest {"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexValidPersonSuccess() throws Exception {"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        favouriteFirstPerson(model);"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToUnfavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(UnfavouriteCommand.MESSAGE_UNFAVOURITE_PERSON_SUCCESS,"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                personToUnfavourite);"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult commandResult \u003d unfavouriteCommand.execute();"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexThrowsCommandException() throws Exception {"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(unfavouriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() {"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand favouriteFirstCommand \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand favouriteSecondCommand \u003d new UnfavouriteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommand));"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand deleteFirstCommandCopy \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(1));"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(null));"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        // different person -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(favouriteSecondCommand));"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"     * Returns a {@code UnfavouriteCommand} with the parameter {@code index}."},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"    private UnfavouriteCommand prepareCommand(Index index) {"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(index);"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        unfavouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"        return unfavouriteCommand;"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":78}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private final Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private final DeletePersonCommand deletePersonCommandOne \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private final DeletePersonCommand deletePersonCommandTwo \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                Arrays.asList(deletePersonCommandOne, deletePersonCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommandOne.execute();"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        deletePersonCommandTwo.execute();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        expectedModel \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":11,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    private final Model model \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        expectedModel \u003d new ModelManager(getTypicalPersonsAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void redo() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.model \u003d model;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":4,"-":63}},{"path":"src/test/java/seedu/address/logic/commands/UnlockLockCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":" * Tests for lock and unlock functionality. Covers implementation across userprefs and model classes"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":" */"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"public class UnlockLockCommandTest {"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    private Model model;"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    @Before"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public void setUp() {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        model \u003d new ModelManager();"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    public void checkLockFunctionality() throws Exception {"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"        // Check initial state is unlocked"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(model.getLockState());"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        // Check that lock works"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        model.lockAddressBookFromModel();"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(model.getLockState());"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        // Check double lock"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        model.lockAddressBookFromModel();"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(model.getLockState());"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        // Check that unlock works"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"        model.unlockAddressBookFromModel();"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(model.getLockState());"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        // Check double unlock"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        model.unlockAddressBookFromModel();"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(model.getLockState());"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":46}},{"path":"src/test/java/seedu/address/logic/commands/ViewAssignCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstTaskOnly;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"public class ViewAssignCommandTest {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyTask taskToShow \u003d model.getFilteredTaskList().get(5);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewAssignCommand \u003d prepareCommand(Index.fromZeroBased(5));"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        expectedModel.viewAssignees(taskToShow);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(viewAssignCommand, model, expectedMessage, expectedModel);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewAssignCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(viewAssignCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        showFirstTaskOnly(model);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTasksList().size());"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewAssignCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(viewAssignCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewFirstCommand \u003d new ViewAssignCommand(INDEX_FIRST_TASK);"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewSecondCommand \u003d new ViewAssignCommand(INDEX_SECOND_TASK);"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommand));"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewFirstCommandCopy \u003d new ViewAssignCommand(INDEX_FIRST_TASK);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        assertFalse(viewFirstCommand.equals(1));"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        assertFalse(viewFirstCommand.equals(null));"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        // different person -\u003e returns false"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        assertFalse(viewFirstCommand.equals(viewSecondCommand));"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"     * Returns a {@code ViewAssignCommand} with the parameter {@code index}."},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    private ViewAssignCommand prepareCommand(Index index) {"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        ViewAssignCommand viewAssignCommand \u003d new ViewAssignCommand(index);"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        viewAssignCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        return viewAssignCommand;"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":90}},{"path":"src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVATAR_DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVATAR_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"public class AddPersonCommandParserTest {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_BOB)"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"                .withAvatar(VALID_AVATAR_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + AVATAR_DESC_BOB"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + AVATAR_DESC_BOB"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + AVATAR_DESC_BOB"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + REMARK_DESC_BOB + AVATAR_DESC_BOB"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"                + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_BOB)"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"                .withAvatar(VALID_AVATAR_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + AVATAR_DESC_BOB"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"                new AddPersonCommand(expectedPersonMultipleTags));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY)"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"                .withTags().build();"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY,"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"                new AddPersonCommand(expectedPerson));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + VALID_NAME_BOB + PHONE_DESC_BOB"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_PHONE_BOB"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + REMARK_DESC_AMY"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + INVALID_NAME_DESC + INVALID_PHONE_DESC"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":28,"Esilocke":22,"-":86}},{"path":"src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.AddTagCommand;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    private AddTagCommandParser parser \u003d new AddTagCommandParser();"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public void parseValidIndexAndTagSuccess() throws Exception {"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(tagName);"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString()"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                + tagName;"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, userInput, new AddTagCommand(tagToAdd, indexes));"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidTagFailure() throws Exception {"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        final String tagToAdd \u003d \"friends\";"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString();"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, userInput, MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidArgsFailure() throws Exception {"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"}"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":""}],"authorContributionMap":{"wangyiming1019":59}},{"path":"src/test/java/seedu/address/logic/parser/AddTaskCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_PAPER;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_PENCIL;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PAPER;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PENCIL;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PAPER;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PENCIL;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_ADDRESS_DESC_PAPER;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_ADDRESS_DESC_PENCIL;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PAPER;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PENCIL;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_SEPARATOR;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PENCIL;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PENCIL;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PENCIL;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ADDRESS_PENCIL;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PENCIL;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"public class AddTaskCommandParserTest {"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    public void parseTasksAllFieldsPresent_success() {"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        Task expectedTask \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_PENCIL)"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PENCIL).withDeadline(VALID_DEADLINE_PENCIL)"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"                .withPriority(VALID_PRIORITY_PENCIL).withTaskAddress(VALID_TASK_ADDRESS_PENCIL).build();"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        // multiple names - last name accepted"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddPersonCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PAPER"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"                + TASK_NAME_DESC_PENCIL + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL + TASK_ADDRESS_DESC_PENCIL, new AddTaskCommand(expectedTask));"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        // multiple descriptions - last description accepted"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddTaskCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PAPER + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL + TASK_ADDRESS_DESC_PENCIL, new AddTaskCommand(expectedTask));"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        // multiple deadlines - last deadline accepted"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddTaskCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PAPER + DEADLINE_DESC_PENCIL"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL + TASK_ADDRESS_DESC_PENCIL, new AddTaskCommand(expectedTask));"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        // multiple priorities - last priority accepted"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddTaskCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL + PRIORITY_DESC_PAPER"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL + TASK_ADDRESS_DESC_PENCIL, new AddTaskCommand(expectedTask));"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddTaskCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL + PRIORITY_DESC_PENCIL"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"                + TASK_ADDRESS_DESC_PAPER + TASK_ADDRESS_DESC_PENCIL, new AddTaskCommand(expectedTask));"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    public void parseTasksCompulsoryFieldMissing_failure() {"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        // missing task name prefix"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + TASK_SEPARATOR + VALID_TASK_NAME_PAPER"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL + PRIORITY_DESC_PENCIL, expectedMessage);"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        // all prefixes missing"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + TASK_SEPARATOR + VALID_TASK_NAME_PENCIL"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"                + VALID_DESCRIPTION_PENCIL + VALID_DEADLINE_PENCIL + VALID_PRIORITY_PENCIL, expectedMessage);"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskInvalidValue_failure() {"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        // invalid deadline"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + INVALID_DEADLINE_DESC"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL + TASK_ADDRESS_DESC_PENCIL, Deadline.MESSAGE_INVALID_DATE);"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        // invalid priority"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"                + INVALID_PRIORITY_DESC + TASK_ADDRESS_DESC_PENCIL, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddPersonCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + INVALID_DEADLINE_DESC"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"                + INVALID_PRIORITY_DESC + TASK_ADDRESS_DESC_PENCIL, Deadline.MESSAGE_INVALID_DATE);"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":104}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONFIRM_PASSWORD;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_ADDRESS;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_ADDRESS;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PASSWORD;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_FULL;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.AddTagCommand;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.BackupCommand;"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.ChangePasswordCommand;"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTagCommand;"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTaskCommand;"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteListCommand;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.FontSizeCommand;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.NavigateCommand;"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.OpenCommand;"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.PrivacyLevelCommand;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.SaveAsCommand;"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetCompleteCommand;"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetIncompleteCommand;"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.TagListCommand;"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonPrivacySettingsBuilder;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskUtil;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"    private static final boolean DEFAULT_STATE_LOCK \u003d false;"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAdd() throws Exception {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        AddCommand command \u003d (AddPersonCommand) parser"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"                .parseCommand(PersonUtil.getAddCommand(person), DEFAULT_STATE_LOCK);"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"        command \u003d (AddTaskCommand) parser.parseCommand(TaskUtil.getAddCommand(task), DEFAULT_STATE_LOCK);"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new AddTaskCommand(task), command);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseCommandAliasAdd() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddPersonCommand) parser.parseCommand(AddPersonCommand.COMMAND_ALIAS + \" \""},{"lineNumber":125,"author":{"gitId":"-"},"content":"                + PersonUtil.getPersonDetails(person), DEFAULT_STATE_LOCK);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        command \u003d (AddTaskCommand) parser.parseCommand(AddTaskCommand.COMMAND_ALIAS + \" \""},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + PREFIX_TASK + \" \" + TaskUtil.getTaskDetails(task), DEFAULT_STATE_LOCK);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(new AddTaskCommand(task), command);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"    public void parseCommandAssign() throws Exception {"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON));"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        AssignCommand command \u003d (AssignCommand) parser.parseCommand(AssignCommand.COMMAND_WORD + \" \""},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TARGET + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new AssignCommand(personIndexes, INDEX_FIRST_TASK), command);"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"    public void parseCommandAliasAssign() throws Exception {"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON));"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"        AssignCommand command \u003d (AssignCommand) parser.parseCommand(AssignCommand.COMMAND_ALIAS + \" \""},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TARGET + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new AssignCommand(personIndexes, INDEX_FIRST_TASK), command);"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandChangePrivacy() throws Exception {"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(person).build();"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand command \u003d (ChangePrivacyCommand) parser.parseCommand("},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"                ChangePrivacyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAME + String.valueOf(person.getName().getIsPrivate())"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_PHONE + String.valueOf(person.getPhone().getIsPrivate())"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_EMAIL + String.valueOf(person.getEmail().getIsPrivate())"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_ADDRESS + String.valueOf(person.getAddress().getIsPrivate()),"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"                DEFAULT_STATE_LOCK);"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, pps);"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(changePrivacyCommandsEqual(command, actualCommand));"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasChangePrivacy() throws Exception {"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(person).build();"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand command \u003d (ChangePrivacyCommand) parser.parseCommand("},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"                ChangePrivacyCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAME + String.valueOf(person.getName().getIsPrivate())"},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_PHONE + String.valueOf(person.getPhone().getIsPrivate())"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_EMAIL + String.valueOf(person.getEmail().getIsPrivate())"},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_ADDRESS + String.valueOf(person.getAddress().getIsPrivate()),"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"                DEFAULT_STATE_LOCK);"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, pps);"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(changePrivacyCommandsEqual(command, actualCommand));"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandPrivacyLevel() throws Exception {"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(PrivacyLevelCommand.COMMAND_WORD + \" 1\", DEFAULT_STATE_LOCK)"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof PrivacyLevelCommand);"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(PrivacyLevelCommand.COMMAND_WORD + \" 2\", DEFAULT_STATE_LOCK)"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof PrivacyLevelCommand);"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(PrivacyLevelCommand.COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK)"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof PrivacyLevelCommand);"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasPrivacyLevel() throws Exception {"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(PrivacyLevelCommand.COMMAND_ALIAS + \" 1\", DEFAULT_STATE_LOCK)"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof PrivacyLevelCommand);"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(PrivacyLevelCommand.COMMAND_ALIAS + \" 2\", DEFAULT_STATE_LOCK)"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof PrivacyLevelCommand);"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(PrivacyLevelCommand.COMMAND_ALIAS + \" 3\", DEFAULT_STATE_LOCK)"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof PrivacyLevelCommand);"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandTheme() throws Exception {"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(ThemeCommand.COMMAND_WORD + \" dark\", DEFAULT_STATE_LOCK)"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof ThemeCommand);"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(ThemeCommand.COMMAND_WORD + \" light\", DEFAULT_STATE_LOCK)"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof ThemeCommand);"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasTheme() throws Exception {"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(ThemeCommand.COMMAND_ALIAS + \" dark\", DEFAULT_STATE_LOCK)"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof ThemeCommand);"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(ThemeCommand.COMMAND_ALIAS + \" light\", DEFAULT_STATE_LOCK)"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"                instanceof ThemeCommand);"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandClear() throws Exception {"},{"lineNumber":227,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof ClearCommand);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":231,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasClear() throws Exception {"},{"lineNumber":232,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS, DEFAULT_STATE_LOCK) instanceof ClearCommand);"},{"lineNumber":233,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":236,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandDelete() throws Exception {"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand command \u003d (DeletePersonCommand) parser.parseCommand("},{"lineNumber":238,"author":{"gitId":"charlesgoh"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \""},{"lineNumber":239,"author":{"gitId":"charlesgoh"},"content":"                        + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":242,"author":{"gitId":"Esilocke"},"content":"        command \u003d (DeleteTaskCommand) parser.parseCommand("},{"lineNumber":243,"author":{"gitId":"charlesgoh"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \""},{"lineNumber":244,"author":{"gitId":"charlesgoh"},"content":"                        + PREFIX_TASK + \" \" + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":245,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DeleteTaskCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":249,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasDelete() throws Exception {"},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand command \u003d (DeletePersonCommand) parser.parseCommand("},{"lineNumber":251,"author":{"gitId":"charlesgoh"},"content":"                DeletePersonCommand.COMMAND_ALIAS + \" \""},{"lineNumber":252,"author":{"gitId":"charlesgoh"},"content":"                        + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":253,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"        command \u003d (DeleteTaskCommand) parser.parseCommand("},{"lineNumber":256,"author":{"gitId":"charlesgoh"},"content":"                DeletePersonCommand"},{"lineNumber":257,"author":{"gitId":"charlesgoh"},"content":"                        .COMMAND_ALIAS + \" \" + PREFIX_TASK + \" \""},{"lineNumber":258,"author":{"gitId":"charlesgoh"},"content":"                        + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DeleteTaskCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":260,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"    public void parseCommandDismiss() throws Exception {"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON));"},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"        DismissCommand command \u003d (DismissCommand) parser.parseCommand(DismissCommand.COMMAND_WORD + \" \""},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_FROM + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DismissCommand(personIndexes, INDEX_FIRST_TASK), command);"},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":272,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"    public void parseCommandAliasDismiss() throws Exception {"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e personIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON));"},{"lineNumber":275,"author":{"gitId":"Esilocke"},"content":"        DismissCommand command \u003d (DismissCommand) parser.parseCommand(DismissCommand.COMMAND_ALIAS + \" \""},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":277,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_FROM + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":278,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DismissCommand(personIndexes, INDEX_FIRST_TASK), command);"},{"lineNumber":279,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":283,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandEdit() throws Exception {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"        EditCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""},{"lineNumber":287,"author":{"gitId":"charlesgoh"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person), DEFAULT_STATE_LOCK);"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor taskDescriptor \u003d new EditTaskDescriptorBuilder(task).build();"},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"        command \u003d (EditTaskCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""},{"lineNumber":293,"author":{"gitId":"charlesgoh"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + PREFIX_TASK + \" \""},{"lineNumber":294,"author":{"gitId":"charlesgoh"},"content":"                + TaskUtil.getTaskDetails(task), DEFAULT_STATE_LOCK);"},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new EditTaskCommand(INDEX_FIRST_TASK, taskDescriptor), command);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":299,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasEdit() throws Exception {"},{"lineNumber":300,"author":{"gitId":"wangyiming1019"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":301,"author":{"gitId":"wangyiming1019"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":"        EditCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_ALIAS + \" \""},{"lineNumber":303,"author":{"gitId":"charlesgoh"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person), DEFAULT_STATE_LOCK);"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor taskDescriptor \u003d new EditTaskDescriptorBuilder(task).build();"},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"        command \u003d (EditTaskCommand) parser.parseCommand(EditPersonCommand.COMMAND_ALIAS + \" \""},{"lineNumber":309,"author":{"gitId":"charlesgoh"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + PREFIX_TASK + \" \""},{"lineNumber":310,"author":{"gitId":"charlesgoh"},"content":"                + TaskUtil.getTaskDetails(task), DEFAULT_STATE_LOCK);"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new EditTaskCommand(INDEX_FIRST_TASK, taskDescriptor), command);"},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"    public void parseCommandEditTag() throws Exception {"},{"lineNumber":317,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand command \u003d (EditTagCommand) parser.parseCommand(EditTagCommand.COMMAND_WORD"},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":"                + \" \" + PREFIX_TAG_FULL + \" \""},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":"                + \" friends enemies\", DEFAULT_STATE_LOCK);"},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":"        Tag friends \u003d new Tag(\"friends\");"},{"lineNumber":321,"author":{"gitId":"Esilocke"},"content":"        Tag enemies \u003d new Tag(\"enemies\");"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new EditTagCommand(friends, enemies), command);"},{"lineNumber":323,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":324,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":325,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":326,"author":{"gitId":"Esilocke"},"content":"    public void parseCommandAliasEditTag() throws Exception {"},{"lineNumber":327,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand command \u003d (EditTagCommand) parser.parseCommand(EditTagCommand.COMMAND_ALIAS"},{"lineNumber":328,"author":{"gitId":"Esilocke"},"content":"                + \" \" + PREFIX_TAG_FULL + \" \""},{"lineNumber":329,"author":{"gitId":"Esilocke"},"content":"                + \" friends enemies\", DEFAULT_STATE_LOCK);"},{"lineNumber":330,"author":{"gitId":"Esilocke"},"content":"        Tag friends \u003d new Tag(\"friends\");"},{"lineNumber":331,"author":{"gitId":"Esilocke"},"content":"        Tag enemies \u003d new Tag(\"enemies\");"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new EditTagCommand(friends, enemies), command);"},{"lineNumber":333,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":335,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":336,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":337,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandOpen() throws Exception {"},{"lineNumber":338,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(OpenCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof OpenCommand);"},{"lineNumber":339,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser"},{"lineNumber":340,"author":{"gitId":"jeffreygohkw"},"content":"                .parseCommand(OpenCommand.COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof OpenCommand);"},{"lineNumber":341,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":343,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":344,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandSaveAs() throws Exception {"},{"lineNumber":345,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser.parseCommand(SaveAsCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof SaveAsCommand);"},{"lineNumber":346,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(parser"},{"lineNumber":347,"author":{"gitId":"jeffreygohkw"},"content":"                .parseCommand(SaveAsCommand.COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof SaveAsCommand);"},{"lineNumber":348,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":349,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":350,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":352,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandExit() throws Exception {"},{"lineNumber":353,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof ExitCommand);"},{"lineNumber":354,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser"},{"lineNumber":355,"author":{"gitId":"charlesgoh"},"content":"                .parseCommand(ExitCommand.COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof ExitCommand);"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":359,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandFind() throws Exception {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":361,"author":{"gitId":"Esilocke"},"content":"        FindCommand command \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":362,"author":{"gitId":"charlesgoh"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":363,"author":{"gitId":"charlesgoh"},"content":"                        .collect(Collectors.joining(\" \")), DEFAULT_STATE_LOCK);"},{"lineNumber":364,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"        command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + PREFIX_TASK +  \" \""},{"lineNumber":368,"author":{"gitId":"charlesgoh"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")), DEFAULT_STATE_LOCK);"},{"lineNumber":369,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(new FindTaskCommand(new TaskContainsKeywordPredicate(keywords,"},{"lineNumber":370,"author":{"gitId":"charlesgoh"},"content":"                DEFAULT_STATE_LOCK, DEFAULT_STATE_LOCK, false, 0)), command);"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":374,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasFind() throws Exception {"},{"lineNumber":375,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":376,"author":{"gitId":"Esilocke"},"content":"        FindCommand command \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":377,"author":{"gitId":"charlesgoh"},"content":"                FindPersonCommand.COMMAND_ALIAS + \" \" + keywords"},{"lineNumber":378,"author":{"gitId":"charlesgoh"},"content":"                        .stream().collect(Collectors.joining(\" \")), DEFAULT_STATE_LOCK);"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":381,"author":{"gitId":"Esilocke"},"content":"        command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":382,"author":{"gitId":"Esilocke"},"content":"                FindPersonCommand.COMMAND_ALIAS + \" \" + PREFIX_TASK +  \" \""},{"lineNumber":383,"author":{"gitId":"charlesgoh"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")), DEFAULT_STATE_LOCK);"},{"lineNumber":384,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(new FindTaskCommand(new TaskContainsKeywordPredicate("},{"lineNumber":385,"author":{"gitId":"charlesgoh"},"content":"                keywords, DEFAULT_STATE_LOCK, false, false, 0)), command);"},{"lineNumber":386,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":387,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":388,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":389,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":390,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAddTag() throws Exception {"},{"lineNumber":391,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":392,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":393,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":394,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";"},{"lineNumber":395,"author":{"gitId":"wangyiming1019"},"content":"        Tag toAdd \u003d new Tag(tagName);"},{"lineNumber":396,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand command \u003d (AddTagCommand) parser.parseCommand(AddTagCommand.COMMAND_WORD"},{"lineNumber":397,"author":{"gitId":"wangyiming1019"},"content":"                + \" \" + PREFIX_TAG_FULL"},{"lineNumber":398,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":399,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \" \" + PREFIX_TAG + tagName, DEFAULT_STATE_LOCK);"},{"lineNumber":400,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new AddTagCommand(toAdd, indexes), command);"},{"lineNumber":401,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":403,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":404,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasAddTag() throws Exception {"},{"lineNumber":405,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":406,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":407,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":408,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";"},{"lineNumber":409,"author":{"gitId":"wangyiming1019"},"content":"        Tag toAdd \u003d new Tag(tagName);"},{"lineNumber":410,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand command \u003d (AddTagCommand) parser.parseCommand(AddTagCommand.COMMAND_ALIAS"},{"lineNumber":411,"author":{"gitId":"wangyiming1019"},"content":"                + \" \" + PREFIX_TAG_FULL"},{"lineNumber":412,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":413,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \" \" + PREFIX_TAG + tagName, DEFAULT_STATE_LOCK);"},{"lineNumber":414,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new AddTagCommand(toAdd, indexes), command);"},{"lineNumber":415,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":416,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":417,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":418,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandDeleteTag() throws Exception {"},{"lineNumber":419,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":420,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":421,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":422,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";"},{"lineNumber":423,"author":{"gitId":"wangyiming1019"},"content":"        Tag toDelete \u003d new Tag(tagName);"},{"lineNumber":424,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand command \u003d (DeleteTagCommand) parser.parseCommand(DeleteTagCommand.COMMAND_WORD"},{"lineNumber":425,"author":{"gitId":"wangyiming1019"},"content":"                + \" \" + PREFIX_TAG_FULL"},{"lineNumber":426,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":427,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \" \" + PREFIX_TAG + tagName, DEFAULT_STATE_LOCK);"},{"lineNumber":428,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new DeleteTagCommand(toDelete, indexes), command);"},{"lineNumber":429,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":430,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":431,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":432,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasDeleteTag() throws Exception {"},{"lineNumber":433,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":434,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":435,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":436,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";"},{"lineNumber":437,"author":{"gitId":"wangyiming1019"},"content":"        Tag toDelete \u003d new Tag(tagName);"},{"lineNumber":438,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand command \u003d (DeleteTagCommand) parser.parseCommand(DeleteTagCommand.COMMAND_ALIAS"},{"lineNumber":439,"author":{"gitId":"wangyiming1019"},"content":"                + \" \" + PREFIX_TAG_FULL"},{"lineNumber":440,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":441,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \" \" + PREFIX_TAG + tagName, DEFAULT_STATE_LOCK);"},{"lineNumber":442,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new DeleteTagCommand(toDelete, indexes), command);"},{"lineNumber":443,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":444,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":445,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":446,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandTagList() throws Exception {"},{"lineNumber":447,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(TagListCommand.COMMAND_WORD,"},{"lineNumber":448,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK) instanceof TagListCommand);"},{"lineNumber":449,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(TagListCommand"},{"lineNumber":450,"author":{"gitId":"wangyiming1019"},"content":"                .COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof TagListCommand);"},{"lineNumber":451,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":452,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":453,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":454,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasTagList() throws Exception {"},{"lineNumber":455,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(TagListCommand.COMMAND_ALIAS,"},{"lineNumber":456,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK) instanceof TagListCommand);"},{"lineNumber":457,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(TagListCommand"},{"lineNumber":458,"author":{"gitId":"wangyiming1019"},"content":"                .COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof TagListCommand);"},{"lineNumber":459,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":460,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":461,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":462,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandFindTag() throws Exception {"},{"lineNumber":463,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friend\", \"colleague\");"},{"lineNumber":464,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("},{"lineNumber":465,"author":{"gitId":"wangyiming1019"},"content":"                FindTagCommand.COMMAND_WORD + \" \" + PREFIX_TAG_FULL + \" \""},{"lineNumber":466,"author":{"gitId":"wangyiming1019"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")), DEFAULT_STATE_LOCK);"},{"lineNumber":467,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FindTagCommand("},{"lineNumber":468,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(keywords)), command);"},{"lineNumber":469,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":470,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":471,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":472,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasFindTag() throws Exception {"},{"lineNumber":473,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friend\", \"colleague\");"},{"lineNumber":474,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("},{"lineNumber":475,"author":{"gitId":"wangyiming1019"},"content":"                FindTagCommand.COMMAND_ALIAS + \" \" + PREFIX_TAG_FULL + \" \""},{"lineNumber":476,"author":{"gitId":"wangyiming1019"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")), DEFAULT_STATE_LOCK);"},{"lineNumber":477,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FindTagCommand("},{"lineNumber":478,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(keywords)), command);"},{"lineNumber":479,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":480,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":481,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":482,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandFavourite() throws Exception {"},{"lineNumber":483,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand command \u003d (FavouriteCommand) parser.parseCommand("},{"lineNumber":484,"author":{"gitId":"wangyiming1019"},"content":"                FavouriteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":485,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK);"},{"lineNumber":486,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FavouriteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":487,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":488,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":489,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":490,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasFavourite() throws Exception {"},{"lineNumber":491,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand command \u003d (FavouriteCommand) parser.parseCommand("},{"lineNumber":492,"author":{"gitId":"wangyiming1019"},"content":"                FavouriteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":493,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK);"},{"lineNumber":494,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FavouriteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":495,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":496,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":497,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":498,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUnfavourite() throws Exception {"},{"lineNumber":499,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand command \u003d (UnfavouriteCommand) parser.parseCommand("},{"lineNumber":500,"author":{"gitId":"wangyiming1019"},"content":"                UnfavouriteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":501,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK);"},{"lineNumber":502,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new UnfavouriteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":503,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":504,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":505,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":506,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasUnfavourite() throws Exception {"},{"lineNumber":507,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand command \u003d (UnfavouriteCommand) parser.parseCommand("},{"lineNumber":508,"author":{"gitId":"wangyiming1019"},"content":"                UnfavouriteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":509,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK);"},{"lineNumber":510,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new UnfavouriteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":511,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":512,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":513,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":514,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandFavouriteList() throws Exception {"},{"lineNumber":515,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(FavouriteListCommand.COMMAND_WORD,"},{"lineNumber":516,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK) instanceof FavouriteListCommand);"},{"lineNumber":517,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(FavouriteListCommand"},{"lineNumber":518,"author":{"gitId":"wangyiming1019"},"content":"                .COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof FavouriteListCommand);"},{"lineNumber":519,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":520,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":521,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":522,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasFavouriteList() throws Exception {"},{"lineNumber":523,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(FavouriteListCommand.COMMAND_ALIAS,"},{"lineNumber":524,"author":{"gitId":"wangyiming1019"},"content":"                DEFAULT_STATE_LOCK) instanceof FavouriteListCommand);"},{"lineNumber":525,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(FavouriteListCommand"},{"lineNumber":526,"author":{"gitId":"wangyiming1019"},"content":"                .COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof FavouriteListCommand);"},{"lineNumber":527,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":528,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":529,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":531,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandHelp() throws Exception {"},{"lineNumber":532,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof HelpCommand);"},{"lineNumber":533,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof HelpCommand);"},{"lineNumber":534,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":535,"author":{"gitId":"-"},"content":""},{"lineNumber":536,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":537,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandHistory() throws Exception {"},{"lineNumber":538,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof HistoryCommand);"},{"lineNumber":539,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(HistoryCommand"},{"lineNumber":540,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof HistoryCommand);"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":543,"author":{"gitId":"charlesgoh"},"content":"            parser.parseCommand(\"histories\", DEFAULT_STATE_LOCK);"},{"lineNumber":544,"author":{"gitId":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":546,"author":{"gitId":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":548,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":549,"author":{"gitId":"-"},"content":""},{"lineNumber":550,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":551,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasHistory() throws Exception {"},{"lineNumber":552,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS, DEFAULT_STATE_LOCK) instanceof HistoryCommand);"},{"lineNumber":553,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(HistoryCommand"},{"lineNumber":554,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" 3\", DEFAULT_STATE_LOCK) instanceof HistoryCommand);"},{"lineNumber":555,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":556,"author":{"gitId":"wangyiming1019"},"content":"        try {"},{"lineNumber":557,"author":{"gitId":"charlesgoh"},"content":"            parser.parseCommand(\"histories\", DEFAULT_STATE_LOCK);"},{"lineNumber":558,"author":{"gitId":"wangyiming1019"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":559,"author":{"gitId":"wangyiming1019"},"content":"        } catch (ParseException pe) {"},{"lineNumber":560,"author":{"gitId":"wangyiming1019"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":561,"author":{"gitId":"wangyiming1019"},"content":"        }"},{"lineNumber":562,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":563,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":565,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandList() throws Exception {"},{"lineNumber":566,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof ListCommand);"},{"lineNumber":567,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ListCommand"},{"lineNumber":568,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" 3\", DEFAULT_STATE_LOCK) instanceof ListCommand);"},{"lineNumber":569,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":572,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasList() throws Exception {"},{"lineNumber":573,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS, DEFAULT_STATE_LOCK) instanceof ListCommand);"},{"lineNumber":574,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ListCommand"},{"lineNumber":575,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" 3\", DEFAULT_STATE_LOCK) instanceof ListCommand);"},{"lineNumber":576,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":577,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":578,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":579,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandSelect() throws Exception {"},{"lineNumber":580,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand command \u003d (SelectPersonCommand) parser.parseCommand("},{"lineNumber":581,"author":{"gitId":"charlesgoh"},"content":"                SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":582,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new SelectPersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":583,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":586,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasSelect() throws Exception {"},{"lineNumber":587,"author":{"gitId":"Esilocke"},"content":"        SelectPersonCommand command \u003d (SelectPersonCommand) parser.parseCommand("},{"lineNumber":588,"author":{"gitId":"charlesgoh"},"content":"                SelectPersonCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":589,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new SelectPersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":590,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":591,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":592,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":593,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":594,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandLocate() throws Exception {"},{"lineNumber":595,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand command \u003d (LocateCommand) parser.parseCommand("},{"lineNumber":596,"author":{"gitId":"jeffreygohkw"},"content":"                LocateCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":597,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(new LocateCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":598,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":599,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":600,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":601,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasLocate() throws Exception {"},{"lineNumber":602,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand command \u003d (LocateCommand) parser.parseCommand("},{"lineNumber":603,"author":{"gitId":"jeffreygohkw"},"content":"                LocateCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":604,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(new LocateCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":605,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":606,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":607,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":608,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandNavigate() throws Exception {"},{"lineNumber":609,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand command \u003d (NavigateCommand) parser.parseCommand("},{"lineNumber":610,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.COMMAND_WORD + \" \" + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":611,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", DEFAULT_STATE_LOCK);"},{"lineNumber":612,"author":{"gitId":"jeffreygohkw"},"content":"        Location from \u003d new Location(\"NUS\");"},{"lineNumber":613,"author":{"gitId":"jeffreygohkw"},"content":"        Location to \u003d new Location(\"Sentosa\");"},{"lineNumber":614,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(new NavigateCommand(from, to, null, null, false, false),"},{"lineNumber":615,"author":{"gitId":"jeffreygohkw"},"content":"                command);"},{"lineNumber":616,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":618,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":619,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasNavigate() throws Exception {"},{"lineNumber":620,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand command \u003d (NavigateCommand) parser.parseCommand("},{"lineNumber":621,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.COMMAND_ALIAS + \" \" + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":622,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", DEFAULT_STATE_LOCK);"},{"lineNumber":623,"author":{"gitId":"jeffreygohkw"},"content":"        Location from \u003d new Location(\"NUS\");"},{"lineNumber":624,"author":{"gitId":"jeffreygohkw"},"content":"        Location to \u003d new Location(\"Sentosa\");"},{"lineNumber":625,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(new NavigateCommand(from, to, null, null, false, false),"},{"lineNumber":626,"author":{"gitId":"jeffreygohkw"},"content":"                command);"},{"lineNumber":627,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":628,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":629,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":630,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":631,"author":{"gitId":"charlesgoh"},"content":"    public void parseSortCommandWord() throws Exception {"},{"lineNumber":632,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \""},{"lineNumber":633,"author":{"gitId":"charlesgoh"},"content":"                + SortCommand.ACCEPTED_LIST_PARAMETERS.get(0) + \" \" + SortCommand.ACCEPTED_FIELD_PARAMETERS.get(0)"},{"lineNumber":634,"author":{"gitId":"charlesgoh"},"content":"                + \" \" + SortCommand.ACCEPTED_ORDER_PARAMETERS.get(0), DEFAULT_STATE_LOCK) instanceof SortCommand);"},{"lineNumber":635,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":636,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":637,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":638,"author":{"gitId":"charlesgoh"},"content":"    public void parseSortCommandAlias() throws Exception {"},{"lineNumber":639,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_ALIAS + \" \""},{"lineNumber":640,"author":{"gitId":"charlesgoh"},"content":"                + SortCommand.ACCEPTED_LIST_PARAMETERS.get(0) + \" \" + SortCommand.ACCEPTED_FIELD_PARAMETERS.get(0)"},{"lineNumber":641,"author":{"gitId":"charlesgoh"},"content":"                + \" \" + SortCommand.ACCEPTED_ORDER_PARAMETERS.get(0), DEFAULT_STATE_LOCK) instanceof SortCommand);"},{"lineNumber":642,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":643,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":644,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":645,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandBackup() throws Exception {"},{"lineNumber":646,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(BackupCommand"},{"lineNumber":647,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" testbackupfilename\", DEFAULT_STATE_LOCK) instanceof BackupCommand);"},{"lineNumber":648,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(BackupCommand"},{"lineNumber":649,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" testbackupfilename\", DEFAULT_STATE_LOCK) instanceof BackupCommand);"},{"lineNumber":650,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":651,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":652,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":653,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandFontSizeWord() throws Exception {"},{"lineNumber":654,"author":{"gitId":"charlesgoh"},"content":"        for (String arg: FontSizeCommand.ACCEPTED_PARAMETERS) {"},{"lineNumber":655,"author":{"gitId":"charlesgoh"},"content":"            assertTrue(parser"},{"lineNumber":656,"author":{"gitId":"charlesgoh"},"content":"                    .parseCommand(FontSizeCommand"},{"lineNumber":657,"author":{"gitId":"charlesgoh"},"content":"                            .COMMAND_WORD + \" \" + arg, DEFAULT_STATE_LOCK) instanceof FontSizeCommand);"},{"lineNumber":658,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":659,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":660,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":661,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":662,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandFontSizeAlias() throws Exception {"},{"lineNumber":663,"author":{"gitId":"charlesgoh"},"content":"        for (String arg: FontSizeCommand.ACCEPTED_PARAMETERS) {"},{"lineNumber":664,"author":{"gitId":"charlesgoh"},"content":"            assertTrue(parser"},{"lineNumber":665,"author":{"gitId":"charlesgoh"},"content":"                    .parseCommand(FontSizeCommand"},{"lineNumber":666,"author":{"gitId":"charlesgoh"},"content":"                            .COMMAND_ALIAS + \" \" + arg, DEFAULT_STATE_LOCK) instanceof FontSizeCommand);"},{"lineNumber":667,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":668,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":669,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":670,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":671,"author":{"gitId":"charlesgoh"},"content":"    public void parseLockCommandValid() throws Exception {"},{"lineNumber":672,"author":{"gitId":"charlesgoh"},"content":"        // Pass parser without prefix"},{"lineNumber":673,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(LockCommand"},{"lineNumber":674,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" randompassword\", DEFAULT_STATE_LOCK) instanceof LockCommand);"},{"lineNumber":675,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":676,"author":{"gitId":"charlesgoh"},"content":"        // Pass parser with prefix"},{"lineNumber":677,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(LockCommand"},{"lineNumber":678,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" \" + PREFIX_PASSWORD + \" randompassword\", DEFAULT_STATE_LOCK) instanceof LockCommand);"},{"lineNumber":679,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":680,"author":{"gitId":"charlesgoh"},"content":"        // Do the same tests, this time with command alias"},{"lineNumber":681,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(LockCommand"},{"lineNumber":682,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" randompassword\", DEFAULT_STATE_LOCK) instanceof LockCommand);"},{"lineNumber":683,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":684,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(LockCommand"},{"lineNumber":685,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" \" + PREFIX_PASSWORD + \" randompassword\", DEFAULT_STATE_LOCK) instanceof LockCommand);"},{"lineNumber":686,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":687,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":688,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":689,"author":{"gitId":"charlesgoh"},"content":"    public void parseLockCommandWordInvalid() throws Exception {"},{"lineNumber":690,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":691,"author":{"gitId":"charlesgoh"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LockCommand.MESSAGE_USAGE));"},{"lineNumber":692,"author":{"gitId":"charlesgoh"},"content":"        parser.parseCommand(LockCommand.COMMAND_WORD, DEFAULT_STATE_LOCK);"},{"lineNumber":693,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":694,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":695,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":696,"author":{"gitId":"charlesgoh"},"content":"    public void parseLockCommandAliasInvalid() throws Exception {"},{"lineNumber":697,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":698,"author":{"gitId":"charlesgoh"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LockCommand.MESSAGE_USAGE));"},{"lineNumber":699,"author":{"gitId":"charlesgoh"},"content":"        parser.parseCommand(LockCommand.COMMAND_ALIAS, DEFAULT_STATE_LOCK);"},{"lineNumber":700,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":701,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":702,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":703,"author":{"gitId":"charlesgoh"},"content":"    public void parseUnlockCommandValid() throws Exception {"},{"lineNumber":704,"author":{"gitId":"charlesgoh"},"content":"        // Pass parser without prefix"},{"lineNumber":705,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(UnlockCommand"},{"lineNumber":706,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" randompassword\", DEFAULT_STATE_LOCK) instanceof UnlockCommand);"},{"lineNumber":707,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":708,"author":{"gitId":"charlesgoh"},"content":"        // Pass parser with prefix"},{"lineNumber":709,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(UnlockCommand"},{"lineNumber":710,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" \""},{"lineNumber":711,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_PASSWORD + \" randompassword\", DEFAULT_STATE_LOCK) instanceof UnlockCommand);"},{"lineNumber":712,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":713,"author":{"gitId":"charlesgoh"},"content":"        // Do the same tests, this time with command alias"},{"lineNumber":714,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(UnlockCommand"},{"lineNumber":715,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" randompassword\", DEFAULT_STATE_LOCK) instanceof UnlockCommand);"},{"lineNumber":716,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":717,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(UnlockCommand"},{"lineNumber":718,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" \" + PREFIX_PASSWORD"},{"lineNumber":719,"author":{"gitId":"charlesgoh"},"content":"                + \" randompassword\", DEFAULT_STATE_LOCK) instanceof UnlockCommand);"},{"lineNumber":720,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":721,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":722,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":723,"author":{"gitId":"charlesgoh"},"content":"    public void parseUnlockCommandWordInvalid() throws Exception {"},{"lineNumber":724,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":725,"author":{"gitId":"charlesgoh"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlockCommand.MESSAGE_USAGE));"},{"lineNumber":726,"author":{"gitId":"charlesgoh"},"content":"        parser.parseCommand(UnlockCommand.COMMAND_WORD, DEFAULT_STATE_LOCK);"},{"lineNumber":727,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":728,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":729,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":730,"author":{"gitId":"charlesgoh"},"content":"    public void parseUnlockCommandAliasInvalid() throws Exception {"},{"lineNumber":731,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":732,"author":{"gitId":"charlesgoh"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlockCommand.MESSAGE_USAGE));"},{"lineNumber":733,"author":{"gitId":"charlesgoh"},"content":"        parser.parseCommand(UnlockCommand.COMMAND_ALIAS, DEFAULT_STATE_LOCK);"},{"lineNumber":734,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":735,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":736,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":737,"author":{"gitId":"charlesgoh"},"content":"    public void parseChangePasswordCommand() throws Exception {"},{"lineNumber":738,"author":{"gitId":"charlesgoh"},"content":"        // Pass inputs that are correct and valid"},{"lineNumber":739,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":740,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" \" + PREFIX_PASSWORD + \"password \""},{"lineNumber":741,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_NEW_PASSWORD + \"newpassword \""},{"lineNumber":742,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_CONFIRM_PASSWORD + \"newpassword \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":743,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":744,"author":{"gitId":"charlesgoh"},"content":"        // Pass inputs that are wrong but valid"},{"lineNumber":745,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":746,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" \" + PREFIX_PASSWORD + \"password \""},{"lineNumber":747,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_NEW_PASSWORD + \"newpassword \""},{"lineNumber":748,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_CONFIRM_PASSWORD + \"newpassword:P \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":749,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":750,"author":{"gitId":"charlesgoh"},"content":"        // Pass inputs that have the wrong order (i.e. fields are in the wrong order)"},{"lineNumber":751,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":752,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" \" + PREFIX_NEW_PASSWORD + \"newpassword \""},{"lineNumber":753,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_PASSWORD + \"password \""},{"lineNumber":754,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_CONFIRM_PASSWORD + \"newpassword:P \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":755,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":756,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":757,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_WORD + \" \" + PREFIX_CONFIRM_PASSWORD + \"newpassword:P \""},{"lineNumber":758,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_PASSWORD + \"password \""},{"lineNumber":759,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_NEW_PASSWORD + \"newpassword \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":760,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":761,"author":{"gitId":"charlesgoh"},"content":"        // Do the same thing for alias counterparts"},{"lineNumber":762,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":763,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" \" + PREFIX_PASSWORD + \"password \""},{"lineNumber":764,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_NEW_PASSWORD + \"newpassword \""},{"lineNumber":765,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_CONFIRM_PASSWORD + \"newpassword \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":766,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":767,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":768,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" \" + PREFIX_PASSWORD + \"password \""},{"lineNumber":769,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_NEW_PASSWORD + \"newpassword \""},{"lineNumber":770,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_CONFIRM_PASSWORD + \"newpassword:P \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":771,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":772,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":773,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" \" + PREFIX_NEW_PASSWORD + \"newpassword \""},{"lineNumber":774,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_PASSWORD + \"password \""},{"lineNumber":775,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_CONFIRM_PASSWORD + \"newpassword:P \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":776,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":777,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(ChangePasswordCommand"},{"lineNumber":778,"author":{"gitId":"charlesgoh"},"content":"                .COMMAND_ALIAS + \" \" + PREFIX_CONFIRM_PASSWORD + \"newpassword:P \""},{"lineNumber":779,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_PASSWORD + \"password \""},{"lineNumber":780,"author":{"gitId":"charlesgoh"},"content":"                + PREFIX_NEW_PASSWORD + \"newpassword \", DEFAULT_STATE_LOCK) instanceof ChangePasswordCommand);"},{"lineNumber":781,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":782,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":783,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":784,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandRedoCommandWordReturnsRedoCommand() throws Exception {"},{"lineNumber":785,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof RedoCommand);"},{"lineNumber":786,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(\"redo 1\", DEFAULT_STATE_LOCK) instanceof RedoCommand);"},{"lineNumber":787,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":788,"author":{"gitId":"-"},"content":""},{"lineNumber":789,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":790,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":791,"author":{"gitId":"Esilocke"},"content":"    public void  parseCommandSetComplete() throws Exception {"},{"lineNumber":792,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand command \u003d (SetCompleteCommand) parser.parseCommand(SetCompleteCommand.COMMAND_WORD"},{"lineNumber":793,"author":{"gitId":"Esilocke"},"content":"                + \" \" + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":794,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new SetCompleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":795,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":796,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":797,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":798,"author":{"gitId":"Esilocke"},"content":"    public void  parseCommandAliasSetComplete() throws Exception {"},{"lineNumber":799,"author":{"gitId":"Esilocke"},"content":"        SetCompleteCommand command \u003d (SetCompleteCommand) parser.parseCommand(SetCompleteCommand.COMMAND_ALIAS"},{"lineNumber":800,"author":{"gitId":"Esilocke"},"content":"                + \" \" + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":801,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new SetCompleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":802,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":803,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":804,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":805,"author":{"gitId":"Esilocke"},"content":"    public void  parseCommandSetIncomplete() throws Exception {"},{"lineNumber":806,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand command \u003d (SetIncompleteCommand) parser.parseCommand(SetIncompleteCommand.COMMAND_ALIAS"},{"lineNumber":807,"author":{"gitId":"Esilocke"},"content":"                + \" \" + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":808,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new SetIncompleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":809,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":810,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":811,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":812,"author":{"gitId":"Esilocke"},"content":"    public void  parseCommandAliasSetIncomplete() throws Exception {"},{"lineNumber":813,"author":{"gitId":"Esilocke"},"content":"        SetIncompleteCommand command \u003d (SetIncompleteCommand) parser.parseCommand(SetIncompleteCommand.COMMAND_ALIAS"},{"lineNumber":814,"author":{"gitId":"Esilocke"},"content":"                + \" \" + INDEX_FIRST_TASK.getOneBased(), DEFAULT_STATE_LOCK);"},{"lineNumber":815,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new SetIncompleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":816,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":817,"author":{"gitId":"Esilocke"},"content":"    //@@author"},{"lineNumber":818,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":819,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":820,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUndoCommandWordReturnsUndoCommand() throws Exception {"},{"lineNumber":821,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, DEFAULT_STATE_LOCK) instanceof UndoCommand);"},{"lineNumber":822,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(\"undo 3\", DEFAULT_STATE_LOCK) instanceof UndoCommand);"},{"lineNumber":823,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":824,"author":{"gitId":"-"},"content":""},{"lineNumber":825,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":826,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUnrecognisedInputThrowsParseException() throws Exception {"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":828,"author":{"gitId":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":829,"author":{"gitId":"charlesgoh"},"content":"        parser.parseCommand(\"\", DEFAULT_STATE_LOCK);"},{"lineNumber":830,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":831,"author":{"gitId":"-"},"content":""},{"lineNumber":832,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":833,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUnknownCommandThrowsParseException() throws Exception {"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":836,"author":{"gitId":"charlesgoh"},"content":"        parser.parseCommand(\"unknownCommand\", DEFAULT_STATE_LOCK);"},{"lineNumber":837,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":838,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":839,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":840,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":841,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if 2 ChangePrivacyCommands are equal"},{"lineNumber":842,"author":{"gitId":"jeffreygohkw"},"content":"     * @param command the expected command"},{"lineNumber":843,"author":{"gitId":"jeffreygohkw"},"content":"     * @param actualCommand the actual command"},{"lineNumber":844,"author":{"gitId":"jeffreygohkw"},"content":"     * @return true if all the data are equal"},{"lineNumber":845,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":846,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean changePrivacyCommandsEqual(ChangePrivacyCommand command, ChangePrivacyCommand actualCommand) {"},{"lineNumber":847,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getIndex(), actualCommand.getIndex());"},{"lineNumber":848,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getAddressIsPrivate(), actualCommand.getPps().getAddressIsPrivate());"},{"lineNumber":849,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getNameIsPrivate(), actualCommand.getPps().getNameIsPrivate());"},{"lineNumber":850,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getEmailIsPrivate(), actualCommand.getPps().getEmailIsPrivate());"},{"lineNumber":851,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getPhoneIsPrivate(), actualCommand.getPps().getPhoneIsPrivate());"},{"lineNumber":852,"author":{"gitId":"jeffreygohkw"},"content":"        return true;"},{"lineNumber":853,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":854,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":223,"jeffreygohkw":156,"Esilocke":164,"wangyiming1019":201,"-":110}},{"path":"src/test/java/seedu/address/logic/parser/AssignCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AssignCommand;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class AssignCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private AssignTaskCommandParser parser \u003d new AssignTaskCommandParser();"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public void parseValidPersonIndexAndTaskIndex_success() throws ParseException {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TARGET.getPrefix() + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, new AssignCommand(indexes, INDEX_FIRST_TASK));"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public void parseInvalidIndexes_failure() throws ParseException {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        // invalid person indexes"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d \"aaaaa\" + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TARGET.getPrefix() + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_INDEX);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        // invalid task index"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TARGET.getPrefix() + \"aaaaa\";"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    public void parseInvalidArgsFailure() throws Exception {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        // no person indexes specified"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d \" \" + PREFIX_TARGET.getPrefix() + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, AssignCommand.MESSAGE_INVALID_PERSONS_ARGS);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        // no target prefix"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                AssignCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        // no task index specified"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TARGET.getPrefix();"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, AssignCommand.MESSAGE_INVALID_TARGET_ARGS);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":63}},{"path":"src/test/java/seedu/address/logic/parser/ChangePrivacyCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonPrivacySettingsBuilder;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommandParserTest {"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    private ChangePrivacyCommandParser parser \u003d new ChangePrivacyCommandParser();"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        // no index specified"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        // no field specified"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\", ChangePrivacyCommand.MESSAGE_NO_FIELDS);"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        // no index and no field specified"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        // negative index"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        // zero index"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        // Non boolean argument"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_NAME + \"notBoolean\","},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_PHONE + \"notBoolean\","},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_EMAIL + \"notBoolean\","},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_ADDRESS + \"notBoolean\","},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_REMARK + \"notBoolean\","},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        // valid value followed by invalid value. The test case for invalid value  followed by valid value"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_NAME + \"notBoolean\","},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_PHONE + \"true\" + \" \" + PREFIX_PHONE + \"notBoolean\","},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_EMAIL + \"true\" + \" \" + PREFIX_EMAIL + \"notBoolean\","},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_ADDRESS + \"true\" + \" \" + PREFIX_ADDRESS + \"notBoolean\","},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_REMARK + \"true\" + \" \" + PREFIX_REMARK + \"notBoolean\","},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_allFieldsSpecified_success() throws ParseException {"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_EMAIL + \"false\""},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_ADDRESS + \"true\" + \" \" + PREFIX_PHONE + \"false\";"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\")"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"                .setEmailPrivate(\"false\").setAddressPrivate(\"true\").setPhonePrivate(\"false\").build();"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_someFieldsSpecified_success() throws ParseException {"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_EMAIL + \"true\";"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\")"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"                .setEmailPrivate(\"true\").build();"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_oneFieldSpecified_success() throws ParseException {"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\";"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\").build();"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() throws ParseException {"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_EMAIL + \"false\""},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_ADDRESS + \"true\" + \" \" + PREFIX_PHONE + \"false\" + \" \" + PREFIX_NAME + \"false\" + \" \""},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"                + PREFIX_EMAIL + \"true\" + \" \" + PREFIX_ADDRESS + \"false\" + \" \" + PREFIX_PHONE + \"true\";"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"false\")"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"                .setEmailPrivate(\"true\").setAddressPrivate(\"false\").setPhonePrivate(\"true\").build();"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidValueFollowedByValidValue_success() throws ParseException {"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"notBoolean\" + \" \" + PREFIX_NAME + \"true\";"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\").build();"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if two ChangePrivacyCommands are equal by comparing their contents"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"     * @param expectedCommand The expected ChangePrivacyCommand"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"     * @param actualCommand The actual ChangePrivacyCommand"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"    private void compareChangePrivacyCommand(ChangePrivacyCommand expectedCommand, ChangePrivacyCommand actualCommand) {"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getIndex(), actualCommand.getIndex());"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getAddressIsPrivate(), actualCommand.getPps().getAddressIsPrivate());"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getNameIsPrivate(), actualCommand.getPps().getNameIsPrivate());"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getEmailIsPrivate(), actualCommand.getPps().getEmailIsPrivate());"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getPhoneIsPrivate(), actualCommand.getPps().getPhoneIsPrivate());"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getRemarkIsPrivate(), actualCommand.getPps().getRemarkIsPrivate());"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":174}},{"path":"src/test/java/seedu/address/logic/parser/ClearCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearPersonCommand;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearTaskCommand;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"public class ClearCommandParserTest {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    private ClearCommandParser parser \u003d new ClearCommandParser();"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public void parseInvalidType_failure() throws ParseException {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \" some invalid value\","},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public void parseValidTypes_success() throws ParseException {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ClearCommand expectedClearAll \u003d new ClearCommand();"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        assertTrue(parser.parse(\" \" + PREFIX_PERSON.getPrefix()) instanceof ClearPersonCommand);"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        assertTrue(parser.parse(\" \" + PREFIX_TASK.getPrefix()) instanceof ClearTaskCommand);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        ClearCommand multipleTypesSpecified \u003d parser.parse(\" \" + PREFIX_PERSON.getPrefix() + \" \""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TASK.getPrefix());"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        assertFalse(multipleTypesSpecified instanceof ClearPersonCommand);"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertFalse(multipleTypesSpecified instanceof ClearTaskCommand);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        ClearCommand repeatedTypes \u003d parser.parse(\" \" + PREFIX_PERSON.getPrefix() + \" \""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_TASK.getPrefix() + PREFIX_PERSON.getPrefix() + \" \" + PREFIX_TASK.getPrefix() + \" \");"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        assertFalse(repeatedTypes instanceof ClearPersonCommand);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        assertFalse(repeatedTypes instanceof ClearTaskCommand);"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":43}},{"path":"src/test/java/seedu/address/logic/parser/DeletePersonCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class DeletePersonCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":8,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public void parseValidIndexAndTagSuccess() throws Exception {"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(tagName);"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString()"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                + tagName;"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, userInput, new DeleteTagCommand(tagToDelete, indexes));"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        final String nonExistentTagName \u003d \"hello\";"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        Tag nonExistentTag \u003d new Tag(nonExistentTagName);"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString()"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"                + nonExistentTagName;"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, userInput, new DeleteTagCommand(nonExistentTag, indexes));"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidTagFailure() throws Exception {"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        final String tagToDelete \u003d \"friends\";"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString();"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, userInput, MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidArgsFailure() throws Exception {"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, DeleteTagCommand.COMMAND_WORD,"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"}"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":""}],"authorContributionMap":{"wangyiming1019":66}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_SEPARATOR;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class DeleteTaskCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskValidArgs_returnsDeleteCommand() {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, TASK_SEPARATOR + \"1\","},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"                new DeleteTaskCommand(INDEX_FIRST_TASK));"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskInvalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"a\","},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":28}},{"path":"src/test/java/seedu/address/logic/parser/DismissCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class DismissCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private DismissTaskCommandParser parser \u003d new DismissTaskCommandParser();"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public void parseValidPersonIndexAndTaskIndex_success() throws ParseException {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_FROM.getPrefix() + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, new DismissCommand(indexes, INDEX_FIRST_TASK));"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public void parseInvalidIndexes_failure() throws ParseException {"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        // invalid person indexes"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d \"aaaaa\" + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_FROM.getPrefix() + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_INDEX);"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        // invalid task index"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_FROM.getPrefix() + \"aaaaa\";"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    public void parseInvalidArgsFailure() throws Exception {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        // no person indexes specified"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d \" \" + PREFIX_FROM.getPrefix() + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, DismissCommand.MESSAGE_INVALID_PERSONS_ARGS);"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        // no target prefix"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                + INDEX_FIRST_TASK.getOneBased();"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"                DismissCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        // no task index specified"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON.getOneBased() + \" \""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"                + PREFIX_FROM.getPrefix();"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, userInput, DismissCommand.MESSAGE_INVALID_TARGET_ARGS);"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":63}},{"path":"src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"public class EditPersonCommandParserTest {"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":16,"-":192}},{"path":"src/test/java/seedu/address/logic/parser/EditTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_DUPLICATE_TAGS;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_INSUFFICIENT_ARGS;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTagCommand;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private EditTagCommandParser parser \u003d new EditTagCommandParser();"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public void invalidInputTest() {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        // empty argument"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        // too little args"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INSUFFICIENT_ARGS);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        // too many args"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND + \" \" + VALID_TAG_FRIEND"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"                + \" \" + VALID_TAG_FRIEND, MESSAGE_INSUFFICIENT_ARGS);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        // args are the same"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND + \" \" + VALID_TAG_FRIEND, MESSAGE_DUPLICATE_TAGS);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        // args are invalid"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, INVALID_TAG_DESC + \" \" + INVALID_TAG_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public void validInputTest() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        Tag friendTag \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        Tag husbandTag \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        Tag friendTagUpper \u003d new Tag (VALID_TAG_FRIEND.toUpperCase());"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        // case changes"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND + \" \""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"                + VALID_TAG_FRIEND.toUpperCase(), new EditTagCommand(friendTag, friendTagUpper));"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        // two distinct words"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND + \" \""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"                + VALID_TAG_HUSBAND, new EditTagCommand(friendTag, husbandTag));"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":53}},{"path":"src/test/java/seedu/address/logic/parser/EditTaskCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_PAPER;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_PENCIL;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PAPER;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PENCIL;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PAPER;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PENCIL;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_ADDRESS_DESC_PAPER;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_ADDRESS_DESC_PENCIL;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PAPER;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_SEPARATOR;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PAPER;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PENCIL;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PAPER;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PENCIL;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PAPER;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PENCIL;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ADDRESS_PAPER;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ADDRESS_PENCIL;"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTaskCommand;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"public class EditTaskCommandParserTest {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE);"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        // no index specified"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + VALID_TASK_NAME_PAPER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        // no field specified"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\", EditTaskCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        // no index and no field specified"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        // negative index"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"-5\" + TASK_NAME_DESC_PAPER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        // zero index"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"0\" + TASK_NAME_DESC_PAPER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\" + INVALID_TASK_NAME_DESC,"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"                TaskName.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\" + INVALID_DEADLINE_DESC,"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"                Deadline.MESSAGE_INVALID_DATE); // invalid deadline"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\" + INVALID_PRIORITY_DESC,"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"                Priority.MESSAGE_PRIORITY_CONSTRAINTS); // invalid priority"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        // invalid phone followed by valid email"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\" + INVALID_DEADLINE_DESC + PRIORITY_DESC_PAPER,"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"                Deadline.MESSAGE_INVALID_DATE);"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\" + DEADLINE_DESC_PAPER + INVALID_DEADLINE_DESC,"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"                Deadline.MESSAGE_INVALID_DATE);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"1\" + INVALID_TASK_NAME_DESC + INVALID_PRIORITY_DESC"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"                + VALID_DEADLINE_PAPER + VALID_DESCRIPTION_PAPER, TaskName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + TASK_NAME_DESC_PAPER + DESCRIPTION_DESC_PAPER"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"                + DEADLINE_DESC_PAPER + PRIORITY_DESC_PAPER + TASK_ADDRESS_DESC_PAPER;"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"                .withTaskName(VALID_TASK_NAME_PAPER).withDescription(VALID_DESCRIPTION_PAPER)"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).withPriority(VALID_PRIORITY_PAPER)"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"                .withTaskAddress(VALID_TASK_ADDRESS_PAPER).build();"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + DESCRIPTION_DESC_PAPER + DEADLINE_DESC_PAPER;"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PAPER).withDeadline(VALID_DEADLINE_PAPER).build();"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        // name"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + TASK_NAME_DESC_PAPER;"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"                .withTaskName(VALID_TASK_NAME_PAPER).build();"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"        // phone"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + DESCRIPTION_DESC_PAPER;"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_PAPER).build();"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        // email"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + DEADLINE_DESC_PAPER;"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_PAPER).build();"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"        // address"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + PRIORITY_DESC_PAPER;"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_PAPER).build();"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        // tags"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + TASK_ADDRESS_DESC_PAPER;"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskAddress(VALID_TASK_ADDRESS_PAPER).build();"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased()  + DESCRIPTION_DESC_PAPER + DEADLINE_DESC_PAPER"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PAPER + TASK_ADDRESS_DESC_PAPER + DESCRIPTION_DESC_PAPER + DEADLINE_DESC_PAPER"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PAPER + TASK_ADDRESS_DESC_PAPER + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL + TASK_ADDRESS_DESC_PENCIL;"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PENCIL).withDeadline(VALID_DEADLINE_PENCIL)"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"                .withPriority(VALID_PRIORITY_PENCIL).withTaskAddress(VALID_TASK_ADDRESS_PENCIL).build();"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"        // no other valid values specified"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"        String userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_DESC_PAPER;"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).build();"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"        // other valid values specified"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"        userInput \u003d TASK_SEPARATOR + targetIndex.getOneBased() + PRIORITY_DESC_PAPER + INVALID_DEADLINE_DESC"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PAPER + DEADLINE_DESC_PAPER;"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_PAPER)"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).withPriority(VALID_PRIORITY_PAPER).build();"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":194}},{"path":"src/test/java/seedu/address/logic/parser/FIndTaskCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_SEPARATOR;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"public class FIndTaskCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"                FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        FindTaskCommand expectedFindTaskCommand \u003d"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"                new FindTaskCommand(new TaskContainsKeywordPredicate(Arrays.asList(\"Lucy\", \"Date\")));"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, TASK_SEPARATOR + \"Lucy Date\", expectedFindTaskCommand);"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, TASK_SEPARATOR + \" \\n Lucy \\n \\t Date  \\t\", expectedFindTaskCommand);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":36}},{"path":"src/test/java/seedu/address/logic/parser/FavouriteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    private FavouriteCommandParser parser \u003d new FavouriteCommandParser();"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_validArgs_returnsFavouriteCommand() {"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \"1\", new FavouriteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"f\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"                FavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":27}},{"path":"src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class FindPersonCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"                FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":8,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/FindTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    private FindTagCommandParser parser \u003d new FindTagCommandParser();"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    public void parseValidArgsReturnsFindTagCommand() {"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand expectedFindTagCommand \u003d"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"                new FindTagCommand(new NameContainsTagsPredicate("},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"                        Arrays.asList(\"friend\", \"colleague\")));"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \"friend colleague\", expectedFindTagCommand);"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \" \\n friend \\n \\t colleague  \\t\", expectedFindTagCommand);"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":39}},{"path":"src/test/java/seedu/address/logic/parser/FontSizeCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.ACCEPTED_PARAMETERS;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.FontSizeCommand.MESSAGE_USAGE;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.FontSizeCommand;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"//author charlesgoh"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"public class FontSizeCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    private FontSizeCommandParser parser \u003d new FontSizeCommandParser();"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public void parse_wrongArguments_failure() {"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"        // No arguments specified"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        // Wrong arguments specified"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, \"random input\","},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"    public void parse_validArguments_success() throws ParseException {"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        FontSizeCommand expectedCommand;"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        FontSizeCommand actualCommand;"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        for (String arg: ACCEPTED_PARAMETERS) {"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"            expectedCommand \u003d new FontSizeCommand(arg);"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"            // Check for command word"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"            actualCommand \u003d parser.parse(arg);"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"            assertEquals(actualCommand.getOption(), expectedCommand.getOption());"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"            // Check for command alias"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"            actualCommand \u003d parser.parse(arg);"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"            assertEquals(actualCommand.getOption(), expectedCommand.getOption());"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":45}},{"path":"src/test/java/seedu/address/logic/parser/LocateCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":" * Test scope: similar to {@code SelectPersonCommandParserTest}."},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":" * @see SelectPersonCommandParserTest"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommandParserTest {"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    private LocateCommandParser parser \u003d new LocateCommandParser();"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_validArgs_returnsLocateCommand() {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \"1\", new LocateCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":30}},{"path":"src/test/java/seedu/address/logic/parser/NavigateCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@autho jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_PERSON;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_FROM_TASK;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_ADDRESS;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_PERSON;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAVIGATE_TO_TASK;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.NavigateCommand;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"public class NavigateCommandParserTest {"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private NavigateCommandParser parser \u003d new NavigateCommandParser();"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_allFieldsPresent_success() throws IllegalValueException {"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        //From address to address"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fata \u003d new NavigateCommand(new Location(\"NUS\"), new Location(\"Sentosa\"),"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"                null, null, false, false);"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \" + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", fata);"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        //From address to person"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fatp \u003d new NavigateCommand(new Location(\"NUS\"), null,"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"                null, INDEX_FIRST_PERSON, false, false);"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"1\", fatp);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        //From address to task"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fatt \u003d new NavigateCommand(new Location(\"NUS\"), null,"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"                null, INDEX_FIRST_TASK, false, true);"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_TASK + \"1\", fatt);"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        //From person to address"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fpta \u003d new NavigateCommand(null, new Location(\"Sentosa\"),"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_SECOND_PERSON, null, false, false);"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_PERSON + \"2\""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", fpta);"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        //From person to person"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fptp \u003d new NavigateCommand(null, null,"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_SECOND_PERSON, INDEX_THIRD_PERSON, false, false);"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_PERSON + \"2\""},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"3\", fptp);"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        //From person to task"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fptt \u003d new NavigateCommand(null, null,"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_SECOND_PERSON, INDEX_SECOND_TASK, false, true);"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_PERSON + \"2\""},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_TASK + \"2\", fptt);"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        //From task to address"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand ftta \u003d new NavigateCommand(null, new Location(\"Sentosa\"),"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_THIRD_TASK, null, true, false);"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_TASK + \"3\""},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", ftta);"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        //From task to person"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fttp \u003d new NavigateCommand(null, null,"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_THIRD_TASK, INDEX_THIRD_PERSON, true, false);"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_TASK + \"3\""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"3\", fttp);"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        //From task to task"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        NavigateCommand fttt \u003d new NavigateCommand(null, null,"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"                INDEX_THIRD_TASK, INDEX_FIRST_TASK, true, true);"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_TASK + \"3\""},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_TASK + \"1\", fttt);"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_repeatedFromAndTos_failure() {"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        //Multiple Froms"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_FROM_PERSON + \"1\" + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\","},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAVIGATE_FROM_TASK + \"1\" + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\","},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_TASK + \"1\""},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_FROM_PERSON + \"1\" + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\","},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_TASK + \"1\""},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_FROM_PERSON + \"1\" + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", NavigateCommand.MESSAGE_MULTIPLE_FROM_ERROR);"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        //Multiple Tos"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"1\" + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\","},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_TASK + \"1\" + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\","},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"1\" + \" \" + PREFIX_NAVIGATE_TO_TASK + \"2\","},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"                NavigateCommand.MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \"  + PREFIX_NAVIGATE_TO_TASK + \"1\" + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"1\""},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_ADDRESS + \"Sentosa\", NavigateCommand.MESSAGE_MULTIPLE_TO_ERROR);"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_missingFromOrTo_failure() {"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        //No To"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\","},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigateCommand.MESSAGE_USAGE));"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"        //No From"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_TO_ADDRESS + \"NUS\","},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NavigateCommand.MESSAGE_USAGE));"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        //Non positive indices"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, NavigateCommand.COMMAND_WORD + \" \"  + PREFIX_NAVIGATE_FROM_ADDRESS + \"NUS\""},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_NAVIGATE_TO_PERSON + \"-1\", ParserUtil.MESSAGE_INVALID_INDEX);"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":139}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    private static final boolean PRIVATE_FIELD \u003d true;"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    private static final String INVALID_REMARK \u003d \" \";"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    private static final String INVALID_AVATAR \u003d \" \";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    private static final String INVALID_TASK_NAME \u003d \" \";"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    private static final String INVALID_DEADLINE \u003d \"The distant, distant past\";"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    private static final String INVALID_PRIORITY \u003d \"99\";"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    private static final String INVALID_TASK_ADDRESS \u003d \" \";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_REMARK \u003d \"Thinks that P\u003dNP\";"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_AVATAR \u003d \"valid_file.png\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_TASK_NAME \u003d \"Launcher\";"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_DESCRIPTION \u003d \"An arbitrary decision\";"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_DEADLINE \u003d \"2 weeks later\";"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_PRIORITY \u003d \"3\";"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    private static final String VALID_TASK_ADDRESS \u003d \"NUS\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        ParserUtil.parseName(null);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ParserUtil.parseName(Optional.of(INVALID_NAME));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseName_validValue_returnsName() throws Exception {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        Name expectedPrivateName \u003d new Name(VALID_NAME, PRIVATE_FIELD);"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cName\u003e actualPrivateName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, actualName.get());"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedPrivateName, actualPrivateName.get());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() throws Exception {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        ParserUtil.parsePhone(null);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parsePhone_validValue_returnsPhone() throws Exception {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        Phone expectedPrivatePhone \u003d new Phone(VALID_PHONE, PRIVATE_FIELD);"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cPhone\u003e actualPrivatePhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, actualPhone.get());"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedPrivatePhone, actualPrivatePhone.get());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() throws Exception {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        ParserUtil.parseAddress(null);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parseAddress_validValue_returnsAddress() throws Exception {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"        Address expectedPrivateAddress \u003d new Address(VALID_ADDRESS, PRIVATE_FIELD);"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cAddress\u003e actualPrivateAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, actualAddress.get());"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedPrivateAddress, actualPrivateAddress.get());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() throws Exception {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        ParserUtil.parseEmail(null);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseEmail_validValue_returnsEmail() throws Exception {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":"        Email expectedPrivateEmail \u003d new Email(VALID_EMAIL, PRIVATE_FIELD);"},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cEmail\u003e actualPrivateEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, actualEmail.get());"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedPrivateEmail, actualPrivateEmail.get());"},{"lineNumber":202,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke"},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"    public void parseRemark_null_throwsNullPointerException() throws Exception {"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseRemark(null);"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"    public void parseRemark_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseRemark(Optional.of(INVALID_REMARK));"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"    public void parseRemark_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parseRemark(Optional.empty()).isPresent());"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"    public void parseRemark_validValue_returnsRemark() throws Exception {"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"        Remark expectedRemark \u003d new Remark(VALID_REMARK);"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cRemark\u003e actualRemark \u003d ParserUtil.parseRemark(Optional.of(VALID_REMARK));"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"        Remark expectedPrivateRemark \u003d new Remark(VALID_REMARK, PRIVATE_FIELD);"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cRemark\u003e actualPrivateRemark \u003d ParserUtil.parseRemark(Optional.of(VALID_REMARK));"},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedRemark, actualRemark.get());"},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedPrivateRemark, actualPrivateRemark.get());"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"    public void parseAvatar_null_throwsNullPointerException() throws Exception {"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseAvatar(null);"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":239,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"    public void parseAvatar_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":242,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseAvatar(Optional.of(INVALID_AVATAR));"},{"lineNumber":243,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":245,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":246,"author":{"gitId":"Esilocke"},"content":"    public void parseAvatar_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parseAvatar(Optional.empty()).isPresent());"},{"lineNumber":248,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"    public void parseAvatar_validValue_returnsAvatar() throws Exception {"},{"lineNumber":252,"author":{"gitId":"Esilocke"},"content":"        Avatar expectedAvatar \u003d new Avatar(VALID_AVATAR);"},{"lineNumber":253,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cAvatar\u003e actualAvatar \u003d ParserUtil.parseAvatar(Optional.of(VALID_AVATAR));"},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedAvatar, actualAvatar.get());"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":272,"author":{"gitId":"Esilocke"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":275,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":277,"author":{"gitId":"Esilocke"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":278,"author":{"gitId":"Esilocke"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":279,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseTaskName(null);"},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskName_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseTaskName(Optional.of(INVALID_TASK_NAME));"},{"lineNumber":293,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":295,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":296,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":297,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parseTaskName(Optional.empty()).isPresent());"},{"lineNumber":298,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":300,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":301,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskName_validValue_returnsTaskName() throws Exception {"},{"lineNumber":302,"author":{"gitId":"Esilocke"},"content":"        TaskName expectedTaskName \u003d new TaskName(VALID_TASK_NAME);"},{"lineNumber":303,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cTaskName\u003e actualTaskName \u003d ParserUtil.parseTaskName(Optional.of(VALID_TASK_NAME));"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedTaskName, actualTaskName.get());"},{"lineNumber":306,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":308,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":309,"author":{"gitId":"Esilocke"},"content":"    public void parseDescription_null_throwsNullPointerException() throws Exception {"},{"lineNumber":310,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseDescription(null);"},{"lineNumber":312,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":314,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":315,"author":{"gitId":"Esilocke"},"content":"    public void parseDescription_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parseDescription(Optional.empty()).isPresent());"},{"lineNumber":317,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":"    public void parseDescription_validValue_returnsDescription() throws Exception {"},{"lineNumber":321,"author":{"gitId":"Esilocke"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":322,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cDescription\u003e actualDescription \u003d ParserUtil.parseDescription(Optional.of(VALID_DESCRIPTION));"},{"lineNumber":323,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":324,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedDescription, actualDescription.get());"},{"lineNumber":325,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":327,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":328,"author":{"gitId":"Esilocke"},"content":"    public void parseDeadline_null_throwsNullPointerException() throws Exception {"},{"lineNumber":329,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":330,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseDeadline(null);"},{"lineNumber":331,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":333,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":334,"author":{"gitId":"Esilocke"},"content":"    public void parseDeadline_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":335,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":336,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseDeadline(Optional.of(INVALID_DEADLINE));"},{"lineNumber":337,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":339,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":340,"author":{"gitId":"Esilocke"},"content":"    public void parseDeadline_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":341,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parseDeadline(Optional.empty()).isPresent());"},{"lineNumber":342,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":344,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":345,"author":{"gitId":"Esilocke"},"content":"    public void parseDeadline_validValue_returnsDeadline() throws Exception {"},{"lineNumber":346,"author":{"gitId":"Esilocke"},"content":"        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cDeadline\u003e actualDeadline \u003d ParserUtil.parseDeadline(Optional.of(VALID_DEADLINE));"},{"lineNumber":348,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":349,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedDeadline, actualDeadline.get());"},{"lineNumber":350,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":352,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":353,"author":{"gitId":"Esilocke"},"content":"    public void parsePriority_null_throwsNullPointerException() throws Exception {"},{"lineNumber":354,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":355,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parsePriority(null);"},{"lineNumber":356,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":358,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":359,"author":{"gitId":"Esilocke"},"content":"    public void parsePriority_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":360,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":361,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parsePriority(Optional.of(INVALID_PRIORITY));"},{"lineNumber":362,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":363,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":364,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":"    public void parsePriority_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parsePriority(Optional.empty()).isPresent());"},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":369,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"    public void parsePriority_validValue_returnsPriority() throws Exception {"},{"lineNumber":371,"author":{"gitId":"Esilocke"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":372,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cPriority\u003e actualPriority \u003d ParserUtil.parsePriority(Optional.of(VALID_PRIORITY));"},{"lineNumber":373,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":374,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedPriority, actualPriority.get());"},{"lineNumber":375,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":377,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":378,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskAddress_null_throwsNullPointerException() throws Exception {"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseTaskAddress(null);"},{"lineNumber":381,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":383,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":384,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskAddress_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":385,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":386,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseTaskAddress(Optional.of(INVALID_TASK_ADDRESS));"},{"lineNumber":387,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":388,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":389,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":390,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":391,"author":{"gitId":"Esilocke"},"content":"        assertFalse(ParserUtil.parseTaskAddress(Optional.empty()).isPresent());"},{"lineNumber":392,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":393,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":394,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":395,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskAddress_validValue_returnsTaskAddress() throws Exception {"},{"lineNumber":396,"author":{"gitId":"Esilocke"},"content":"        TaskAddress expectedTaskAddress \u003d new TaskAddress(VALID_TASK_ADDRESS);"},{"lineNumber":397,"author":{"gitId":"Esilocke"},"content":"        Optional\u003cTaskAddress\u003e actualTaskAddress \u003d ParserUtil.parseTaskAddress(Optional.of(VALID_TASK_ADDRESS));"},{"lineNumber":398,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":399,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedTaskAddress, actualTaskAddress.get());"},{"lineNumber":400,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":401,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":402,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":403,"author":{"gitId":"Esilocke"},"content":"    public void parseIndexes_null_throwsNullPointerException() throws Exception {"},{"lineNumber":404,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":405,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseIndexes(null);"},{"lineNumber":406,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":407,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":408,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":409,"author":{"gitId":"Esilocke"},"content":"    public void parseIndexes_invalidValue_throwsParseException() throws Exception {"},{"lineNumber":410,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":411,"author":{"gitId":"Esilocke"},"content":"        ParserUtil.parseIndexes(\"1 2 a b c\");"},{"lineNumber":412,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":414,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":"    public void parseIndexes_validValue_returnsIndexes() throws Exception {"},{"lineNumber":416,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e expectedIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON,"},{"lineNumber":417,"author":{"gitId":"Esilocke"},"content":"                INDEX_THIRD_PERSON));"},{"lineNumber":418,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":419,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedIndexes, ParserUtil.parseIndexes(\"1 2 3\"));"},{"lineNumber":420,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedIndexes, ParserUtil.parseIndexes(\"     1   2    3   \"));"},{"lineNumber":421,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":260,"-":162}},{"path":"src/test/java/seedu/address/logic/parser/PrivacyLevelCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.PrivacyLevelCommand;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"public class PrivacyLevelCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    private PrivacyLevelCommandParser parser \u003d new PrivacyLevelCommandParser();"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \"1\", new PrivacyLevelCommand(INDEX_FIRST_PERSON.getOneBased()));"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \"2\", new PrivacyLevelCommand(INDEX_SECOND_PERSON.getOneBased()));"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \"3\", new PrivacyLevelCommand(INDEX_THIRD_PERSON.getOneBased()));"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"                PrivacyLevelCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"???\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"                PrivacyLevelCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":34}},{"path":"src/test/java/seedu/address/logic/parser/SelectPersonCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" * Test scope: similar to {@code DeletePersonCommandParserTest}."},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" * @see DeletePersonCommandParserTest"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"public class SelectPersonCommandParserTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \"1\", new SelectPersonCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":7,"-":23}},{"path":"src/test/java/seedu/address/logic/parser/SelectTaskCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectTaskCommand;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class SelectTaskCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_TASK.getPrefix() + \" 1\","},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"                new SelectTaskCommand(INDEX_FIRST_TASK));"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \" \" + PREFIX_TASK.getPrefix() + \" -1\","},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":28}},{"path":"src/test/java/seedu/address/logic/parser/SetCompleteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetCompleteCommand;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class SetCompleteCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    private SetTaskCompleteCommandParser parser \u003d new SetTaskCompleteCommandParser();"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \" 1\","},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"                new SetCompleteCommand(INDEX_FIRST_TASK));"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \" -1\","},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCompleteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":27}},{"path":"src/test/java/seedu/address/logic/parser/SetIncompleteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SetIncompleteCommand;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class SetIncompleteCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    private SetTaskIncompleteCommandParser parser \u003d new SetTaskIncompleteCommandParser();"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \" 1\","},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"                new SetIncompleteCommand(INDEX_FIRST_TASK));"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \" -1\","},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetIncompleteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":27}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.SortCommand.ACCEPTED_FIELD_PARAMETERS;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.SortCommand.ACCEPTED_LIST_PARAMETERS;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.SortCommand.ACCEPTED_ORDER_PARAMETERS;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_USAGE;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"public class SortCommandParserTest {"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public void no_arguments_throwsParseException() {"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    //author charlesgoh"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_wrongArguments_failure() {"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        // no list specified"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser,  ACCEPTED_FIELD_PARAMETERS.get(0) + \" \" + ACCEPTED_ORDER_PARAMETERS.get(0),"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        // no field specified"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser,  ACCEPTED_LIST_PARAMETERS.get(0) + \" \" + ACCEPTED_ORDER_PARAMETERS.get(0),"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        // no order specified"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser,  ACCEPTED_LIST_PARAMETERS.get(0) + \" \" + ACCEPTED_FIELD_PARAMETERS.get(0),"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        // list is person but field is for tasks"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser,  ACCEPTED_LIST_PARAMETERS.get(0) + \" \" + ACCEPTED_FIELD_PARAMETERS.get(5)"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + ACCEPTED_ORDER_PARAMETERS.get(0), String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        // list is task but field is for person"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser,  ACCEPTED_LIST_PARAMETERS.get(1) + \" \" + ACCEPTED_FIELD_PARAMETERS.get(0)"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + ACCEPTED_ORDER_PARAMETERS.get(0), String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        // Incorrect test"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"random text\","},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"    public void parse_validArguments_success() throws ParseException {"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"        SortCommand expectedCommand;"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        SortCommand actualCommand;"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"        // For person sorts"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"        String list \u003d ACCEPTED_LIST_PARAMETERS.get(0);"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        String field \u003d ACCEPTED_FIELD_PARAMETERS.get(0);"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"        String order \u003d ACCEPTED_ORDER_PARAMETERS.get(0);"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        expectedCommand \u003d new SortCommand(list, field, order);"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"        actualCommand \u003d parser.parse(list + \" \" + field + \" \" + order);"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(true, expectedCommand.sameCommandAs(actualCommand));"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"        // For task sorts"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"        list \u003d ACCEPTED_LIST_PARAMETERS.get(1);"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        field \u003d ACCEPTED_FIELD_PARAMETERS.get(5);"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        order \u003d ACCEPTED_ORDER_PARAMETERS.get(1);"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"        expectedCommand \u003d new SortCommand(list, field, order);"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"        actualCommand \u003d parser.parse(list + \" \" + field + \" \" + order);"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(true, expectedCommand.sameCommandAs(actualCommand));"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":26,"jeffreygohkw":53}},{"path":"src/test/java/seedu/address/logic/parser/ThemeCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"public class ThemeCommandParserTest {"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    private ThemeCommandParser parser \u003d new ThemeCommandParser();"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"                ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        ThemeCommand expectedFindPersonCommand \u003d"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"                new ThemeCommand(\"light\");"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \"light\", expectedFindPersonCommand);"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \" light     \", expectedFindPersonCommand);"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":30}},{"path":"src/test/java/seedu/address/logic/parser/UnfavouriteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"//@@author wangyiming1019"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"public class UnfavouriteCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    private UnfavouriteCommandParser parser \u003d new UnfavouriteCommandParser();"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_validArgs_returnsUnfavouriteCommand() {"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \"1\", new UnfavouriteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"u\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"                UnfavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"}"}],"authorContributionMap":{"wangyiming1019":27}},{"path":"src/test/java/seedu/address/logic/parser/ViewAssignCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ViewAssignCommand;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class ViewAssignCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    private ViewAssignCommandParser parser \u003d new ViewAssignCommandParser();"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \"1\", new ViewAssignCommand(INDEX_FIRST_PERSON));"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAssignCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":26}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTasksList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        AddressBook newData \u003d getTypicalPersonsAddressBook();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_name_asc() {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"name\", \"asc\");"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getName().toString()));"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_name_desc() {"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"name\", \"desc\");"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getName().toString())));"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_phone_asc() {"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"phone\", \"asc\");"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getPhone().toString()));"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_phone_desc() {"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"phone\", \"desc\");"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getPhone().toString())));"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_email_asc() {"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"email\", \"asc\");"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getEmail().toString()));"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_email_desc() {"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"email\", \"desc\");"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getEmail().toString())));"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":160,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_address_asc() {"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":163,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"address\", \"asc\");"},{"lineNumber":164,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getAddress().toString()));"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_address_desc() {"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d getTypicalPersonsAddressBook();"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"address\", \"desc\");"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getAddress().toString())));"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        private final ObservableList\u003cReadOnlyTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return tags;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"        @Override"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"        public ObservableList\u003cReadOnlyTask\u003e getTasksList() {"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"            return tasks;"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":111,"Esilocke":18,"-":88}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    /*"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"     * Tests if the actual output of deleteTag is equals to the expected"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     * output when given valid target indexes and a valid tag to delete."},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    public void deleteTagValidIndexesAndTagSuccess() throws Exception {"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        Person oldPerson1 \u003d new PersonBuilder().withName(\"Someone\").withTags(\"someTag\", \"friends\").build();"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        Person oldPerson2 \u003d new PersonBuilder().withTags(\"classmate\").build();"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e oldPersonList \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        oldPersonList.add(oldPerson1);"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        oldPersonList.add(oldPerson2);"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        AddressBook oldAddressBook \u003d new AddressBook();"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        oldAddressBook.setPersons(oldPersonList);"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        Tag toDelete \u003d new Tag(\"someTag\");"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager expectedModel \u003d new ModelManager(oldAddressBook, new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.deleteTag(toDelete, indexes);"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        Person newPerson1 \u003d new PersonBuilder().withName(\"Someone\").withTags(\"friends\").build();"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        Person newPerson2 \u003d new PersonBuilder().withTags(\"classmate\").build();"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e newPersonList \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        newPersonList.add(newPerson1);"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        newPersonList.add(newPerson2);"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        AddressBook newAddressBook \u003d new AddressBook();"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        newAddressBook.setPersons(newPersonList);"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager actualModel \u003d new ModelManager(newAddressBook, new UserPrefs());"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedModel.getAddressBook().getPersonList().toString(),"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"                actualModel.getAddressBook().getPersonList().toString());"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"    /*"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"     * Tests if the actual output of addTag is equals to the expected"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"     * output when given valid target indexes and a valid tag to add."},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"    public void addTagValidIndexesAndTagSuccess() throws Exception {"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        Person oldPerson1 \u003d new PersonBuilder().withName(\"someone\").withTags(\"someTag\", \"friends\").build();"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        Person oldPerson2 \u003d new PersonBuilder().withTags(\"classmate\").build();"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e oldPersonList \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"        oldPersonList.add(oldPerson1);"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"        oldPersonList.add(oldPerson2);"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        AddressBook oldAddressBook \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"        oldAddressBook.setPersons(oldPersonList);"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        Tag toAdd \u003d new Tag(\"newTag\");"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager expectedModel \u003d new ModelManager(oldAddressBook, new UserPrefs());"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addTag(toAdd, indexes);"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        Person newPerson1 \u003d new PersonBuilder().withName(\"someone\").withTags(\"someTag\", \"friends\", \"newTag\").build();"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        Person newPerson2 \u003d new PersonBuilder().withTags(\"classmate\", \"newTag\").build();"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e newPersonList \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        newPersonList.add(newPerson1);"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"        newPersonList.add(newPerson2);"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"        AddressBook newAddressBook \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        newAddressBook.setPersons(newPersonList);"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager actualModel \u003d new ModelManager(newAddressBook, new UserPrefs());"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedModel.getAddressBook().getPersonList().toString(),"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"                actualModel.getAddressBook().getPersonList().toString());"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        String[] keywords \u003d ALICE.getName().value.split(\"\\\\s+\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":1,"wangyiming1019":82,"-":64}},{"path":"src/test/java/seedu/address/model/UniquePersonListTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public void sortPerson_byName_bothOrders() {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        // Set up expected result"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cReadOnlyPerson\u003e nameComparator \u003d new Comparator\u003cReadOnlyPerson\u003e() {"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"            public int compare(ReadOnlyPerson o1, ReadOnlyPerson o2) {"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"                return o1.getName().value.compareTo(o2.getName().value);"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, nameComparator);"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        // Set up actual result"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        AddressBook addressBook \u003d TypicalPersons.getTypicalPersonsAddressBook();"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"name\", \"asc\");"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        // Check ascending order sort"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        // Set up descending order sort"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, Collections.reverseOrder(nameComparator));"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"        expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"name\", \"desc\");"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        // Check descending order sort"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"    public void sortPerson_byPhone_bothOrders() {"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"        // Set up expected result"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cReadOnlyPerson\u003e phoneComparator \u003d new Comparator\u003cReadOnlyPerson\u003e() {"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"            public int compare(ReadOnlyPerson o1, ReadOnlyPerson o2) {"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"                return o1.getPhone().value.compareTo(o2.getPhone().value);"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, phoneComparator);"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"        // Set up actual result"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"        AddressBook addressBook \u003d TypicalPersons.getTypicalPersonsAddressBook();"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"phone\", \"asc\");"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        // Check ascending order sort"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        // Set up descending order sort"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, Collections.reverseOrder(phoneComparator));"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"phone\", \"desc\");"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"        // Check descending order sort"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    public void sortPerson_byEmail_bothOrders() {"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"        // Set up expected result"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cReadOnlyPerson\u003e emailComparator \u003d new Comparator\u003cReadOnlyPerson\u003e() {"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"            public int compare(ReadOnlyPerson o1, ReadOnlyPerson o2) {"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"                return o1.getEmail().value.compareTo(o2.getEmail().value);"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, emailComparator);"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"        // Set up actual result"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        AddressBook addressBook \u003d TypicalPersons.getTypicalPersonsAddressBook();"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"email\", \"asc\");"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        // Check ascending order sort"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"        // Set up descending order sort"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, Collections.reverseOrder(emailComparator));"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"        expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"email\", \"desc\");"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"        actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"        // Check descending order sort"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"    public void sortPerson_byAddress_bothOrders() {"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"        // Set up expected result"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cReadOnlyPerson\u003e addressComparator \u003d new Comparator\u003cReadOnlyPerson\u003e() {"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"            public int compare(ReadOnlyPerson o1, ReadOnlyPerson o2) {"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"                return o1.getAddress().value.compareTo(o2.getAddress().value);"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, addressComparator);"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"        // Set up actual result"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"        AddressBook addressBook \u003d TypicalPersons.getTypicalPersonsAddressBook();"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"address\", \"asc\");"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"        // Check ascending order sort"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"        // Set up descending order sort"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(personList, Collections.reverseOrder(addressComparator));"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"        expectedTaskList \u003d FXCollections.observableList(personList);"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(\"address\", \"desc\");"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"        actualTaskList \u003d addressBook.getPersonList();"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"        // Check descending order sort"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":136,"-":19}},{"path":"src/test/java/seedu/address/model/UniqueTaskListTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.UniqueTaskList;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"//@@author charlesgoh"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"public class UniqueTaskListTest {"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        UniqueTaskList uniquePersonList \u003d new UniqueTaskList();"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public void sortTasks_byDeadline_bothOrders() {"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        // Set up expected result"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyTask\u003e taskList \u003d TypicalTasks.getTypicalTasks();"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cReadOnlyTask\u003e deadlineComparator \u003d new Comparator\u003cReadOnlyTask\u003e() {"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"            public int compare(ReadOnlyTask o1, ReadOnlyTask o2) {"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"                return o1.getDeadline().date.compareTo(o2.getDeadline().date);"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(taskList, deadlineComparator);"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyTask\u003e expectedTaskList \u003d FXCollections.observableList(taskList);"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        // Set up actual result"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        AddressBook addressBook \u003d TypicalTasks.getTypicalTasksOnlyAddressBook();"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortTasksBy(\"deadline\", \"asc\");"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyTask\u003e actualTaskList \u003d addressBook.getTasksList();"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        // Check ascending order sort"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        // Set up descending order sort"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(taskList, Collections.reverseOrder(deadlineComparator));"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"        expectedTaskList \u003d FXCollections.observableList(taskList);"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortTasksBy(\"deadline\", \"desc\");"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        actualTaskList \u003d addressBook.getTasksList();"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        // Check descending order sort"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"    public void sortTasks_byPriority_bothOrders() {"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"        // Set up expected result"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyTask\u003e taskList \u003d TypicalTasks.getTypicalTasks();"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cReadOnlyTask\u003e deadlineComparator \u003d new Comparator\u003cReadOnlyTask\u003e() {"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"            @Override"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"            public int compare(ReadOnlyTask o1, ReadOnlyTask o2) {"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"                return Integer.compare(o1.getPriority().value, o2.getPriority().value);"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        };"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(taskList, deadlineComparator);"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyTask\u003e expectedTaskList \u003d FXCollections.observableList(taskList);"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"        // Set up actual result"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"        AddressBook addressBook \u003d TypicalTasks.getTypicalTasksOnlyAddressBook();"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortTasksBy(\"priority\", \"asc\");"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyTask\u003e actualTaskList \u003d addressBook.getTasksList();"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        // Check ascending order sort"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        // Set up descending order sort"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(taskList, Collections.reverseOrder(deadlineComparator));"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        expectedTaskList \u003d FXCollections.observableList(taskList);"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortTasksBy(\"priority\", \"desc\");"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        actualTaskList \u003d addressBook.getTasksList();"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"        // Check descending order sort"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTaskList, actualTaskList);"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":92}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid addresses"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // valid addresses"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public void privateAddressIsHidden_success() throws IllegalValueException {"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        Address a \u003d new Address(\"Any Address\", true);"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(a.getIsPrivate());"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(a.toString(), \"\u003cPrivate Address\u003e\");"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":12,"-":19}},{"path":"src/test/java/seedu/address/model/person/EmailTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class EmailTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // blank email"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // missing parts"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // invalid parts"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-@example.com\")); // invalid local part"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // valid email"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@b\"));  // minimal"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1@example1.com\"));  // mixture of alphanumeric and dot characters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"_user_@_e_x_a_m_p_l_e_.com_\"));    // underscores"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very_very_very_long_example.com\"));   // long domain name"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    public void privateEmailIsHidden_success() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        Email e \u003d new Email(\"AnyEmail@example.com\", true);"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(e.getIsPrivate());"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(e.toString(), \"\u003cPrivate Email\u003e\");"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":12,"-":38}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPrivacyLevelPredicateTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"public class NameContainsKeywordsPrivacyLevelPredicateTest {"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        NameContainsKeywordsPrivacyLevelPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"                new NameContainsKeywordsPrivacyLevelPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"        NameContainsKeywordsPrivacyLevelPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"                new NameContainsKeywordsPrivacyLevelPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        NameContainsKeywordsPrivacyLevelPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"                new NameContainsKeywordsPrivacyLevelPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"    public void test_nameContainsKeywords_returnsTrue() throws IllegalValueException {"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        Person testee \u003d new PersonBuilder().withName(\"Alice Bob\").build();"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        NameContainsKeywordsPrivacyLevelPredicate predicate \u003d"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"                new NameContainsKeywordsPrivacyLevelPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(predicate.test(testee));"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getPhone().setPrivate(true);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        testee \u003d new PersonBuilder().withName(\"Alice Bob\").build();"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        // Multiple keywords"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        predicate \u003d new NameContainsKeywordsPrivacyLevelPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getEmail().setPrivate(true);"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        testee \u003d new PersonBuilder().withName(\"Alice Carol\").build();"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        // Only one matching keyword"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        predicate \u003d new NameContainsKeywordsPrivacyLevelPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getAddress().setPrivate(true);"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        testee \u003d new PersonBuilder().withName(\"Alice Bob\").build();"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        // Mixed-case keywords"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        predicate \u003d new NameContainsKeywordsPrivacyLevelPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getName().setPrivate(true);"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        Person testee \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        // Zero keywords"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        NameContainsKeywordsPrivacyLevelPredicate predicate \u003d"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"                new NameContainsKeywordsPrivacyLevelPredicate(Collections.emptyList());"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getName().setPrivate(true);"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        testee \u003d new PersonBuilder().withName(\"Alice Bob\").build();"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        // Non-matching keyword"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        predicate \u003d new NameContainsKeywordsPrivacyLevelPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getRemark().setPrivate(true);"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        testee \u003d new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build();"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        predicate \u003d new NameContainsKeywordsPrivacyLevelPredicate(Arrays.asList("},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"                \"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        testee.getEmail().setPrivate(true);"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(predicate.test(testee));"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":113}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    public void privateNameIsHidden_success() throws IllegalValueException {"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        Name n \u003d new Name(\"Any Name\", true);"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(n.getIsPrivate());"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(n.toString(), \"\u003cPrivate Name\u003e\");"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":12,"-":24}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class PhoneTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid phone numbers"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // valid phone numbers"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public void privatePhoneIsHidden_success() throws IllegalValueException {"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        Phone p \u003d new Phone(\"999\", true);"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(p.getIsPrivate());"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(p.toString(), \"\u003cPrivate Phone\u003e\");"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":12,"-":23}},{"path":"src/test/java/seedu/address/model/task/DeadlineTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidDeadline() {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid deadlines"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"alphabets\")); // non-numeric letters"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"!@#$%^\")); // invalid symbols"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        // valid deadline (empty deadline for optional data)"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"\")); // empty string"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        // valid deadlines"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"04-04-2017\")); // dashes"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"the day after tomorrow\")); // slashes"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"4-11\"));"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":25}},{"path":"src/test/java/seedu/address/model/task/DescriptionTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class DescriptionTest {"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidDescription() {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid descriptions"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        // valid descriptions"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Description.isValidDescription(\"alphanumerical contents\")); // alphanumerical contents"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Description.isValidDescription(\"-\")); // single character"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":20}},{"path":"src/test/java/seedu/address/model/task/PriorityTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class PriorityTest {"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidPriority() {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid names"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\"invalid\")); // invalid priority"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\"777\")); // priority out of range"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\"-1\")); // priority out of range"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        // valid names"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Priority.isValidPriority(\"\")); // empty string"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Priority.isValidPriority(\"1\")); // numerical representation"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":23}},{"path":"src/test/java/seedu/address/model/task/TaskContainsKeywordPredicateTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"public class TaskContainsKeywordPredicateTest {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate firstPredicate \u003d new TaskContainsKeywordPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate secondPredicate \u003d new TaskContainsKeywordPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate thirdPredicate \u003d new TaskContainsKeywordPredicate(firstPredicateKeywordList,"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                true, false, false, 0);"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate firstPredicateCopy \u003d new TaskContainsKeywordPredicate(firstPredicateKeywordList,"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"                false, false, false, 0);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertFalse(firstPredicate.equals(thirdPredicate));"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"));"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").build()));"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Buy\", \"Pencil\"));"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").build()));"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Pencil\", \"Pen\"));"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pen\").build()));"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        // Mixed-case keywords"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"buY\", \"pEnciL\"));"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").build()));"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        // Zero keywords"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.emptyList());"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy\").build()));"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        // Non-matching keyword"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Pen\"));"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").build()));"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    public void test_descriptionContainsKeywords_returnsTrue() {"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        // One keyword"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"));"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Buy 3 Pencil\").build()));"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        // Multiple keywords"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Buy\", \"Pencil\"));"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Buy Pencil\").build()));"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        // Only one matching keyword"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Pencil\", \"Pen\"));"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Buy Pen\").build()));"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        // Mixed-case keywords"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"buY\", \"pEnciL\"));"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Buy Pencil\").build()));"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    public void priorityMatches() {"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        // Priority level equal to required level"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"                false, true, false, 3);"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withPriority(\"3\").build()));"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        // Priority level greater than required level"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"                false, true, false, 3);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withPriority(\"4\").build()));"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        // Priority level less than required level"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"                false, true, false, 3);"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withPriority(\"1\").build()));"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        // Name matches, priority check not required, even though priority level does not match"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"                false, false, false, 3);"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withPriority(\"1\").build()));"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"        // Priority matches, but name does not match"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Something\"),"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"                false, true, false, 3);"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withPriority(\"3\").build()));"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"    public void stateMatches() {"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        // States are equivalent"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"                true, false, true, 0);"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withState(true).build()));"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"        // States are different"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"                true, false, false, 0);"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withState(true).build()));"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        // Name matches, state check not required, even though state does not match"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"                false, false, false, 0);"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withState(true).build()));"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"        // State matches, but name does not match"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Something\"),"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"                true, false, true, 0);"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withState(true).build()));"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"    public void combinationTests() {"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":"        // At most 1 invalid input per test case"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        // Matches all"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"                true, true, true, 3);"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withDescription(\"Get 3 Pencil now\")"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"                .withPriority(\"4\").withState(true).build()));"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"        // Name does not match, but description does"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"                true, true, true, 3);"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Get something\").withDescription(\"Get 3 Pencil now\")"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"                .withPriority(\"4\").withState(true).build()));"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"        // Description does not match, but name does"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"                true, true, true, 3);"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Buy 3 Pencil\").withDescription(\"Get something\")"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"                .withPriority(\"4\").withState(true).build()));"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"        // Name or description matches, but priority does not"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"                true, true, true, 3);"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withDescription(\"Get 3 Pencils now\")"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"                .withPriority(\"2\").withState(true).build()));"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        // Name or description matches, but state does not"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Pencil\"),"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"                true, true, true, 3);"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"Buy Pencil\").withDescription(\"Get 3 Pencils now\")"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"                .withPriority(\"4\").withState(false).build()));"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":182}},{"path":"src/test/java/seedu/address/model/task/TaskNameTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class TaskNameTest {"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidName() {"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid names"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        assertFalse(TaskName.isValidName(\" \")); // spaces only"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        assertFalse(TaskName.isValidName(\"\")); // empty string"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        // valid names"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertTrue(TaskName.isValidName(\".\")); // single character"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertTrue(TaskName.isValidName(\"buy pencil\")); // alphanumerical with spaces"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertTrue(TaskName.isValidName(\"buy pencil!\")); // special symbols"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":21}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitId":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        AddressBook original \u003d getTypicalPersonsAddressBook();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"-":99}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersonsAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        readAddressBook(null);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitId":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        AddressBook original \u003d getTypicalPersonsAddressBook();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        //Save in new file and read back"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(new Person(HOON));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(new Person(ALICE));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(new Person(IDA));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        XmlSerializableAddressBook addressBook \u003d new XmlSerializableAddressBook();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        XmlSerializableAddressBook addressBook \u003d new XmlSerializableAddressBook();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":2,"-":126}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        descriptor.setRemark(person.getRemark());"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        descriptor.setAvatar(person.getAvatar());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"            ParserUtil.parseRemark(Optional.of(remark)).ifPresent(descriptor::setRemark);"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"remark is expected to be unique.\");"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        return this;"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"     * Sets the {@code Avatar} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"    public EditPersonDescriptorBuilder withAvatar(String avatar) {"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"            ParserUtil.parseAvatar(Optional.of(avatar)).ifPresent(descriptor::setAvatar);"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"avatar is expected to be unique.\");"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"        return this;"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"    //@author"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"     * that we are building."},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        return this;"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"     * Sets the {@code Favourite} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"    public EditPersonDescriptorBuilder withFavourite(String favourite) {"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"        descriptor.setFavourite(new Boolean(favourite));"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"        return this;"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":40,"Esilocke":1,"wangyiming1019":9,"-":88}},{"path":"src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * A utility class to help with building EditTaskDescriptor objects."},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class EditTaskDescriptorBuilder {"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private EditTaskDescriptor descriptor;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder(ReadOnlyTask task) {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        descriptor.setTaskName(task.getTaskName());"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        descriptor.setDescription(task.getDescription());"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        descriptor.setDeadline(task.getDeadline());"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        descriptor.setPriority(task.getPriority());"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        descriptor.setTaskAddress(task.getTaskAddress());"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code TaskName} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withTaskName(String name) {"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseTaskName(Optional.of(name)).ifPresent(descriptor::setTaskName);"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withDescription(String description) {"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDescription(Optional.of(description)).ifPresent(descriptor::setDescription);"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"description is expected to be unique.\");"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withDeadline(String deadline) {"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDeadline(Optional.of(deadline)).ifPresent(descriptor::setDeadline);"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"deadline is expected to be unique.\");"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withPriority(String priority) {"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parsePriority(Optional.of(priority)).ifPresent(descriptor::setPriority);"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"priority is expected to be unique.\");"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code TaskAddress} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withTaskAddress(String address) {"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseTaskAddress(Optional.of(address)).ifPresent(descriptor::setTaskAddress);"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptor build() {"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        return descriptor;"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":101}},{"path":"src/test/java/seedu/address/testutil/ModelStub.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.ui.MainWindow;"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"public class ModelStub implements Model {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public void addTag(Tag toAdd, ArrayList\u003cIndex\u003e targetIndexes)  {"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    public void resetPartialData(ReadOnlyAddressBook newData, Prefix prefix) {"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        return null;"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"    public void increaseFontSize() {"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"    public void decreaseFontSize() {"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"    public void resetFontSize() {"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"    public void setMainWindow(MainWindow mainWindow) {"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"    public void deleteTag(Tag toDelete, ArrayList\u003cIndex\u003e targetIndexes) {"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"            throws DuplicatePersonException {"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public void editTag(Tag toChange, Tag newTag, ArrayList\u003cIndex\u003e affectedIndexes) throws PersonNotFoundException,"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"            DuplicatePersonException {"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        return null;"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    public void updateFilteredTaskList(Predicate\u003cReadOnlyTask\u003e predicate) {"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    public void sortPersons(String field, String order) {"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    public void sortTasks(String field, String order) {"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"    public void addTask(ReadOnlyTask toAdd) throws DuplicateTaskException {"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"    public void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"    public void deleteTask(ReadOnlyTask toDelete) throws TaskNotFoundException {"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList() {"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        return null;"},{"lineNumber":144,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"    public void updateTask(ReadOnlyTask target, ReadOnlyTask editedTask) throws DuplicateTaskException {"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"    public void assignToTask(ArrayList\u003cReadOnlyPerson\u003e personsToAssign, ReadOnlyTask taskToAssign)"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException {"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"    public void dismissFromTask(ArrayList\u003cReadOnlyPerson\u003e personsToDismiss, ReadOnlyTask taskToDismiss)"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException {"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"    public void setAsComplete(ReadOnlyTask toSet, boolean isComplete)"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"            throws TaskNotFoundException, DuplicateTaskException {"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivacyLevel(int level) {"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"    public int getPrivacyLevel() {"},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":"        return 0;"},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"    public ReadOnlyPerson getPersonAtIndexFromAddressBook(int index) {"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"        return null;"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"    public void setTheme(String theme) {"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"    public String getTheme() {"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"        return null;"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"    @Override"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"    public HashMap\u003cString, String\u003e getStyleMap() {"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"        return null;"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"    public boolean getLockState() {"},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"        return false;"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"    public void lockAddressBookFromModel() {"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"    public void unlockAddressBookFromModel() {"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"    public UserPrefs getUserPrefs() {"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"        return null;"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"    @Override"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"    public void viewAssignees(ReadOnlyTask task) {"},{"lineNumber":230,"author":{"gitId":"Esilocke"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"charlesgoh":17,"jeffreygohkw":37,"Esilocke":153,"wangyiming1019":24,"-":1}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Avatar;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    public static final String DEFAULT_FAVOURITE \u003d \"false\";"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    public static final String DEFAULT_REMARK \u003d \"Eats, shoots, and leaves\";"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public static final String DEFAULT_AVATAR \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Person person;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"            Boolean defaultFavourite \u003d new Boolean(DEFAULT_FAVOURITE);"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"            Remark defaultRemark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"            Avatar defaultAvatar \u003d new Avatar(DEFAULT_AVATAR);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress, defaultFavourite,"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"                                     defaultRemark, defaultAvatar, defaultTags);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"            this.person.setRemark(new Remark(remark));"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"Remark is invalid\");"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"        return this;"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"    public PersonBuilder withAvatar(String filepath) {"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"            this.person.setAvatar(new Avatar(filepath));"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"Avatar is invalid\");"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"        return this;"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"     * Sets the {@code Boolean} of the {@code Person} that we are building."},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":"    public PersonBuilder withFavourite(String favourite) {"},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":"        this.person.setFavourite(new Boolean(favourite));"},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"        return this;"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return this.person;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":34,"wangyiming1019":12,"-":107}},{"path":"src/test/java/seedu/address/testutil/PersonPrivacySettingsBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"//@@author jeffreygohkw"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" * A utility class to help with building PersonPrivacySettings objects."},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"public class PersonPrivacySettingsBuilder {"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    private PersonPrivacySettings pps;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder() {"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"        pps \u003d new PersonPrivacySettings();"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder(PersonPrivacySettings pps) {"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"        this.pps \u003d new PersonPrivacySettings(pps);"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns an {@code PersonPrivacySettings} with fields containing {@code person}\u0027s privacy details"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder(ReadOnlyPerson person) {"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        pps \u003d new PersonPrivacySettings();"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setNameIsPrivate(person.getName().getIsPrivate());"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setPhoneIsPrivate(person.getPhone().getIsPrivate());"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setEmailIsPrivate(person.getEmail().getIsPrivate());"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setAddressIsPrivate(person.getAddress().getIsPrivate());"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setRemarkIsPrivate(person.getRemark().getIsPrivate());"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code nameIsPrivate} of the {@code PersonPrivacySettings} that we are building."},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setNamePrivate(String name) {"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        if (name.equals(\"Optional[true]\") || name.equals(\"true\")) {"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setNameIsPrivate(true);"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (name.equals(\"Optional[false]\") || name.equals(\"false\")) {"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setNameIsPrivate(false);"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of name should be true or false\");"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        return this;"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code phoneIsPrivate} of the {@code PersonPrivacySettings} that we are building."},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setPhonePrivate(String phone) {"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        if (phone.equals(\"Optional[true]\") || phone.equals(\"true\")) {"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setPhoneIsPrivate(true);"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (phone.equals(\"Optional[false]\") || phone.equals(\"false\")) {"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setPhoneIsPrivate(false);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of phone should be true or false\");"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        return this;"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code emailIsPrivate} of the {@code PersonPrivacySettings} that we are building."},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setEmailPrivate(String email) {"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        if (email.equals(\"Optional[true]\") || email.equals(\"true\")) {"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setEmailIsPrivate(true);"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (email.equals(\"Optional[false]\") || email.equals(\"false\")) {"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setEmailIsPrivate(false);"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of email should be true or false\");"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code addressIsPrivate} of the {@code PersonPrivacySettings} that we are building."},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setAddressPrivate(String address) {"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        if (address.equals(\"Optional[true]\") || address.equals(\"true\")) {"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setAddressIsPrivate(true);"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (address.equals(\"Optional[false]\") || address.equals(\"false\")) {"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setAddressIsPrivate(false);"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of address should be true or false\");"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code remarkIsPrivate} of the {@code PersonPrivacySettings} that we are building."},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setRemarkPrivate(String remark) {"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        if (remark.equals(\"Optional[true]\") || remark.equals(\"true\")) {"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setRemarkIsPrivate(true);"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (remark.equals(\"Optional[false]\") || remark.equals(\"false\")) {"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setRemarkIsPrivate(false);"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        } else {"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of remark should be true or false\");"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"        return this;"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettings build() {"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        return pps;"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":106}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVATAR;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static String getAddCommand(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(ReadOnlyPerson person) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        sb.append(PREFIX_NAME + person.getName().value + \" \");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        sb.append(PREFIX_REMARK + person.getRemark().value + \" \");"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        sb.append(PREFIX_AVATAR + person.getAvatar().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":4,"jeffreygohkw":1,"Esilocke":2,"-":35}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Assignees;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskAddress;"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":" * A utility class to help with building Task objects."},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class TaskBuilder {"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_NAME \u003d \"Buy pencil\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Buy a pencil from ABS by tomorrow\";"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_DEADLINE \u003d \"04-04-2017\";"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"4\";"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"12 Kent Ridge Crescent, 119275\";"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private Task task;"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder() {"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            TaskName defaultTaskName \u003d new TaskName(DEFAULT_NAME);"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            Description defaultDescription \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            Deadline defaultDeadline \u003d new Deadline(DEFAULT_DEADLINE);"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            Priority defaultPriority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            Assignees defaultAssignees \u003d new Assignees();"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            Boolean defaultState \u003d false;"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            TaskAddress defaultAddress \u003d new TaskAddress(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            this.task \u003d new Task(defaultTaskName, defaultDescription, defaultDeadline, defaultPriority,"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                    defaultAssignees, defaultState, defaultAddress);"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"Default task\u0027s values are invalid.\");"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder(ReadOnlyTask taskToCopy) {"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        this.task \u003d new Task(taskToCopy);"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code TaskName} of the {@code Task} that we are building."},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withTaskName(String name) {"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            this.task.setTaskName(new TaskName(name));"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Priority} of the {@code Task} that we are building."},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withPriority(String priority) {"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"            this.task.setPriority(new Priority(priority));"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"priority is expected to be unique.\");"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Description} of the {@code Task} that we are building."},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"            this.task.setDescription(new Description(description));"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"description is expected to be unique.\");"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building."},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withDeadline(String deadline) {"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"            this.task.setDeadline(new Deadline(deadline));"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"deadline is expected to be unique.\");"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"     * Sets the state of the {@code Task} that we are building."},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withState(boolean state) {"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        this.task.setState(state);"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code TaskAddress} of the {@code Task} that we are building."},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withTaskAddress(String address) {"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"            this.task.setTaskAddress(new TaskAddress(address));"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Assignees} of the {@code Task} that we are building."},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withAssignees(String... args) {"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        for (String s : args) {"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"            indexes.add(Index.fromOneBased(Integer.parseInt(s)));"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"        this.task.setAssignees(new Assignees(indexes));"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        return this;"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"    public Task build() {"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"        return this.task;"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":135}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" * Utility class for Tasks"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"public class TaskUtil {"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     * Returns an add command string for adding the {@code task}."},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static String getAddCommand(ReadOnlyTask task) {"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        return AddTaskCommand.COMMAND_WORD + \" \" + PREFIX_TASK + \" \" + getTaskDetails(task);"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public static String getTaskDetails(ReadOnlyTask task) {"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        sb.append(PREFIX_NAME + task.getTaskName().taskName + \" \");"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        sb.append(PREFIX_DEADLINE + task.getDeadline().value + \" \");"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        sb.append(PREFIX_PRIORITY + Integer.toString(task.getPriority().value) + \" \");"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        sb.append(PREFIX_ADDRESS + task.getTaskAddress().taskAddress + \" \");"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":38}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" * A utility class containing a sample {@code AddressBook} to be used in tests."},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class TypicalAddressBook {"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    private TypicalAddressBook() {} // prevents instantiation"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyPerson person : TypicalPersons.getTypicalPersons()) {"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"            try {"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"                ab.addPerson(person);"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"                assert false : \"not possible\";"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyTask task : TypicalTasks.getTypicalTasks()) {"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            try {"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                ab.addTask(task);"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            } catch (DuplicateTaskException e) {"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                assert false : \"not possible\";"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        return ab;"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":33}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CHRIS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CHRIS;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVOURITE_ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CHRIS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CHRIS;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_CHRIS;"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHRISTAG;"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"            .withPhone(\"85355255\").withFavourite(\"false\").withRemark(\"Alice from wonderland\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withFavourite(\"false\")"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"            .withRemark(\"Teammate\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withFavourite(\"false\").build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withFavourite(\"false\").build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withFavourite(\"false\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withFavourite(\"false\").build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withFavourite(\"false\").build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withFavourite(\"false\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withFavourite(\"false\").build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"            .withFavourite(VALID_FAVOURITE_ALICE).withRemark(VALID_REMARK_AMY)"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            .withFavourite(VALID_FAVOURITE_ALICE).withRemark(VALID_REMARK_BOB)"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"    //@@author wangyiming1019"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"    public static final ReadOnlyPerson CHRIS \u003d new PersonBuilder().withName(VALID_NAME_CHRIS)"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"            .withPhone(VALID_PHONE_CHRIS).withEmail(VALID_EMAIL_CHRIS)"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"            .withAddress(VALID_ADDRESS_CHRIS).withFavourite(VALID_FAVOURITE_ALICE)"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"            .withRemark(VALID_REMARK_CHRIS)"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"            .withTags(VALID_TAG_CHRISTAG).build();"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    public static final ReadOnlyPerson CHRIS_WITH_NEW_TAG \u003d new PersonBuilder().withName(VALID_NAME_CHRIS)"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"            .withPhone(VALID_PHONE_CHRIS)"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(VALID_EMAIL_CHRIS).withAddress(VALID_ADDRESS_CHRIS)"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"            .withFavourite(VALID_FAVOURITE_ALICE).withRemark(VALID_REMARK_CHRIS)"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public static AddressBook getTypicalPersonsAddressBook() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    public static AddressBook getTaglessAddressBook() {"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyPerson person : getTaglessPersons()) {"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"            try {"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"                ab.addPerson(person);"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"                assert false : \"not possible\";"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        return ab;"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"    public static List\u003cReadOnlyPerson\u003e getTaglessPersons() {"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":4,"Esilocke":18,"wangyiming1019":32,"-":64}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PAPER;"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PENCIL;"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PAPER;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PENCIL;"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PAPER;"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PENCIL;"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ADDRESS_PAPER;"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ADDRESS_PENCIL;"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PENCIL;"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"public class TypicalTasks {"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask ACCEPT \u003d new TaskBuilder().withTaskName(\"Acceptance Testing\")"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Perform acceptance testing on application\")"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"04-04-2017\").withPriority(\"3\").withAssignees(\"4\")"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            .withTaskAddress(\"21 Heng Mui Keng Terrace, #02-01-01 I-Cube Building\").build();"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask BUY \u003d new TaskBuilder().withTaskName(\"Buy pencil\")"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Buy pencils for tomorrow\u0027s test\").withState(true)"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"04-04-2017\").withPriority(\"5\").withTaskAddress(\"Tampines Mall\").build();"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask COOK \u003d new TaskBuilder().withTaskName(\"Cook Paella\")"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Cook Paella for 4 people tonight\")"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"11-04-2016\").withPriority(\"5\").withState(true).withTaskAddress(\"27 Prince George\u0027s Park\")"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            .build();"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask DATE \u003d new TaskBuilder().withTaskName(\"Date with Lucy\")"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Sunday, 10am at Central Park\")"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"21-05-2015\").withPriority(\"5\").withTaskAddress(\"Central Park\").build();"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask ESCAPE \u003d new TaskBuilder().withTaskName(\"Escape dungeon\")"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Escape dungeon group formation\")"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"04-04-2017\").withPriority(\"1\").withTaskAddress(\"16 Gemmill Ln\").build();"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask FREE \u003d new TaskBuilder().withTaskName(\"Free memory space\")"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Implement new version of free()\")"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"21-08-2019\").withPriority(\"2\").withState(true).withAssignees(\"1\", \"2\", \"3\")"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            .withTaskAddress(\"NUS School of Computing, COM1, 13 Computing Drive, 117417\").build();"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask GRADLE \u003d new TaskBuilder().withTaskName(\"Resolve gradle\")"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Resolve gradle problems when building project\")"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"06-06-2016\").withPriority(\"5\")"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            .withTaskAddress(\"Changi Airport\").build();"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask PENCIL \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_PENCIL)"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            .withDescription(VALID_DESCRIPTION_PENCIL)"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(VALID_DEADLINE_PENCIL).withPriority(VALID_PRIORITY_PENCIL)"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            .withTaskAddress(VALID_TASK_ADDRESS_PENCIL).build();"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask PAPER \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_PAPER)"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            .withDescription(VALID_DESCRIPTION_PAPER)"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(VALID_DEADLINE_PAPER).withPriority(VALID_PRIORITY_PAPER)"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            .withTaskAddress(VALID_TASK_ADDRESS_PAPER).build();"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    public static final String KEYWORD_MATCHING_LUCY \u003d \"Lucy\"; // A keyword that matches LUCY"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    private TypicalTasks() {} // prevents instantiation"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public static AddressBook getTypicalTasksOnlyAddressBook() {"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyTask task : getTypicalTasks()) {"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"            try {"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"                ab.addTask(task);"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"            } catch (DuplicateTaskException e) {"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"                assert false : \"not possible\";"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        return ab;"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":""},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    public static List\u003cReadOnlyTask\u003e getTypicalTasks() {"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ACCEPT, BUY, COOK, DATE, ESCAPE, FREE, GRADLE));"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"}"}],"authorContributionMap":{"Esilocke":86}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_DIRECTIONS_PREFIX;"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_DIRECTIONS_SUFFIX;"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_URL_PREFIX;"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_URL_SUFFIX;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelNavigateEvent;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Location;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    private BrowserPanelLocateEvent panelLocateEventStub;"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    private BrowserPanelNavigateEvent panelNavigateEventStub;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    public void setUp() throws IllegalValueException {"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE,"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"                0, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER));"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        panelLocateEventStub \u003d new BrowserPanelLocateEvent(BOB);"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        panelNavigateEventStub \u003d new BrowserPanelNavigateEvent(new Location(\"NUS\"),"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"                new Location(BENSON.getAddress().toString()));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    //@@author jeffreygohkw"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    public void display() throws Exception {"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        // default web page"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        // google maps page of a person"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        postNow(panelLocateEventStub);"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        URL expectedMapUrl \u003d new URL(GOOGLE_MAPS_URL_PREFIX"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"                + BOB.getAddress().toString().replaceAll(\" \", \"+\") + GOOGLE_MAPS_URL_SUFFIX"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"                + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedMapUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        // google maps page of a person"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        postNow(panelNavigateEventStub);"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        URL expectedDirUrl \u003d new URL(GOOGLE_MAPS_DIRECTIONS_PREFIX"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"                + \"\u0026origin\u003d\""},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"                + panelNavigateEventStub.getFromLocation().toString().replaceAll(\"#(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"                .replaceAll(\" \", \"+\").replaceAll(\"-(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"                + \"\u0026destination\u003d\""},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"                + panelNavigateEventStub.getToLocation().toString().replaceAll(\"#(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"                .replaceAll(\" \", \"+\").replaceAll(\"-(\\\\w+)\\\\s*\", \"\")"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"                + GOOGLE_MAPS_DIRECTIONS_SUFFIX);"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":""},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedDirUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"}"}],"authorContributionMap":{"charlesgoh":2,"jeffreygohkw":47,"-":31}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    //@@author charlesgoh"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public void editFontSizeTests() {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        int fontSizeMultiplier \u003d PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER;"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        Person testPerson \u003d new PersonBuilder().build();"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        PersonCard personCard \u003d new PersonCard(testPerson, 1, fontSizeMultiplier);"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER, personCard.getFontSizeMultiplier());"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        assertNotEquals(personCard.getFontSizeMultiplier(), fontSizeMultiplier + 1);"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        // Verify font size increase"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER + 1;"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        personCard.setFontSizeMultiplier(fontSizeMultiplier);"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(personCard.getFontSizeMultiplier(), fontSizeMultiplier);"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        assertNotEquals(personCard.getFontSizeMultiplier(), PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        // Verify font size decrease"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER - 1;"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        personCard.setFontSizeMultiplier(fontSizeMultiplier);"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(personCard.getFontSizeMultiplier(), fontSizeMultiplier);"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        assertNotEquals(personCard.getFontSizeMultiplier(), PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void display() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // no tags"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // with tags"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        personCard \u003d new PersonCard(personWithTags, 2, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"        PersonCard copy \u003d new PersonCard(person, 0, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER)));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1, PersonCard.DEFAULT_FONT_SIZE_MULTIPLIER)));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code expectedId}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":30,"-":78}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"        StatusBarFooter sbf \u003d new StatusBarFooter(STUB_SAVE_LOCATION, EVENT_STUB.data.getPersonList().size());"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        uiPartRule.setUiPart(sbf);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(sbf.getRoot());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // after address book is updated"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":3,"-":72}},{"path":"src/test/java/seedu/address/ui/TaskCardTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"public class TaskCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public void editFontSizeTests() {"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"        int fontSizeMultiplier \u003d TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER;"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"        Task testTask \u003d new TaskBuilder().build();"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"        TaskCard taskCard \u003d new TaskCard(testTask, 1, fontSizeMultiplier);"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER, taskCard.getFontSizeMultiplier());"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        assertNotEquals(taskCard.getFontSizeMultiplier(), fontSizeMultiplier + 1);"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        // Verify font size increase"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER + 1;"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        taskCard.setFontSizeMultiplier(fontSizeMultiplier);"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(taskCard.getFontSizeMultiplier(), fontSizeMultiplier);"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        assertNotEquals(taskCard.getFontSizeMultiplier(), TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        // Verify font size decrease"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        fontSizeMultiplier \u003d TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER - 1;"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        taskCard.setFontSizeMultiplier(fontSizeMultiplier);"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(taskCard.getFontSizeMultiplier(), fontSizeMultiplier);"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        assertNotEquals(taskCard.getFontSizeMultiplier(), TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        // no tags"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        Task taskWithNoTags \u003d new TaskBuilder().build();"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1, TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        assertCardDisplay(taskCard, taskWithNoTags, 1);"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    public void equals() {"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        TaskCard taskCard \u003d new TaskCard(task, 0, TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"        TaskCard copy \u003d new TaskCard(task, 0, TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER);"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(taskCard.equals(copy));"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(taskCard.equals(taskCard));"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(taskCard.equals(null));"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"        // different types -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(taskCard.equals(0));"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"        // different task, same index -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"        Task differentTask \u003d new TaskBuilder().withTaskName(\"differentName\").build();"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(taskCard.equals(new TaskCard(differentTask, 0, TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER)));"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        // same task, different index -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        assertFalse(taskCard.equals(new TaskCard(task, 1, TaskCard.DEFAULT_FONT_SIZE_MULTIPLIER)));"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"     * {@code expectedId}."},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"    private void assertCardDisplay(TaskCard taskCard, ReadOnlyTask expectedTask, int expectedId) {"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        // verify id is displayed correctly"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        // verify task details are displayed correctly"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"        assertCardDisplaysTask(expectedTask, taskCardHandle);"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"}"}],"authorContributionMap":{"charlesgoh":89,"Esilocke":1}},{"path":"src/test/java/seedu/address/ui/TaskListPanelTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestTaskEvent;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"//author charlesgoh"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"public class TaskListPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    private static final ObservableList\u003cReadOnlyTask\u003e TYPICAL_TASKS \u003d"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"            FXCollections.observableList(getTypicalTasks());"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private static final JumpToListRequestTaskEvent JUMP_TO_SECOND_EVENT \u003d new"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            JumpToListRequestTaskEvent(INDEX_SECOND_PERSON);"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    private TaskListPanelHandle taskListPanelHandle;"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    @Before"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        TaskListPanel taskListPanel \u003d new TaskListPanel(TYPICAL_TASKS);"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        uiPartRule.setUiPart(taskListPanel);"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"                TaskListPanelHandle.TASK_LIST_VIEW_ID));"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    public void display() {"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"            ReadOnlyTask expectedTask \u003d TYPICAL_TASKS.get(i);"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"            assertCardDisplaysTask(expectedTask, actualCard);"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public void handleJumpToListRequestTaskEvent() {"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        TaskCardHandle expectedCard \u003d taskListPanelHandle.getTaskCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"        TaskCardHandle selectedCard \u003d taskListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"}"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":""}],"authorContributionMap":{"charlesgoh":57,"Esilocke":4}},{"path":"src/test/java/seedu/address/ui/UiPartTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_nullFileUrlThrowsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e((URL) null);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_missingFileUrlThrowsAssertionError() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e(missingFileUrl);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_invalidFileUrlThrowsAssertionError() {"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"        new TestUiPart\u003cObject\u003e(invalidFileUrl);"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_validFileUrlLoadsFile() {"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_nullFileNameThrowsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e((String) null);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_missingFileNameThrowsNullPointerException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"    public void constructor_invalidFileNameThrowsAssertionError() {"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"        new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH);"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return testFileUrl;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * UiPart used for testing."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @FXML"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":22,"-":80}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.task.ReadOnlyTask;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard} for person cards."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard} for task cards."},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedCard.getTaskName(), actualCard.getTaskName());"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedCard.getPriority(), actualCard.getPriority());"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedPerson.getName().value, actualCard.getName());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                actualCard.getTags());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    public static void assertCardDisplaysTask(ReadOnlyTask expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTask.getTaskName().taskName, actualCard.getTaskName());"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTask.getDescription().value, actualCard.getDescription());"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(expectedTask.getDeadline().value, actualCard.getDeadline());"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        assertEquals(expectedTask.getPriority().toString(), actualCard.getPriority());"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * in the correct order."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * in the correct order."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":23,"jeffreygohkw":1,"Esilocke":1,"-":71}},{"path":"src/test/java/systemtests/AddPersonCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"public class AddPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":66,"author":{"gitId":"-"},"content":"         * -\u003e added"},{"lineNumber":67,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        String command \u003d \"   \" + AddPersonCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + REMARK_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"    public void addSecondTest() throws Exception {"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson toAdd;"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"    public void addThirdTest() throws Exception {"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson toAdd;"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        /* Case: add a person with all fields same as another person in the address book except remark -\u003e added */"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"        executeCommand(FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"    public void addFourthTest() throws Exception {"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson toAdd;"},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"        executeCommand(SelectPersonCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY"},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + REMARK_DESC_AMY;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + REMARK_DESC_AMY;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + REMARK_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"     * Executes the {@code AddPersonCommand} that adds {@code toAdd} to the model and verifies that the command box"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"     * displays an empty string, the result display box displays the success message of executing"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"     * {@code AddPersonCommand} with the details of {@code toAdd}, and the model related components equal to the"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"     * current model added with {@code toAdd}."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * instead."},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"     * @see AddPersonCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(AddPersonCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":"     * @see AddPersonCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * error style."},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":50,"Esilocke":30,"-":192}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitId":"-"},"content":" */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        rememberStates();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":111,"author":{"gitId":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"        executeCommand(FindPersonCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        executeCommand(SelectPersonCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * their current state."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void rememberStates() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * of the previously selected person."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        URL expectedUrl;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \", \"+\")"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"        //TODO Might need to remove this as the person panel no longer involves google search."},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":246,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    protected Model getModel() {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        return testApp.getModel();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":6,"-":260}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing"},{"lineNumber":22,"author":{"gitId":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \"   \");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"    public void clearTestTwo() throws Exception {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(ClearCommand.MESSAGE_SUCCESS);"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * error style."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":3,"Esilocke":5,"-":97}},{"path":"src/test/java/systemtests/DeletePersonCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeletePersonCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"public class DeletePersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        String command \u003d \"     \" + DeletePersonCommand.COMMAND_WORD + \"    \" + INDEX_FIRST_PERSON.getOneBased() + \" \";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitId":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitId":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(DeletePersonCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(DeletePersonCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private ReadOnlyPerson removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeletePersonCommand} using"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"     * {@code toDelete} and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"     * @see DeletePersonCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"     * @see DeletePersonCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":21,"-":180}},{"path":"src/test/java/systemtests/EditPersonCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"public class EditPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":63,"author":{"gitId":"-"},"content":"         * -\u003e edited"},{"lineNumber":64,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        String command \u003d \" \" + EditPersonCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + REMARK_DESC_BOB"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"                + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_BOB)"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        model.updatePerson("},{"lineNumber":83,"author":{"gitId":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().withRemark(VALID_REMARK_BOB).build();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"    public void editThree() throws Exception {"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"        Index index;"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson personToEdit;"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson editedPerson;"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         * -\u003e rejected"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"    public void editFourth() throws Exception {"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"        Index index;"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"        int invalidIndex;"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson personToEdit;"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson editedPerson;"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * browser url changes"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        showAllPersons();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        selectPerson(index);"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"        //TODO rewrite GUI check for this as select no longer displays google searches"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"    public void editFive() throws Exception {"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"        Index index;"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson personToEdit;"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson editedPerson;"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"                EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":200,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"    public void editSix() throws Exception {"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":"        Model model \u003d getModel();"},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":"        Index index;"},{"lineNumber":208,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":209,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson personToEdit;"},{"lineNumber":210,"author":{"gitId":"charlesgoh"},"content":"        ReadOnlyPerson editedPerson;"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitId":"Esilocke"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditPersonCommand}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":254,"author":{"gitId":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":258,"author":{"gitId":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"                String.format(EditPersonCommand.MESSAGE_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":276,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitId":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":280,"author":{"gitId":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitId":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":286,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":287,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":304,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitId":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":307,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitId":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":310,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":311,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":49,"Esilocke":40,"-":233}},{"path":"src/test/java/systemtests/FindPersonCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"public class FindPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitId":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        String command \u003d \"   \" + FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitId":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        executeCommand(DeletePersonCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().value);"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":170,"author":{"gitId":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * error style."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jeffreygohkw":1,"Esilocke":22,"-":173}},{"path":"src/test/java/systemtests/SelectPersonCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.SelectPersonCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class SelectPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":24,"author":{"gitId":"-"},"content":"         * -\u003e selected"},{"lineNumber":25,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        String command \u003d \"   \" + SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        command \u003d SelectPersonCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    public void selectSecondTest() throws Exception {"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        command \u003d SelectPersonCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":64,"author":{"gitId":"-"},"content":"         * -\u003e rejected"},{"lineNumber":65,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"    public void selectThirdTest() throws Exception {"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assert validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size();"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        command \u003d SelectPersonCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" abc\","},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":""},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    public void selectFourthTest() throws Exception {"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        String command;"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * of the selected person, and the model related components equal to the current model."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar remain unchanged. The resulting"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * browser url and selected card will be verified if the current selected card and the card at"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * {@code expectedSelectedCardIndex} are different."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"                MESSAGE_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * These verifications are done by"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * error style."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"charlesgoh":18,"Esilocke":21,"-":125}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private TestApp testApp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Sets up the {@code TestApp} and returns it."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public TestApp setupApplication() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(TypicalPersons::getTypicalPersonsAddressBook,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                    TestApp.SAVE_LOCATION_FOR_TESTING));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return testApp;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Initializes the stage to be used by the tests."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static void initializeStage() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Encapsulates the stage initialized by {@code initializeStage} in a {@code MainWindowHandle} and returns it."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Tears down existing stages."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Esilocke":1,"-":70}}]
