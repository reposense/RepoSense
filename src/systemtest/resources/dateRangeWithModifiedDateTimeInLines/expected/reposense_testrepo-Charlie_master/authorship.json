[{"path":"README.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"\u003d Address++","lastModifiedDate":"2017-10-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]","lastModifiedDate":"2017-05-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]","lastModifiedDate":"2017-05-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"https://travis-ci.org/CS2103AUG2017-W09-B2/main[image:https://travis-ci.org/CS2103AUG2017-W09-B2/main.svg?branch\u003dmaster[Build Status]]","lastModifiedDate":"2017-10-10"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"https://ci.appveyor.com/project/jeffreygohkw/addressbook-level4-x6ah4[image:https://ci.appveyor.com/api/projects/status/duqy9ai449wl80n2?svg\u003dtrue[Build Status]]","lastModifiedDate":"2017-10-15"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"https://coveralls.io/github/CS2103AUG2017-W09-B2/main[image:https://coveralls.io/repos/github/CS2103AUG2017-W09-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]","lastModifiedDate":"2017-10-10"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"https://www.codacy.com/app/charlesgoh/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103AUG2017-W09-B2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/a5878f0b77e34e7eac031ed882cac3cb[Codacy Status]]","lastModifiedDate":"2017-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"ifdef::env-github[]","lastModifiedDate":"2017-05-30"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"image::docs/images/Ui.png[width\u003d\"790\"]","lastModifiedDate":"2017-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"endif::[]","lastModifiedDate":"2017-05-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"ifndef::env-github[]","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"endif::[]","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"* It is a Java application primarily targeted for students doing group projects.","lastModifiedDate":"2017-10-30"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"* It is *written in OOP fashion*. The code base is *reasonably well-written* and is *significantly big* (around 6 KLoC)","lastModifiedDate":"2017-10-30"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"* Contains support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI, AppVeyor and Codacy, with coverage checks using Coveralls.","lastModifiedDate":"2017-10-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003d\u003d Site Map","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003d\u003d Acknowledgements","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by","lastModifiedDate":"2017-05-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"_Marco Jakob_.","lastModifiedDate":"2017-05-30"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"* This application was built using the source code found in https://github.com/nus-cs2103-AY1718S1/addressbook-level4/[AddressBook-level4] by _SE-EDU_.","lastModifiedDate":"2017-10-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]","lastModifiedDate":"2017-05-30"}],"authorContributionMap":{"charlesgoh":3,"jeffreygohkw":7,"-":26}},{"path":"docs/AboutUs.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d About Us","lastModifiedDate":"2017-05-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":":relfileprefix: team/","lastModifiedDate":"2017-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]","lastModifiedDate":"2017-05-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":":imagesDir: images","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":":stylesDir: stylesheets","lastModifiedDate":"2017-08-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"AddressBook++ - Developed by the https://github.com/CS2103T-W09B2/main/blob/master/docs/AboutUs.adoc[CS2103T-W09B2] team.","lastModifiedDate":"2017-10-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"Initial source code this project was based on was from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/.","lastModifiedDate":"2017-10-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d Project Team","lastModifiedDate":"2017-10-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027","lastModifiedDate":"2017-05-30"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Charles Goh","lastModifiedDate":"2017-10-09"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://charlesgoh.me[homepage]] [https://github.com/charlesgoh[github]]","lastModifiedDate":"2017-10-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"Role: Project Integration, Git Expert","lastModifiedDate":"2017-10-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: UI Component","lastModifiedDate":"2017-10-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Jeffrey Goh","lastModifiedDate":"2017-10-09"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://github.com/jeffreygohkw[github]]","lastModifiedDate":"2017-10-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"Role: Testing","lastModifiedDate":"2017-10-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-09"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: Storage Component","lastModifiedDate":"2017-10-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Kelvin Lin","lastModifiedDate":"2017-10-09"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://github.com/esiloke[github]]","lastModifiedDate":"2017-10-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-09"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"Role: Code Quality","lastModifiedDate":"2017-10-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: Model Component","lastModifiedDate":"2017-10-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Wang Yi Ming","lastModifiedDate":"2017-10-09"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"{empty}[http://github.com/wangyiming1090[github]]","lastModifiedDate":"2017-10-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-09"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"Role: Developer","lastModifiedDate":"2017-10-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"Responsibilities: Logic Component","lastModifiedDate":"2017-10-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u0027\u0027\u0027","lastModifiedDate":"2017-05-30"}],"authorContributionMap":{"charlesgoh":19,"-":29}},{"path":"docs/DeveloperGuide.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Address++ - Developer Guide","lastModifiedDate":"2017-10-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":":toc:","lastModifiedDate":"2017-05-19"},{"lineNumber":3,"author":{"gitId":"-"},"content":":toc-title:","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":":toc-placement: preamble","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":":sectnums:","lastModifiedDate":"2017-05-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":":imagesDir: images","lastModifiedDate":"2017-05-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":":stylesDir: stylesheets","lastModifiedDate":"2017-08-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"ifdef::env-github[]","lastModifiedDate":"2017-05-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":":tip-caption: :bulb:","lastModifiedDate":"2017-05-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":":note-caption: :information_source:","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"endif::[]","lastModifiedDate":"2017-05-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]","lastModifiedDate":"2017-05-30"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":":repoURL: https://github.com/CS2103T-W09B2/addressbook-level4","lastModifiedDate":"2017-10-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"By: `Team W09-B2`      Since: `August 2017`      Licence: `MIT`","lastModifiedDate":"2017-10-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003d\u003d Setting up","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Prerequisites","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":". *JDK `1.8.0_60`* or later","lastModifiedDate":"2017-05-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Having any Java 8 version is not enough. +","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"This app will not work with earlier versions of Java 8.","lastModifiedDate":"2017-05-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":". *IntelliJ* IDE","lastModifiedDate":"2017-05-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-05-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +","lastModifiedDate":"2017-05-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them.","lastModifiedDate":"2017-05-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Setting up Address++ in your computer","lastModifiedDate":"2017-10-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":". Fork this repo, and clone the fork to your computer","lastModifiedDate":"2017-05-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)","lastModifiedDate":"2017-05-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":". Set up the correct JDK version for Gradle","lastModifiedDate":"2017-05-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`","lastModifiedDate":"2017-05-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":".. Click `New...` and find the directory of the JDK","lastModifiedDate":"2017-05-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":". Click `Import Project`","lastModifiedDate":"2017-05-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`","lastModifiedDate":"2017-05-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":". Click `Open as Project`","lastModifiedDate":"2017-05-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":". Click `OK` to accept the default settings","lastModifiedDate":"2017-05-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +","lastModifiedDate":"2017-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"This will generate all resources required by the application and tests.","lastModifiedDate":"2017-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Verifying the setup","lastModifiedDate":"2017-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":". link:#testing[Run the tests] to ensure they all pass.","lastModifiedDate":"2017-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code","lastModifiedDate":"2017-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.md[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":". Click on the `Imports` tab to set the order","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code.","lastModifiedDate":"2017-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork","lastModifiedDate":"2017-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103AUG2017-W09-B2/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103AUG2017-W09-B2/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork.","lastModifiedDate":"2017-10-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI","lastModifiedDate":"2017-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up.","lastModifiedDate":"2017-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e).","lastModifiedDate":"2017-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)","lastModifiedDate":"2017-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding","lastModifiedDate":"2017-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"When you are ready to start coding,","lastModifiedDate":"2017-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. Get some sense of the overall design by reading the link:#architecture[Architecture] section.","lastModifiedDate":"2017-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"2. Take a look at the section link:#suggested-programming-tasks-to-get-started[Suggested Programming Tasks to Get Started].","lastModifiedDate":"2017-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003d\u003d Design","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Architecture","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"image::Architecture.png[width\u003d\"600\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"_Figure 2.1.1 : Architecture Diagram_","lastModifiedDate":"2017-05-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2017-05-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"[TIP]","lastModifiedDate":"2017-05-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`.","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary.","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"link:#common-classes[*`Commons`*] represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level.","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)","lastModifiedDate":"2017-05-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file.","lastModifiedDate":"2017-05-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2017-05-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* link:#ui-component[*`UI`*] : The UI of the App.","lastModifiedDate":"2017-05-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* link:#logic-component[*`Logic`*] : The command executor.","lastModifiedDate":"2017-05-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* link:#model-component[*`Model`*] : Holds the data of the App in-memory.","lastModifiedDate":"2017-05-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* link:#storage-component[*`Storage`*] : Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2017-05-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"Each of the four components","lastModifiedDate":"2017-05-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component.","lastModifiedDate":"2017-05-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class.","lastModifiedDate":"2017-05-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class.","lastModifiedDate":"2017-05-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"_Figure 2.1.2 : Class Diagram of the Logic Component_","lastModifiedDate":"2017-05-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"[discrete]","lastModifiedDate":"2017-05-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"_Figure 2.1.3a : Component interactions for `delete 1` command (part 1)_","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk.","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time.","lastModifiedDate":"2017-05-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"_Figure 2.1.3b : Component interactions for `delete 1` command (part 2)_","lastModifiedDate":"2017-05-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-05-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components.","lastModifiedDate":"2017-05-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2017-05-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d UI component","lastModifiedDate":"2017-05-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"_Figure 2.2.1 : Structure of the UI Component_","lastModifiedDate":"2017-05-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2017-05-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2017-05-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2017-05-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change.","lastModifiedDate":"2017-05-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly.","lastModifiedDate":"2017-05-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Logic component","lastModifiedDate":"2017-05-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"_Figure 2.3.1 : Structure of the Logic Component_","lastModifiedDate":"2017-05-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"_Figure 2.3.2 : Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in Figure 2.3.1_","lastModifiedDate":"2017-07-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"*API* :","lastModifiedDate":"2017-05-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":177,"author":{"gitId":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2017-07-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2017-05-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events.","lastModifiedDate":"2017-05-19"},{"lineNumber":180,"author":{"gitId":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2017-05-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2017-05-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":184,"author":{"gitId":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":185,"author":{"gitId":"-"},"content":"_Figure 2.3.1 : Interactions Inside the Logic Component for the `delete 1` Command_","lastModifiedDate":"2017-05-19"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Model component","lastModifiedDate":"2017-05-19"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":189,"author":{"gitId":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":190,"author":{"gitId":"-"},"content":"_Figure 2.4.1 : Structure of the Model Component_","lastModifiedDate":"2017-05-19"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":192,"author":{"gitId":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":194,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2017-05-19"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences.","lastModifiedDate":"2017-05-19"},{"lineNumber":197,"author":{"gitId":"-"},"content":"* stores the Address Book data.","lastModifiedDate":"2017-05-19"},{"lineNumber":198,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cReadOnlyPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2017-09-01"},{"lineNumber":199,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2017-05-19"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":201,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Storage component","lastModifiedDate":"2017-05-19"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":203,"author":{"gitId":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-05-19"},{"lineNumber":204,"author":{"gitId":"-"},"content":"_Figure 2.5.1 : Structure of the Storage Component_","lastModifiedDate":"2017-05-19"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":206,"author":{"gitId":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]","lastModifiedDate":"2017-05-30"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":208,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2017-05-19"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":210,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2017-05-19"},{"lineNumber":211,"author":{"gitId":"-"},"content":"* can save the Address Book data in xml format and read it back.","lastModifiedDate":"2017-05-19"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Common classes","lastModifiedDate":"2017-05-19"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":215,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2017-05-19"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003d\u003d Implementation","lastModifiedDate":"2017-05-19"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":219,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2017-09-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"// tag::undoredo[]","lastModifiedDate":"2017-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Undo/Redo mechanism","lastModifiedDate":"2017-07-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`.","lastModifiedDate":"2017-07-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:","lastModifiedDate":"2017-07-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern].","lastModifiedDate":"2017-07-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Commands that are not undoable are implemented this way:","lastModifiedDate":"2017-07-30"},{"lineNumber":233,"author":{"gitId":"-"},"content":"[source,java]","lastModifiedDate":"2017-07-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-07-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2017-07-30"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    public CommandResult execute() {","lastModifiedDate":"2017-07-30"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        // ... list logic ...","lastModifiedDate":"2017-07-30"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-30"},{"lineNumber":241,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-07-30"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":243,"author":{"gitId":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:","lastModifiedDate":"2017-07-30"},{"lineNumber":244,"author":{"gitId":"-"},"content":"[source,java]","lastModifiedDate":"2017-07-30"},{"lineNumber":245,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-07-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"public abstract class UndoableCommand extends Command {","lastModifiedDate":"2017-07-30"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-30"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public CommandResult execute() {","lastModifiedDate":"2017-07-30"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        // ... undo logic ...","lastModifiedDate":"2017-07-30"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        executeUndoableCommand();","lastModifiedDate":"2017-07-30"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-30"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":255,"author":{"gitId":"-"},"content":"public class DeleteCommand extends UndoableCommand {","lastModifiedDate":"2017-07-30"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-30"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() {","lastModifiedDate":"2017-07-30"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        // ... delete logic ...","lastModifiedDate":"2017-07-30"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-30"},{"lineNumber":261,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-07-30"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":263,"author":{"gitId":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning.","lastModifiedDate":"2017-07-30"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":265,"author":{"gitId":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command).","lastModifiedDate":"2017-07-30"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":267,"author":{"gitId":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":269,"author":{"gitId":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person.","lastModifiedDate":"2017-07-30"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":271,"author":{"gitId":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":273,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-07-30"},{"lineNumber":274,"author":{"gitId":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all.","lastModifiedDate":"2017-07-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":276,"author":{"gitId":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`.","lastModifiedDate":"2017-07-30"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":278,"author":{"gitId":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed.","lastModifiedDate":"2017-07-30"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":280,"author":{"gitId":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":282,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-07-30"},{"lineNumber":283,"author":{"gitId":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`.","lastModifiedDate":"2017-07-30"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":285,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2017-07-30"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":287,"author":{"gitId":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":289,"author":{"gitId":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed).","lastModifiedDate":"2017-07-30"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":291,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-07-30"},{"lineNumber":292,"author":{"gitId":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`.","lastModifiedDate":"2017-07-30"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":294,"author":{"gitId":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow).","lastModifiedDate":"2017-07-30"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":296,"author":{"gitId":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":298,"author":{"gitId":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:","lastModifiedDate":"2017-07-30"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":300,"author":{"gitId":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":302,"author":{"gitId":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:","lastModifiedDate":"2017-07-30"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":304,"author":{"gitId":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"200\"]","lastModifiedDate":"2017-07-30"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":306,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-07-30"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of `UndoableCommand` +","lastModifiedDate":"2017-07-30"},{"lineNumber":309,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()` +","lastModifiedDate":"2017-07-30"},{"lineNumber":310,"author":{"gitId":"-"},"content":"**Pros:** We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist. +","lastModifiedDate":"2017-07-30"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**Cons:** Hard for new developers to understand the template pattern. +","lastModifiedDate":"2017-07-30"},{"lineNumber":312,"author":{"gitId":"-"},"content":"**Alternative 2:** Just override `execute()` +","lastModifiedDate":"2017-07-30"},{"lineNumber":313,"author":{"gitId":"-"},"content":"**Pros:** Does not involve the template pattern, easier for new developers to understand. +","lastModifiedDate":"2017-07-30"},{"lineNumber":314,"author":{"gitId":"-"},"content":"**Cons:** Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo.","lastModifiedDate":"2017-07-30"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":316,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2017-07-30"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":318,"author":{"gitId":"-"},"content":"**Aspect:** How undo \u0026 redo executes +","lastModifiedDate":"2017-07-30"},{"lineNumber":319,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Saves the entire address book. +","lastModifiedDate":"2017-07-30"},{"lineNumber":320,"author":{"gitId":"-"},"content":"**Pros:** Easy to implement. +","lastModifiedDate":"2017-07-30"},{"lineNumber":321,"author":{"gitId":"-"},"content":"**Cons:** May have performance issues in terms of memory usage. +","lastModifiedDate":"2017-07-30"},{"lineNumber":322,"author":{"gitId":"-"},"content":"**Alternative 2:** Individual command knows how to undo/redo by itself. +","lastModifiedDate":"2017-07-30"},{"lineNumber":323,"author":{"gitId":"-"},"content":"**Pros:** Will use less memory (e.g. for `delete`, just save the person being deleted). +","lastModifiedDate":"2017-07-30"},{"lineNumber":324,"author":{"gitId":"-"},"content":"**Cons:** We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2017-07-30"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":326,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2017-07-30"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**Aspect:** Type of commands that can be undone/redone +","lastModifiedDate":"2017-07-30"},{"lineNumber":329,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`). +","lastModifiedDate":"2017-07-30"},{"lineNumber":330,"author":{"gitId":"-"},"content":"**Pros:** We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost). +","lastModifiedDate":"2017-07-30"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**Cons:** User might think that undo also applies when the list is modified (undoing filtering for example), only to realize that it does not do that, after executing `undo`. +","lastModifiedDate":"2017-07-30"},{"lineNumber":332,"author":{"gitId":"-"},"content":"**Alternative 2:** Include all commands. +","lastModifiedDate":"2017-07-30"},{"lineNumber":333,"author":{"gitId":"-"},"content":"**Pros:** Might be more intuitive for the user. +","lastModifiedDate":"2017-07-30"},{"lineNumber":334,"author":{"gitId":"-"},"content":"**Cons:** User have no way of skipping such commands if he or she just want to reset the state of the address book and not the view. +","lastModifiedDate":"2017-07-30"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":336,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2017-07-30"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":338,"author":{"gitId":"-"},"content":"**Aspect:** Data structure to support the undo/redo commands +","lastModifiedDate":"2017-07-30"},{"lineNumber":339,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Use separate stack for undo and redo +","lastModifiedDate":"2017-07-30"},{"lineNumber":340,"author":{"gitId":"-"},"content":"**Pros:** Easy to understand for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project. +","lastModifiedDate":"2017-07-30"},{"lineNumber":341,"author":{"gitId":"-"},"content":"**Cons:** Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `UndoRedoStack`. +","lastModifiedDate":"2017-07-30"},{"lineNumber":342,"author":{"gitId":"-"},"content":"**Alternative 2:** Use `HistoryManager` for undo/redo +","lastModifiedDate":"2017-07-30"},{"lineNumber":343,"author":{"gitId":"-"},"content":"**Pros:** We do not need to maintain a separate stack, and just reuse what is already in the codebase. +","lastModifiedDate":"2017-07-30"},{"lineNumber":344,"author":{"gitId":"-"},"content":"**Cons:** Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things. +","lastModifiedDate":"2017-07-30"},{"lineNumber":345,"author":{"gitId":"-"},"content":"// end::undoredo[]","lastModifiedDate":"2017-07-31"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Task Object","lastModifiedDate":"2017-10-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":349,"author":{"gitId":"Esilocke"},"content":"The Task object stores information related to a single deadline or task, in a manner similar to how Person information is stored. +","lastModifiedDate":"2017-10-18"},{"lineNumber":350,"author":{"gitId":"Esilocke"},"content":"As such, it also shares the same types of commands as the Person object, namely the add, delete, list, select, and edit commands.","lastModifiedDate":"2017-10-18"},{"lineNumber":351,"author":{"gitId":"Esilocke"},"content":"Instead of making a new Logic object for each new command, polymorphism is used to implement the \"Task\" version of each command.","lastModifiedDate":"2017-10-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":353,"author":{"gitId":"Esilocke"},"content":"An example of using polymorphism to handle Person vs Task addition:","lastModifiedDate":"2017-10-18"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":355,"author":{"gitId":"Esilocke"},"content":"[source,java]","lastModifiedDate":"2017-10-18"},{"lineNumber":356,"author":{"gitId":"Esilocke"},"content":"----","lastModifiedDate":"2017-10-18"},{"lineNumber":357,"author":{"gitId":"Esilocke"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2017-10-18"},{"lineNumber":358,"author":{"gitId":"Esilocke"},"content":"    public AddCommand(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-18"},{"lineNumber":359,"author":{"gitId":"Esilocke"},"content":"        toAdd \u003d new Person(person);","lastModifiedDate":"2017-10-18"},{"lineNumber":360,"author":{"gitId":"Esilocke"},"content":"        toHandle \u003d HANDLE_TYPE_PERSON;","lastModifiedDate":"2017-10-18"},{"lineNumber":361,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":363,"author":{"gitId":"Esilocke"},"content":"    public AddCommand(ReadOnlyTask task) {","lastModifiedDate":"2017-10-18"},{"lineNumber":364,"author":{"gitId":"Esilocke"},"content":"        toAdd \u003d new Task(task);","lastModifiedDate":"2017-10-18"},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":"        toHandle \u003d HANDLE_TYPE_TASK;","lastModifiedDate":"2017-10-18"},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-18"},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-18"},{"lineNumber":368,"author":{"gitId":"Esilocke"},"content":"----","lastModifiedDate":"2017-10-18"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"The AddCommand will thus call a different constructor depending on the type of the argument supplied to it. To facilitate this, the respective Parser class must also be modified:","lastModifiedDate":"2017-10-18"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":372,"author":{"gitId":"Esilocke"},"content":"[source,java]","lastModifiedDate":"2017-10-18"},{"lineNumber":373,"author":{"gitId":"Esilocke"},"content":"----","lastModifiedDate":"2017-10-18"},{"lineNumber":374,"author":{"gitId":"Esilocke"},"content":"public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-18"},{"lineNumber":375,"author":{"gitId":"Esilocke"},"content":"    int objectType \u003d checkType(args);","lastModifiedDate":"2017-10-18"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":377,"author":{"gitId":"Esilocke"},"content":"    if (objectType \u003d\u003d HANDLE_TYPE_PERSON) {","lastModifiedDate":"2017-10-18"},{"lineNumber":378,"author":{"gitId":"Esilocke"},"content":"        Person toAdd \u003d createNewPerson(args);","lastModifiedDate":"2017-10-18"},{"lineNumber":379,"author":{"gitId":"Esilocke"},"content":"    } else if (objectType \u003d\u003d HANDLE_TYPE_TASK) {","lastModifiedDate":"2017-10-18"},{"lineNumber":380,"author":{"gitId":"Esilocke"},"content":"        Task toAdd \u003d createNewTask(args);","lastModifiedDate":"2017-10-18"},{"lineNumber":381,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-18"},{"lineNumber":382,"author":{"gitId":"Esilocke"},"content":"    return new AddCommand(toAdd);","lastModifiedDate":"2017-10-18"},{"lineNumber":383,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-18"},{"lineNumber":384,"author":{"gitId":"Esilocke"},"content":"----","lastModifiedDate":"2017-10-18"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":386,"author":{"gitId":"Esilocke"},"content":"The AddCommandParser checks the args to see if this is a task, then creates the object to be added, and creates a new AddCommand to handle the result. +","lastModifiedDate":"2017-10-18"},{"lineNumber":387,"author":{"gitId":"Esilocke"},"content":"The sequence diagram below shows how this is done:","lastModifiedDate":"2017-10-18"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":389,"author":{"gitId":"Esilocke"},"content":"image::AddTaskSeq.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-18"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":391,"author":{"gitId":"Esilocke"},"content":"To support the addition of Task objects, the Storage component is modified to accept Task objects in a similar manner as to how Person objects are being stored.","lastModifiedDate":"2017-10-19"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":393,"author":{"gitId":"Esilocke"},"content":"[source, html]","lastModifiedDate":"2017-10-19"},{"lineNumber":394,"author":{"gitId":"Esilocke"},"content":"---","lastModifiedDate":"2017-10-19"},{"lineNumber":395,"author":{"gitId":"Esilocke"},"content":"    \u003cpersons\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":396,"author":{"gitId":"Esilocke"},"content":"        \u003cname\u003esomeone else\u003c/name\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":397,"author":{"gitId":"Esilocke"},"content":"        \u003cphone\u003e\u003c/phone\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":398,"author":{"gitId":"Esilocke"},"content":"        \u003cemail\u003e\u003c/email\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":399,"author":{"gitId":"Esilocke"},"content":"        \u003caddress\u003e\u003c/address\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":400,"author":{"gitId":"Esilocke"},"content":"    \u003c/persons\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":401,"author":{"gitId":"Esilocke"},"content":"    \u003ctasks\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":402,"author":{"gitId":"Esilocke"},"content":"        \u003cname\u003eBuy new pencil\u003c/name\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":403,"author":{"gitId":"Esilocke"},"content":"        \u003cdescription\u003eBuy new pencil for writing purposes\u003c/description\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":404,"author":{"gitId":"Esilocke"},"content":"        \u003cdeadline\u003e\u003c/deadline\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":405,"author":{"gitId":"Esilocke"},"content":"        \u003cpriority\u003e2\u003c/priority\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":406,"author":{"gitId":"Esilocke"},"content":"    \u003c/tasks\u003e","lastModifiedDate":"2017-10-19"},{"lineNumber":407,"author":{"gitId":"Esilocke"},"content":"---","lastModifiedDate":"2017-10-19"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":409,"author":{"gitId":"Esilocke"},"content":"Tasks objects are stored in the same level of hierarchy as Person objects, and during startup, are read and entered into the UniqueTaskList, which handles all the tasks that are present in the address book.","lastModifiedDate":"2017-10-19"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":412,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-18"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":414,"author":{"gitId":"Esilocke"},"content":"**Aspect:** Implementation of Task-related commands +","lastModifiedDate":"2017-10-18"},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":"**Alternative 1 (current choice):** Use polymorphism to allow existing commands to implement the new commands +","lastModifiedDate":"2017-10-18"},{"lineNumber":416,"author":{"gitId":"Esilocke"},"content":"**Pros:** Under this scheme, any command can be extended to allow addition of new commands of any type, without affecting the architecture significantly +","lastModifiedDate":"2017-10-18"},{"lineNumber":417,"author":{"gitId":"Esilocke"},"content":"**Cons:** SRP may be violated as each Command class may now need to handle 2 different types of objects. +","lastModifiedDate":"2017-10-18"},{"lineNumber":418,"author":{"gitId":"Esilocke"},"content":"**Alternative 2:** Create new classes for all new commands +","lastModifiedDate":"2017-10-18"},{"lineNumber":419,"author":{"gitId":"Esilocke"},"content":"**Pros:** Simpler to implement. +","lastModifiedDate":"2017-10-18"},{"lineNumber":420,"author":{"gitId":"Esilocke"},"content":"**Cons:** Code duplication occurs as the commands for Person and Tasks objects share the same structure.","lastModifiedDate":"2017-10-18"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":422,"author":{"gitId":"Esilocke"},"content":"---","lastModifiedDate":"2017-10-18"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":424,"author":{"gitId":"Esilocke"},"content":"**Aspect:** Storage of Task objects +","lastModifiedDate":"2017-10-19"},{"lineNumber":425,"author":{"gitId":"Esilocke"},"content":"**Alternative 1 (current choice):** Store Tasks objects in a separate XML file +","lastModifiedDate":"2017-10-19"},{"lineNumber":426,"author":{"gitId":"Esilocke"},"content":"**Pros:** Easier to manage as Person storage will not interfere with Task storage, and vice versa.","lastModifiedDate":"2017-10-19"},{"lineNumber":427,"author":{"gitId":"Esilocke"},"content":"**Cons:** All existing save/load functions will require an additional method to handle Task storage.","lastModifiedDate":"2017-10-19"},{"lineNumber":428,"author":{"gitId":"Esilocke"},"content":"**Alternative 2:** Store Task objects together in the default XML storage file +","lastModifiedDate":"2017-10-19"},{"lineNumber":429,"author":{"gitId":"Esilocke"},"content":"**Pros** Only 1 storage file is needed. The storage manager thus only needs to refer to one storage +","lastModifiedDate":"2017-10-19"},{"lineNumber":430,"author":{"gitId":"Esilocke"},"content":"**Cons** Any changes to the Person or Task will affect the storage of both the Person and Task objects. This will increase coupling between the Person and Task classes.","lastModifiedDate":"2017-10-19"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":432,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Sort Command","lastModifiedDate":"2017-10-22"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":434,"author":{"gitId":"charlesgoh"},"content":"The sort command is facilitated by the `sortBy` method in UniquePersonList. It supports","lastModifiedDate":"2017-10-22"},{"lineNumber":435,"author":{"gitId":"charlesgoh"},"content":"sort by ascending or by descending order in any field.","lastModifiedDate":"2017-10-15"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":437,"author":{"gitId":"charlesgoh"},"content":"The sort enhancement utilises the Java Collections Sort API by passing it a custom Comparator.","lastModifiedDate":"2017-10-15"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":439,"author":{"gitId":"charlesgoh"},"content":"The sort command is parsed through `SortCommandParser`, which passes control over to the `SortCommand`","lastModifiedDate":"2017-10-15"},{"lineNumber":440,"author":{"gitId":"charlesgoh"},"content":"class. The actual sorting happens via the UniquePersonList class.","lastModifiedDate":"2017-10-15"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":442,"author":{"gitId":"charlesgoh"},"content":"The Logic Diagram for this sort command implementation is shown below:","lastModifiedDate":"2017-10-15"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":444,"author":{"gitId":"charlesgoh"},"content":"image::SortCommandDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-15"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":446,"author":{"gitId":"charlesgoh"},"content":"Suppose a user enters a new command `sort name desc`. The following sequence diagram","lastModifiedDate":"2017-10-15"},{"lineNumber":447,"author":{"gitId":"charlesgoh"},"content":"demonstrates how the sort command works.","lastModifiedDate":"2017-10-15"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":449,"author":{"gitId":"charlesgoh"},"content":"image::SortSequenceDiagram.png[width\u003d\"800]","lastModifiedDate":"2017-10-15"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":451,"author":{"gitId":"charlesgoh"},"content":"Note that the execution of the sort methods result in the actual person list being sorted.","lastModifiedDate":"2017-10-15"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":453,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-15"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":455,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Implementation of `sort Command` +","lastModifiedDate":"2017-10-15"},{"lineNumber":456,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Implement sorting functionality in `UniquePersonList` class. +","lastModifiedDate":"2017-10-15"},{"lineNumber":457,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Delegates the concern of sorting to the class that is responsible for the core of most operations done to the person lists. Future changes to the implementation will be easier as a consequence. +","lastModifiedDate":"2017-10-15"},{"lineNumber":458,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Hard for new developers to understand the flow of control passed between classes at first. +","lastModifiedDate":"2017-10-15"},{"lineNumber":459,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Implement the sorting functionality within other classes like `AddressBook` or `SortCommand`. +","lastModifiedDate":"2017-10-15"},{"lineNumber":460,"author":{"gitId":"charlesgoh"},"content":"**Pros:** May be more intuitive for new developers and it is easier to trace function calls between lesser classes involved. +","lastModifiedDate":"2017-10-15"},{"lineNumber":461,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Violates Separation of Concern principle and causes unnecessary content coupling whereby the `UniquePersonList` will have to rely on the `SortCommand` class.","lastModifiedDate":"2017-10-15"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":463,"author":{"gitId":"charlesgoh"},"content":"---","lastModifiedDate":"2017-10-15"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":465,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Temporary Sort Implementation vs. Persistent Sort Implementation +","lastModifiedDate":"2017-10-15"},{"lineNumber":466,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Saves the entire address book after sorting. +","lastModifiedDate":"2017-10-15"},{"lineNumber":467,"author":{"gitId":"charlesgoh"},"content":"**Pros:** More intuitive for both user and developer and reduced complexity in implementation. +","lastModifiedDate":"2017-10-15"},{"lineNumber":468,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Old order of contact instances in the address book will be lost +","lastModifiedDate":"2017-10-15"},{"lineNumber":469,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Duplicate a temporary version of the list and sort it for viewing (i.e. the actual list is not sorted) +","lastModifiedDate":"2017-10-15"},{"lineNumber":470,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Old order of contact instances remains intact. +","lastModifiedDate":"2017-10-15"},{"lineNumber":471,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Will use more memory and may be less intuitive for developer to understand and in terms of user experience. Also, sorting will not persist in the system.","lastModifiedDate":"2017-10-15"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":473,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Backup Command","lastModifiedDate":"2017-10-22"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":475,"author":{"gitId":"charlesgoh"},"content":"The backup command makes use of both the model manager and the storage manager. The `LogicManager` class was","lastModifiedDate":"2017-10-22"},{"lineNumber":476,"author":{"gitId":"charlesgoh"},"content":"improved to support the accessing of storage value.","lastModifiedDate":"2017-10-22"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":478,"author":{"gitId":"charlesgoh"},"content":"The backup command arguments are parsed through the `BackupCommandParser`, which passes control over to the","lastModifiedDate":"2017-10-22"},{"lineNumber":479,"author":{"gitId":"charlesgoh"},"content":"`BackupCommand` class. If there is a file path specified by the user, then the `execute()` command within the","lastModifiedDate":"2017-10-22"},{"lineNumber":480,"author":{"gitId":"charlesgoh"},"content":"`BackupCommand` class will save the backup file to that path. If not file path is specified, the backup file will be","lastModifiedDate":"2017-10-22"},{"lineNumber":481,"author":{"gitId":"charlesgoh"},"content":"saved to a default location.","lastModifiedDate":"2017-10-22"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":483,"author":{"gitId":"charlesgoh"},"content":"Suppose a user enters a new command `backup`. The backup file will be saved to a default location:","lastModifiedDate":"2017-10-22"},{"lineNumber":484,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":485,"author":{"gitId":"charlesgoh"},"content":"image::BackupSequenceDefaultDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-22"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":487,"author":{"gitId":"charlesgoh"},"content":"Suppose a user enters a new command `backup testBackup.xml`. The following sequence diagram","lastModifiedDate":"2017-10-22"},{"lineNumber":488,"author":{"gitId":"charlesgoh"},"content":"demonstrates how this works:","lastModifiedDate":"2017-10-22"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":490,"author":{"gitId":"charlesgoh"},"content":"image::BackupSequenceCustomDiagram.png[width\u003d\"800]","lastModifiedDate":"2017-10-22"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":492,"author":{"gitId":"charlesgoh"},"content":"Note that the execution of the sort methods result in the actual person list being sorted.","lastModifiedDate":"2017-10-22"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":494,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-22"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":496,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Implementation of `backup Command` +","lastModifiedDate":"2017-10-22"},{"lineNumber":497,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Implement backup command via Command Line Interface +","lastModifiedDate":"2017-10-22"},{"lineNumber":498,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Backing up data is easier and faster for users who are familiar with the commands. Less button clicks. +","lastModifiedDate":"2017-10-22"},{"lineNumber":499,"author":{"gitId":"charlesgoh"},"content":"**Cons:** UI not as intuitive. Users who are not familiar with the application may not know about this feature +","lastModifiedDate":"2017-10-22"},{"lineNumber":500,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Implement backup command via GUI +","lastModifiedDate":"2017-10-22"},{"lineNumber":501,"author":{"gitId":"charlesgoh"},"content":"**Pros:** More intuitive for all users since the options are all graphical +","lastModifiedDate":"2017-10-22"},{"lineNumber":502,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Hinders productivity. Excessive number of clicks to accomplish an essential task.","lastModifiedDate":"2017-10-22"},{"lineNumber":503,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":504,"author":{"gitId":"charlesgoh"},"content":"---","lastModifiedDate":"2017-10-22"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":506,"author":{"gitId":"charlesgoh"},"content":"**Aspect:** Custom and/or Default file paths for backup file +","lastModifiedDate":"2017-10-22"},{"lineNumber":507,"author":{"gitId":"charlesgoh"},"content":"**Alternative 1 (current choice):** Implemented both types of commands +","lastModifiedDate":"2017-10-22"},{"lineNumber":508,"author":{"gitId":"charlesgoh"},"content":"**Pros:** User can choose either command option. Gives the user more choices +","lastModifiedDate":"2017-10-22"},{"lineNumber":509,"author":{"gitId":"charlesgoh"},"content":"**Cons:** May seem confusing to the user at first +","lastModifiedDate":"2017-10-22"},{"lineNumber":510,"author":{"gitId":"charlesgoh"},"content":"**Alternative 2:** Implement only the default option (save backup file to data directory of application) +","lastModifiedDate":"2017-10-22"},{"lineNumber":511,"author":{"gitId":"charlesgoh"},"content":"**Pros:** Faster for the user to key in one word rather than a command with many words +","lastModifiedDate":"2017-10-22"},{"lineNumber":512,"author":{"gitId":"charlesgoh"},"content":"**Cons:** Reduces choice for experienced users who may want to save to another location or use a different save name","lastModifiedDate":"2017-10-22"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":514,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Privacy of fields","lastModifiedDate":"2017-10-19"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":516,"author":{"gitId":"jeffreygohkw"},"content":"The `Name`, `Phone`, `Email` and `Address` of a `Person` contains a boolean `isPrivate`, which will determine if the field belonging to that person is private or not.","lastModifiedDate":"2017-10-19"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":518,"author":{"gitId":"jeffreygohkw"},"content":"Adding a person with private fields uses the same `AddCommand` as adding a person with no public fields. +","lastModifiedDate":"2017-10-19"},{"lineNumber":519,"author":{"gitId":"jeffreygohkw"},"content":"To determine if the field that is added should be set to private, a `p` is added to the start of the prefix. +","lastModifiedDate":"2017-10-19"},{"lineNumber":520,"author":{"gitId":"jeffreygohkw"},"content":"Hence, `pe/[EMAIL]` will set that person\u0027s email to be private, whereas if `e/[EMAIL]` was used, that person\u0027s email would be public. +","lastModifiedDate":"2017-10-19"},{"lineNumber":521,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":522,"author":{"gitId":"jeffreygohkw"},"content":"These new prefixes can be found in `CliSyntax`, and `AddCommandParser` will take data with these prefixes.","lastModifiedDate":"2017-10-21"},{"lineNumber":523,"author":{"gitId":"jeffreygohkw"},"content":"`AddCommandParser` will then call the appropriate method in `ParserUtil`, which will parse the string provided into a new field.","lastModifiedDate":"2017-10-21"},{"lineNumber":524,"author":{"gitId":"jeffreygohkw"},"content":"Depending on whether or not the field is supposed to be private, `ParsetUtil` will call the appropriate constructor.","lastModifiedDate":"2017-10-21"},{"lineNumber":525,"author":{"gitId":"jeffreygohkw"},"content":"Upon obtaining all the fields anc creating a new `Person`, `AddCommandParser` will create a new `AddCommand` to handle the addition of the new `Person`.","lastModifiedDate":"2017-10-21"},{"lineNumber":526,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":527,"author":{"gitId":"jeffreygohkw"},"content":"image::AddPrivateSequenceDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-21"},{"lineNumber":528,"author":{"gitId":"-"},"content":"_Figure 3.5.1 : Sequence Diagram for adding a Person with private fields_","lastModifiedDate":"2017-10-30"},{"lineNumber":529,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":530,"author":{"gitId":"jeffreygohkw"},"content":"If a field is private, then the `toString` method will return a string `\u003cPrivate [FIELD]\u003e`, where `[FIELD]` is the name of that field. +","lastModifiedDate":"2017-10-19"},{"lineNumber":531,"author":{"gitId":"jeffreygohkw"},"content":"This can be seen from the `toString` method in `Name`:","lastModifiedDate":"2017-10-19"},{"lineNumber":532,"author":{"gitId":"jeffreygohkw"},"content":"[source,java]","lastModifiedDate":"2017-10-19"},{"lineNumber":533,"author":{"gitId":"jeffreygohkw"},"content":"----","lastModifiedDate":"2017-10-19"},{"lineNumber":534,"author":{"gitId":"jeffreygohkw"},"content":"@Override","lastModifiedDate":"2017-10-19"},{"lineNumber":535,"author":{"gitId":"jeffreygohkw"},"content":"public String toString() {","lastModifiedDate":"2017-10-19"},{"lineNumber":536,"author":{"gitId":"jeffreygohkw"},"content":"    if (isPrivate) {","lastModifiedDate":"2017-10-19"},{"lineNumber":537,"author":{"gitId":"jeffreygohkw"},"content":"        return \"\u003cPrivate Name\u003e\";","lastModifiedDate":"2017-10-19"},{"lineNumber":538,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":539,"author":{"gitId":"jeffreygohkw"},"content":"    return fullName;","lastModifiedDate":"2017-10-19"},{"lineNumber":540,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-19"},{"lineNumber":541,"author":{"gitId":"jeffreygohkw"},"content":"----","lastModifiedDate":"2017-10-19"},{"lineNumber":542,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":543,"author":{"gitId":"jeffreygohkw"},"content":"Since the information displayed in a person\u0027s card in the UI gets the value of the field through the `toString()` method, this hides the actual value of the field in the UI.","lastModifiedDate":"2017-10-19"},{"lineNumber":544,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":545,"author":{"gitId":"jeffreygohkw"},"content":"In addition, if `isPrivate` is `true` for `Name`, clicking on a person\u0027s card in the UI will not trigger a search on Google for that person\u0027s name.","lastModifiedDate":"2017-10-19"},{"lineNumber":546,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":547,"author":{"gitId":"jeffreygohkw"},"content":"Instead, a `NewResultAvailableEvent` will be raised by `BrowserPanel` to inform the user that they are not allowed to search for a person possessing a private `Name`.","lastModifiedDate":"2017-10-21"},{"lineNumber":548,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":549,"author":{"gitId":"jeffreygohkw"},"content":"To keep track of whether each field is private or not, `XmlAdaptedPerson` will have to store the `isPrivate` value for each field of `Person`.","lastModifiedDate":"2017-10-19"},{"lineNumber":550,"author":{"gitId":"jeffreygohkw"},"content":"This is done by adding the following","lastModifiedDate":"2017-10-21"},{"lineNumber":551,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":552,"author":{"gitId":"jeffreygohkw"},"content":"[source,java]","lastModifiedDate":"2017-10-21"},{"lineNumber":553,"author":{"gitId":"jeffreygohkw"},"content":"----","lastModifiedDate":"2017-10-21"},{"lineNumber":554,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)","lastModifiedDate":"2017-10-21"},{"lineNumber":555,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean nameIsPrivate;","lastModifiedDate":"2017-10-21"},{"lineNumber":556,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)","lastModifiedDate":"2017-10-21"},{"lineNumber":557,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean phoneIsPrivate;","lastModifiedDate":"2017-10-21"},{"lineNumber":558,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)","lastModifiedDate":"2017-10-21"},{"lineNumber":559,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean emailIsPrivate;","lastModifiedDate":"2017-10-21"},{"lineNumber":560,"author":{"gitId":"jeffreygohkw"},"content":"@XmlElement(required \u003d true)","lastModifiedDate":"2017-10-21"},{"lineNumber":561,"author":{"gitId":"jeffreygohkw"},"content":"   private Boolean addressIsPrivate;","lastModifiedDate":"2017-10-21"},{"lineNumber":562,"author":{"gitId":"jeffreygohkw"},"content":"----","lastModifiedDate":"2017-10-21"},{"lineNumber":563,"author":{"gitId":"jeffreygohkw"},"content":"Which results in a `Person` being saved in the xml file in the following format","lastModifiedDate":"2017-10-21"},{"lineNumber":564,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":565,"author":{"gitId":"jeffreygohkw"},"content":"[source, html]","lastModifiedDate":"2017-10-21"},{"lineNumber":566,"author":{"gitId":"jeffreygohkw"},"content":"----","lastModifiedDate":"2017-10-21"},{"lineNumber":567,"author":{"gitId":"jeffreygohkw"},"content":"\u003cpersons\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":568,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cname\u003eAlex Yeoh\u003c/name\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":569,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cnameIsPrivate\u003efalse\u003c/nameIsPrivate\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":570,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cphone\u003e87438807\u003c/phone\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":571,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cphoneIsPrivate\u003efalse\u003c/phoneIsPrivate\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":572,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cemail\u003ealexyeoh@example.com\u003c/email\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":573,"author":{"gitId":"jeffreygohkw"},"content":"    \u003cemailIsPrivate\u003efalse\u003c/emailIsPrivate\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":574,"author":{"gitId":"jeffreygohkw"},"content":"    \u003caddress\u003eBlk 30 Geylang Street 29, #06-40\u003c/address\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":575,"author":{"gitId":"jeffreygohkw"},"content":"    \u003caddressIsPrivate\u003efalse\u003c/addressIsPrivate\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":576,"author":{"gitId":"jeffreygohkw"},"content":"    \u003ctagged\u003efriends\u003c/tagged\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":577,"author":{"gitId":"jeffreygohkw"},"content":"\u003c/persons\u003e","lastModifiedDate":"2017-10-21"},{"lineNumber":578,"author":{"gitId":"jeffreygohkw"},"content":"----","lastModifiedDate":"2017-10-21"},{"lineNumber":579,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":580,"author":{"gitId":"jeffreygohkw"},"content":"If an old save file without privacy data is loaded, then the `toModelType()` method in `XmlAdaptedPerson` will set `isPrivate` to be `false` for each field of `Person`, to keep the displayed information the same.","lastModifiedDate":"2017-10-19"},{"lineNumber":581,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":582,"author":{"gitId":"jeffreygohkw"},"content":"[NOTE]","lastModifiedDate":"2017-10-19"},{"lineNumber":583,"author":{"gitId":"jeffreygohkw"},"content":"If a private field is to be edited by `EditCommand`, `createEditedPerson()` in `EditCommand` will not modify the data of that field, even though `EditCommand` will create a new `CommandResult` with a success message. +","lastModifiedDate":"2017-10-21"},{"lineNumber":584,"author":{"gitId":"jeffreygohkw"},"content":"Hence, a private field will remain private and the value stored by that field will remain the same as it originally was.","lastModifiedDate":"2017-10-19"},{"lineNumber":585,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":586,"author":{"gitId":"-"},"content":"This is done through the `createEditedPerson` method in `EditCommand`.","lastModifiedDate":"2017-10-30"},{"lineNumber":587,"author":{"gitId":"-"},"content":"`createEditedPerson` sets the boolean `areFieldsAllPrivate` to initially be true.","lastModifiedDate":"2017-10-30"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":589,"author":{"gitId":"-"},"content":"As the new instance of each field is being generated, if any field contains a value in the input `EditPersonDescriptor` and that field was not originally private, `areFieldsAllPrivate` is set to false.","lastModifiedDate":"2017-10-30"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":591,"author":{"gitId":"-"},"content":"This can be seen from the following code, which is used for the generation of a new `Name` object.","lastModifiedDate":"2017-10-30"},{"lineNumber":592,"author":{"gitId":"-"},"content":"[source,java]","lastModifiedDate":"2017-10-30"},{"lineNumber":593,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":594,"author":{"gitId":"-"},"content":"private static Name createUpdatedName(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-30"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        Name updatedName;","lastModifiedDate":"2017-10-30"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        if (!personToEdit.getName().isPrivate()) {","lastModifiedDate":"2017-10-30"},{"lineNumber":597,"author":{"gitId":"-"},"content":"            updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-10-30"},{"lineNumber":598,"author":{"gitId":"-"},"content":"            if (editPersonDescriptor.getName().isPresent()) {","lastModifiedDate":"2017-10-30"},{"lineNumber":599,"author":{"gitId":"-"},"content":"                areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-30"},{"lineNumber":600,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-10-30"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2017-10-30"},{"lineNumber":602,"author":{"gitId":"-"},"content":"            updatedName \u003d personToEdit.getName();","lastModifiedDate":"2017-10-30"},{"lineNumber":603,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        return updatedName;","lastModifiedDate":"2017-10-30"},{"lineNumber":605,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":606,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":608,"author":{"gitId":"-"},"content":"Upon generation of all the fields, if `areFieldsAllPrivate` is still true, `createEditedPerson` will throw an `IllegalArgumentException`, which will cause `EditCommand` to throw a `CommandException` and prevent the command from continuing.","lastModifiedDate":"2017-10-30"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":610,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-19"},{"lineNumber":611,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":612,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** Implementation of `isPrivate` +","lastModifiedDate":"2017-10-19"},{"lineNumber":613,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Add a boolean to each field class. +","lastModifiedDate":"2017-10-30"},{"lineNumber":614,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Similar implementation to how the fields are currently being implemented. Privacy settings can be obtained directly from the field class itself. +","lastModifiedDate":"2017-10-19"},{"lineNumber":615,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Repetitive code. Additional overloaded constructor and methods are needed to set and get the value of `isPrivate`.  +","lastModifiedDate":"2017-10-19"},{"lineNumber":616,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** Store a person\u0027s privacy settings outside of the field classes in an Array or a HashMap in `Person`. +","lastModifiedDate":"2017-10-19"},{"lineNumber":617,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Can access and modify the privacy settings of all fields easily. +","lastModifiedDate":"2017-10-19"},{"lineNumber":618,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** The fields themselves do not have any indication of whether or not they are private, and will have to check with the `Person` the belong to.","lastModifiedDate":"2017-10-19"},{"lineNumber":619,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":620,"author":{"gitId":"jeffreygohkw"},"content":"---","lastModifiedDate":"2017-10-19"},{"lineNumber":621,"author":{"gitId":"jeffreygohkw"},"content":"**Aspect:** How to determine if a field for a newly added person should be private. +","lastModifiedDate":"2017-10-19"},{"lineNumber":622,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Add a `p` to the start of each field\u0027s prefix to signify that that field should be private. +","lastModifiedDate":"2017-10-19"},{"lineNumber":623,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Can add `Person` containing any combination of private and public fields in 1 command line. +","lastModifiedDate":"2017-10-19"},{"lineNumber":624,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Have to modify `AddCommand`, `AddCommandParser`, `ParserUtil` and other classes to detect the new prefix and call a separate constructor when a field is private. +","lastModifiedDate":"2017-10-19"},{"lineNumber":625,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 2:** A `Person` is added with all field public, a separate command will then have to be used to set the desired fields to be private. +","lastModifiedDate":"2017-10-19"},{"lineNumber":626,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Easier implementation, do not have to modify `AddCommand`. +","lastModifiedDate":"2017-10-19"},{"lineNumber":627,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Requires 2 command lines to create a `Person` with private fields, which takes more time and is more inconvenient for users.","lastModifiedDate":"2017-10-19"},{"lineNumber":628,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":629,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d Changing of a Person\u0027s Privacy","lastModifiedDate":"2017-10-24"},{"lineNumber":630,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":631,"author":{"gitId":"jeffreygohkw"},"content":"`ChangePrivacyCommand` facilitates the setting of an existing person\u0027s field\u0027s privacy. Depending on the user\u0027s input, `ChangePrivacyCommand` will use each field\u0027s `setPrivate()` method to set the value of `isPrivate`.","lastModifiedDate":"2017-10-24"},{"lineNumber":632,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":633,"author":{"gitId":"jeffreygohkw"},"content":"The sequence diagram for `ChangePrivacyCommand` is illustrated below.","lastModifiedDate":"2017-10-24"},{"lineNumber":634,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":635,"author":{"gitId":"jeffreygohkw"},"content":"image::ChangePrivacySequenceDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-24"},{"lineNumber":636,"author":{"gitId":"-"},"content":"_Figure 3.6.1 : Sequence Diagram for changing the privacy of a Person\u0027s fields_","lastModifiedDate":"2017-10-30"},{"lineNumber":637,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":638,"author":{"gitId":"jeffreygohkw"},"content":"Upon receiving a String containing the arguments from `AddressBookParser`, `ChangePrivacyCommandParser` will create a `PersonPrivacySettings` object.","lastModifiedDate":"2017-10-24"},{"lineNumber":639,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":640,"author":{"gitId":"jeffreygohkw"},"content":"Depending on the input, the `ChangePrivacyCommandParser` will set the privacy values, represented by Booleans, in the `PersonPrivacySettings` object to be `true` or `false`.","lastModifiedDate":"2017-10-24"},{"lineNumber":641,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":642,"author":{"gitId":"jeffreygohkw"},"content":"`ChangePrivacyCommandParser` will then create a new `ChangePrivacyCommand` using the input `Index` and the `PersonPrivacySettings`","lastModifiedDate":"2017-10-24"},{"lineNumber":643,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":644,"author":{"gitId":"jeffreygohkw"},"content":"When `ChangePrivacyCommand` starts executing, it will create a new `Person` based on the data of the `Person` at the specified `Index`.","lastModifiedDate":"2017-10-24"},{"lineNumber":645,"author":{"gitId":"jeffreygohkw"},"content":"It will then adjust the privacy values based on the input `PersonPrivacySettings`.","lastModifiedDate":"2017-10-24"},{"lineNumber":646,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":647,"author":{"gitId":"jeffreygohkw"},"content":"Once it is done, it will update the original `Person` with the newly created `Person` in `Model`.","lastModifiedDate":"2017-10-24"},{"lineNumber":648,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":649,"author":{"gitId":"jeffreygohkw"},"content":"[NOTE]","lastModifiedDate":"2017-10-24"},{"lineNumber":650,"author":{"gitId":"jeffreygohkw"},"content":"If there are missing fields in the input string, the getter methods in `PersonPrivacySettings` will return `false`, but the actual value stored will remain as `null`.","lastModifiedDate":"2017-10-24"},{"lineNumber":651,"author":{"gitId":"jeffreygohkw"},"content":"This allows `isAnyFieldNonNull` to check if the user has input any field at all.","lastModifiedDate":"2017-10-24"},{"lineNumber":652,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":653,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-24"},{"lineNumber":654,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":655,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of changing of a person\u0027s privacy. +","lastModifiedDate":"2017-10-30"},{"lineNumber":656,"author":{"gitId":"jeffreygohkw"},"content":"**Alternative 1 (current choice):** Create a separate command to do so. +","lastModifiedDate":"2017-10-24"},{"lineNumber":657,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** It is clear to users and developers that `changeprivacy` is to modify a person\u0027s privacy while `edit` changes the actual data if the relevant field is not private.  +","lastModifiedDate":"2017-10-24"},{"lineNumber":658,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Additional command, parser and tests must be created.  +","lastModifiedDate":"2017-10-24"},{"lineNumber":659,"author":{"gitId":"-"},"content":"**Alternative 2:** Enhance the functi-onality of EditCommand. +","lastModifiedDate":"2017-10-30"},{"lineNumber":660,"author":{"gitId":"jeffreygohkw"},"content":"**Pros:** Can make use of existing code to aid the implementation. +","lastModifiedDate":"2017-10-24"},{"lineNumber":661,"author":{"gitId":"jeffreygohkw"},"content":"**Cons:** Increases the complexity of EditCommand for both users and developers. More ambiguous as to how editing a private field will affect the data.","lastModifiedDate":"2017-10-24"},{"lineNumber":662,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":663,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Locating a Person on Google Maps","lastModifiedDate":"2017-10-30"},{"lineNumber":664,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":665,"author":{"gitId":"-"},"content":"Upon calling the `locate` command, `LocateCommandParser` will parse the input string into an `Index`, and create a new `LocateCommand`. Should the arguments be a non-integer, a `ParseException` will be thrown. +","lastModifiedDate":"2017-10-30"},{"lineNumber":666,"author":{"gitId":"-"},"content":"This can be seen from the code snippet below:","lastModifiedDate":"2017-10-30"},{"lineNumber":667,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":668,"author":{"gitId":"-"},"content":"[source, java]","lastModifiedDate":"2017-10-30"},{"lineNumber":669,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":670,"author":{"gitId":"-"},"content":" public LocateCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-30"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-10-30"},{"lineNumber":672,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-10-30"},{"lineNumber":673,"author":{"gitId":"-"},"content":"            return new LocateCommand(index);","lastModifiedDate":"2017-10-30"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-30"},{"lineNumber":675,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-10-30"},{"lineNumber":676,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-30"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":678,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":679,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":680,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":681,"author":{"gitId":"-"},"content":"Upon execution of `LocateCommand`, it will search the `Model` for the `Person` at the input `Index`. If the `Index` is out of range of the list of `Person`s, a `CommandException` will be thrown.","lastModifiedDate":"2017-10-30"},{"lineNumber":682,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":683,"author":{"gitId":"-"},"content":"Otherwise, `LocateCommand` will post a new `BrowserPanelLocateEvent` and pass in the `Person` found to that event. It will then return a `CommandResult` indicating the success of its execution.","lastModifiedDate":"2017-10-30"},{"lineNumber":684,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":685,"author":{"gitId":"-"},"content":"This code for this can be found below:","lastModifiedDate":"2017-10-30"},{"lineNumber":686,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":687,"author":{"gitId":"-"},"content":"[source, java]","lastModifiedDate":"2017-10-30"},{"lineNumber":688,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":689,"author":{"gitId":"-"},"content":"@Override","lastModifiedDate":"2017-10-30"},{"lineNumber":690,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {","lastModifiedDate":"2017-10-30"},{"lineNumber":691,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":692,"author":{"gitId":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-30"},{"lineNumber":693,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-30"},{"lineNumber":695,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-30"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":697,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":698,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new BrowserPanelLocateEvent(","lastModifiedDate":"2017-10-30"},{"lineNumber":699,"author":{"gitId":"-"},"content":"                model.getFilteredPersonList().get(targetIndex.getZeroBased())));","lastModifiedDate":"2017-10-30"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_PERSON_SUCCESS, targetIndex.getOneBased()));","lastModifiedDate":"2017-10-30"},{"lineNumber":701,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":703,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":705,"author":{"gitId":"-"},"content":"BrowserPanel will then use `handleBrowserPanelLocationEvent` to process this newly created event. It will call `loadMapsPage`, which will check if the `Person`\u0027s `Address` is private or not. If their `Address` is public, it will launch the browser, showing the `Address` of that `Person` on Google Maps. Otherwise, an error message will be printed, as can be seen below:","lastModifiedDate":"2017-10-30"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":707,"author":{"gitId":"-"},"content":"[source, java]","lastModifiedDate":"2017-10-30"},{"lineNumber":708,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":709,"author":{"gitId":"-"},"content":" private void loadMapsPage(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-30"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        if (person.getAddress().isPrivate()) {","lastModifiedDate":"2017-10-30"},{"lineNumber":711,"author":{"gitId":"-"},"content":"            raise(new NewResultAvailableEvent(PRIVATE_ADDRESS_CANNOT_SEARCH));","lastModifiedDate":"2017-10-30"},{"lineNumber":712,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2017-10-30"},{"lineNumber":713,"author":{"gitId":"-"},"content":"            loadPage(GOOGLE_MAPS_URL_PREFIX + person.getAddress().toString().replaceAll(\" \", \"+\")","lastModifiedDate":"2017-10-30"},{"lineNumber":714,"author":{"gitId":"-"},"content":"                + GOOGLE_MAPS_URL_SUFFIX);","lastModifiedDate":"2017-10-30"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":716,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":717,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":718,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":719,"author":{"gitId":"-"},"content":"The overall sequence of events is illustrated by the following sequence diagram:","lastModifiedDate":"2017-10-30"},{"lineNumber":720,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":721,"author":{"gitId":"-"},"content":"image::LocateSequenceDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-30"},{"lineNumber":722,"author":{"gitId":"-"},"content":"_Figure 3.7.1 : Sequence Diagram for Locating a Person\u0027s Address_","lastModifiedDate":"2017-10-30"},{"lineNumber":723,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":724,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-30"},{"lineNumber":725,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":726,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the Google Maps to search for a person\u0027s `Address` +","lastModifiedDate":"2017-10-30"},{"lineNumber":727,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** Create a seperate command `locate`. +","lastModifiedDate":"2017-10-30"},{"lineNumber":728,"author":{"gitId":"-"},"content":"**Pros:** No modification needed for existing commands, which makes it clear the purpose of each command. +","lastModifiedDate":"2017-10-30"},{"lineNumber":729,"author":{"gitId":"-"},"content":"**Cons:** Additional commands will need to be learnt for both developers and users. +","lastModifiedDate":"2017-10-30"},{"lineNumber":730,"author":{"gitId":"-"},"content":"**Alternative 2:** Add the functionality into `SelectCommand`. +","lastModifiedDate":"2017-10-30"},{"lineNumber":731,"author":{"gitId":"-"},"content":"**Pros:** Expands the utility of `SelectCommand` beyond performing a Google search on their name. +","lastModifiedDate":"2017-10-30"},{"lineNumber":732,"author":{"gitId":"-"},"content":"**Cons:** Will require significant modification of existing code, and may make it more confusing for users.","lastModifiedDate":"2017-10-30"},{"lineNumber":733,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":734,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Add/Delete Tag mechanism","lastModifiedDate":"2017-10-20"},{"lineNumber":735,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":736,"author":{"gitId":"-"},"content":"The add/delete tag mechanism is facilitated by `personArrayList`, which resides inside `LogicManager`. It supports add/delete","lastModifiedDate":"2017-10-20"},{"lineNumber":737,"author":{"gitId":"-"},"content":"tag for all persons in the address book. This command will inherit from `UndoableCommand`.","lastModifiedDate":"2017-10-20"},{"lineNumber":738,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":739,"author":{"gitId":"-"},"content":"The add/delete tag command are executed by `AddTagCommand` and `DeleteTagCommand` are parsed through `AddTagCommandParser` and `DeleteTagCommandParser`.","lastModifiedDate":"2017-10-20"},{"lineNumber":740,"author":{"gitId":"-"},"content":"It is different from `edit [INDEX] [TAG]` since it allows the user to perform the addition and deletion of tags for multiple people at once.","lastModifiedDate":"2017-10-20"},{"lineNumber":741,"author":{"gitId":"-"},"content":"If the user wants to add the `t/friends` tag for the first 3 persons in the address book, the `AddTagCommand` (`addtag 1 2 3 t/friends`) will be executed.","lastModifiedDate":"2017-10-20"},{"lineNumber":742,"author":{"gitId":"-"},"content":"The same operation will happen for `deletetag` command.","lastModifiedDate":"2017-10-20"},{"lineNumber":743,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":744,"author":{"gitId":"-"},"content":"The `AddTagCommand` goes through all the persons in the address book and add tag to the persons with specific index. The `DeleteTagCommand` works","lastModifiedDate":"2017-10-20"},{"lineNumber":745,"author":{"gitId":"-"},"content":"in a similar way.","lastModifiedDate":"2017-10-20"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":747,"author":{"gitId":"-"},"content":"The example of how `AddTagCommand` is working:","lastModifiedDate":"2017-10-20"},{"lineNumber":748,"author":{"gitId":"-"},"content":"[source,java]","lastModifiedDate":"2017-10-20"},{"lineNumber":749,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-20"},{"lineNumber":750,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-10-20"},{"lineNumber":751,"author":{"gitId":"-"},"content":" * Adds a tag to the persons in the list from the address book.","lastModifiedDate":"2017-10-20"},{"lineNumber":752,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-10-20"},{"lineNumber":753,"author":{"gitId":"-"},"content":"public class AddTagCommand extends UndoableCommand {","lastModifiedDate":"2017-10-20"},{"lineNumber":754,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-10-20"},{"lineNumber":755,"author":{"gitId":"-"},"content":"         * Check whether the index within the range then checks whether the specific persons have the tag.","lastModifiedDate":"2017-10-20"},{"lineNumber":756,"author":{"gitId":"-"},"content":"         * If not, add the tag to the person that doesn\u0027t have the given tag.","lastModifiedDate":"2017-10-20"},{"lineNumber":757,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2017-10-20"},{"lineNumber":758,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-10-20"},{"lineNumber":759,"author":{"gitId":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-20"},{"lineNumber":760,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":761,"author":{"gitId":"-"},"content":"            for (Index targetIndex : targetIndexes) {","lastModifiedDate":"2017-10-20"},{"lineNumber":762,"author":{"gitId":"-"},"content":"                // check whether the index within the range","lastModifiedDate":"2017-10-20"},{"lineNumber":763,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-10-20"},{"lineNumber":764,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {","lastModifiedDate":"2017-10-20"},{"lineNumber":765,"author":{"gitId":"-"},"content":"                // check whether all persons have the given tag","lastModifiedDate":"2017-10-20"},{"lineNumber":766,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-10-20"},{"lineNumber":767,"author":{"gitId":"-"},"content":"            // throw exception for duplicated tag","lastModifiedDate":"2017-10-20"},{"lineNumber":768,"author":{"gitId":"-"},"content":"            return new CommandResult();","lastModifiedDate":"2017-10-20"},{"lineNumber":769,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":770,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-20"},{"lineNumber":771,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":772,"author":{"gitId":"-"},"content":"Suppose the user enter the `addtag 1 2 t/friends` command. The following sequence diagram shows how the add tag command works:","lastModifiedDate":"2017-10-20"},{"lineNumber":773,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":774,"author":{"gitId":"-"},"content":"image::AddTagSdForLogic.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-20"},{"lineNumber":775,"author":{"gitId":"-"},"content":"_Figure 3.8.1 : Add Tag Sequence Diagram for Logic_ +","lastModifiedDate":"2017-10-30"},{"lineNumber":776,"author":{"gitId":"-"},"content":"The `deletetag` command works the same as `addtag` command with different name only.","lastModifiedDate":"2017-10-20"},{"lineNumber":777,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":778,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-10-20"},{"lineNumber":779,"author":{"gitId":"-"},"content":"If the input index does not exist, the `AddTagCommand` and `DeleteTagCommand` will throw an exception. +","lastModifiedDate":"2017-10-30"},{"lineNumber":780,"author":{"gitId":"-"},"content":"If the tag to be deleted does not exist, the `DeleteTagCommand` will throw an exception. +","lastModifiedDate":"2017-10-30"},{"lineNumber":781,"author":{"gitId":"-"},"content":"If the tag to be added exists in every target person in the address book, the `AddTagCommand` will throw an exception.","lastModifiedDate":"2017-10-20"},{"lineNumber":782,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":783,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-20"},{"lineNumber":784,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":785,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the `addtag` and `deletetag` +","lastModifiedDate":"2017-10-20"},{"lineNumber":786,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** implement the methods in `ModelManager` +","lastModifiedDate":"2017-10-20"},{"lineNumber":787,"author":{"gitId":"-"},"content":"**Pros:** Easier to implement. `ModelManager` includes all the methods and variables. +","lastModifiedDate":"2017-10-20"},{"lineNumber":788,"author":{"gitId":"-"},"content":"**Cons:** Must modify `Model` also to fit the `ModelManager`. Beginner may have difficulty to understand the different functions in Model component+","lastModifiedDate":"2017-10-20"},{"lineNumber":789,"author":{"gitId":"-"},"content":"**Alternative 2:** Implement the `addtag` and `deletetag` in `AddTagCommand` and `DeleteTagCommand` respectively. +","lastModifiedDate":"2017-10-20"},{"lineNumber":790,"author":{"gitId":"-"},"content":"**Pros:** Easier to understand. +","lastModifiedDate":"2017-10-20"},{"lineNumber":791,"author":{"gitId":"-"},"content":"**Cons:** Repetitive code. Additional overload constructor needs to be implement. The `AddTagCommand` and `DeleteTagCommand` will have to update the person list.","lastModifiedDate":"2017-10-20"},{"lineNumber":792,"author":{"gitId":"-"},"content":"This violates the Single Responsibility Principle.","lastModifiedDate":"2017-10-20"},{"lineNumber":793,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":794,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2017-10-30"},{"lineNumber":795,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the `AddTagCommand` and `DeleteTagCommand` +","lastModifiedDate":"2017-10-30"},{"lineNumber":796,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** create new command `addtag` and `deletetag` +","lastModifiedDate":"2017-10-30"},{"lineNumber":797,"author":{"gitId":"-"},"content":"**Pros:** Less modification of existing command and parser +","lastModifiedDate":"2017-10-30"},{"lineNumber":798,"author":{"gitId":"-"},"content":"**Cons:** Users have to learn how to use the additional commands +","lastModifiedDate":"2017-10-30"},{"lineNumber":799,"author":{"gitId":"-"},"content":"**Alternative 2:** Modify the existing `add` and `delete` command +","lastModifiedDate":"2017-10-30"},{"lineNumber":800,"author":{"gitId":"-"},"content":"**Pros:** Users could use the same commands to achieve different purpose +","lastModifiedDate":"2017-10-30"},{"lineNumber":801,"author":{"gitId":"-"},"content":"**Cons:** Additional override the constructor for the existing command. It might not be easy for the beginner.","lastModifiedDate":"2017-10-30"},{"lineNumber":802,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":803,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Find Tag mechanism","lastModifiedDate":"2017-10-30"},{"lineNumber":804,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":805,"author":{"gitId":"-"},"content":"The find tag mechanism is facilitated by an ArrayList of Tags, which resides inside `LogicManager`. It supports finding persons by their tags in the address book.","lastModifiedDate":"2017-10-30"},{"lineNumber":806,"author":{"gitId":"-"},"content":"This command will not inherit from `UndoableCommand`.","lastModifiedDate":"2017-10-30"},{"lineNumber":807,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":808,"author":{"gitId":"-"},"content":"The `findtag` command is executed by `FindTagCommand` and is parsed through `FindTagCommandParser`.","lastModifiedDate":"2017-10-30"},{"lineNumber":809,"author":{"gitId":"-"},"content":"After parsing through `FindTagCommandParser`, it does not goes to the `FindTagCommand` straightly. The list of tags input will be processed by `NameContainsTagsPredicate` first.","lastModifiedDate":"2017-10-30"},{"lineNumber":810,"author":{"gitId":"-"},"content":"It is similar to the `find` command since find persons through their names and find persons through their tags are quite similar.","lastModifiedDate":"2017-10-30"},{"lineNumber":811,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":812,"author":{"gitId":"-"},"content":"Please take not that although `FindTagCommand` is similar to `FindCommand`, there are still some differences.","lastModifiedDate":"2017-10-30"},{"lineNumber":813,"author":{"gitId":"-"},"content":"`FindTagCommand` provides exclusive finding whereas `FindCommand` does not. It is achieved in the `NameContainsTagsPredicate`.","lastModifiedDate":"2017-10-30"},{"lineNumber":814,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":815,"author":{"gitId":"-"},"content":"This is the example of how `NameContainsTagsPredicate` is working:","lastModifiedDate":"2017-10-30"},{"lineNumber":816,"author":{"gitId":"-"},"content":"Firstly, it will convert a Set of Tag to String.","lastModifiedDate":"2017-10-30"},{"lineNumber":817,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":818,"author":{"gitId":"-"},"content":"[source,java]","lastModifiedDate":"2017-10-30"},{"lineNumber":819,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":820,"author":{"gitId":"-"},"content":"private String convertTagToString(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-30"},{"lineNumber":821,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e personTags \u003d person.getTags();","lastModifiedDate":"2017-10-30"},{"lineNumber":822,"author":{"gitId":"-"},"content":"        StringBuilder allTagNames \u003d new StringBuilder();","lastModifiedDate":"2017-10-30"},{"lineNumber":823,"author":{"gitId":"-"},"content":"        for (Tag tag : personTags) {","lastModifiedDate":"2017-10-30"},{"lineNumber":824,"author":{"gitId":"-"},"content":"            allTagNames.append(tag.getTagName());","lastModifiedDate":"2017-10-30"},{"lineNumber":825,"author":{"gitId":"-"},"content":"            allTagNames.append(\" \");","lastModifiedDate":"2017-10-30"},{"lineNumber":826,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        return allTagNames.toString().trim();","lastModifiedDate":"2017-10-30"},{"lineNumber":828,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":829,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":830,"author":{"gitId":"-"},"content":"After having a list of string, it will then split strings into two ArrayList. One is for the tags we are looking for and another one","lastModifiedDate":"2017-10-30"},{"lineNumber":831,"author":{"gitId":"-"},"content":"is for the tags to be excluded.","lastModifiedDate":"2017-10-30"},{"lineNumber":832,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":833,"author":{"gitId":"-"},"content":"[sourcce,java]","lastModifiedDate":"2017-10-30"},{"lineNumber":834,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":835,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-10-30"},{"lineNumber":836,"author":{"gitId":"-"},"content":"     * Update the wantedTag and unwantedTag list","lastModifiedDate":"2017-10-30"},{"lineNumber":837,"author":{"gitId":"-"},"content":"     * @param wantedTag list of tags to be searched","lastModifiedDate":"2017-10-30"},{"lineNumber":838,"author":{"gitId":"-"},"content":"     * @param unwantedTag list of tags to not be searched","lastModifiedDate":"2017-10-30"},{"lineNumber":839,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-10-30"},{"lineNumber":840,"author":{"gitId":"-"},"content":"    private void updateWantedTagUnwantedTag(List\u003cString\u003e wantedTag, List\u003cString\u003e unwantedTag) {","lastModifiedDate":"2017-10-30"},{"lineNumber":841,"author":{"gitId":"-"},"content":"        for (String everyTag : tags) {","lastModifiedDate":"2017-10-30"},{"lineNumber":842,"author":{"gitId":"-"},"content":"            if (!everyTag.startsWith(\"/not\")) {","lastModifiedDate":"2017-10-30"},{"lineNumber":843,"author":{"gitId":"-"},"content":"                wantedTag.add(everyTag);","lastModifiedDate":"2017-10-30"},{"lineNumber":844,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2017-10-30"},{"lineNumber":845,"author":{"gitId":"-"},"content":"                unwantedTag.add(everyTag.substring(4));","lastModifiedDate":"2017-10-30"},{"lineNumber":846,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-10-30"},{"lineNumber":847,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":848,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":849,"author":{"gitId":"-"},"content":"----","lastModifiedDate":"2017-10-30"},{"lineNumber":850,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":851,"author":{"gitId":"-"},"content":"Lastly, it will return the result according to the user input. +","lastModifiedDate":"2017-10-30"},{"lineNumber":852,"author":{"gitId":"-"},"content":"Suppose the user enter `findtag friends` command. The following sequence diagram shows how the find tag command works:","lastModifiedDate":"2017-10-30"},{"lineNumber":853,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":854,"author":{"gitId":"-"},"content":"image::FindTagSequenceDiagram.png[width\u003d\"800\"]","lastModifiedDate":"2017-10-30"},{"lineNumber":855,"author":{"gitId":"-"},"content":"_Figure 3.9.1 : Find Tag Sequence Diagram for Logic_ +","lastModifiedDate":"2017-10-30"},{"lineNumber":856,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":857,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-10-30"},{"lineNumber":858,"author":{"gitId":"-"},"content":"If the input index tags do not exist, the `FindTagCommand` will give a empty list.","lastModifiedDate":"2017-10-30"},{"lineNumber":859,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":860,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations","lastModifiedDate":"2017-10-30"},{"lineNumber":861,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":862,"author":{"gitId":"-"},"content":"**Aspect:** Implementation of the `findtag` +","lastModifiedDate":"2017-10-30"},{"lineNumber":863,"author":{"gitId":"-"},"content":"**Alternative 1 (current choice):** implement a new command `findtag` +","lastModifiedDate":"2017-10-30"},{"lineNumber":864,"author":{"gitId":"-"},"content":"**Pros:** Easier to implement. `findtag` command will be similar to the `find` command. +","lastModifiedDate":"2017-10-30"},{"lineNumber":865,"author":{"gitId":"-"},"content":"**Cons:** Must create `NameContainsTagsPredicate` in model. It does not fully utilize the existing `NameContainsKeywordsPredicate`. +","lastModifiedDate":"2017-10-30"},{"lineNumber":866,"author":{"gitId":"-"},"content":"**Alternative 2:** Implement the `findtag` in `FindCommand`. +","lastModifiedDate":"2017-10-30"},{"lineNumber":867,"author":{"gitId":"-"},"content":"**Pros:** Easier for user. They do not have to memorize some many commands. +","lastModifiedDate":"2017-10-30"},{"lineNumber":868,"author":{"gitId":"-"},"content":"**Cons:** The existing `FindCommand` will not only response for finding persons through names only. This Violates Single Responsibility Principle","lastModifiedDate":"2017-10-30"},{"lineNumber":869,"author":{"gitId":"-"},"content":"and Separation of Concerns as FindCommand now needs to do two different things.","lastModifiedDate":"2017-10-30"},{"lineNumber":870,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":871,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Logging","lastModifiedDate":"2017-05-19"},{"lineNumber":872,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":873,"author":{"gitId":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations.","lastModifiedDate":"2017-05-19"},{"lineNumber":874,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":875,"author":{"gitId":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See link:#configuration[Configuration])","lastModifiedDate":"2017-05-19"},{"lineNumber":876,"author":{"gitId":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level","lastModifiedDate":"2017-05-19"},{"lineNumber":877,"author":{"gitId":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file.","lastModifiedDate":"2017-05-19"},{"lineNumber":878,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":879,"author":{"gitId":"-"},"content":"*Logging Levels*","lastModifiedDate":"2017-05-19"},{"lineNumber":880,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":881,"author":{"gitId":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application","lastModifiedDate":"2017-05-19"},{"lineNumber":882,"author":{"gitId":"-"},"content":"* `WARNING` : Can continue, but with caution","lastModifiedDate":"2017-05-19"},{"lineNumber":883,"author":{"gitId":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App","lastModifiedDate":"2017-05-19"},{"lineNumber":884,"author":{"gitId":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size","lastModifiedDate":"2017-05-19"},{"lineNumber":885,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":886,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":887,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Configuration","lastModifiedDate":"2017-05-19"},{"lineNumber":888,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":889,"author":{"gitId":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`).","lastModifiedDate":"2017-05-19"},{"lineNumber":890,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":891,"author":{"gitId":"-"},"content":"\u003d\u003d Documentation","lastModifiedDate":"2017-09-21"},{"lineNumber":892,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":893,"author":{"gitId":"-"},"content":"We use asciidoc for writing documentation.","lastModifiedDate":"2017-09-21"},{"lineNumber":894,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":895,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-09-21"},{"lineNumber":896,"author":{"gitId":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting.","lastModifiedDate":"2017-09-21"},{"lineNumber":897,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":898,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Editing Documentation","lastModifiedDate":"2017-09-21"},{"lineNumber":899,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":900,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits.","lastModifiedDate":"2017-09-21"},{"lineNumber":901,"author":{"gitId":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time.","lastModifiedDate":"2017-09-21"},{"lineNumber":902,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":903,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Publishing Documentation","lastModifiedDate":"2017-09-21"},{"lineNumber":904,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":905,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis.","lastModifiedDate":"2017-09-21"},{"lineNumber":906,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":907,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format","lastModifiedDate":"2017-09-21"},{"lineNumber":908,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":909,"author":{"gitId":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages.","lastModifiedDate":"2017-09-21"},{"lineNumber":910,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":911,"author":{"gitId":"-"},"content":"Here are the steps to convert the project documentation files to PDF format.","lastModifiedDate":"2017-09-21"},{"lineNumber":912,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":913,"author":{"gitId":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format.","lastModifiedDate":"2017-09-21"},{"lineNumber":914,"author":{"gitId":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`.","lastModifiedDate":"2017-09-21"},{"lineNumber":915,"author":{"gitId":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu.","lastModifiedDate":"2017-09-21"},{"lineNumber":916,"author":{"gitId":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below.","lastModifiedDate":"2017-09-21"},{"lineNumber":917,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":918,"author":{"gitId":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]","lastModifiedDate":"2017-09-21"},{"lineNumber":919,"author":{"gitId":"-"},"content":"_Figure 5.6.1 : Saving documentation as PDF files in Chrome_","lastModifiedDate":"2017-09-21"},{"lineNumber":920,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":921,"author":{"gitId":"-"},"content":"\u003d\u003d Testing","lastModifiedDate":"2017-05-19"},{"lineNumber":922,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":923,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Running Tests","lastModifiedDate":"2017-09-21"},{"lineNumber":924,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":925,"author":{"gitId":"-"},"content":"There are three ways to run tests.","lastModifiedDate":"2017-09-21"},{"lineNumber":926,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":927,"author":{"gitId":"-"},"content":"[TIP]","lastModifiedDate":"2017-09-21"},{"lineNumber":928,"author":{"gitId":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies.","lastModifiedDate":"2017-09-21"},{"lineNumber":929,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":930,"author":{"gitId":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*","lastModifiedDate":"2017-09-21"},{"lineNumber":931,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":932,"author":{"gitId":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2017-05-18"},{"lineNumber":933,"author":{"gitId":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2017-05-18"},{"lineNumber":934,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":935,"author":{"gitId":"-"},"content":"*Method 2: Using Gradle*","lastModifiedDate":"2017-09-21"},{"lineNumber":936,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":937,"author":{"gitId":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)","lastModifiedDate":"2017-09-21"},{"lineNumber":938,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":939,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-09-21"},{"lineNumber":940,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle.","lastModifiedDate":"2017-09-21"},{"lineNumber":941,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":942,"author":{"gitId":"-"},"content":"*Method 3: Using Gradle (headless)*","lastModifiedDate":"2017-09-21"},{"lineNumber":943,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":944,"author":{"gitId":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running.","lastModifiedDate":"2017-09-21"},{"lineNumber":945,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":946,"author":{"gitId":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)","lastModifiedDate":"2017-09-21"},{"lineNumber":947,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":948,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Types of tests","lastModifiedDate":"2017-09-21"},{"lineNumber":949,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":950,"author":{"gitId":"-"},"content":"We have two types of tests:","lastModifiedDate":"2017-05-19"},{"lineNumber":951,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":952,"author":{"gitId":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,","lastModifiedDate":"2017-09-21"},{"lineNumber":953,"author":{"gitId":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package.","lastModifiedDate":"2017-09-21"},{"lineNumber":954,"author":{"gitId":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package.","lastModifiedDate":"2017-09-21"},{"lineNumber":955,"author":{"gitId":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,","lastModifiedDate":"2017-05-19"},{"lineNumber":956,"author":{"gitId":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +","lastModifiedDate":"2017-05-19"},{"lineNumber":957,"author":{"gitId":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`","lastModifiedDate":"2017-05-19"},{"lineNumber":958,"author":{"gitId":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +","lastModifiedDate":"2017-05-19"},{"lineNumber":959,"author":{"gitId":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`","lastModifiedDate":"2017-05-19"},{"lineNumber":960,"author":{"gitId":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +","lastModifiedDate":"2017-05-19"},{"lineNumber":961,"author":{"gitId":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`","lastModifiedDate":"2017-05-19"},{"lineNumber":962,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":963,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":964,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing","lastModifiedDate":"2017-09-21"},{"lineNumber":965,"author":{"gitId":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**","lastModifiedDate":"2017-09-21"},{"lineNumber":966,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":967,"author":{"gitId":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing.","lastModifiedDate":"2017-09-21"},{"lineNumber":968,"author":{"gitId":"-"},"content":"* Solution: Execute Gradle task `processResources`.","lastModifiedDate":"2017-09-21"},{"lineNumber":969,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":970,"author":{"gitId":"-"},"content":"\u003d\u003d Dev Ops","lastModifiedDate":"2017-05-19"},{"lineNumber":971,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":972,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Build Automation","lastModifiedDate":"2017-05-19"},{"lineNumber":973,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":974,"author":{"gitId":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation.","lastModifiedDate":"2017-05-30"},{"lineNumber":975,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":976,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Continuous Integration","lastModifiedDate":"2017-05-19"},{"lineNumber":977,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":978,"author":{"gitId":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details.","lastModifiedDate":"2017-05-30"},{"lineNumber":979,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":980,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Making a Release","lastModifiedDate":"2017-05-19"},{"lineNumber":981,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":982,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2017-05-19"},{"lineNumber":983,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":984,"author":{"gitId":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`].","lastModifiedDate":"2017-07-07"},{"lineNumber":985,"author":{"gitId":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e.","lastModifiedDate":"2017-05-30"},{"lineNumber":986,"author":{"gitId":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2017-05-19"},{"lineNumber":987,"author":{"gitId":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created.","lastModifiedDate":"2017-05-19"},{"lineNumber":988,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":989,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Managing Dependencies","lastModifiedDate":"2017-05-19"},{"lineNumber":990,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":991,"author":{"gitId":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +","lastModifiedDate":"2017-05-19"},{"lineNumber":992,"author":{"gitId":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +","lastModifiedDate":"2017-05-19"},{"lineNumber":993,"author":{"gitId":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)","lastModifiedDate":"2017-05-19"},{"lineNumber":994,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":995,"author":{"gitId":"-"},"content":"[appendix]","lastModifiedDate":"2017-05-30"},{"lineNumber":996,"author":{"gitId":"-"},"content":"\u003d\u003d User Stories","lastModifiedDate":"2017-05-30"},{"lineNumber":997,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":998,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`","lastModifiedDate":"2017-05-19"},{"lineNumber":999,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1000,"author":{"gitId":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]","lastModifiedDate":"2017-05-19"},{"lineNumber":1001,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-05-19"},{"lineNumber":1002,"author":{"gitId":"-"},"content":"|Priority |As a ... |I want to ... |So that I can...","lastModifiedDate":"2017-05-19"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App","lastModifiedDate":"2017-05-19"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"|`* * *` |user |add a new person |","lastModifiedDate":"2017-05-19"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need","lastModifiedDate":"2017-05-19"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1009,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |user |have a search function |easily search for the contact I am looking for without browsing through thousands of contacts","lastModifiedDate":"2017-10-02"},{"lineNumber":1010,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1011,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |user |have the option to edit my created contacts |make changes to the contacts that I have added","lastModifiedDate":"2017-10-02"},{"lineNumber":1012,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1013,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |error-prone user |have the ability to Undo and Redo |automatically undo or redo the changes that I have made","lastModifiedDate":"2017-10-02"},{"lineNumber":1014,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1015,"author":{"gitId":"jeffreygohkw"},"content":"|`* * *` |user with secretive friends |be able to add contacts with incomplete data |operate without the need to create dummy values","lastModifiedDate":"2017-10-02"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"|`* *` |user |hide link:#private-contact-detail[private contact details] by default |minimize chance of someone else seeing them by accident","lastModifiedDate":"2017-05-19"},{"lineNumber":1018,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1019,"author":{"gitId":"charlesgoh"},"content":"|`* *` |user |load contact data from any file of my choosing | have more flexibility for my file\u0027s storage location","lastModifiedDate":"2017-10-07"},{"lineNumber":1020,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1021,"author":{"gitId":"charlesgoh"},"content":"|`* *` |user |save contact data in a directory of my choosing |save the file in a location that fits my needs","lastModifiedDate":"2017-10-07"},{"lineNumber":1022,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1023,"author":{"gitId":"charlesgoh"},"content":"|`* *` |user |type commands partially and have the application fill in the rest for me | increase typing productivity","lastModifiedDate":"2017-10-07"},{"lineNumber":1024,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1025,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |first-time user |be able to see a user guide when I first start the program |be clear on how to use it","lastModifiedDate":"2017-10-02"},{"lineNumber":1026,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1027,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |multi-tasking user |be able to record things other than contacts, such as tasks |manage myself better","lastModifiedDate":"2017-10-02"},{"lineNumber":1028,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1029,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user |be able to filter my contacts based on tags |view the people who are relevant to me","lastModifiedDate":"2017-10-02"},{"lineNumber":1030,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1031,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |organized user |be able to sort my contacts by different fields such as by name and birthday  |better organize my contacts","lastModifiedDate":"2017-10-02"},{"lineNumber":1032,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1033,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user with multiple devices |be able to import and export my address book |use the address book without having to add all my contacts when I switch platforms","lastModifiedDate":"2017-10-02"},{"lineNumber":1034,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1035,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user with many social media accounts |be able to add my contacts\u0027 social media accounts to the address book |improve connectivity and learn more about my contacts","lastModifiedDate":"2017-10-02"},{"lineNumber":1036,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1037,"author":{"gitId":"jeffreygohkw"},"content":"|`* *` |user who values privacy |be able to to choose and modify which contacts and what information are to be displayed |hide information I do not want to share from others","lastModifiedDate":"2017-10-02"},{"lineNumber":1038,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1039,"author":{"gitId":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily","lastModifiedDate":"2017-05-19"},{"lineNumber":1040,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1041,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |lazy user |have an easy way to add a person with his full details into my address book |add new contacts quickly","lastModifiedDate":"2017-10-02"},{"lineNumber":1042,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1043,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |user who values aesthetics |be able to customize my layout |display self-identity, and use a layout that I like","lastModifiedDate":"2017-10-02"},{"lineNumber":1044,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1045,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |user |have the ability to add a short description to my contacts |add more information about my contacts","lastModifiedDate":"2017-10-02"},{"lineNumber":1046,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1047,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |long-time user |be able to access shortcut commands |use the address book more efficiently","lastModifiedDate":"2017-10-02"},{"lineNumber":1048,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1049,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |non tech-savvy user |have the option to fill out certain fields |use the address book without having to use the intimidating CLI.","lastModifiedDate":"2017-10-02"},{"lineNumber":1050,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1051,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |error-prone user |have minor typos auto corrected |continue using the address book without correcting my mistakes","lastModifiedDate":"2017-10-02"},{"lineNumber":1052,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1053,"author":{"gitId":"jeffreygohkw"},"content":"|`*` |user |be able to update the address book application easily when new updates are published |continue using the address book easily with any newly added features","lastModifiedDate":"2017-10-02"},{"lineNumber":1054,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1055,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-02"},{"lineNumber":1056,"author":{"gitId":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-05-19"},{"lineNumber":1057,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"[appendix]","lastModifiedDate":"2017-05-30"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"\u003d\u003d Use Cases","lastModifiedDate":"2017-05-30"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1061,"author":{"gitId":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)","lastModifiedDate":"2017-05-19"},{"lineNumber":1062,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"[discrete]","lastModifiedDate":"2017-05-19"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Use case: Delete person","lastModifiedDate":"2017-05-19"},{"lineNumber":1065,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"*MSS*","lastModifiedDate":"2017-05-19"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2017-05-19"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons","lastModifiedDate":"2017-05-19"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2017-05-19"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person","lastModifiedDate":"2017-09-02"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-09-02"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2017-09-02"},{"lineNumber":1074,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"*Extensions*","lastModifiedDate":"2017-05-19"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"[none]","lastModifiedDate":"2017-09-04"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2017-09-04"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-09-04"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2017-09-02"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2017-09-04"},{"lineNumber":1083,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-09-04"},{"lineNumber":1084,"author":{"gitId":"-"},"content":"[none]","lastModifiedDate":"2017-09-04"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"** 3a1. AddressBook shows an error message.","lastModifiedDate":"2017-09-04"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-09-02"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"Use case resumes at step 2.","lastModifiedDate":"2017-09-02"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1089,"author":{"gitId":"Esilocke"},"content":"[discrete]","lastModifiedDate":"2017-10-01"},{"lineNumber":1090,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Search for person","lastModifiedDate":"2017-10-01"},{"lineNumber":1091,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1092,"author":{"gitId":"Esilocke"},"content":"*MSS*","lastModifiedDate":"2017-10-01"},{"lineNumber":1093,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1094,"author":{"gitId":"Esilocke"},"content":"1.  User requests to search for a person with criteria","lastModifiedDate":"2017-10-01"},{"lineNumber":1095,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook shows a list of persons who match the criteria","lastModifiedDate":"2017-10-01"},{"lineNumber":1096,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1097,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1098,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1099,"author":{"gitId":"Esilocke"},"content":"*Extensions*","lastModifiedDate":"2017-10-01"},{"lineNumber":1100,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1101,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1102,"author":{"gitId":"Esilocke"},"content":"* 2a. The list is empty.","lastModifiedDate":"2017-10-01"},{"lineNumber":1103,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1104,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1105,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1106,"author":{"gitId":"Esilocke"},"content":"* 2b. No such person was found.","lastModifiedDate":"2017-10-07"},{"lineNumber":1107,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1108,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1109,"author":{"gitId":"Esilocke"},"content":"** 2b1. AddressBook informs the user that no matching users were found.","lastModifiedDate":"2017-10-07"},{"lineNumber":1110,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1111,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1112,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1113,"author":{"gitId":"Esilocke"},"content":"[discrete]","lastModifiedDate":"2017-10-01"},{"lineNumber":1114,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Edit person","lastModifiedDate":"2017-10-01"},{"lineNumber":1115,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1116,"author":{"gitId":"Esilocke"},"content":"*MSS*","lastModifiedDate":"2017-10-01"},{"lineNumber":1117,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1118,"author":{"gitId":"Esilocke"},"content":"1.  User requests to list persons","lastModifiedDate":"2017-10-01"},{"lineNumber":1119,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook shows a list of persons","lastModifiedDate":"2017-10-01"},{"lineNumber":1120,"author":{"gitId":"Esilocke"},"content":"3.  User requests to change the details of a specific person in the list","lastModifiedDate":"2017-10-01"},{"lineNumber":1121,"author":{"gitId":"Esilocke"},"content":"4.  AddressBook changes the details of the specified person.","lastModifiedDate":"2017-10-01"},{"lineNumber":1122,"author":{"gitId":"Esilocke"},"content":"5.  AddressBook shows the new details of the person.","lastModifiedDate":"2017-10-01"},{"lineNumber":1123,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1124,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1125,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1126,"author":{"gitId":"Esilocke"},"content":"*Extensions*","lastModifiedDate":"2017-10-01"},{"lineNumber":1127,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1128,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1129,"author":{"gitId":"Esilocke"},"content":"* 2a. The list is empty.","lastModifiedDate":"2017-10-01"},{"lineNumber":1130,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1131,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1132,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1133,"author":{"gitId":"Esilocke"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2017-10-01"},{"lineNumber":1134,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1135,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1136,"author":{"gitId":"Esilocke"},"content":"** 3a1. AddressBook shows an error message.","lastModifiedDate":"2017-10-01"},{"lineNumber":1137,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1138,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 2.","lastModifiedDate":"2017-10-01"},{"lineNumber":1139,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1140,"author":{"gitId":"Esilocke"},"content":"* 3b. The specified detail to change is invalid.","lastModifiedDate":"2017-10-07"},{"lineNumber":1141,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1142,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1143,"author":{"gitId":"Esilocke"},"content":"** 3b1. AddressBook shows an error message.","lastModifiedDate":"2017-10-07"},{"lineNumber":1144,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1145,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 2.","lastModifiedDate":"2017-10-01"},{"lineNumber":1146,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1147,"author":{"gitId":"Esilocke"},"content":"* 4a. The specified detail to change is exactly the same as the previous detail.","lastModifiedDate":"2017-10-01"},{"lineNumber":1148,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1149,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1150,"author":{"gitId":"Esilocke"},"content":"** 4a1. AddressBook informs the user that no change was made.","lastModifiedDate":"2017-10-01"},{"lineNumber":1151,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1152,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1154,"author":{"gitId":"Esilocke"},"content":"[discrete]","lastModifiedDate":"2017-10-01"},{"lineNumber":1155,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Undo/Redo by multiple steps","lastModifiedDate":"2017-10-07"},{"lineNumber":1156,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1157,"author":{"gitId":"Esilocke"},"content":"*MSS*","lastModifiedDate":"2017-10-01"},{"lineNumber":1158,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1159,"author":{"gitId":"Esilocke"},"content":"1.  User requests to undo/redo a specified number of steps","lastModifiedDate":"2017-10-01"},{"lineNumber":1160,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook undos/redos the last X commands, where X was the number of commands to undo/redo","lastModifiedDate":"2017-10-01"},{"lineNumber":1161,"author":{"gitId":"Esilocke"},"content":"3.  AddressBook displays a success message","lastModifiedDate":"2017-10-01"},{"lineNumber":1162,"author":{"gitId":"Esilocke"},"content":"4.  AddressBook displays a list of all the commands that were undone/redone.","lastModifiedDate":"2017-10-01"},{"lineNumber":1163,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1164,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-01"},{"lineNumber":1165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"*Extensions*","lastModifiedDate":"2017-10-01"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1168,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1169,"author":{"gitId":"Esilocke"},"content":"* 2a. The number of commands entered were less than the specified number of undo commands.","lastModifiedDate":"2017-10-01"},{"lineNumber":1170,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1171,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1172,"author":{"gitId":"Esilocke"},"content":"** 2a1. AddressBook undos all previous commands.","lastModifiedDate":"2017-10-01"},{"lineNumber":1173,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1174,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 3.","lastModifiedDate":"2017-10-01"},{"lineNumber":1175,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1176,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1177,"author":{"gitId":"Esilocke"},"content":"* 2b. The number of commands entered were less than the specified number of redo commands.","lastModifiedDate":"2017-10-07"},{"lineNumber":1178,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1179,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-01"},{"lineNumber":1180,"author":{"gitId":"Esilocke"},"content":"** 2b1. AddressBook redos all previously undone commands.","lastModifiedDate":"2017-10-07"},{"lineNumber":1181,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-01"},{"lineNumber":1182,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 3","lastModifiedDate":"2017-10-01"},{"lineNumber":1183,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1184,"author":{"gitId":"Esilocke"},"content":"[discrete]","lastModifiedDate":"2017-10-03"},{"lineNumber":1185,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Use case: Sort","lastModifiedDate":"2017-10-03"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":1187,"author":{"gitId":"Esilocke"},"content":"*MSS*","lastModifiedDate":"2017-10-03"},{"lineNumber":1188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":1189,"author":{"gitId":"Esilocke"},"content":"1.  User requests to sort by a criteria","lastModifiedDate":"2017-10-03"},{"lineNumber":1190,"author":{"gitId":"Esilocke"},"content":"2.  AddressBook sorts the contacts by the criteria","lastModifiedDate":"2017-10-03"},{"lineNumber":1191,"author":{"gitId":"Esilocke"},"content":"3.  AddressBook shows a success message.","lastModifiedDate":"2017-10-03"},{"lineNumber":1192,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-03"},{"lineNumber":1193,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-03"},{"lineNumber":1194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":1195,"author":{"gitId":"Esilocke"},"content":"*Extensions*","lastModifiedDate":"2017-10-03"},{"lineNumber":1196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":1197,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-03"},{"lineNumber":1198,"author":{"gitId":"Esilocke"},"content":"* 2a. The list is empty.","lastModifiedDate":"2017-10-03"},{"lineNumber":1199,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-03"},{"lineNumber":1200,"author":{"gitId":"Esilocke"},"content":"Use case ends.","lastModifiedDate":"2017-10-03"},{"lineNumber":1201,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":1202,"author":{"gitId":"Esilocke"},"content":"* 1a. The given criteria is invalid.","lastModifiedDate":"2017-10-03"},{"lineNumber":1203,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-03"},{"lineNumber":1204,"author":{"gitId":"Esilocke"},"content":"[none]","lastModifiedDate":"2017-10-03"},{"lineNumber":1205,"author":{"gitId":"Esilocke"},"content":"** 1a1. AddressBook shows an error message.","lastModifiedDate":"2017-10-03"},{"lineNumber":1206,"author":{"gitId":"Esilocke"},"content":"+","lastModifiedDate":"2017-10-03"},{"lineNumber":1207,"author":{"gitId":"Esilocke"},"content":"Use case resumes at step 1.","lastModifiedDate":"2017-10-03"},{"lineNumber":1208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1209,"author":{"gitId":"-"},"content":"[appendix]","lastModifiedDate":"2017-05-30"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"\u003d\u003d Non Functional Requirements","lastModifiedDate":"2017-05-30"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1212,"author":{"gitId":"-"},"content":".  Should work on any link:#mainstream-os[mainstream OS] as long as it has Java `1.8.0_60` or higher installed.","lastModifiedDate":"2017-05-19"},{"lineNumber":1213,"author":{"gitId":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2017-05-19"},{"lineNumber":1214,"author":{"gitId":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2017-05-19"},{"lineNumber":1215,"author":{"gitId":"charlesgoh"},"content":".  Feature sets are to be rolled out on a regular weekly basis, following the proper forking workflow procedure.","lastModifiedDate":"2017-10-01"},{"lineNumber":1216,"author":{"gitId":"charlesgoh"},"content":".  The application should be intuitive the target users: students (and professionals) who prefer typing over using the mouse.","lastModifiedDate":"2017-10-07"},{"lineNumber":1217,"author":{"gitId":"charlesgoh"},"content":".  Future versions of the application should be backwards compatible with data saved in versions after v1.0.","lastModifiedDate":"2017-10-07"},{"lineNumber":1218,"author":{"gitId":"charlesgoh"},"content":".  The application is not required to handle physical printing.","lastModifiedDate":"2017-10-07"},{"lineNumber":1219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1220,"author":{"gitId":"-"},"content":"[appendix]","lastModifiedDate":"2017-05-30"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"\u003d\u003d Glossary","lastModifiedDate":"2017-05-30"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"[[mainstream-os]]","lastModifiedDate":"2017-05-19"},{"lineNumber":1224,"author":{"gitId":"-"},"content":"Mainstream OS","lastModifiedDate":"2017-05-19"},{"lineNumber":1225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1226,"author":{"gitId":"-"},"content":"....","lastModifiedDate":"2017-09-04"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"Windows, Linux, Unix, OS-X","lastModifiedDate":"2017-05-19"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"....","lastModifiedDate":"2017-09-04"},{"lineNumber":1229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1230,"author":{"gitId":"charlesgoh"},"content":"[[backwards-compatible]]","lastModifiedDate":"2017-10-01"},{"lineNumber":1231,"author":{"gitId":"charlesgoh"},"content":"Backwards Compatible","lastModifiedDate":"2017-10-01"},{"lineNumber":1232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1233,"author":{"gitId":"charlesgoh"},"content":"....","lastModifiedDate":"2017-10-01"},{"lineNumber":1234,"author":{"gitId":"charlesgoh"},"content":"In the context of this project, backwards compatible save data refers to the ability for multiple versions of this application to use the same saved data.","lastModifiedDate":"2017-10-01"},{"lineNumber":1235,"author":{"gitId":"charlesgoh"},"content":"....","lastModifiedDate":"2017-10-01"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"[appendix]","lastModifiedDate":"2017-05-30"},{"lineNumber":1238,"author":{"gitId":"-"},"content":"\u003d\u003d Product Survey","lastModifiedDate":"2017-05-30"},{"lineNumber":1239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"*Product Name*","lastModifiedDate":"2017-05-19"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1242,"author":{"gitId":"-"},"content":"Author: ...","lastModifiedDate":"2017-05-19"},{"lineNumber":1243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1244,"author":{"gitId":"-"},"content":"Pros:","lastModifiedDate":"2017-05-19"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1246,"author":{"gitId":"-"},"content":"* ...","lastModifiedDate":"2017-05-19"},{"lineNumber":1247,"author":{"gitId":"-"},"content":"* ...","lastModifiedDate":"2017-05-19"},{"lineNumber":1248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1249,"author":{"gitId":"-"},"content":"Cons:","lastModifiedDate":"2017-05-19"},{"lineNumber":1250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":1251,"author":{"gitId":"-"},"content":"* ...","lastModifiedDate":"2017-05-19"},{"lineNumber":1252,"author":{"gitId":"-"},"content":"* ...","lastModifiedDate":"2017-05-19"}],"authorContributionMap":{"charlesgoh":70,"jeffreygohkw":157,"Esilocke":178,"-":847}},{"path":"docs/UserGuide.adoc","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003d Address++ - User Guide","lastModifiedDate":"2017-10-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":":toc:","lastModifiedDate":"2017-05-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":":toc-title:","lastModifiedDate":"2017-05-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":":toc-placement: preamble","lastModifiedDate":"2017-05-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":":sectnums:","lastModifiedDate":"2017-05-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":":imagesDir: images","lastModifiedDate":"2017-05-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":":stylesDir: stylesheets","lastModifiedDate":"2017-08-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":":experimental:","lastModifiedDate":"2017-05-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"ifdef::env-github[]","lastModifiedDate":"2017-05-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":":tip-caption: :bulb:","lastModifiedDate":"2017-05-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":":note-caption: :information_source:","lastModifiedDate":"2017-05-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"endif::[]","lastModifiedDate":"2017-05-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":":repoURL: https://github.com/CS2103AUG2017-W09-B2/main","lastModifiedDate":"2017-10-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`","lastModifiedDate":"2017-05-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d Overview","lastModifiedDate":"2017-10-23"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"Address++ is an address book application that can store contacts, as well as maintain a list of ongoing tasks. You can use the various commands in Address++ to maintain, create, and delete your contacts, or tasks. +","lastModifiedDate":"2017-10-23"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"Address++ is targeted at NUS students, such as those working on projects or assignments.","lastModifiedDate":"2017-10-23"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d About","lastModifiedDate":"2017-10-23"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"After reading this user guide, you should be more familiar with how Address++ can be used to maintain your contacts and tasks. +","lastModifiedDate":"2017-10-23"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"No technical knowledge is required when running the application, although basic knowledge of installation is required to install the prerequisite libraries for Address++ (Java). +","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d Getting Started","lastModifiedDate":"2017-10-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer.","lastModifiedDate":"2017-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Having any Java 8 version is not enough. +","lastModifiedDate":"2017-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"This app will not work with earlier versions of Java 8.","lastModifiedDate":"2017-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here].","lastModifiedDate":"2017-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address++.","lastModifiedDate":"2017-10-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds.","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"image::Ui.png[width\u003d\"790\"]","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"+","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window.","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":".  Some example commands you can try:","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"* *`help`*: opens this page in a new window","lastModifiedDate":"2017-10-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* *`list`* : lists all contacts","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/This remark is a stub` :","lastModifiedDate":"2017-10-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"adds a contact named `John Doe` to Address++.","lastModifiedDate":"2017-10-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* *`exit`* : exits the app","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":".  Refer to the link:#features[Features] section below for details of each command.","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003d\u003d Features","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"*Command Format*","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2017-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"Format: `help` +","lastModifiedDate":"2017-10-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Alternatively,  you may opt to use the keyboard shortcut kbd:[F1].","lastModifiedDate":"2017-10-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Adding a person/task: `add`","lastModifiedDate":"2017-10-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"You can use the `add` command to add new people to your address book, be it a newly met project member, or your friend who is taking the same module as you. +","lastModifiedDate":"2017-10-22"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"`add` can be replaced by `a` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"Format: `add n/NAME p/[PHONE_NUMBER] e/[EMAIL] a/[ADDRESS] b/[BIRTHDAY] r/[REMARK] f/[FACULTY] c/[GOOGLE CALENDAR URL] [t/TAG]...` +","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"* A person can have any number of tags (including 0) +","lastModifiedDate":"2017-10-22"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"* The `EMAIL` should be in the format address@email.domain +","lastModifiedDate":"2017-10-22"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"* You can set a person\u0027s `Name`, `Phone`, `Email`, `Address` or `Remark` to be private by placing a `p` in front of the prefix. +","lastModifiedDate":"2017-10-23"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-05-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/11-11-1995 r/Likes panda bears`","lastModifiedDate":"2017-10-23"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com b/29-02-1996 a/Newgate Prison p/1234567 t/criminal r/Stares at the wall`","lastModifiedDate":"2017-10-23"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"* `add n/Ima Hidearu b/ a/ e/ p/ r/ t/secretive`","lastModifiedDate":"2017-10-23"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"* `add n/Luke Groundswimmer p/ a/ e/ c/`","lastModifiedDate":"2017-10-10"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"* `add pn/Neville Shorttop pp/46492787 pe/nevilleS@gmail.com pa/Gryphon Gate c/`","lastModifiedDate":"2017-10-19"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"By adding the word `task`, you can use the same command to add a new task or deadline, such as a reminder of project deadlines. +","lastModifiedDate":"2017-10-22"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"Format: `add task n/NAME d/DESCRIPTION [t/DEADLINE] [p/PRIORITY]` +","lastModifiedDate":"2017-10-22"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"* Task deadlines should be in the format DD/MM/YYYY +","lastModifiedDate":"2017-10-22"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"* A task priority must be a positive integer from 1 to 5 inclusive, with 5 being the highest priority +","lastModifiedDate":"2017-10-22"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"* Newly added tasks are marked as incomplete by default.","lastModifiedDate":"2017-10-22"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-22"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"* `add task n/Update documentation d/Update docs for V1.1 for CS2103T t/10-10-2017 p/4`","lastModifiedDate":"2017-10-22"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"* `add task n/Buy new pencil p/2`","lastModifiedDate":"2017-10-20"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Adding a tag to persons : `addtag` (Since V1.2)","lastModifiedDate":"2017-10-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"You can use the `addtag` command to add tag for multiple persons in the address book. For example, you may wish to add tag `friends` to the first two persons in the address book. +","lastModifiedDate":"2017-10-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"`addtag` can be replaced by `atag` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"Format: `addtag INDEX... t/[TAG]` +","lastModifiedDate":"2017-10-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* You can add the tag of the person at the specific `INDEX`.","lastModifiedDate":"2017-10-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* If you don not key in any indexes, addtag will add the tag to all contacts in the address book.","lastModifiedDate":"2017-10-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-10-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"`addtag 1 2 t/friends` +","lastModifiedDate":"2017-10-20"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"Adds the friends tag of the 1st and 2nd person in the address book.","lastModifiedDate":"2017-10-20"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"* `list` +","lastModifiedDate":"2017-10-20"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"`addtag t/acquaintance` +","lastModifiedDate":"2017-10-20"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"Adds the acquaintance tag to all contacts in the address book.","lastModifiedDate":"2017-10-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`","lastModifiedDate":"2017-10-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"Need a quick overview of what needs to be done? You can use the `list` command to quickly show all your contacts, or tasks, in the address book. To list out only the tasks present, use `list task` instead. +","lastModifiedDate":"2017-10-22"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"Format: `list` `list task` +","lastModifiedDate":"2017-10-22"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"If you want to see all your contacts, as well as all your tasks at the same time, type `list all` instead. +","lastModifiedDate":"2017-10-22"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"Format: `list all`","lastModifiedDate":"2017-10-22"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"Instead of typing out `add` every time, you can alternatively use `l` to shorten the command.","lastModifiedDate":"2017-10-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`","lastModifiedDate":"2017-10-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"You can use the `edit` command to quickly fix mistakes in your entries, or add/remove details in your contacts. You may wish to edit your contacts when they change their phone numbers, for example. +","lastModifiedDate":"2017-10-22"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"`edit` can be replaced by `e` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":143,"author":{"gitId":"Esilocke"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] c/[GOOGLE CALENDAR URL] [t/TAG]...` +","lastModifiedDate":"2017-10-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-05-26"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the last listing. The index *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-22"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"* You must provide at least one field to edit for each command.","lastModifiedDate":"2017-10-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2017-05-26"},{"lineNumber":149,"author":{"gitId":"Esilocke"},"content":"* When editing tags, the existing tags of the person will be removed. This means that you cannot cumulatively add tags using multiple `edit` commands.","lastModifiedDate":"2017-10-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it.","lastModifiedDate":"2017-05-26"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"* A private field will not be modified by the Edit command.","lastModifiedDate":"2017-10-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"* An Edit command containing only private fields will result in a error message.","lastModifiedDate":"2017-10-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"* An Edit command with both private and public fields will only modify the public fields.","lastModifiedDate":"2017-10-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-05-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-05-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +","lastModifiedDate":"2017-05-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2017-05-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* `edit 2 n/Betsy Crower t/` +","lastModifiedDate":"2017-06-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2017-05-26"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"* `edit 1 p/` +","lastModifiedDate":"2017-10-10"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"Removes the phone number of the 1st person.","lastModifiedDate":"2017-10-10"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"Adding `task` after `edit` will allow you to edit task details instead. You may wish to edit your task deadlines, for example, when your project schedule changes, or your task priorities, when a task becomes more urgent. +","lastModifiedDate":"2017-10-22"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"Format: `edit task INDEX [n/NAME] [d/DESCRIPTION] [t/DEADLINE] [p/PRIORITY]` +","lastModifiedDate":"2017-10-22"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the last listing. The index *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-22"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2017-10-22"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2017-10-22"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-22"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"* `edit task 2 p/5` +","lastModifiedDate":"2017-10-20"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"Edits the priority of the 2nd task to be `5`.","lastModifiedDate":"2017-10-20"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"* `edit task 2 p/ t/` +","lastModifiedDate":"2017-10-22"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"Removes the priority and deadline of the second task.","lastModifiedDate":"2017-10-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Renaming existing tags : `edittag` (Since v1.2)","lastModifiedDate":"2017-10-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"You can use `edittag` to rename one existing tag. For example, you may wish to promote all existing \"acquaintances\" into \"friends\", or change all \"CS2103\" project mates to \"CS2101\" project mates instead. +","lastModifiedDate":"2017-10-22"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"`edittag` can be replaced by `et` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"Format: `edittag TAGTOBERENAMED NEWTAGNAME` +","lastModifiedDate":"2017-10-22"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"* The two tag names must be different.","lastModifiedDate":"2017-10-22"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"* This command will not work if none of your contacts have a tag with the `TAGTOBERENAMED` value.","lastModifiedDate":"2017-10-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-22"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"* `edittag friends enemies` +","lastModifiedDate":"2017-10-22"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"Changes the tag called `friends` to one called `enemies` instead. All existing contacts with a `friends` tag will now have an `enemies` tag instead.","lastModifiedDate":"2017-10-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Changing the Privacy of a person\u0027s details : `changeprivacy`(Since V1.3)","lastModifiedDate":"2017-10-30"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"You can use the `changeprivacy` command to set the privacy settings for each field of an existing `Person` in the address book, which allows you to choose specifically what information will be displayed. +","lastModifiedDate":"2017-10-24"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"Format: `changeprivacy INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]`","lastModifiedDate":"2017-10-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"Shorthand commands: `cp`","lastModifiedDate":"2017-10-15"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"* This command allows you to change the privacy settings for the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-22"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"* You must provide at least one of the optional fields.","lastModifiedDate":"2017-10-22"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"* You can only provide `true` or `false` as inputs after each prefix.","lastModifiedDate":"2017-10-22"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"* If you choose to input `false`, you will set the privacy of that field for that person to be public. The data in that field will be visible in the UI.","lastModifiedDate":"2017-10-22"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"* If you choose to input `true`, you will set the privacy of that field for that person to be private. The data in that field cannot be modified and will not be visible in the UI.","lastModifiedDate":"2017-10-22"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"* Fields that do not originally contain any data will still remain empty after changing their privacy.","lastModifiedDate":"2017-10-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"* If you do not add a prefix for the field in the command, that field will keep its original privacy setting.","lastModifiedDate":"2017-10-30"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"Examples:","lastModifiedDate":"2017-10-10"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"* `changeprivacy 1 p/false e/true` +","lastModifiedDate":"2017-10-22"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"Sets the phone number of the 1st person to be public and their email address to be private. The 1st person\u0027s phone number will be displayed, if available, while their email address will be hidden in the UI.","lastModifiedDate":"2017-10-10"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"* `cp 2 a/false n/true e/false` +","lastModifiedDate":"2017-10-24"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"Sets the address and email of the 2nd person to be public and their name to be private. The 2nd person\u0027s address and email will be displayed, if available, while their name will be hidden in the UI.","lastModifiedDate":"2017-10-24"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Favouriting persons : `favourite` (since V1.3)","lastModifiedDate":"2017-10-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"You can use `favourite` command to make persons in the address book become your favourite persons. For example, you may wish to set your girlfriend as your favourite contact. +","lastModifiedDate":"2017-10-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"`favourite` can be replaced by `fav` for faster input. +","lastModifiedDate":"2017-10-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Format: `favourite INDEX [MORE INDEX]` +","lastModifiedDate":"2017-10-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-10-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"`favourite 1 2` +","lastModifiedDate":"2017-10-30"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Favourites the 1st and 2nd person in the address book.","lastModifiedDate":"2017-10-30"},{"lineNumber":233,"author":{"gitId":"-"},"content":"* `find Betsy` +","lastModifiedDate":"2017-10-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"`favourite 1` +","lastModifiedDate":"2017-10-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"Favourite the 1st person in the results of the `find` command.","lastModifiedDate":"2017-10-30"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* You can set a person to be the favourite person at the specified `INDEX`.","lastModifiedDate":"2017-10-30"},{"lineNumber":239,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-30"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-30"},{"lineNumber":241,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Listing all favourite persons : `showfavourite` (since V1.3)","lastModifiedDate":"2017-10-30"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":245,"author":{"gitId":"-"},"content":"You can use the `showfavourite` command to quickly show all your favourite contacts in the address book. +","lastModifiedDate":"2017-10-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"`showfavourite` can be replaced by `sfav` for faster input. +","lastModifiedDate":"2017-10-30"},{"lineNumber":247,"author":{"gitId":"-"},"content":"Format: `showfavourite` +","lastModifiedDate":"2017-10-30"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":249,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-10-30"},{"lineNumber":250,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-10-30"},{"lineNumber":251,"author":{"gitId":"-"},"content":"`showfavourite` command: It will return an empty list if there is no favourite persons.","lastModifiedDate":"2017-10-30"},{"lineNumber":252,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-10-30"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Locating persons by name : `find`","lastModifiedDate":"2017-10-20"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"You can use the `find` command to quickly filter out contacts, or tasks who match your criteria. For example, you may wish to find all the tasks marked with the highest priority, or all your contacts who have a certain family name. +","lastModifiedDate":"2017-10-22"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":"`find` can be replaced by `f` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` +","lastModifiedDate":"2017-10-22"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-22"},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"* `find John` +","lastModifiedDate":"2017-10-22"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":"Returns `john` and `John Doe`","lastModifiedDate":"2017-10-22"},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"* `find Betsy Tim John` +","lastModifiedDate":"2017-10-22"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`","lastModifiedDate":"2017-10-22"},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":"Adding `task` after `find` will allow you to sieve through your tasks, instead of your contacts. +","lastModifiedDate":"2017-10-22"},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"In addition to searching the name and description of tasks, you can also opt to filter your tasks by their priority. Simply include `p/PRIORITY` after all your other criteria to do so. +","lastModifiedDate":"2017-10-22"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":"All tasks with a priority higher than or equal to the value provided will be shown. +","lastModifiedDate":"2017-10-22"},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"Format: `find task KEYWORD [MORE_KEYWORDS] [p/PRIORITY] +","lastModifiedDate":"2017-10-22"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":272,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-05-26"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"*Important note on `find` criteria*","lastModifiedDate":"2017-10-22"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":275,"author":{"gitId":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2017-05-26"},{"lineNumber":276,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2017-05-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"* You can only search for names in Address++","lastModifiedDate":"2017-10-30"},{"lineNumber":278,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2017-05-26"},{"lineNumber":279,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2017-09-21"},{"lineNumber":280,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-05-26"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":282,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-05-26"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":"* `find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"Returns any task that has the word `update` in their names or descriptions","lastModifiedDate":"2017-10-10"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"* `find task update 4` +","lastModifiedDate":"2017-10-22"},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"Returns all tasks that has the word `update` in their names or descriptions, and are of priority `4` or higher.","lastModifiedDate":"2017-10-22"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":289,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Locating persons by tag : `findtag` (Since V1.4)","lastModifiedDate":"2017-10-30"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":291,"author":{"gitId":"-"},"content":"You can use the `findtag` command to quickly filter out contacts who match your criteria. For example, you may wish to find contacts who are your `classmates`. +","lastModifiedDate":"2017-10-30"},{"lineNumber":292,"author":{"gitId":"-"},"content":"If you want to find contacts who are your `classmates` but not your `friends`, you just need to add `/not` in front of the `friends`. +","lastModifiedDate":"2017-10-30"},{"lineNumber":293,"author":{"gitId":"-"},"content":"`findtag` can be replaced by `ftag` for faster input. +","lastModifiedDate":"2017-10-30"},{"lineNumber":294,"author":{"gitId":"-"},"content":"Format: `findtag KEYWORD [MORE_KEYWORDS]` +","lastModifiedDate":"2017-10-30"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":296,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-30"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":298,"author":{"gitId":"-"},"content":"* `findtag friends` +","lastModifiedDate":"2017-10-30"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Returns any persons having tag `friends`","lastModifiedDate":"2017-10-30"},{"lineNumber":300,"author":{"gitId":"-"},"content":"* `findtag friends colleagues` +","lastModifiedDate":"2017-10-30"},{"lineNumber":301,"author":{"gitId":"-"},"content":"Returns any person having tags `friends` or `colleagues`","lastModifiedDate":"2017-10-30"},{"lineNumber":302,"author":{"gitId":"-"},"content":"* `findtag /notfriends` +","lastModifiedDate":"2017-10-30"},{"lineNumber":303,"author":{"gitId":"-"},"content":"Returns any persons not have tag `friends`","lastModifiedDate":"2017-10-30"},{"lineNumber":304,"author":{"gitId":"-"},"content":"* `findtag classmates /notfriends` +","lastModifiedDate":"2017-10-30"},{"lineNumber":305,"author":{"gitId":"-"},"content":"Returns any person have tags `classmates` but not have tag `friends`","lastModifiedDate":"2017-10-30"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":307,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":308,"author":{"gitId":"-"},"content":"*Important note on `findtag` criteria","lastModifiedDate":"2017-10-30"},{"lineNumber":309,"author":{"gitId":"-"},"content":"* The search is not case insensitive. e.g `friends` will match `FRIENDS`","lastModifiedDate":"2017-10-30"},{"lineNumber":310,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `friends classmates` will match `classmates friends`","lastModifiedDate":"2017-10-30"},{"lineNumber":311,"author":{"gitId":"-"},"content":"* Only the tag is searched for persons.","lastModifiedDate":"2017-10-30"},{"lineNumber":312,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `friend` will not match `friends`","lastModifiedDate":"2017-10-30"},{"lineNumber":313,"author":{"gitId":"-"},"content":"* There is no space `/not` and tag name e.g. `/not friends` will not match `/notfriends`","lastModifiedDate":"2017-10-30"},{"lineNumber":314,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":316,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Deleting a person : `delete`","lastModifiedDate":"2017-10-20"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":318,"author":{"gitId":"Esilocke"},"content":"You can use the `delete` command to remove contacts or tasks from the address book. The `delete` command will help you clean up obsolete or completed tasks, or contacts who you may not wish to associate with anymore. +","lastModifiedDate":"2017-10-22"},{"lineNumber":319,"author":{"gitId":"Esilocke"},"content":"`delete` can be replaced by `d` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":320,"author":{"gitId":"Esilocke"},"content":"Format: `delete INDEX` +","lastModifiedDate":"2017-10-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":322,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-05-26"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":324,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-05-26"},{"lineNumber":325,"author":{"gitId":"-"},"content":"`delete 2` +","lastModifiedDate":"2017-05-26"},{"lineNumber":326,"author":{"gitId":"-"},"content":"Deletes the 2nd person in the address book.","lastModifiedDate":"2017-05-26"},{"lineNumber":327,"author":{"gitId":"-"},"content":"* `find Betsy` +","lastModifiedDate":"2017-05-26"},{"lineNumber":328,"author":{"gitId":"-"},"content":"`delete 1` +","lastModifiedDate":"2017-05-26"},{"lineNumber":329,"author":{"gitId":"-"},"content":"Deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2017-05-26"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":331,"author":{"gitId":"Esilocke"},"content":"In order to delete tasks, an additional `task` keyword must be specified after the `delete` command. +","lastModifiedDate":"2017-10-22"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":"Format: `delete task INDEX`+","lastModifiedDate":"2017-10-22"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":334,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":335,"author":{"gitId":"Esilocke"},"content":"* Deletes the person or task at the specified `INDEX`.","lastModifiedDate":"2017-10-22"},{"lineNumber":336,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-22"},{"lineNumber":337,"author":{"gitId":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-22"},{"lineNumber":338,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":340,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-22"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":342,"author":{"gitId":"Esilocke"},"content":"* `list task` +","lastModifiedDate":"2017-10-10"},{"lineNumber":343,"author":{"gitId":"Esilocke"},"content":"`delete task 2` +","lastModifiedDate":"2017-10-10"},{"lineNumber":344,"author":{"gitId":"Esilocke"},"content":"Deletes the 2nd task in the address book.","lastModifiedDate":"2017-10-10"},{"lineNumber":345,"author":{"gitId":"Esilocke"},"content":"* `find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":346,"author":{"gitId":"Esilocke"},"content":"`delete task 1` +","lastModifiedDate":"2017-10-10"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"Deletes the 1st task in the results of the `find task` command.","lastModifiedDate":"2017-10-10"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":350,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Deleting a tag of persons : `deletetag` (Since V1.2)","lastModifiedDate":"2017-10-30"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":352,"author":{"gitId":"-"},"content":"You can use `deletetag` to delete the tag of multiple persons from the address book. +","lastModifiedDate":"2017-10-22"},{"lineNumber":353,"author":{"gitId":"-"},"content":"`deletetag` can be replaced by `dtag` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":354,"author":{"gitId":"Esilocke"},"content":"Format: `deletetag INDEX... t/[TAG]` +","lastModifiedDate":"2017-10-20"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":357,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"* You can delete the tag of the person at the specific `INDEX`.","lastModifiedDate":"2017-10-30"},{"lineNumber":359,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-30"},{"lineNumber":361,"author":{"gitId":"-"},"content":"* If you do not key in any index, deletetag will delete the tag from all contacts in the address book.","lastModifiedDate":"2017-10-30"},{"lineNumber":362,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-15"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-10-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"`deletetag 1 2 t/friends` +","lastModifiedDate":"2017-10-20"},{"lineNumber":368,"author":{"gitId":"Esilocke"},"content":"Delete the friends tag of the 1st and 2nd person in the address book.","lastModifiedDate":"2017-10-20"},{"lineNumber":369,"author":{"gitId":"Esilocke"},"content":"* `list` +","lastModifiedDate":"2017-10-20"},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"`deletetag t/friends` +","lastModifiedDate":"2017-10-20"},{"lineNumber":371,"author":{"gitId":"Esilocke"},"content":"Delete the friends tag from all contacts in the address book.","lastModifiedDate":"2017-10-20"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":373,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Sorting your contact list : `sort`","lastModifiedDate":"2017-10-22"},{"lineNumber":374,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":375,"author":{"gitId":"charlesgoh"},"content":"Sort your contacts by any field in ascending or descending order using the `sort` command +","lastModifiedDate":"2017-10-22"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`sort` can be replaced by `so` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":377,"author":{"gitId":"jeffreygohkw"},"content":"Format: `sort FIELD ORDER` +","lastModifiedDate":"2017-10-11"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":379,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":380,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":381,"author":{"gitId":"jeffreygohkw"},"content":"****","lastModifiedDate":"2017-10-08"},{"lineNumber":382,"author":{"gitId":"charlesgoh"},"content":"* Allows you to sort your contact by any field in either ascending or descending order","lastModifiedDate":"2017-10-22"},{"lineNumber":383,"author":{"gitId":"jeffreygohkw"},"content":"* Field parameters are limited to the following fields: NAME, PHONE, EMAIL, ADDRESS.","lastModifiedDate":"2017-10-08"},{"lineNumber":384,"author":{"gitId":"jeffreygohkw"},"content":"* Order parameters are limited to the following fields: ASC, DESC.","lastModifiedDate":"2017-10-08"},{"lineNumber":385,"author":{"gitId":"charlesgoh"},"content":"* You can undo this command if you want to revert to the pre-sort ordering of contacts","lastModifiedDate":"2017-10-22"},{"lineNumber":386,"author":{"gitId":"jeffreygohkw"},"content":"****","lastModifiedDate":"2017-10-08"},{"lineNumber":387,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":388,"author":{"gitId":"jeffreygohkw"},"content":"Examples:","lastModifiedDate":"2017-10-08"},{"lineNumber":389,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":390,"author":{"gitId":"jeffreygohkw"},"content":"* `sort name asc` +","lastModifiedDate":"2017-10-08"},{"lineNumber":391,"author":{"gitId":"charlesgoh"},"content":"This allows you to sort all persons in the address book in ascending order by the name field.","lastModifiedDate":"2017-10-22"},{"lineNumber":392,"author":{"gitId":"jeffreygohkw"},"content":"* `sort address desc` +","lastModifiedDate":"2017-10-08"},{"lineNumber":393,"author":{"gitId":"charlesgoh"},"content":"This allows you to sort all persons in the address book in descending order by the address field.","lastModifiedDate":"2017-10-22"},{"lineNumber":394,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":395,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Backing up your data : `backup`","lastModifiedDate":"2017-10-30"},{"lineNumber":396,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You can backup your saved data on Address++ by using the `backup` command. +","lastModifiedDate":"2017-10-30"},{"lineNumber":398,"author":{"gitId":"-"},"content":"`backup` can be replaced by `bk` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":399,"author":{"gitId":"charlesgoh"},"content":"Format: `backup [RELATIVE LOCATION]` +","lastModifiedDate":"2017-10-22"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":402,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-05-26"},{"lineNumber":403,"author":{"gitId":"-"},"content":"* Allows you to backup your saved data on Address++ in another file.","lastModifiedDate":"2017-10-30"},{"lineNumber":404,"author":{"gitId":"charlesgoh"},"content":"* You can backup your data in the default location or you can specify your desired save location.","lastModifiedDate":"2017-10-22"},{"lineNumber":405,"author":{"gitId":"charlesgoh"},"content":"* You can use the default save name or use your own.","lastModifiedDate":"2017-10-22"},{"lineNumber":406,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-05-26"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":408,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-05-26"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":410,"author":{"gitId":"charlesgoh"},"content":"* `backup` or `bk` +","lastModifiedDate":"2017-10-22"},{"lineNumber":411,"author":{"gitId":"charlesgoh"},"content":"This command will help you back up in the default save location --\u003e In the data directory of your application.","lastModifiedDate":"2017-10-22"},{"lineNumber":412,"author":{"gitId":"charlesgoh"},"content":"* `backup ./test.xml` or `bk ./test.xml` +","lastModifiedDate":"2017-10-22"},{"lineNumber":413,"author":{"gitId":"charlesgoh"},"content":"This saves the backup file in the current data directory, with the name `test.xml`.","lastModifiedDate":"2017-10-22"},{"lineNumber":414,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":415,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Selecting a person : `select`","lastModifiedDate":"2017-10-20"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":417,"author":{"gitId":"Esilocke"},"content":"You can use `select` to pick out one contact or task, and look at it in greater detail, such as examining a task with a very long description, or checking out the full address of one of your friends. +","lastModifiedDate":"2017-10-22"},{"lineNumber":418,"author":{"gitId":"Esilocke"},"content":"`select` can be replaced by `s` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":419,"author":{"gitId":"Esilocke"},"content":"Format (person): `select INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":421,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-05-26"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":423,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-05-26"},{"lineNumber":424,"author":{"gitId":"-"},"content":"`select 2` +","lastModifiedDate":"2017-05-26"},{"lineNumber":425,"author":{"gitId":"-"},"content":"Selects the 2nd person in the address book.","lastModifiedDate":"2017-05-26"},{"lineNumber":426,"author":{"gitId":"-"},"content":"* `find Betsy` +","lastModifiedDate":"2017-05-26"},{"lineNumber":427,"author":{"gitId":"-"},"content":"`select 1` +","lastModifiedDate":"2017-05-26"},{"lineNumber":428,"author":{"gitId":"-"},"content":"Selects the 1st person in the results of the `find` command.","lastModifiedDate":"2017-05-26"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":430,"author":{"gitId":"Esilocke"},"content":"To select a task, a `task` keyword must additionally be specified after `select` +","lastModifiedDate":"2017-10-22"},{"lineNumber":431,"author":{"gitId":"Esilocke"},"content":"Format: `select task INDEX` +","lastModifiedDate":"2017-10-22"},{"lineNumber":432,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":433,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":434,"author":{"gitId":"Esilocke"},"content":"* Selecting a task will load a list of the people who are assigned to it, instead of the Google search page.","lastModifiedDate":"2017-10-22"},{"lineNumber":435,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-22"},{"lineNumber":436,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`","lastModifiedDate":"2017-10-22"},{"lineNumber":437,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-22"},{"lineNumber":438,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":439,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-22"},{"lineNumber":440,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":441,"author":{"gitId":"Esilocke"},"content":"* `list task` +","lastModifiedDate":"2017-10-10"},{"lineNumber":442,"author":{"gitId":"Esilocke"},"content":"`select task 2` +","lastModifiedDate":"2017-10-10"},{"lineNumber":443,"author":{"gitId":"Esilocke"},"content":"Selects the 2nd task in the address book.","lastModifiedDate":"2017-10-10"},{"lineNumber":444,"author":{"gitId":"Esilocke"},"content":"* `find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":445,"author":{"gitId":"Esilocke"},"content":"`select task 1` +","lastModifiedDate":"2017-10-10"},{"lineNumber":446,"author":{"gitId":"Esilocke"},"content":"Selects the 1st task in the results of the `find task` command.","lastModifiedDate":"2017-10-10"},{"lineNumber":447,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":448,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Locating a person\u0027s address : `locate` (Since V1.4)","lastModifiedDate":"2017-10-30"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":450,"author":{"gitId":"-"},"content":"If you ever need to visit one of your contacts, you can use `locate` to choose a contact, and search for their address online using Google Maps. +","lastModifiedDate":"2017-10-30"},{"lineNumber":451,"author":{"gitId":"-"},"content":"`locate` can be replaced by `loc` for faster input. +","lastModifiedDate":"2017-10-30"},{"lineNumber":452,"author":{"gitId":"-"},"content":"Format (person): `locate INDEX` +","lastModifiedDate":"2017-10-30"},{"lineNumber":453,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":454,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-30"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":456,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-10-30"},{"lineNumber":457,"author":{"gitId":"-"},"content":"`locate 2` +","lastModifiedDate":"2017-10-30"},{"lineNumber":458,"author":{"gitId":"-"},"content":"Locates the address of the 2nd person in the address book on Google Maps.","lastModifiedDate":"2017-10-30"},{"lineNumber":459,"author":{"gitId":"-"},"content":"* `find Betsy` +","lastModifiedDate":"2017-10-30"},{"lineNumber":460,"author":{"gitId":"-"},"content":"`locate 1` +","lastModifiedDate":"2017-10-30"},{"lineNumber":461,"author":{"gitId":"-"},"content":"Locates the address of the 1st person in the results of the `find` command on Google Maps.","lastModifiedDate":"2017-10-30"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":463,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":464,"author":{"gitId":"-"},"content":"* Depending on the stored value of the address, Google Maps may be unable to find the correct address or may display multiple addresses of the same name. +","lastModifiedDate":"2017-10-30"},{"lineNumber":465,"author":{"gitId":"-"},"content":"** It is up to you to provide a specific and valid address.","lastModifiedDate":"2017-10-30"},{"lineNumber":466,"author":{"gitId":"-"},"content":"* A person with a private address cannot be searched on Google Maps.","lastModifiedDate":"2017-10-30"},{"lineNumber":467,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-30"},{"lineNumber":468,"author":{"gitId":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`","lastModifiedDate":"2017-10-30"},{"lineNumber":469,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":471,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Mark task as complete : `setcomplete` (To be coming in V2.0)","lastModifiedDate":"2017-10-10"},{"lineNumber":472,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":473,"author":{"gitId":"Esilocke"},"content":"Have you finally completed a task in the address book? You can use `setcomplete` to mark the specified task as complete. +","lastModifiedDate":"2017-10-22"},{"lineNumber":474,"author":{"gitId":"Esilocke"},"content":"`setcomplete` can be replaced by `stc` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":475,"author":{"gitId":"-"},"content":"Format: `setcomplete INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":476,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":477,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":478,"author":{"gitId":"Esilocke"},"content":"* Marks the task at the specified `INDEX` as completed.","lastModifiedDate":"2017-10-10"},{"lineNumber":479,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-10"},{"lineNumber":480,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-10"},{"lineNumber":481,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":482,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":483,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-10"},{"lineNumber":484,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":485,"author":{"gitId":"Esilocke"},"content":"* `list task` +","lastModifiedDate":"2017-10-10"},{"lineNumber":486,"author":{"gitId":"Esilocke"},"content":"`setcomplete 2` +","lastModifiedDate":"2017-10-10"},{"lineNumber":487,"author":{"gitId":"Esilocke"},"content":"Sets the 2nd task in the address book as completed.","lastModifiedDate":"2017-10-10"},{"lineNumber":488,"author":{"gitId":"Esilocke"},"content":"* `find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":489,"author":{"gitId":"Esilocke"},"content":"`setcomplete 1` +","lastModifiedDate":"2017-10-10"},{"lineNumber":490,"author":{"gitId":"Esilocke"},"content":"Sets the 1st task in the results of the `find task` command as completed.","lastModifiedDate":"2017-10-10"},{"lineNumber":491,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":492,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Mark task as incomplete : `setincomplete` (To be coming in V2.0)","lastModifiedDate":"2017-10-10"},{"lineNumber":493,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":494,"author":{"gitId":"Esilocke"},"content":"Did you accidentally mark a task as completed? You can use `setincomplete` to mark the specified task as incomplete. +","lastModifiedDate":"2017-10-22"},{"lineNumber":495,"author":{"gitId":"Esilocke"},"content":"`setincomplete` can be replaced by `sti` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":496,"author":{"gitId":"-"},"content":"Format: `setincomplete INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":497,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":498,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":499,"author":{"gitId":"Esilocke"},"content":"* Marks the task at the specified `INDEX` as incomplete.","lastModifiedDate":"2017-10-10"},{"lineNumber":500,"author":{"gitId":"Esilocke"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-10"},{"lineNumber":501,"author":{"gitId":"Esilocke"},"content":"* The index *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-10"},{"lineNumber":502,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":503,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":504,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-10"},{"lineNumber":505,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":506,"author":{"gitId":"Esilocke"},"content":"* `list task` +","lastModifiedDate":"2017-10-10"},{"lineNumber":507,"author":{"gitId":"Esilocke"},"content":"`setincomplete 2` +","lastModifiedDate":"2017-10-10"},{"lineNumber":508,"author":{"gitId":"Esilocke"},"content":"Sets the 2nd task in the address book as incomplete.","lastModifiedDate":"2017-10-10"},{"lineNumber":509,"author":{"gitId":"Esilocke"},"content":"* `find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":510,"author":{"gitId":"Esilocke"},"content":"`setincomplete 1` +","lastModifiedDate":"2017-10-10"},{"lineNumber":511,"author":{"gitId":"Esilocke"},"content":"Sets the 1st task in the results of the `find task` command as incomplete.","lastModifiedDate":"2017-10-10"},{"lineNumber":512,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":513,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Assign contacts to task : `assign` (To be coming in V2.0)","lastModifiedDate":"2017-10-10"},{"lineNumber":514,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":515,"author":{"gitId":"Esilocke"},"content":"You can use `assign` to assign contacts to an ongoing task. You may wish to use `assign` when collaborating with others for projects, for example. +","lastModifiedDate":"2017-10-22"},{"lineNumber":516,"author":{"gitId":"Esilocke"},"content":"`assign` can be replaced by `as` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":517,"author":{"gitId":"-"},"content":"Format: `assign TASKINDEX PEOPLEINDEX...` +","lastModifiedDate":"2017-10-10"},{"lineNumber":518,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":519,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":520,"author":{"gitId":"Esilocke"},"content":"* The PEOPLEINDEX refers to the index numbers shown in the most recent *person* listing.","lastModifiedDate":"2017-10-10"},{"lineNumber":521,"author":{"gitId":"Esilocke"},"content":"* The TASKINDEX refers to the index number shown in the most recent *task* listing.","lastModifiedDate":"2017-10-10"},{"lineNumber":522,"author":{"gitId":"Esilocke"},"content":"* At least 1 or more PEOPLEINDEX must be present in the command.","lastModifiedDate":"2017-10-10"},{"lineNumber":523,"author":{"gitId":"Esilocke"},"content":"* PERSONINDEX and TASKINDEX *must be positive integers* 1, 2, 3, ...","lastModifiedDate":"2017-10-10"},{"lineNumber":524,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":525,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":526,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-10"},{"lineNumber":527,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":528,"author":{"gitId":"Esilocke"},"content":"* `list` +","lastModifiedDate":"2017-10-10"},{"lineNumber":529,"author":{"gitId":"Esilocke"},"content":"`list task` +","lastModifiedDate":"2017-10-10"},{"lineNumber":530,"author":{"gitId":"Esilocke"},"content":"`assign 2 1 4 5` +","lastModifiedDate":"2017-10-10"},{"lineNumber":531,"author":{"gitId":"Esilocke"},"content":"Assigns the 2nd task in the address book to the 1st, 4th and 5th contacts.","lastModifiedDate":"2017-10-10"},{"lineNumber":532,"author":{"gitId":"Esilocke"},"content":"* `list` +","lastModifiedDate":"2017-10-10"},{"lineNumber":533,"author":{"gitId":"Esilocke"},"content":"`find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":534,"author":{"gitId":"Esilocke"},"content":"`assign 1 2` +","lastModifiedDate":"2017-10-10"},{"lineNumber":535,"author":{"gitId":"Esilocke"},"content":"Assigns the 1st task in the results of the `find task` command to the 2nd person in the address book.","lastModifiedDate":"2017-10-10"},{"lineNumber":536,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":537,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d\u003d Dismiss contacts from task : `dismiss` (To be coming in V2.0)","lastModifiedDate":"2017-10-10"},{"lineNumber":538,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":539,"author":{"gitId":"-"},"content":"You can use `dismiss` to remove assignment from tasks. You may wish to use `dismiss` when a contact is no longer in charge of a task, for example. +","lastModifiedDate":"2017-10-30"},{"lineNumber":540,"author":{"gitId":"Esilocke"},"content":"`dismiss` can be replaced by `ds` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":541,"author":{"gitId":"-"},"content":"Format: `dismiss TASKINDEX PEOPLEINDEX...` +","lastModifiedDate":"2017-10-10"},{"lineNumber":542,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":543,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":544,"author":{"gitId":"Esilocke"},"content":"* The PEOPLEINDEX refers to the index numbers shown in the most recent *person* listing.","lastModifiedDate":"2017-10-10"},{"lineNumber":545,"author":{"gitId":"Esilocke"},"content":"* The TASKINDEX refers to the index number shown in the most recent *task* listing.","lastModifiedDate":"2017-10-10"},{"lineNumber":546,"author":{"gitId":"Esilocke"},"content":"* At least 1 or more PEOPLEINDEX must be present in the command.","lastModifiedDate":"2017-10-10"},{"lineNumber":547,"author":{"gitId":"Esilocke"},"content":"* PERSONINDEX and TASKINDEX *must be positive integers* 1, 2, 3, ...","lastModifiedDate":"2017-10-10"},{"lineNumber":548,"author":{"gitId":"Esilocke"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":549,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":550,"author":{"gitId":"Esilocke"},"content":"Examples:","lastModifiedDate":"2017-10-10"},{"lineNumber":551,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":552,"author":{"gitId":"Esilocke"},"content":"* `list` +","lastModifiedDate":"2017-10-10"},{"lineNumber":553,"author":{"gitId":"Esilocke"},"content":"`list task` +","lastModifiedDate":"2017-10-10"},{"lineNumber":554,"author":{"gitId":"Esilocke"},"content":"`dismiss 2 1 4 5` +","lastModifiedDate":"2017-10-10"},{"lineNumber":555,"author":{"gitId":"Esilocke"},"content":"Dismisses 1st, 4th and 5th contacts in the address book from the 2nd task.","lastModifiedDate":"2017-10-10"},{"lineNumber":556,"author":{"gitId":"Esilocke"},"content":"* `list` +","lastModifiedDate":"2017-10-10"},{"lineNumber":557,"author":{"gitId":"Esilocke"},"content":"`find task update` +","lastModifiedDate":"2017-10-10"},{"lineNumber":558,"author":{"gitId":"Esilocke"},"content":"`dismiss 1 2` +","lastModifiedDate":"2017-10-10"},{"lineNumber":559,"author":{"gitId":"Esilocke"},"content":"Dismisses the 2nd person in the address book from the 1st task in the results of the `find task` command.","lastModifiedDate":"2017-10-10"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":561,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`","lastModifiedDate":"2017-05-24"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":563,"author":{"gitId":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +","lastModifiedDate":"2017-07-05"},{"lineNumber":564,"author":{"gitId":"-"},"content":"`history` can be replaced by `h` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":565,"author":{"gitId":"-"},"content":"Format: `history` +","lastModifiedDate":"2017-10-10"},{"lineNumber":566,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":567,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-06-29"},{"lineNumber":568,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-06-29"},{"lineNumber":569,"author":{"gitId":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box.","lastModifiedDate":"2017-06-29"},{"lineNumber":570,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-06-29"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":572,"author":{"gitId":"-"},"content":"// tag::undoredo[]","lastModifiedDate":"2017-07-31"},{"lineNumber":573,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`","lastModifiedDate":"2017-09-21"},{"lineNumber":574,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":575,"author":{"gitId":"Esilocke"},"content":"Did you make a mistake somewhere? `undo` restores the address book to the state before the previous _undoable_ command was executed. +","lastModifiedDate":"2017-10-22"},{"lineNumber":576,"author":{"gitId":"Esilocke"},"content":"`undo` can be replaced by `u` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":577,"author":{"gitId":"-"},"content":"Format: `undo` +","lastModifiedDate":"2017-10-10"},{"lineNumber":578,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":579,"author":{"gitId":"-"},"content":"[NOTE]","lastModifiedDate":"2017-07-19"},{"lineNumber":580,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-07-19"},{"lineNumber":581,"author":{"gitId":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`).","lastModifiedDate":"2017-07-19"},{"lineNumber":582,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d\u003d","lastModifiedDate":"2017-07-19"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":584,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-07-19"},{"lineNumber":585,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":586,"author":{"gitId":"-"},"content":"* `delete 1` +","lastModifiedDate":"2017-07-19"},{"lineNumber":587,"author":{"gitId":"-"},"content":"`list` +","lastModifiedDate":"2017-07-19"},{"lineNumber":588,"author":{"gitId":"-"},"content":"`undo` (reverses the `delete 1` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":589,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":590,"author":{"gitId":"-"},"content":"* `select 1` +","lastModifiedDate":"2017-07-19"},{"lineNumber":591,"author":{"gitId":"-"},"content":"`list` +","lastModifiedDate":"2017-07-19"},{"lineNumber":592,"author":{"gitId":"-"},"content":"`undo` +","lastModifiedDate":"2017-07-19"},{"lineNumber":593,"author":{"gitId":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously.","lastModifiedDate":"2017-07-19"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":595,"author":{"gitId":"-"},"content":"* `delete 1` +","lastModifiedDate":"2017-07-19"},{"lineNumber":596,"author":{"gitId":"-"},"content":"`clear` +","lastModifiedDate":"2017-07-19"},{"lineNumber":597,"author":{"gitId":"-"},"content":"`undo` (reverses the `clear` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":598,"author":{"gitId":"-"},"content":"`undo` (reverses the `delete 1` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":601,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Unfavouriting persons : `unfavourite` (since V1.3)","lastModifiedDate":"2017-10-30"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":603,"author":{"gitId":"-"},"content":"You can use `unfavourite` command to set your previous favourite persons become the normal persons. For example, +","lastModifiedDate":"2017-10-30"},{"lineNumber":604,"author":{"gitId":"-"},"content":"after you break up with your girlfriend, you may wish to set your girlfriend back to normal person. +","lastModifiedDate":"2017-10-30"},{"lineNumber":605,"author":{"gitId":"-"},"content":"`unfavourite` can be replaced by `unfav` for faster input. +","lastModifiedDate":"2017-10-30"},{"lineNumber":606,"author":{"gitId":"-"},"content":"Format: `unfavourite INDEX [MORE INDEX]` +","lastModifiedDate":"2017-10-30"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":608,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-10-30"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":610,"author":{"gitId":"-"},"content":"* `list` +","lastModifiedDate":"2017-10-30"},{"lineNumber":611,"author":{"gitId":"-"},"content":"`unfavourite 1 2` +","lastModifiedDate":"2017-10-30"},{"lineNumber":612,"author":{"gitId":"-"},"content":"Unfavourites the 1st and 2nd person in the address book.","lastModifiedDate":"2017-10-30"},{"lineNumber":613,"author":{"gitId":"-"},"content":"* `find Betsy` +","lastModifiedDate":"2017-10-30"},{"lineNumber":614,"author":{"gitId":"-"},"content":"`unfavourite 1` +","lastModifiedDate":"2017-10-30"},{"lineNumber":615,"author":{"gitId":"-"},"content":"Unfavourite the 1st person in the results of the `find` command.","lastModifiedDate":"2017-10-30"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":617,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":618,"author":{"gitId":"-"},"content":"* You can unfavourites the person at the specified `INDEX`.","lastModifiedDate":"2017-10-30"},{"lineNumber":619,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the most recent listing.","lastModifiedDate":"2017-10-30"},{"lineNumber":620,"author":{"gitId":"-"},"content":"* The index you key in *must be a positive integer* 1, 2, 3, ...","lastModifiedDate":"2017-10-30"},{"lineNumber":621,"author":{"gitId":"-"},"content":"****","lastModifiedDate":"2017-10-30"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":623,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`","lastModifiedDate":"2017-09-21"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":625,"author":{"gitId":"Esilocke"},"content":"Perhaps an `undo` wasn\u0027t necessary. `redo` reverses the most recent `undo` command. +","lastModifiedDate":"2017-10-22"},{"lineNumber":626,"author":{"gitId":"Esilocke"},"content":"`redo` can be replaced by `r` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":627,"author":{"gitId":"-"},"content":"Format: `redo` +","lastModifiedDate":"2017-10-10"},{"lineNumber":628,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":629,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2017-07-19"},{"lineNumber":630,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":631,"author":{"gitId":"-"},"content":"* `delete 1` +","lastModifiedDate":"2017-07-19"},{"lineNumber":632,"author":{"gitId":"-"},"content":"`undo` (reverses the `delete 1` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":633,"author":{"gitId":"-"},"content":"`redo` (reapplies the `delete 1` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":634,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":635,"author":{"gitId":"-"},"content":"* `delete 1` +","lastModifiedDate":"2017-07-19"},{"lineNumber":636,"author":{"gitId":"-"},"content":"`redo` +","lastModifiedDate":"2017-07-19"},{"lineNumber":637,"author":{"gitId":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously.","lastModifiedDate":"2017-07-19"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":639,"author":{"gitId":"-"},"content":"* `delete 1` +","lastModifiedDate":"2017-07-19"},{"lineNumber":640,"author":{"gitId":"-"},"content":"`clear` +","lastModifiedDate":"2017-07-19"},{"lineNumber":641,"author":{"gitId":"-"},"content":"`undo` (reverses the `clear` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":642,"author":{"gitId":"-"},"content":"`undo` (reverses the `delete 1` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":643,"author":{"gitId":"-"},"content":"`redo` (reapplies the `delete 1` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":644,"author":{"gitId":"-"},"content":"`redo` (reapplies the `clear` command) +","lastModifiedDate":"2017-07-19"},{"lineNumber":645,"author":{"gitId":"-"},"content":"// end::undoredo[]","lastModifiedDate":"2017-07-31"},{"lineNumber":646,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-19"},{"lineNumber":647,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`","lastModifiedDate":"2017-10-22"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":649,"author":{"gitId":"jeffreygohkw"},"content":"If you would like to start fresh on a clean slate, you can use this command to clear all entries from the address book. +","lastModifiedDate":"2017-10-22"},{"lineNumber":650,"author":{"gitId":"-"},"content":"`clear` can be replaced by `c` for faster input. +","lastModifiedDate":"2017-10-22"},{"lineNumber":651,"author":{"gitId":"-"},"content":"Format: `clear` +","lastModifiedDate":"2017-10-20"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":653,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`","lastModifiedDate":"2017-05-26"},{"lineNumber":654,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":655,"author":{"gitId":"jeffreygohkw"},"content":"Once you have finished using Address++, you may use this command to exit the program. +","lastModifiedDate":"2017-10-22"},{"lineNumber":656,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2017-05-26"},{"lineNumber":657,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":658,"author":{"gitId":"-"},"content":"Alternatively, you may opt to use the keyboard shortcut kbd:[ALT]+kbd:[F4].","lastModifiedDate":"2017-10-30"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":660,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Saving the data","lastModifiedDate":"2017-05-26"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":662,"author":{"gitId":"jeffreygohkw"},"content":"Address book data is saved in the hard disk automatically after any command that changes the data. +","lastModifiedDate":"2017-10-22"},{"lineNumber":663,"author":{"gitId":"jeffreygohkw"},"content":"There is no need for you to save manually.","lastModifiedDate":"2017-10-22"},{"lineNumber":664,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":665,"author":{"gitId":"-"},"content":"If you want to change the location of the save file, click on `File -\u003e Save As` or use the keyboard shortcut kbd:[CTRL]+kbd:[S] and select the new location and file name for the save file in the pop-up window.","lastModifiedDate":"2017-10-30"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":667,"author":{"gitId":"-"},"content":"If you want to open a different save file, click on `File -\u003e Open` or use the keyboard shortcut kbd:[CTRL]+kbd:[O] and select the new save file to use from the pop-up window.","lastModifiedDate":"2017-10-30"},{"lineNumber":668,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":669,"author":{"gitId":"-"},"content":"\u003d\u003d\u003d Using the browser","lastModifiedDate":"2017-10-30"},{"lineNumber":670,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":671,"author":{"gitId":"jeffreygohkw"},"content":"If you click on a box containing a contact, an internet browser on the right side of the window.","lastModifiedDate":"2017-10-22"},{"lineNumber":672,"author":{"gitId":"jeffreygohkw"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":673,"author":{"gitId":"-"},"content":"* Performing a left click will allow you to perform a search on Google for the name of the contact, and is equivalent to doing a `select` on that oerson.","lastModifiedDate":"2017-10-30"},{"lineNumber":674,"author":{"gitId":"jeffreygohkw"},"content":"* If a person\u0027s name or address is set to private, the browser will not perform a search if you click on their box.","lastModifiedDate":"2017-10-22"},{"lineNumber":675,"author":{"gitId":"-"},"content":"* Right clicking on the browser will allow you to go to the previous or next page, as well as reload the page.","lastModifiedDate":"2017-10-30"},{"lineNumber":676,"author":{"gitId":"jeffreygohkw"},"content":"****","lastModifiedDate":"2017-10-10"},{"lineNumber":677,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":678,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Exporting the data","lastModifiedDate":"2017-10-10"},{"lineNumber":679,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":680,"author":{"gitId":"charlesgoh"},"content":"Address book data can be exported in a number of different formats, thus allowing the data to be compatible to any device.","lastModifiedDate":"2017-10-10"},{"lineNumber":681,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":682,"author":{"gitId":"-"},"content":"To export data, click on `File -\u003e Export As...` or use the keyboard shortcut kbd:[CTRL]+kbd:[E]` and select the new location and file name for the export file in the pop-up window.","lastModifiedDate":"2017-10-30"},{"lineNumber":683,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":684,"author":{"gitId":"charlesgoh"},"content":"\u003d\u003d\u003d Auto-Complete: Learning Your Typing Habits","lastModifiedDate":"2017-10-10"},{"lineNumber":685,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":686,"author":{"gitId":"charlesgoh"},"content":"The program will learn your typing habits and give autocomplete suggestions that become more accurate over time.","lastModifiedDate":"2017-10-10"},{"lineNumber":687,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":688,"author":{"gitId":"-"},"content":"\u003d\u003d FAQ","lastModifiedDate":"2017-05-26"},{"lineNumber":689,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":690,"author":{"gitId":"-"},"content":"*Q*: How do I transfer my data to another Computer? +","lastModifiedDate":"2017-05-26"},{"lineNumber":691,"author":{"gitId":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder. The Open command kbd:[CTRL]+kbd:[O] can also be used instead of manually overwriting the file if you wish to keep the original data file or store the new data file in a seperate location.","lastModifiedDate":"2017-10-30"},{"lineNumber":692,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":693,"author":{"gitId":"Esilocke"},"content":"\u003d\u003d Command Summary and Cheat Sheet","lastModifiedDate":"2017-10-22"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":695,"author":{"gitId":"-"},"content":"* *Add* : `add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [f/FACULTY] [c/GOOGLE CALENDAR URL] [t/TAG]...` +","lastModifiedDate":"2017-10-30"},{"lineNumber":696,"author":{"gitId":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665, b/29-02-1996 f/SOC c/www.enteryourcalendarurlhere.com t/friend t/colleague`","lastModifiedDate":"2017-10-15"},{"lineNumber":697,"author":{"gitId":"jeffreygohkw"},"content":"* *Add with private fields* : `add or a pn/NAME pp/PHONE_NUMBER pe/EMAIL pa/ADDRESS b/BIRTHDAY f/FACULTY c/[GOOGLE CALENDAR URL] [t/TAG]...` +","lastModifiedDate":"2017-10-24"},{"lineNumber":698,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `add pn/James Ho pp/22224444 pe/jamesho@example.com pa/123, Clementi Rd, 1234665`","lastModifiedDate":"2017-10-24"},{"lineNumber":699,"author":{"gitId":"-"},"content":"* *Add task* : `add task n/NAME [d/DESCRIPTION] [t/DEADLINE] [p/PRIORITY]` +","lastModifiedDate":"2017-10-30"},{"lineNumber":700,"author":{"gitId":"Esilocke"},"content":"e.g. `add task n/Update Documentation d/Update documentations for V1.1 for CS2103T t/30/10/17 p/high`","lastModifiedDate":"2017-10-10"},{"lineNumber":701,"author":{"gitId":"-"},"content":"* *Add tag* : `addtag INDEX t/[TAG]` +","lastModifiedDate":"2017-10-20"},{"lineNumber":702,"author":{"gitId":"-"},"content":"e.g. `addtag 1 2 t/friends`","lastModifiedDate":"2017-10-20"},{"lineNumber":703,"author":{"gitId":"-"},"content":"* *Change a person\u0027s details\u0027 privacy* : `changeprivacy INDEX [n/TRUE or FALSE] [p/TRUE or FALSE] [e/TRUE or FALSE] [a/TRUE or FALSE]` +","lastModifiedDate":"2017-10-30"},{"lineNumber":704,"author":{"gitId":"jeffreygohkw"},"content":"e.g. `changeprivacy 2 n/true p/false e/true a/false`","lastModifiedDate":"2017-10-24"},{"lineNumber":705,"author":{"gitId":"Esilocke"},"content":"* *Clear person* : `clear`","lastModifiedDate":"2017-10-10"},{"lineNumber":706,"author":{"gitId":"-"},"content":"* *Clear tasks* : `cleartask`","lastModifiedDate":"2017-10-20"},{"lineNumber":707,"author":{"gitId":"Esilocke"},"content":"* *Delete person* : `delete INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":708,"author":{"gitId":"-"},"content":"e.g. `delete 3`","lastModifiedDate":"2017-05-26"},{"lineNumber":709,"author":{"gitId":"Esilocke"},"content":"* *Delete task* : `delete task INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":710,"author":{"gitId":"Esilocke"},"content":"e.g. `delete task 4`","lastModifiedDate":"2017-10-10"},{"lineNumber":711,"author":{"gitId":"-"},"content":"* *Delete tag* : `deletetag INDEX t/[TAG]` +","lastModifiedDate":"2017-10-20"},{"lineNumber":712,"author":{"gitId":"-"},"content":"e.g. `deletetag 1 2 t/friends`","lastModifiedDate":"2017-10-20"},{"lineNumber":713,"author":{"gitId":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] c/[GOOGLE CALENDAR URL] [a/ADDRESS] [t/TAG]...` +","lastModifiedDate":"2017-10-30"},{"lineNumber":714,"author":{"gitId":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2017-09-21"},{"lineNumber":715,"author":{"gitId":"Esilocke"},"content":"* *Edit task* : `edit task INDEX [n/NAME] [d/DESCRIPTION] [t/DEADLINE] [p/PRIORITY]` +","lastModifiedDate":"2017-10-10"},{"lineNumber":716,"author":{"gitId":"-"},"content":"e.g. `edit task 2 p/veryhigh`","lastModifiedDate":"2017-10-20"},{"lineNumber":717,"author":{"gitId":"Esilocke"},"content":"* *Edit tag* : `edittag TAGTOCHANGE NEWTAGNAME` +","lastModifiedDate":"2017-10-22"},{"lineNumber":718,"author":{"gitId":"Esilocke"},"content":"e.g. `edittag friends enemies`","lastModifiedDate":"2017-10-22"},{"lineNumber":719,"author":{"gitId":"Esilocke"},"content":"* *Find person* : `find KEYWORD [MORE_KEYWORDS]` +","lastModifiedDate":"2017-10-10"},{"lineNumber":720,"author":{"gitId":"-"},"content":"e.g. `find James Jake`","lastModifiedDate":"2017-05-26"},{"lineNumber":721,"author":{"gitId":"Esilocke"},"content":"* *Find task* : `find task KEYWORD [MORE_KEYWORDS] [p/PRIORITY]` +","lastModifiedDate":"2017-10-10"},{"lineNumber":722,"author":{"gitId":"Esilocke"},"content":"e.g. `find task update p/high`","lastModifiedDate":"2017-10-10"},{"lineNumber":723,"author":{"gitId":"-"},"content":"* *Help* : `help`","lastModifiedDate":"2017-10-30"},{"lineNumber":724,"author":{"gitId":"Esilocke"},"content":"* *List persons* : `list`","lastModifiedDate":"2017-10-10"},{"lineNumber":725,"author":{"gitId":"Esilocke"},"content":"* *List tasks* : `list task`","lastModifiedDate":"2017-10-10"},{"lineNumber":726,"author":{"gitId":"-"},"content":"* *Locate a person\u0027s address* : `locate`","lastModifiedDate":"2017-10-30"},{"lineNumber":727,"author":{"gitId":"Esilocke"},"content":"* *Select person* : `select INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":728,"author":{"gitId":"-"},"content":"e.g.`select 2`","lastModifiedDate":"2017-05-26"},{"lineNumber":729,"author":{"gitId":"Esilocke"},"content":"* *Select task* : `select task INDEX` +","lastModifiedDate":"2017-10-10"},{"lineNumber":730,"author":{"gitId":"Esilocke"},"content":"e.g.`select task 2`","lastModifiedDate":"2017-10-10"},{"lineNumber":731,"author":{"gitId":"-"},"content":"* *Set task as complete* : `setcomplete INDEX` +","lastModifiedDate":"2017-10-15"},{"lineNumber":732,"author":{"gitId":"-"},"content":"e.g. `setcomplete 4`","lastModifiedDate":"2017-10-15"},{"lineNumber":733,"author":{"gitId":"-"},"content":"* *Set task as incomplete* : `setincomplete INDEX` +","lastModifiedDate":"2017-10-15"},{"lineNumber":734,"author":{"gitId":"-"},"content":"e.g. `setincomplete 5`","lastModifiedDate":"2017-10-15"},{"lineNumber":735,"author":{"gitId":"Esilocke"},"content":"* *Assign to task* : `assign TASKINDEX PERSONINDEX...` +","lastModifiedDate":"2017-10-10"},{"lineNumber":736,"author":{"gitId":"Esilocke"},"content":"e.g. `assign 4 1 17 18 21`","lastModifiedDate":"2017-10-10"},{"lineNumber":737,"author":{"gitId":"Esilocke"},"content":"* *Dismiss from task* : `dismiss TASKINDEX PERSONINDEX...` +","lastModifiedDate":"2017-10-10"},{"lineNumber":738,"author":{"gitId":"Esilocke"},"content":"e.g. `dismiss 4 1 17`","lastModifiedDate":"2017-10-10"},{"lineNumber":739,"author":{"gitId":"-"},"content":"* *History* : `history`","lastModifiedDate":"2017-10-10"},{"lineNumber":740,"author":{"gitId":"-"},"content":"* *Undo* : `undo`","lastModifiedDate":"2017-10-10"},{"lineNumber":741,"author":{"gitId":"-"},"content":"* *Redo* : `redo`","lastModifiedDate":"2017-10-10"},{"lineNumber":742,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":743,"author":{"gitId":"jeffreygohkw"},"content":"\u003d\u003d Keyboard Shortcuts","lastModifiedDate":"2017-10-08"},{"lineNumber":744,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-10"},{"lineNumber":745,"author":{"gitId":"-"},"content":"* *Exit* : kbd:[ALT]+kbd:[F4]","lastModifiedDate":"2017-10-30"},{"lineNumber":746,"author":{"gitId":"-"},"content":"* *Help* : kbd:[[F1]","lastModifiedDate":"2017-10-30"},{"lineNumber":747,"author":{"gitId":"-"},"content":"* *Open* : kbd:[CTRL]+kbd:[O]","lastModifiedDate":"2017-10-30"},{"lineNumber":748,"author":{"gitId":"-"},"content":"* *Save As* : kbd:[CTRL]+kbd:[S]","lastModifiedDate":"2017-10-30"}],"authorContributionMap":{"charlesgoh":32,"jeffreygohkw":47,"Esilocke":255,"-":414}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;","lastModifiedDate":"2016-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.MainWindow;","lastModifiedDate":"2017-10-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2017-10-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected UserPrefs userPrefs;","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2017-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        initEventsCenter();","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private String getApplicationParameter(String parameterName) {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return applicationParameters.get(parameterName);","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    protected Config initConfig(String configFilePath) {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String configFilePathUsed;","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    private void initEventsCenter() {","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"        MainWindow mw \u003d ui.getMainWindow();","lastModifiedDate":"2017-10-04"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"        mw.setMainApp(this);","lastModifiedDate":"2017-10-04"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"        mw.setStorage(storage);","lastModifiedDate":"2017-10-08"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"        mw.setModel(model);","lastModifiedDate":"2017-10-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        ui.stop();","lastModifiedDate":"2016-09-25"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        System.exit(0);","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Subscribe","lastModifiedDate":"2016-08-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {","lastModifiedDate":"2016-08-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));","lastModifiedDate":"2016-09-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        this.stop();","lastModifiedDate":"2016-08-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        launch(args);","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"charlesgoh":2,"jeffreygohkw":5,"-":210}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";","lastModifiedDate":"2017-10-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Esilocke":2,"-":13}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.events.model;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.BaseEvent;","lastModifiedDate":"2016-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/** Indicates the AddressBook in the model has changed*/","lastModifiedDate":"2016-09-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {","lastModifiedDate":"2016-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public final ReadOnlyAddressBook data;","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {","lastModifiedDate":"2016-09-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        this.data \u003d data;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()","lastModifiedDate":"2017-10-30"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"                + \", number of tasks \" + data.getTasksList().size();","lastModifiedDate":"2017-10-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Esilocke":2,"-":18}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserPanelLocateEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * Represents a selection change in the Person List Panel","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"public class BrowserPanelLocateEvent extends BaseEvent {","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    private final ReadOnlyPerson person;","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    public BrowserPanelLocateEvent(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public ReadOnlyPerson getNewSelection() {","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"        return person;","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"jeffreygohkw":25}},{"path":"src/main/java/seedu/address/commons/events/ui/OpenRequestEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;","lastModifiedDate":"2017-10-03"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;","lastModifiedDate":"2017-10-03"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-03"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":" * An Event for the opening of a save file from a selected location.","lastModifiedDate":"2017-10-03"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-03"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"public class OpenRequestEvent extends BaseEvent {","lastModifiedDate":"2017-10-03"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-03"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {","lastModifiedDate":"2017-10-03"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();","lastModifiedDate":"2017-10-03"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-03"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-03"}],"authorContributionMap":{"jeffreygohkw":14}},{"path":"src/main/java/seedu/address/commons/events/ui/SaveAsRequestEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.commons.events.ui;","lastModifiedDate":"2017-10-03"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.BaseEvent;","lastModifiedDate":"2017-10-03"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-03"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":" * An Event for the saving of data to a selected location.","lastModifiedDate":"2017-10-03"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-03"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"public class SaveAsRequestEvent extends BaseEvent {","lastModifiedDate":"2017-10-03"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-03"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    public String toString() {","lastModifiedDate":"2017-10-03"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"        return this.getClass().getSimpleName();","lastModifiedDate":"2017-10-03"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-03"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-03"}],"authorContributionMap":{"jeffreygohkw":14}},{"path":"src/main/java/seedu/address/commons/events/ui/TaskPanelSelectionChangedEvent.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.commons.events.ui;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.BaseEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.ui.TaskCard;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Represents a selection change in the Task List Panel","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class TaskPanelSelectionChangedEvent extends BaseEvent {","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    private final TaskCard newSelection;","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public TaskPanelSelectionChangedEvent(TaskCard newSelection) {","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        this.newSelection \u003d newSelection;","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        return this.getClass().getSimpleName();","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public TaskCard getNewSelection() {","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        return newSelection;","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"Esilocke":26}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList();","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */","lastModifiedDate":"2017-06-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    ListElementPointer getHistorySnapshot();","lastModifiedDate":"2017-06-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Esilocke":4,"-":27}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;","lastModifiedDate":"2016-09-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2017-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    private final Storage storage;","lastModifiedDate":"2017-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final CommandHistory history;","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UndoRedoStack undoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2017-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2017-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.history \u003d new CommandHistory();","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public LogicManager(Model model) {","lastModifiedDate":"2017-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2017-10-19"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"        this.storage \u003d null;","lastModifiedDate":"2017-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.history \u003d new CommandHistory();","lastModifiedDate":"2017-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2017-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();","lastModifiedDate":"2017-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            command.setData(model, history, undoRedoStack);","lastModifiedDate":"2017-07-07"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"            command.setStorageInfo(this.storage);","lastModifiedDate":"2017-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute();","lastModifiedDate":"2017-07-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            undoRedoStack.push(command);","lastModifiedDate":"2017-07-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return result;","lastModifiedDate":"2017-07-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } finally {","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            history.add(commandText);","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList() {","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        return model.getFilteredTaskList();","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public ListElementPointer getHistorySnapshot() {","lastModifiedDate":"2017-06-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new ListElementPointer(history.getHistory());","lastModifiedDate":"2017-06-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"charlesgoh":6,"Esilocke":8,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2017-10-24"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-23"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-23"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" * Adds a person or task to the address book.","lastModifiedDate":"2017-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommand extends UndoableCommand {","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";","lastModifiedDate":"2017-10-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_REMARK + \"REMARK \"","lastModifiedDate":"2017-10-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"            + PREFIX_REMARK + \"REMARK \"","lastModifiedDate":"2017-10-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASK_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \"","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DEADLINE + \"DEADLINE \"","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \"","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TASK + \" \"","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_NAME + \"Buy pencil \"","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DESCRIPTION + \"Buy a new pencil from ABS \"","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DEADLINE + \"10-10-2017 \"","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PRIORITY + \"4 \";","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASK_SUCCESS \u003d \"New task added: \\n%1$s\";","lastModifiedDate":"2017-10-26"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: \\n%1$s\";","lastModifiedDate":"2017-10-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    private final Person personToAdd;","lastModifiedDate":"2017-10-23"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    private final Task taskToAdd;","lastModifiedDate":"2017-10-23"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    private boolean isTask \u003d false;","lastModifiedDate":"2017-10-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}","lastModifiedDate":"2017-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {","lastModifiedDate":"2017-03-17"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        personToAdd \u003d new Person(person);","lastModifiedDate":"2017-10-23"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        taskToAdd \u003d null;","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"     * Creates an AddCommand to add the specified {@Code ReadOnlyTask}","lastModifiedDate":"2017-10-26"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    public AddCommand(ReadOnlyTask task) {","lastModifiedDate":"2017-10-23"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        taskToAdd \u003d new Task(task);","lastModifiedDate":"2017-10-23"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        personToAdd \u003d null;","lastModifiedDate":"2017-10-23"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        isTask \u003d true;","lastModifiedDate":"2017-10-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-26"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"            if (isTask) {","lastModifiedDate":"2017-10-23"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"                model.addTask(taskToAdd);","lastModifiedDate":"2017-10-23"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"                return new CommandResult(String.format(MESSAGE_TASK_SUCCESS, taskToAdd));","lastModifiedDate":"2017-10-24"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"            } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"                model.addPerson(personToAdd);","lastModifiedDate":"2017-10-23"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS, personToAdd));","lastModifiedDate":"2017-10-23"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {","lastModifiedDate":"2017-06-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-02-05"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException e) {","lastModifiedDate":"2017-10-24"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);","lastModifiedDate":"2017-10-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-23"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-23"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        } else if (!(other instanceof AddCommand)) {","lastModifiedDate":"2017-10-23"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-23"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        } else if (taskToAdd \u003d\u003d null \u0026\u0026 ((AddCommand) other).taskToAdd \u003d\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"            assert(personToAdd !\u003d null);","lastModifiedDate":"2017-10-23"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"            assert(((AddCommand) other).personToAdd !\u003d null); // The personToAdd cannot be null","lastModifiedDate":"2017-10-23"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"            return personToAdd.equals(((AddCommand) other).personToAdd);","lastModifiedDate":"2017-10-23"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        } else if (personToAdd \u003d\u003d null \u0026\u0026 ((AddCommand) other).personToAdd \u003d\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"            assert(taskToAdd !\u003d null);","lastModifiedDate":"2017-10-23"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"            assert(((AddCommand) other).taskToAdd !\u003d null); // The taskToAdd cannot be null","lastModifiedDate":"2017-10-23"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"            return taskToAdd.equals(((AddCommand) other).taskToAdd);","lastModifiedDate":"2017-10-23"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-23"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":4,"Esilocke":60,"wangyiming1019":1,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/AddTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-16"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-10-16"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-16"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;","lastModifiedDate":"2017-10-16"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-16"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-16"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-16"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-10-16"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-16"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-16"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" * Adds a tag to the persons in the latest list from the address book.","lastModifiedDate":"2017-10-16"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-16"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommand extends UndoableCommand {","lastModifiedDate":"2017-10-16"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"addtag\";","lastModifiedDate":"2017-10-16"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"atag\";","lastModifiedDate":"2017-10-16"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2017-10-16"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            + \": Adds the tag to the persons with the index numbers used in the last person list.\"","lastModifiedDate":"2017-10-16"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"            + \" Command is case-sensitive. \\n\"","lastModifiedDate":"2017-10-16"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"            + \"[INDEX] [MORE INDEXES] (index must be a positive integer)\"","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\"","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 t/friends \\n\";","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added Tag: %1$s\";","lastModifiedDate":"2017-10-16"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2017-10-16"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in all persons in the current list.\";","lastModifiedDate":"2017-10-16"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexes;","lastModifiedDate":"2017-10-16"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    private final Tag addTag;","lastModifiedDate":"2017-10-16"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     * @param targetIndexes of the persons in the filtered person list to edit","lastModifiedDate":"2017-10-16"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"     * @param addTag tag to add to given target indexes","lastModifiedDate":"2017-10-16"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    public AddTagCommand(Tag addTag, ArrayList\u003cIndex\u003e targetIndexes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(targetIndexes);","lastModifiedDate":"2017-10-16"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(addTag);","lastModifiedDate":"2017-10-16"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndexes \u003d targetIndexes;","lastModifiedDate":"2017-10-16"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        this.addTag \u003d addTag;","lastModifiedDate":"2017-10-16"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-19"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"     * @param addTag tag to add to all entries in the address book","lastModifiedDate":"2017-10-19"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-19"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    public AddTagCommand(Tag addTag) {","lastModifiedDate":"2017-10-19"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(addTag);","lastModifiedDate":"2017-10-19"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        this.targetIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-19"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        this.addTag \u003d addTag;","lastModifiedDate":"2017-10-19"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"     * Check whether the index within the range then checks whether the specific persons have the tag.","lastModifiedDate":"2017-10-16"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"     * If not, add the tag to the person that doesn\u0027t have the given tag.","lastModifiedDate":"2017-10-16"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-16"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-16"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        boolean allPersonsContainGivenTag \u003d true;","lastModifiedDate":"2017-10-16"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        if (targetIndexes.size() \u003d\u003d 0) {","lastModifiedDate":"2017-10-19"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            reinitlializeArray(lastShownList.size());","lastModifiedDate":"2017-10-20"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        for (Index targetIndex : targetIndexes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-16"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-16"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"            }","lastModifiedDate":"2017-10-16"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        // check whether all persons have the given tag","lastModifiedDate":"2017-10-16"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {","lastModifiedDate":"2017-10-16"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"            int personIndex \u003d targetIndexes.get(i).getZeroBased();","lastModifiedDate":"2017-10-16"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson personToAddTag \u003d lastShownList.get(personIndex);","lastModifiedDate":"2017-10-16"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"            if (!personToAddTag.getTags().contains(addTag)) {","lastModifiedDate":"2017-10-16"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"                allPersonsContainGivenTag \u003d false;","lastModifiedDate":"2017-10-16"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"            }","lastModifiedDate":"2017-10-16"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"        if (allPersonsContainGivenTag) {","lastModifiedDate":"2017-10-16"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"            throw  new CommandException(MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2017-10-16"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-16"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"            model.addTag(this.addTag, this.targetIndexes);","lastModifiedDate":"2017-10-16"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        } catch (DuplicatePersonException dpe) {","lastModifiedDate":"2017-10-16"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-10-16"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-16"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"The target person cannot be missing\");","lastModifiedDate":"2017-10-16"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TAG_SUCCESS, addTag));","lastModifiedDate":"2017-10-16"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    private void reinitlializeArray(int size) {","lastModifiedDate":"2017-10-20"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2017-10-20"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"            targetIndexes.add(Index.fromZeroBased(i));","lastModifiedDate":"2017-10-20"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-16"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        // short circuit if same object","lastModifiedDate":"2017-10-16"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-16"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"            return true;","lastModifiedDate":"2017-10-16"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-10-16"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        if (!(other instanceof AddTagCommand)) {","lastModifiedDate":"2017-10-16"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"            return false;","lastModifiedDate":"2017-10-16"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"        // state check","lastModifiedDate":"2017-10-16"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand e \u003d (AddTagCommand) other;","lastModifiedDate":"2017-10-16"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"        return targetIndexes.equals(e.targetIndexes)","lastModifiedDate":"2017-10-16"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 addTag.equals(e.addTag);","lastModifiedDate":"2017-10-16"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-16"}],"authorContributionMap":{"Esilocke":18,"wangyiming1019":108}},{"path":"src/main/java/seedu/address/logic/commands/BackupCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-18"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-19"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.io.IOException;","lastModifiedDate":"2017-10-18"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-18"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"/**","lastModifiedDate":"2017-10-18"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" * Backs up current addressbook into a user input location.","lastModifiedDate":"2017-10-18"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" */","lastModifiedDate":"2017-10-18"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"public class BackupCommand extends Command {","lastModifiedDate":"2017-10-18"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"backup\";","lastModifiedDate":"2017-10-18"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"bk\";","lastModifiedDate":"2017-10-18"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Backs up data to a user input \"","lastModifiedDate":"2017-10-18"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"            + \"location field [FILEPATH]\\n\"","lastModifiedDate":"2017-10-18"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"            + \"Parameter: KEYWORD [FILEPATH]\\n\"","lastModifiedDate":"2017-10-18"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"            + \"Example: \" + COMMAND_WORD + \" ~/Desktop\";","lastModifiedDate":"2017-10-18"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid Input.\\n\";","lastModifiedDate":"2017-10-18"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"AddressBook++ data backed up successfully.\";","lastModifiedDate":"2017-10-18"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    private String args;","lastModifiedDate":"2017-10-20"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    public BackupCommand(String trimmedArgs) {","lastModifiedDate":"2017-10-20"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        super();","lastModifiedDate":"2017-10-20"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        this.args \u003d trimmedArgs;","lastModifiedDate":"2017-10-20"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-18"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    public CommandResult execute() throws CommandException {","lastModifiedDate":"2017-10-18"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-10-19"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(model.getAddressBook());","lastModifiedDate":"2017-10-19"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(storage);","lastModifiedDate":"2017-10-19"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        try {","lastModifiedDate":"2017-10-18"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"            if (args.equals(\"\")) {","lastModifiedDate":"2017-10-20"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"                storage.backupAddressBookDefault(model.getAddressBook());","lastModifiedDate":"2017-10-20"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"            } else {","lastModifiedDate":"2017-10-20"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"                storage.backupAddressBook(model.getAddressBook(), args);","lastModifiedDate":"2017-10-20"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-20"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-10-18"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"            e.printStackTrace();","lastModifiedDate":"2017-10-18"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-18"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2017-10-18"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-18"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"}","lastModifiedDate":"2017-10-18"}],"authorContributionMap":{"charlesgoh":48}},{"path":"src/main/java/seedu/address/logic/commands/ChangePrivacyCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-15"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-15"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-10-15"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-10-15"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-10-15"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-10-15"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-10-22"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;","lastModifiedDate":"2017-10-15"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.Set;","lastModifiedDate":"2017-10-22"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-15"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-15"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2017-10-15"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-15"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-10-22"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-10-22"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-10-22"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-10-22"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-10-22"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-15"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-10-22"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-22"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-22"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-15"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":" * Changes the privacy setting of a person\u0027s details in the address book","lastModifiedDate":"2017-10-15"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-15"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommand extends UndoableCommand {","lastModifiedDate":"2017-10-15"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"changeprivacy\";","lastModifiedDate":"2017-10-15"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"cp\";","lastModifiedDate":"2017-10-15"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String TRUE_WORD \u003d \"true\";","lastModifiedDate":"2017-10-15"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String FALSE_WORD \u003d \"false\";","lastModifiedDate":"2017-10-15"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the privacy of the details of the person\"","lastModifiedDate":"2017-10-15"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"            + \" identified by the index number used in the last person listing.\\n\"","lastModifiedDate":"2017-10-15"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-10-15"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_NAME + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\"","lastModifiedDate":"2017-10-15"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_PHONE + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\"","lastModifiedDate":"2017-10-15"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_EMAIL + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\"","lastModifiedDate":"2017-10-15"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"            + \"[\" + PREFIX_ADDRESS + TRUE_WORD + \" OR \" + FALSE_WORD + \"]\\n\"","lastModifiedDate":"2017-10-22"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-10-15"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_NAME + TRUE_WORD + \" \"","lastModifiedDate":"2017-10-22"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_PHONE + FALSE_WORD + \" \"","lastModifiedDate":"2017-10-22"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_EMAIL + TRUE_WORD + \" \"","lastModifiedDate":"2017-10-22"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"            + PREFIX_ADDRESS + FALSE_WORD;","lastModifiedDate":"2017-10-22"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_CHANGE_PRIVACY_SUCCESS \u003d \"Changed the Privacy of the Person: %1$s\";","lastModifiedDate":"2017-10-15"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_NO_FIELDS \u003d \"At least one field to change must be provided.\";","lastModifiedDate":"2017-10-15"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2017-10-22"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"    private final Index index;","lastModifiedDate":"2017-10-15"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    private final PersonPrivacySettings pps;","lastModifiedDate":"2017-10-15"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-15"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"     * @param index of the person in the filtered person list to change the privacy of","lastModifiedDate":"2017-10-15"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-15"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    public ChangePrivacyCommand(Index index, PersonPrivacySettings pps) {","lastModifiedDate":"2017-10-15"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-10-15"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(pps);","lastModifiedDate":"2017-10-15"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-10-15"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        this.pps \u003d pps;","lastModifiedDate":"2017-10-15"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-15"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-15"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-15"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-15"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-15"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-15"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson personToChange \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2017-10-15"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        Person newPerson \u003d createPersonWithChangedPrivacy(personToChange, pps);","lastModifiedDate":"2017-10-22"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        try {","lastModifiedDate":"2017-10-22"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            model.updatePerson(personToChange, newPerson);","lastModifiedDate":"2017-10-22"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (DuplicatePersonException dpe) {","lastModifiedDate":"2017-10-22"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-10-22"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-22"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"            throw new AssertionError(\"The target person cannot be missing\");","lastModifiedDate":"2017-10-22"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-10-22"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(MESSAGE_CHANGE_PRIVACY_SUCCESS, newPerson));","lastModifiedDate":"2017-10-22"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-15"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-15"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"     * Changes a person\u0027s fields\u0027 privacy","lastModifiedDate":"2017-10-15"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"     * @param person the person whose privacy we would like to change","lastModifiedDate":"2017-10-15"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps the settings of privacy for each field","lastModifiedDate":"2017-10-15"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-15"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"    private static Person createPersonWithChangedPrivacy(ReadOnlyPerson person, PersonPrivacySettings pps) {","lastModifiedDate":"2017-10-22"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        assert person !\u003d null;","lastModifiedDate":"2017-10-22"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        Name n \u003d person.getName();","lastModifiedDate":"2017-10-22"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        Phone p \u003d person.getPhone();","lastModifiedDate":"2017-10-22"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        Email e \u003d person.getEmail();","lastModifiedDate":"2017-10-22"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        Address a \u003d person.getAddress();","lastModifiedDate":"2017-10-22"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        Remark r \u003d person.getRemark();","lastModifiedDate":"2017-10-24"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        Boolean f \u003d person.getFavourite();","lastModifiedDate":"2017-10-25"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        Set\u003cTag\u003e t \u003d person.getTags();","lastModifiedDate":"2017-10-22"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getNameIsPrivate() !\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"            n.setPrivate(pps.getNameIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getPhoneIsPrivate() !\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"            p.setPrivate(pps.getPhoneIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getEmailIsPrivate() !\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"            e.setPrivate(pps.getEmailIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getAddressIsPrivate() !\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"            a.setPrivate(pps.getAddressIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        if (pps.getRemarkIsPrivate() !\u003d null) {","lastModifiedDate":"2017-10-28"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"            r.setPrivate(pps.getRemarkIsPrivate());","lastModifiedDate":"2017-10-28"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"        return new Person(n, p, e, a, f, r, t);","lastModifiedDate":"2017-10-25"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-15"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"    public Index getIndex() {","lastModifiedDate":"2017-10-23"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        return index;","lastModifiedDate":"2017-10-23"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettings getPps() {","lastModifiedDate":"2017-10-23"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        return pps;","lastModifiedDate":"2017-10-23"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-28"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"        // short circuit if same object","lastModifiedDate":"2017-10-28"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-28"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"            return true;","lastModifiedDate":"2017-10-28"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-10-28"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(other instanceof ChangePrivacyCommand)) {","lastModifiedDate":"2017-10-28"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"            return false;","lastModifiedDate":"2017-10-28"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"        // state check","lastModifiedDate":"2017-10-28"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand c \u003d (ChangePrivacyCommand) other;","lastModifiedDate":"2017-10-28"},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"        return index.equals(c.index)","lastModifiedDate":"2017-10-28"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 pps.equals(c.pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-15"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"     * Stores the privacy settings for each field of a person.","lastModifiedDate":"2017-10-15"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-15"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"    public static class PersonPrivacySettings {","lastModifiedDate":"2017-10-15"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean nameIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean phoneIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean emailIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean addressIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"        private Boolean remarkIsPrivate;","lastModifiedDate":"2017-10-28"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"        public PersonPrivacySettings() {}","lastModifiedDate":"2017-10-23"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"        public PersonPrivacySettings(PersonPrivacySettings toCopy) {","lastModifiedDate":"2017-10-23"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"            this.nameIsPrivate \u003d toCopy.nameIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"            this.phoneIsPrivate \u003d toCopy.phoneIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"            this.emailIsPrivate \u003d toCopy.emailIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"            this.addressIsPrivate \u003d toCopy.addressIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"            this.remarkIsPrivate \u003d toCopy.remarkIsPrivate;","lastModifiedDate":"2017-10-28"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"        /**","lastModifiedDate":"2017-10-15"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns true if at least one field is not null.","lastModifiedDate":"2017-10-15"},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"         */","lastModifiedDate":"2017-10-15"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"        public boolean isAnyFieldNonNull() {","lastModifiedDate":"2017-10-15"},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"            return CollectionUtil.isAnyNonNull(this.nameIsPrivate, this.phoneIsPrivate,","lastModifiedDate":"2017-10-15"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"                    this.emailIsPrivate, this.addressIsPrivate, this.remarkIsPrivate);","lastModifiedDate":"2017-10-28"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"        /**","lastModifiedDate":"2017-10-23"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of nameIsPrivate","lastModifiedDate":"2017-10-28"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"         * @return the value of nameIsPrivate","lastModifiedDate":"2017-10-23"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"         */","lastModifiedDate":"2017-10-23"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getNameIsPrivate() {","lastModifiedDate":"2017-10-23"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"            return nameIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"        public void setNameIsPrivate(boolean nameIsPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(nameIsPrivate);","lastModifiedDate":"2017-10-15"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"            this.nameIsPrivate \u003d nameIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"        /**","lastModifiedDate":"2017-10-23"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of phoneIsPrivate","lastModifiedDate":"2017-10-28"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"         * @return the value of phoneIsPrivate","lastModifiedDate":"2017-10-23"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"         */","lastModifiedDate":"2017-10-23"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getPhoneIsPrivate() {","lastModifiedDate":"2017-10-23"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"            return phoneIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"        public void setPhoneIsPrivate(boolean phoneIsPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(phoneIsPrivate);","lastModifiedDate":"2017-10-15"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"            this.phoneIsPrivate \u003d phoneIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"        /**","lastModifiedDate":"2017-10-23"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of emailIsPrivate","lastModifiedDate":"2017-10-28"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"         * @return the value of emailIsPrivate","lastModifiedDate":"2017-10-23"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"         */","lastModifiedDate":"2017-10-23"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getEmailIsPrivate() {","lastModifiedDate":"2017-10-23"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"            return emailIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"        public void setEmailIsPrivate(boolean emailIsPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(emailIsPrivate);","lastModifiedDate":"2017-10-15"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"            this.emailIsPrivate \u003d emailIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":224,"author":{"gitId":"jeffreygohkw"},"content":"        /**","lastModifiedDate":"2017-10-23"},{"lineNumber":225,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of addressIsPrivate","lastModifiedDate":"2017-10-28"},{"lineNumber":226,"author":{"gitId":"jeffreygohkw"},"content":"         * @return the value of addressIsPrivate","lastModifiedDate":"2017-10-23"},{"lineNumber":227,"author":{"gitId":"jeffreygohkw"},"content":"         */","lastModifiedDate":"2017-10-23"},{"lineNumber":228,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getAddressIsPrivate() {","lastModifiedDate":"2017-10-23"},{"lineNumber":229,"author":{"gitId":"jeffreygohkw"},"content":"            return addressIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":230,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":231,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":232,"author":{"gitId":"jeffreygohkw"},"content":"        public void setAddressIsPrivate(boolean addressIsPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":233,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(addressIsPrivate);","lastModifiedDate":"2017-10-15"},{"lineNumber":234,"author":{"gitId":"jeffreygohkw"},"content":"            this.addressIsPrivate \u003d addressIsPrivate;","lastModifiedDate":"2017-10-15"},{"lineNumber":235,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":236,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":237,"author":{"gitId":"jeffreygohkw"},"content":"        /**","lastModifiedDate":"2017-10-28"},{"lineNumber":238,"author":{"gitId":"jeffreygohkw"},"content":"         * Returns the value of remarkIsPrivate","lastModifiedDate":"2017-10-28"},{"lineNumber":239,"author":{"gitId":"jeffreygohkw"},"content":"         * @return the value of remarkIsPrivate","lastModifiedDate":"2017-10-28"},{"lineNumber":240,"author":{"gitId":"jeffreygohkw"},"content":"         */","lastModifiedDate":"2017-10-28"},{"lineNumber":241,"author":{"gitId":"jeffreygohkw"},"content":"        public Boolean getRemarkIsPrivate() {","lastModifiedDate":"2017-10-28"},{"lineNumber":242,"author":{"gitId":"jeffreygohkw"},"content":"            return remarkIsPrivate;","lastModifiedDate":"2017-10-28"},{"lineNumber":243,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":244,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"        public void setRemarkIsPrivate(boolean remarkIsPrivate) {","lastModifiedDate":"2017-10-28"},{"lineNumber":246,"author":{"gitId":"jeffreygohkw"},"content":"            requireNonNull(remarkIsPrivate);","lastModifiedDate":"2017-10-28"},{"lineNumber":247,"author":{"gitId":"jeffreygohkw"},"content":"            this.remarkIsPrivate \u003d remarkIsPrivate;","lastModifiedDate":"2017-10-28"},{"lineNumber":248,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":249,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":250,"author":{"gitId":"jeffreygohkw"},"content":"        @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":251,"author":{"gitId":"jeffreygohkw"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-10-28"},{"lineNumber":252,"author":{"gitId":"jeffreygohkw"},"content":"            // short circuit if same object","lastModifiedDate":"2017-10-28"},{"lineNumber":253,"author":{"gitId":"jeffreygohkw"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-28"},{"lineNumber":254,"author":{"gitId":"jeffreygohkw"},"content":"                return true;","lastModifiedDate":"2017-10-28"},{"lineNumber":255,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":256,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":257,"author":{"gitId":"jeffreygohkw"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-10-28"},{"lineNumber":258,"author":{"gitId":"jeffreygohkw"},"content":"            if (!(other instanceof PersonPrivacySettings)) {","lastModifiedDate":"2017-10-28"},{"lineNumber":259,"author":{"gitId":"jeffreygohkw"},"content":"                return false;","lastModifiedDate":"2017-10-28"},{"lineNumber":260,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":261,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":262,"author":{"gitId":"jeffreygohkw"},"content":"            // state check","lastModifiedDate":"2017-10-28"},{"lineNumber":263,"author":{"gitId":"jeffreygohkw"},"content":"            PersonPrivacySettings c \u003d (PersonPrivacySettings) other;","lastModifiedDate":"2017-10-28"},{"lineNumber":264,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":265,"author":{"gitId":"jeffreygohkw"},"content":"            return getNameIsPrivate().equals(c.getNameIsPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":266,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getPhoneIsPrivate().equals(c.getPhoneIsPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":267,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getEmailIsPrivate().equals(c.getEmailIsPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":268,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getAddressIsPrivate().equals(c.getAddressIsPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":269,"author":{"gitId":"jeffreygohkw"},"content":"                    \u0026\u0026 getRemarkIsPrivate().equals(c.getRemarkIsPrivate());","lastModifiedDate":"2017-10-28"},{"lineNumber":270,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":271,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-15"},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-15"}],"authorContributionMap":{"jeffreygohkw":270,"wangyiming1019":2}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommand extends UndoableCommand {","lastModifiedDate":"2017-05-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";","lastModifiedDate":"2017-10-03"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s has been cleared!\";","lastModifiedDate":"2017-10-26"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the address book. \"","lastModifiedDate":"2017-10-26"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-10-26"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_PERSON + \"] \"","lastModifiedDate":"2017-10-26"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_TASK + \"] \";","lastModifiedDate":"2017-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public static final String TYPE_PERSONS \u003d \"Contact list\";","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final String TYPE_TASKS \u003d \"Task list\";","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final String TYPE_ALL \u003d \"Address book\";","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private boolean isClearTask;","lastModifiedDate":"2017-10-26"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private boolean isClearPerson;","lastModifiedDate":"2017-10-26"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private boolean isClearAll;","lastModifiedDate":"2017-10-26"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    private Prefix type;","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private String cleared;","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public ClearCommand() {","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        isClearAll \u003d true;","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        isClearPerson \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        isClearTask \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        type \u003d null;","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        cleared \u003d TYPE_ALL;","lastModifiedDate":"2017-10-26"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public ClearCommand(Prefix type) {","lastModifiedDate":"2017-10-26"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        if (type.equals(PREFIX_TASK)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            isClearTask \u003d true;","lastModifiedDate":"2017-10-26"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            isClearPerson \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            isClearAll \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            this.type \u003d PREFIX_TASK;","lastModifiedDate":"2017-10-26"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            cleared \u003d TYPE_TASKS;","lastModifiedDate":"2017-10-26"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        } else if (type.equals(PREFIX_PERSON)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            isClearPerson \u003d true;","lastModifiedDate":"2017-10-26"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            isClearTask \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            isClearAll \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            this.type \u003d PREFIX_PERSON;","lastModifiedDate":"2017-10-26"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"            cleared \u003d TYPE_PERSONS;","lastModifiedDate":"2017-10-26"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"An invalid type was provided!\");","lastModifiedDate":"2017-10-26"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() {","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        if (isClearAll) {","lastModifiedDate":"2017-10-26"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"            model.resetData(new AddressBook());","lastModifiedDate":"2016-12-24"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        } else if (isClearTask) {","lastModifiedDate":"2017-10-26"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            model.resetPartialData(new AddressBook(), type);","lastModifiedDate":"2017-10-26"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        } else if (isClearPerson) {","lastModifiedDate":"2017-10-26"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            model.resetPartialData(new AddressBook(), type);","lastModifiedDate":"2017-10-26"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            assert false : \"At least one boolean must be true.\";","lastModifiedDate":"2017-10-26"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, cleared));","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Esilocke":60,"wangyiming1019":1,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2017-10-18"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.ui.MainWindow;","lastModifiedDate":"2017-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    protected Storage storage;","lastModifiedDate":"2017-10-18"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    protected MainWindow mainWindow;","lastModifiedDate":"2017-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    protected CommandHistory history;","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    protected UndoRedoStack undoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons.","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param displaySize used to generate summary","lastModifiedDate":"2016-09-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return summary message for persons displayed","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {","lastModifiedDate":"2016-09-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);","lastModifiedDate":"2016-09-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of tasks.","lastModifiedDate":"2017-10-26"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"     * @param displaySize used to generate summary","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"     * @return summary message for tasks displayed","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    public static String getMessageForTaskListShownSummary(int displaySize) {","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        return String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, displaySize);","lastModifiedDate":"2017-10-26"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute() throws CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Provides any needed dependencies to the command.","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Commands making use of any of these should override this method to gain","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * access to the dependencies.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {","lastModifiedDate":"2017-07-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"    public void setStorageInfo(Storage storage) {","lastModifiedDate":"2017-10-19"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2017-10-18"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":8,"Esilocke":10,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-23"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":" * Deletes a person or task identified using its last displayed index from the address book.","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends UndoableCommand {","lastModifiedDate":"2017-05-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";","lastModifiedDate":"2017-10-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            + \": Deletes the person or task identified by the index number used in the last listing.\\n\"","lastModifiedDate":"2017-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";","lastModifiedDate":"2017-10-23"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public static final int DELETE_TYPE_PERSON \u003d 0;","lastModifiedDate":"2017-10-23"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public static final int DELETE_TYPE_TASK \u003d 1;","lastModifiedDate":"2017-10-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    private int type;","lastModifiedDate":"2017-10-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public DeleteCommand(Index targetIndex, int objectType) {","lastModifiedDate":"2017-10-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        this.type \u003d objectType;","lastModifiedDate":"2017-10-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e personsList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-23"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e tasksList \u003d model.getFilteredTaskList();","lastModifiedDate":"2017-10-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d personsList.size() \u0026\u0026 type \u003d\u003d DELETE_TYPE_PERSON) {","lastModifiedDate":"2017-10-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-02-05"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        } else if (targetIndex.getZeroBased() \u003e\u003d tasksList.size() \u0026\u0026 type \u003d\u003d DELETE_TYPE_TASK) {","lastModifiedDate":"2017-10-23"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"            if (type \u003d\u003d DELETE_TYPE_PERSON) {","lastModifiedDate":"2017-10-23"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"                ReadOnlyPerson personToDelete \u003d personsList.get(targetIndex.getZeroBased());","lastModifiedDate":"2017-10-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2017-10-23"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"                ReadOnlyTask taskToDelete \u003d tasksList.get(targetIndex.getZeroBased());","lastModifiedDate":"2017-10-23"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"                model.deleteTask(taskToDelete);","lastModifiedDate":"2017-10-23"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));","lastModifiedDate":"2017-10-23"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target person cannot be missing\");","lastModifiedDate":"2017-10-26"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException tnfe) {","lastModifiedDate":"2017-10-23"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target task cannot be missing\");","lastModifiedDate":"2017-10-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex)","lastModifiedDate":"2017-10-23"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.type \u003d\u003d ((DeleteCommand) other).type); // state check","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Esilocke":28,"wangyiming1019":1,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-16"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-10-16"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-16"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;","lastModifiedDate":"2017-10-16"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-16"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-16"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-16"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-10-16"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-16"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-16"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" * Deletes a tag from identified persons using the last displayed indexes from the address book.","lastModifiedDate":"2017-10-16"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-16"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommand extends UndoableCommand {","lastModifiedDate":"2017-10-16"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"deletetag\";","lastModifiedDate":"2017-10-16"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"dtag\";","lastModifiedDate":"2017-10-16"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2017-10-16"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"            + \": Deletes the tag from the persons with the index numbers used in the last person list.\"","lastModifiedDate":"2017-10-16"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"            + \" Command is case-sensitive. \\n\"","lastModifiedDate":"2017-10-16"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"            + \"[INDEX] [MORE INDEXES] (index must be a positive integer) \"","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\"","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 t/friends \\n\";","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2017-10-16"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"This is an nonexistent tag in the given persons list.\";","lastModifiedDate":"2017-10-16"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexes;","lastModifiedDate":"2017-10-16"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    private final Tag toDelete;","lastModifiedDate":"2017-10-16"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"     * @param targetIndexes of the persons in the filtered person list to edit","lastModifiedDate":"2017-10-16"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     * @param toDelete tag to delete from given target indexes","lastModifiedDate":"2017-10-16"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"    public DeleteTagCommand(Tag toDelete, ArrayList\u003cIndex\u003e targetIndexes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(targetIndexes);","lastModifiedDate":"2017-10-16"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toDelete);","lastModifiedDate":"2017-10-16"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndexes \u003d targetIndexes;","lastModifiedDate":"2017-10-16"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        this.toDelete \u003d toDelete;","lastModifiedDate":"2017-10-16"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-19"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"     * @param toDelete tag to delete from given target indexes","lastModifiedDate":"2017-10-19"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-19"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public DeleteTagCommand(Tag toDelete) {","lastModifiedDate":"2017-10-19"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toDelete);","lastModifiedDate":"2017-10-19"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        this.targetIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-19"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        this.toDelete \u003d toDelete;","lastModifiedDate":"2017-10-19"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"     * Check whether the index within the range then checks whether the tag exists among the specific persons.","lastModifiedDate":"2017-10-16"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"     * If yes, delete the tag from the specific person in the person list.","lastModifiedDate":"2017-10-16"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-16"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-16"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        boolean nonexistentTag \u003d true;","lastModifiedDate":"2017-10-16"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        if (targetIndexes.size() \u003d\u003d 0) {","lastModifiedDate":"2017-10-19"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"            reinitlializeArray(lastShownList.size());","lastModifiedDate":"2017-10-20"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        for (Index targetIndex : targetIndexes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-16"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-16"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"            }","lastModifiedDate":"2017-10-16"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        // check any person have the tag","lastModifiedDate":"2017-10-16"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {","lastModifiedDate":"2017-10-16"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"            int targetIndex \u003d targetIndexes.get(i).getZeroBased();","lastModifiedDate":"2017-10-16"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson readOnlyPerson \u003d lastShownList.get(targetIndex);","lastModifiedDate":"2017-10-16"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"            if (readOnlyPerson.getTags().contains(toDelete)) {","lastModifiedDate":"2017-10-16"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"                nonexistentTag \u003d false;","lastModifiedDate":"2017-10-16"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"            }","lastModifiedDate":"2017-10-16"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"        if (nonexistentTag) {","lastModifiedDate":"2017-10-16"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"            throw  new CommandException(MESSAGE_NONEXISTENT_TAG);","lastModifiedDate":"2017-10-16"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-16"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"            model.deleteTag(this.toDelete, this.targetIndexes);","lastModifiedDate":"2017-10-16"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        } catch (DuplicatePersonException dpe) {","lastModifiedDate":"2017-10-16"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-10-16"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-16"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"The target person cannot be missing\");","lastModifiedDate":"2017-10-16"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, toDelete));","lastModifiedDate":"2017-10-16"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    private void reinitlializeArray(int size) {","lastModifiedDate":"2017-10-20"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2017-10-20"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"            targetIndexes.add(Index.fromZeroBased(i));","lastModifiedDate":"2017-10-20"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-16"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        // short circuit if same object","lastModifiedDate":"2017-10-16"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-16"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"            return true;","lastModifiedDate":"2017-10-16"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-10-16"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        if (!(other instanceof DeleteTagCommand)) {","lastModifiedDate":"2017-10-16"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"            return false;","lastModifiedDate":"2017-10-16"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"        // state check","lastModifiedDate":"2017-10-16"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand e \u003d (DeleteTagCommand) other;","lastModifiedDate":"2017-10-16"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"        return targetIndexes.equals(e.targetIndexes)","lastModifiedDate":"2017-10-16"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 toDelete.equals(e.toDelete);","lastModifiedDate":"2017-10-16"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-16"}],"authorContributionMap":{"Esilocke":18,"wangyiming1019":108}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2017-10-26"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-26"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;","lastModifiedDate":"2017-10-26"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-26"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":" * Edits the details of an existing person or task in the address book.","lastModifiedDate":"2017-10-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommand extends UndoableCommand {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";","lastModifiedDate":"2017-10-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \"","lastModifiedDate":"2017-10-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASK_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \"","lastModifiedDate":"2017-10-26"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            + \"by the index number used in the last task listing. \"","lastModifiedDate":"2017-10-26"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2017-10-26"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-10-26"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-10-26"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \"","lastModifiedDate":"2017-10-26"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \"","lastModifiedDate":"2017-10-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_DESCRIPTION + \"write 1200-word essay \"","lastModifiedDate":"2017-10-26"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"            + PREFIX_PRIORITY + \"1\";","lastModifiedDate":"2017-10-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: \\n%1$s\";","lastModifiedDate":"2017-10-23"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: \\n%1$s\";","lastModifiedDate":"2017-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";","lastModifiedDate":"2017-10-26"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_ALL_FIELDS_PRIVATE \u003d \"At least one field to be edited must be public.\";","lastModifiedDate":"2017-10-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    private static boolean areFieldsAllPrivate \u003d true;","lastModifiedDate":"2017-10-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    private final EditTaskDescriptor editTaskDescriptor;","lastModifiedDate":"2017-10-26"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    private boolean isTask;","lastModifiedDate":"2017-10-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        this.editTaskDescriptor \u003d null;","lastModifiedDate":"2017-10-26"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        this.isTask \u003d false;","lastModifiedDate":"2017-10-26"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"     * @param index of the task in the filtered task list to edit","lastModifiedDate":"2017-10-26"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"     * @param editTaskDescriptor details to edit the task with","lastModifiedDate":"2017-10-26"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {","lastModifiedDate":"2017-10-26"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-10-26"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editTaskDescriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-10-26"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        this.editPersonDescriptor \u003d null;","lastModifiedDate":"2017-10-26"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        this.isTask \u003d true;","lastModifiedDate":"2017-10-26"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        //TODO see if we can use Singleton pattern to handle the Descriptors.","lastModifiedDate":"2017-10-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyTask\u003e lastShownTaskList \u003d model.getFilteredTaskList();","lastModifiedDate":"2017-10-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-02-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"            if (isTask) {","lastModifiedDate":"2017-10-26"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":132,"author":{"gitId":"Esilocke"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-26"},{"lineNumber":133,"author":{"gitId":"Esilocke"},"content":"                }","lastModifiedDate":"2017-10-26"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"                ReadOnlyTask taskToEdit \u003d lastShownTaskList.get(index.getZeroBased());","lastModifiedDate":"2017-10-26"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"                Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"                model.updateTask(taskToEdit, editedTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"                model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2017-10-26"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"                return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));","lastModifiedDate":"2017-10-26"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"            } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-05-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2017-05-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                model.updatePerson(personToEdit, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-10-26"},{"lineNumber":147,"author":{"gitId":"Esilocke"},"content":"                return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-10-26"},{"lineNumber":148,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {","lastModifiedDate":"2017-06-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-02-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-06-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");","lastModifiedDate":"2017-06-07"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException dpe) {","lastModifiedDate":"2017-10-26"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);","lastModifiedDate":"2017-10-26"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"        } catch (TaskNotFoundException pnfe) {","lastModifiedDate":"2017-10-26"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target task cannot be missing\");","lastModifiedDate":"2017-10-26"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2017-10-30"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_ALL_FIELDS_PRIVATE);","lastModifiedDate":"2017-10-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"     * A person with private fields cannot be edited","lastModifiedDate":"2017-10-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"                                             EditPersonDescriptor editPersonDescriptor)","lastModifiedDate":"2017-10-28"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"            throws IllegalArgumentException {","lastModifiedDate":"2017-10-28"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"        Name updatedName;","lastModifiedDate":"2017-10-15"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"        Phone updatedPhone;","lastModifiedDate":"2017-10-15"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"        Email updatedEmail;","lastModifiedDate":"2017-10-15"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"        Address updatedAddress;","lastModifiedDate":"2017-10-15"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"        Remark updatedRemark;","lastModifiedDate":"2017-10-22"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":"        Set\u003cTag\u003e updatedTags;","lastModifiedDate":"2017-10-29"},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"        Boolean updateFavourite;","lastModifiedDate":"2017-10-29"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"        areFieldsAllPrivate \u003d true;","lastModifiedDate":"2017-10-28"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"        updatedName \u003d createUpdatedName(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":184,"author":{"gitId":"jeffreygohkw"},"content":"        updatedPhone \u003d createUpdatedPhone(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":185,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":186,"author":{"gitId":"jeffreygohkw"},"content":"        updatedEmail \u003d createUpdatedEmail(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":187,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":188,"author":{"gitId":"jeffreygohkw"},"content":"        updatedAddress \u003d createUpdatedAddress(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":189,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":190,"author":{"gitId":"jeffreygohkw"},"content":"        updatedRemark \u003d createUpdatedRemark(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":191,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":192,"author":{"gitId":"jeffreygohkw"},"content":"        updatedTags \u003d createUpdatedTags(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":193,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":194,"author":{"gitId":"jeffreygohkw"},"content":"        updateFavourite \u003d createUpdatedFavourite(personToEdit, editPersonDescriptor);","lastModifiedDate":"2017-10-29"},{"lineNumber":195,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":196,"author":{"gitId":"jeffreygohkw"},"content":"        if (areFieldsAllPrivate) {","lastModifiedDate":"2017-10-29"},{"lineNumber":197,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-10-29"},{"lineNumber":198,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":199,"author":{"gitId":"jeffreygohkw"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,","lastModifiedDate":"2017-10-29"},{"lineNumber":200,"author":{"gitId":"jeffreygohkw"},"content":"                          updateFavourite, updatedRemark, updatedTags);","lastModifiedDate":"2017-10-29"},{"lineNumber":201,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":202,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":203,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":204,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Name) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":205,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":206,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":207,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Name) from either the personToEdit or the editPersonDescriptor depending on privacy","lastModifiedDate":"2017-10-29"},{"lineNumber":208,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":209,"author":{"gitId":"jeffreygohkw"},"content":"    private static Name createUpdatedName(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":210,"author":{"gitId":"jeffreygohkw"},"content":"        Name updatedName;","lastModifiedDate":"2017-10-29"},{"lineNumber":211,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getName().isPrivate()) {","lastModifiedDate":"2017-10-15"},{"lineNumber":212,"author":{"gitId":"jeffreygohkw"},"content":"            updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-10-15"},{"lineNumber":213,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getName().isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":214,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-28"},{"lineNumber":215,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":216,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-15"},{"lineNumber":217,"author":{"gitId":"jeffreygohkw"},"content":"            updatedName \u003d personToEdit.getName();","lastModifiedDate":"2017-10-15"},{"lineNumber":218,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":219,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedName;","lastModifiedDate":"2017-10-29"},{"lineNumber":220,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":221,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":222,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":223,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Phone) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":224,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":225,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":226,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Phone) from either the personToEdit or the editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":227,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input","lastModifiedDate":"2017-10-29"},{"lineNumber":228,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":229,"author":{"gitId":"jeffreygohkw"},"content":"    private static Phone createUpdatedPhone(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":230,"author":{"gitId":"jeffreygohkw"},"content":"        Phone updatedPhone;","lastModifiedDate":"2017-10-29"},{"lineNumber":231,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getPhone().isPrivate()) {","lastModifiedDate":"2017-10-15"},{"lineNumber":232,"author":{"gitId":"jeffreygohkw"},"content":"            updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-10-15"},{"lineNumber":233,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getPhone().isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":234,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-28"},{"lineNumber":235,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":236,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-15"},{"lineNumber":237,"author":{"gitId":"jeffreygohkw"},"content":"            updatedPhone \u003d personToEdit.getPhone();","lastModifiedDate":"2017-10-15"},{"lineNumber":238,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":239,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedPhone;","lastModifiedDate":"2017-10-29"},{"lineNumber":240,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":241,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":242,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":243,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Email) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":244,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":246,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Email) from either the personToEdit or the editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":247,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input","lastModifiedDate":"2017-10-29"},{"lineNumber":248,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":249,"author":{"gitId":"jeffreygohkw"},"content":"    private static Email createUpdatedEmail(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":250,"author":{"gitId":"jeffreygohkw"},"content":"        Email updatedEmail;","lastModifiedDate":"2017-10-29"},{"lineNumber":251,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getEmail().isPrivate()) {","lastModifiedDate":"2017-10-15"},{"lineNumber":252,"author":{"gitId":"jeffreygohkw"},"content":"            updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-10-15"},{"lineNumber":253,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getEmail().isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":254,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-28"},{"lineNumber":255,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":256,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-15"},{"lineNumber":257,"author":{"gitId":"jeffreygohkw"},"content":"            updatedEmail \u003d personToEdit.getEmail();","lastModifiedDate":"2017-10-15"},{"lineNumber":258,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":259,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedEmail;","lastModifiedDate":"2017-10-29"},{"lineNumber":260,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":261,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":262,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":263,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Address) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":264,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":265,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":266,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Address) from either the personToEdit or the editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":267,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input","lastModifiedDate":"2017-10-29"},{"lineNumber":268,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":269,"author":{"gitId":"jeffreygohkw"},"content":"    private static Address createUpdatedAddress(ReadOnlyPerson personToEdit,","lastModifiedDate":"2017-10-29"},{"lineNumber":270,"author":{"gitId":"jeffreygohkw"},"content":"                                                EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":271,"author":{"gitId":"jeffreygohkw"},"content":"        Address updatedAddress;","lastModifiedDate":"2017-10-29"},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":"        if (!personToEdit.getAddress().isPrivate()) {","lastModifiedDate":"2017-10-15"},{"lineNumber":273,"author":{"gitId":"jeffreygohkw"},"content":"            updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-10-15"},{"lineNumber":274,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getAddress().isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":275,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-28"},{"lineNumber":276,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":277,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-15"},{"lineNumber":278,"author":{"gitId":"jeffreygohkw"},"content":"            updatedAddress \u003d personToEdit.getAddress();","lastModifiedDate":"2017-10-15"},{"lineNumber":279,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":280,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedAddress;","lastModifiedDate":"2017-10-29"},{"lineNumber":281,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":282,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":283,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":284,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Remark) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":285,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":286,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":287,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Remark) from either the personToEdit or the editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":288,"author":{"gitId":"jeffreygohkw"},"content":"     * depending on privacy and the input","lastModifiedDate":"2017-10-29"},{"lineNumber":289,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":290,"author":{"gitId":"jeffreygohkw"},"content":"    private static Remark createUpdatedRemark(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":291,"author":{"gitId":"jeffreygohkw"},"content":"        Remark updatedRemark;","lastModifiedDate":"2017-10-29"},{"lineNumber":292,"author":{"gitId":"charlesgoh"},"content":"        if (!personToEdit.getRemark().isPrivate()) {","lastModifiedDate":"2017-10-22"},{"lineNumber":293,"author":{"gitId":"charlesgoh"},"content":"            updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());","lastModifiedDate":"2017-10-22"},{"lineNumber":294,"author":{"gitId":"jeffreygohkw"},"content":"            if (editPersonDescriptor.getRemark().isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":295,"author":{"gitId":"jeffreygohkw"},"content":"                areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-28"},{"lineNumber":296,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":297,"author":{"gitId":"charlesgoh"},"content":"        } else {","lastModifiedDate":"2017-10-22"},{"lineNumber":298,"author":{"gitId":"charlesgoh"},"content":"            updatedRemark \u003d personToEdit.getRemark();","lastModifiedDate":"2017-10-22"},{"lineNumber":299,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":300,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedRemark;","lastModifiedDate":"2017-10-29"},{"lineNumber":301,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":302,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":303,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":304,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Tag) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":305,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":306,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":307,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Tag) from either the personToEdit or the editPersonDescriptor depending on the input","lastModifiedDate":"2017-10-29"},{"lineNumber":308,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":309,"author":{"gitId":"jeffreygohkw"},"content":"    private static Set\u003cTag\u003e createUpdatedTags(ReadOnlyPerson personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":311,"author":{"gitId":"jeffreygohkw"},"content":"        if (editPersonDescriptor.getTags().isPresent()) {","lastModifiedDate":"2017-10-29"},{"lineNumber":312,"author":{"gitId":"jeffreygohkw"},"content":"            areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-29"},{"lineNumber":313,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":314,"author":{"gitId":"jeffreygohkw"},"content":"        return updatedTags;","lastModifiedDate":"2017-10-29"},{"lineNumber":315,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":316,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":317,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":318,"author":{"gitId":"jeffreygohkw"},"content":"     * Creates an updated (@code Favourite) for use in createEditedPerson","lastModifiedDate":"2017-10-29"},{"lineNumber":319,"author":{"gitId":"jeffreygohkw"},"content":"     * @param personToEdit The person to edit","lastModifiedDate":"2017-10-29"},{"lineNumber":320,"author":{"gitId":"jeffreygohkw"},"content":"     * @param editPersonDescriptor Edited with this editPersonDescriptor","lastModifiedDate":"2017-10-29"},{"lineNumber":321,"author":{"gitId":"jeffreygohkw"},"content":"     * @return A new (@code Favourite) from either the personToEdit or the editPersonDescriptor depending on the input","lastModifiedDate":"2017-10-29"},{"lineNumber":322,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":323,"author":{"gitId":"jeffreygohkw"},"content":"    private static Boolean createUpdatedFavourite(ReadOnlyPerson personToEdit,","lastModifiedDate":"2017-10-29"},{"lineNumber":324,"author":{"gitId":"jeffreygohkw"},"content":"                                                  EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-10-29"},{"lineNumber":325,"author":{"gitId":"wangyiming1019"},"content":"        Boolean updateFavourite \u003d editPersonDescriptor.getFavourite().orElse(personToEdit.getFavourite());","lastModifiedDate":"2017-10-25"},{"lineNumber":326,"author":{"gitId":"jeffreygohkw"},"content":"        if (editPersonDescriptor.getFavourite().isPresent()) {","lastModifiedDate":"2017-10-29"},{"lineNumber":327,"author":{"gitId":"jeffreygohkw"},"content":"            areFieldsAllPrivate \u003d false;","lastModifiedDate":"2017-10-29"},{"lineNumber":328,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":329,"author":{"gitId":"jeffreygohkw"},"content":"        return updateFavourite;","lastModifiedDate":"2017-10-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":332,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":333,"author":{"gitId":"Esilocke"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}","lastModifiedDate":"2017-10-26"},{"lineNumber":334,"author":{"gitId":"Esilocke"},"content":"     * edited with {@code editTaskDescriptor}.","lastModifiedDate":"2017-10-26"},{"lineNumber":335,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":336,"author":{"gitId":"Esilocke"},"content":"    private static Task createEditedTask(ReadOnlyTask taskToEdit,","lastModifiedDate":"2017-10-26"},{"lineNumber":337,"author":{"gitId":"Esilocke"},"content":"                                             EditTaskDescriptor editTaskDescriptor) {","lastModifiedDate":"2017-10-26"},{"lineNumber":338,"author":{"gitId":"Esilocke"},"content":"        assert taskToEdit !\u003d null;","lastModifiedDate":"2017-10-26"},{"lineNumber":339,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":340,"author":{"gitId":"Esilocke"},"content":"        TaskName updatedTaskName;","lastModifiedDate":"2017-10-26"},{"lineNumber":341,"author":{"gitId":"Esilocke"},"content":"        Description updatedDescription;","lastModifiedDate":"2017-10-26"},{"lineNumber":342,"author":{"gitId":"Esilocke"},"content":"        Deadline updatedDeadline;","lastModifiedDate":"2017-10-26"},{"lineNumber":343,"author":{"gitId":"Esilocke"},"content":"        Priority updatedPriority;","lastModifiedDate":"2017-10-26"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":345,"author":{"gitId":"Esilocke"},"content":"        updatedTaskName \u003d editTaskDescriptor.getTaskName().orElse(taskToEdit.getTaskName());","lastModifiedDate":"2017-10-26"},{"lineNumber":346,"author":{"gitId":"Esilocke"},"content":"        updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());","lastModifiedDate":"2017-10-26"},{"lineNumber":347,"author":{"gitId":"Esilocke"},"content":"        updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());","lastModifiedDate":"2017-10-26"},{"lineNumber":348,"author":{"gitId":"Esilocke"},"content":"        updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());","lastModifiedDate":"2017-10-26"},{"lineNumber":349,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":350,"author":{"gitId":"Esilocke"},"content":"        return new Task(updatedTaskName, updatedDescription, updatedDeadline, updatedPriority);","lastModifiedDate":"2017-10-26"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":362,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":365,"author":{"gitId":"Esilocke"},"content":"        if (this.isTask !\u003d ((EditCommand) other).isTask) {","lastModifiedDate":"2017-10-26"},{"lineNumber":366,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-26"},{"lineNumber":367,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":368,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":370,"author":{"gitId":"Esilocke"},"content":"        if (this.isTask) {","lastModifiedDate":"2017-10-26"},{"lineNumber":371,"author":{"gitId":"Esilocke"},"content":"            return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":372,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":373,"author":{"gitId":"Esilocke"},"content":"            return index.equals(e.index) \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":374,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":378,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":379,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":380,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":386,"author":{"gitId":"wangyiming1019"},"content":"        private Boolean favourite;","lastModifiedDate":"2017-10-25"},{"lineNumber":387,"author":{"gitId":"charlesgoh"},"content":"        private Remark remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":393,"author":{"gitId":"-"},"content":"            this.name \u003d toCopy.name;","lastModifiedDate":"2017-06-21"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            this.phone \u003d toCopy.phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            this.email \u003d toCopy.email;","lastModifiedDate":"2017-06-21"},{"lineNumber":396,"author":{"gitId":"-"},"content":"            this.address \u003d toCopy.address;","lastModifiedDate":"2017-06-21"},{"lineNumber":397,"author":{"gitId":"wangyiming1019"},"content":"            this.favourite \u003d toCopy.favourite;","lastModifiedDate":"2017-10-25"},{"lineNumber":398,"author":{"gitId":"charlesgoh"},"content":"            this.remark \u003d toCopy.remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":399,"author":{"gitId":"-"},"content":"            this.tags \u003d toCopy.tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":403,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":404,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":406,"author":{"gitId":"charlesgoh"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.remark, this.tags);","lastModifiedDate":"2017-10-22"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":418,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail()  {","lastModifiedDate":"2016-12-26"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":438,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":441,"author":{"gitId":"wangyiming1019"},"content":"        public void setFavourite(Boolean favourite) {","lastModifiedDate":"2017-10-25"},{"lineNumber":442,"author":{"gitId":"wangyiming1019"},"content":"            this.favourite \u003d favourite;","lastModifiedDate":"2017-10-25"},{"lineNumber":443,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":444,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":445,"author":{"gitId":"wangyiming1019"},"content":"        public Optional\u003cBoolean\u003e getFavourite() {","lastModifiedDate":"2017-10-25"},{"lineNumber":446,"author":{"gitId":"wangyiming1019"},"content":"            return Optional.ofNullable(favourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":447,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":448,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":449,"author":{"gitId":"charlesgoh"},"content":"        public void setRemark(Remark remark) {","lastModifiedDate":"2017-10-22"},{"lineNumber":450,"author":{"gitId":"charlesgoh"},"content":"            this.remark \u003d remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":451,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":452,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":453,"author":{"gitId":"charlesgoh"},"content":"        public Optional\u003cRemark\u003e getRemark() {","lastModifiedDate":"2017-10-22"},{"lineNumber":454,"author":{"gitId":"charlesgoh"},"content":"            return Optional.ofNullable(remark);","lastModifiedDate":"2017-10-22"},{"lineNumber":455,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":456,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":457,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":458,"author":{"gitId":"-"},"content":"            this.tags \u003d tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":462,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(tags);","lastModifiedDate":"2017-06-21"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":467,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":468,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":469,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":470,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":472,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":473,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":475,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":477,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":478,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":480,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":481,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":482,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":484,"author":{"gitId":"wangyiming1019"},"content":"                    \u0026\u0026 getFavourite().equals(e.getFavourite())","lastModifiedDate":"2017-10-25"},{"lineNumber":485,"author":{"gitId":"charlesgoh"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark())","lastModifiedDate":"2017-10-22"},{"lineNumber":486,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":489,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":490,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":491,"author":{"gitId":"Esilocke"},"content":"     * Stores the details to edit the task with. Each non-empty field value will replace the","lastModifiedDate":"2017-10-26"},{"lineNumber":492,"author":{"gitId":"Esilocke"},"content":"     * corresponding field value of the task.","lastModifiedDate":"2017-10-26"},{"lineNumber":493,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":494,"author":{"gitId":"Esilocke"},"content":"    public static class EditTaskDescriptor {","lastModifiedDate":"2017-10-26"},{"lineNumber":495,"author":{"gitId":"Esilocke"},"content":"        private TaskName taskName;","lastModifiedDate":"2017-10-26"},{"lineNumber":496,"author":{"gitId":"Esilocke"},"content":"        private Description description;","lastModifiedDate":"2017-10-26"},{"lineNumber":497,"author":{"gitId":"Esilocke"},"content":"        private Deadline deadline;","lastModifiedDate":"2017-10-26"},{"lineNumber":498,"author":{"gitId":"Esilocke"},"content":"        private Priority priority;","lastModifiedDate":"2017-10-26"},{"lineNumber":499,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":500,"author":{"gitId":"Esilocke"},"content":"        public EditTaskDescriptor() {}","lastModifiedDate":"2017-10-26"},{"lineNumber":501,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":502,"author":{"gitId":"Esilocke"},"content":"        public EditTaskDescriptor(EditTaskDescriptor toCopy) {","lastModifiedDate":"2017-10-26"},{"lineNumber":503,"author":{"gitId":"Esilocke"},"content":"            this.taskName \u003d toCopy.taskName;","lastModifiedDate":"2017-10-26"},{"lineNumber":504,"author":{"gitId":"Esilocke"},"content":"            this.description \u003d toCopy.description;","lastModifiedDate":"2017-10-26"},{"lineNumber":505,"author":{"gitId":"Esilocke"},"content":"            this.deadline \u003d toCopy.deadline;","lastModifiedDate":"2017-10-26"},{"lineNumber":506,"author":{"gitId":"Esilocke"},"content":"            this.priority \u003d toCopy.priority;","lastModifiedDate":"2017-10-26"},{"lineNumber":507,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":508,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":509,"author":{"gitId":"Esilocke"},"content":"        /**","lastModifiedDate":"2017-10-26"},{"lineNumber":510,"author":{"gitId":"Esilocke"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2017-10-26"},{"lineNumber":511,"author":{"gitId":"Esilocke"},"content":"         */","lastModifiedDate":"2017-10-26"},{"lineNumber":512,"author":{"gitId":"Esilocke"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2017-10-26"},{"lineNumber":513,"author":{"gitId":"Esilocke"},"content":"            return CollectionUtil.isAnyNonNull(this.taskName, this.description, this.deadline, this.priority);","lastModifiedDate":"2017-10-26"},{"lineNumber":514,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":515,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":516,"author":{"gitId":"Esilocke"},"content":"        public void setTaskName(TaskName taskName) {","lastModifiedDate":"2017-10-26"},{"lineNumber":517,"author":{"gitId":"Esilocke"},"content":"            this.taskName \u003d taskName;","lastModifiedDate":"2017-10-26"},{"lineNumber":518,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":519,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":520,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cTaskName\u003e getTaskName() {","lastModifiedDate":"2017-10-26"},{"lineNumber":521,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(taskName);","lastModifiedDate":"2017-10-26"},{"lineNumber":522,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":523,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":524,"author":{"gitId":"Esilocke"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2017-10-26"},{"lineNumber":525,"author":{"gitId":"Esilocke"},"content":"            this.description \u003d description;","lastModifiedDate":"2017-10-26"},{"lineNumber":526,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":527,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":528,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2017-10-26"},{"lineNumber":529,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2017-10-26"},{"lineNumber":530,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":531,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":532,"author":{"gitId":"Esilocke"},"content":"        public void setDeadline(Deadline deadline) {","lastModifiedDate":"2017-10-26"},{"lineNumber":533,"author":{"gitId":"Esilocke"},"content":"            this.deadline \u003d deadline;","lastModifiedDate":"2017-10-26"},{"lineNumber":534,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":535,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":536,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cDeadline\u003e getDeadline()  {","lastModifiedDate":"2017-10-26"},{"lineNumber":537,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(deadline);","lastModifiedDate":"2017-10-26"},{"lineNumber":538,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":539,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":540,"author":{"gitId":"Esilocke"},"content":"        public void setPriority(Priority priority) {","lastModifiedDate":"2017-10-26"},{"lineNumber":541,"author":{"gitId":"Esilocke"},"content":"            this.priority \u003d priority;","lastModifiedDate":"2017-10-26"},{"lineNumber":542,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":543,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":544,"author":{"gitId":"Esilocke"},"content":"        public Optional\u003cPriority\u003e getPriority() {","lastModifiedDate":"2017-10-26"},{"lineNumber":545,"author":{"gitId":"Esilocke"},"content":"            return Optional.ofNullable(priority);","lastModifiedDate":"2017-10-26"},{"lineNumber":546,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":547,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":548,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":549,"author":{"gitId":"Esilocke"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-10-26"},{"lineNumber":550,"author":{"gitId":"Esilocke"},"content":"            // short circuit if same object","lastModifiedDate":"2017-10-26"},{"lineNumber":551,"author":{"gitId":"Esilocke"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-26"},{"lineNumber":552,"author":{"gitId":"Esilocke"},"content":"                return true;","lastModifiedDate":"2017-10-26"},{"lineNumber":553,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-26"},{"lineNumber":554,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":555,"author":{"gitId":"Esilocke"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-10-26"},{"lineNumber":556,"author":{"gitId":"Esilocke"},"content":"            if (!(other instanceof EditTaskDescriptor)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":557,"author":{"gitId":"Esilocke"},"content":"                return false;","lastModifiedDate":"2017-10-26"},{"lineNumber":558,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-26"},{"lineNumber":559,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":560,"author":{"gitId":"Esilocke"},"content":"            // state check","lastModifiedDate":"2017-10-26"},{"lineNumber":561,"author":{"gitId":"Esilocke"},"content":"            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;","lastModifiedDate":"2017-10-26"},{"lineNumber":562,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":563,"author":{"gitId":"Esilocke"},"content":"            return getTaskName().equals(e.getTaskName())","lastModifiedDate":"2017-10-26"},{"lineNumber":564,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())","lastModifiedDate":"2017-10-26"},{"lineNumber":565,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getDeadline().equals(e.getDeadline())","lastModifiedDate":"2017-10-26"},{"lineNumber":566,"author":{"gitId":"Esilocke"},"content":"                    \u0026\u0026 getPriority().equals(e.getPriority());","lastModifiedDate":"2017-10-26"},{"lineNumber":567,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":568,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":569,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"charlesgoh":22,"jeffreygohkw":152,"Esilocke":174,"wangyiming1019":15,"-":206}},{"path":"src/main/java/seedu/address/logic/commands/EditTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-19"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-19"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-10-19"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-19"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.List;","lastModifiedDate":"2017-10-19"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import java.util.Set;","lastModifiedDate":"2017-10-19"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-19"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-19"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-19"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-10-19"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-19"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-19"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-19"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":" * Renames and edits the specified tag in the address book.","lastModifiedDate":"2017-10-19"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-19"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommand extends UndoableCommand {","lastModifiedDate":"2017-10-19"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_WORD \u003d \"edittag\";","lastModifiedDate":"2017-10-19"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public static final String COMMAND_ALIAS \u003d \"etag\";","lastModifiedDate":"2017-10-20"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the specified tag \"","lastModifiedDate":"2017-10-19"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            + \"and updates all existing contacts that shares this tag with the new value.\\n\"","lastModifiedDate":"2017-10-20"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: TAGTOCHANGE (must be alphanumerical) \"","lastModifiedDate":"2017-10-20"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            + \"TAGNEWNAME (must be alphanumerical)\\n\"","lastModifiedDate":"2017-10-20"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends enemies\";","lastModifiedDate":"2017-10-20"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Replaced tag %1$s with %2$s\";","lastModifiedDate":"2017-10-19"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"No such tag was found in the address book.\";","lastModifiedDate":"2017-10-19"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INSUFFICIENT_ARGS \u003d \"Only 2 arguments should be provided!\";","lastModifiedDate":"2017-10-20"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_INVALID_TAG_NAME \u003d \"Tag names must be alphanumerical.\";","lastModifiedDate":"2017-10-20"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DUPLICATE_TAGS \u003d \"The new name of the tag cannot be the same as the old name.\";","lastModifiedDate":"2017-10-20"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    private final ArrayList\u003cIndex\u003e affectedIndexes;","lastModifiedDate":"2017-10-19"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    private final Tag toEdit;","lastModifiedDate":"2017-10-19"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private final Tag newTag;","lastModifiedDate":"2017-10-19"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-19"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     * @param toEdit The value of the tag to be changed","lastModifiedDate":"2017-10-19"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"     * @param newTag The new value for the tag","lastModifiedDate":"2017-10-19"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-19"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    public EditTagCommand(Tag toEdit, Tag newTag) {","lastModifiedDate":"2017-10-19"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toEdit);","lastModifiedDate":"2017-10-19"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(newTag);","lastModifiedDate":"2017-10-19"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        this.toEdit \u003d toEdit;","lastModifiedDate":"2017-10-19"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        this.newTag \u003d newTag;","lastModifiedDate":"2017-10-19"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        this.affectedIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-19"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-19"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-19"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-19"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson currentlyViewed;","lastModifiedDate":"2017-10-19"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        Set\u003cTag\u003e tagSet;","lastModifiedDate":"2017-10-19"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        boolean tagNotPresent \u003d true;","lastModifiedDate":"2017-10-19"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {","lastModifiedDate":"2017-10-19"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            currentlyViewed \u003d lastShownList.get(i);","lastModifiedDate":"2017-10-19"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            tagSet \u003d currentlyViewed.getTags();","lastModifiedDate":"2017-10-19"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            if (tagSet.contains(toEdit)) {","lastModifiedDate":"2017-10-19"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"                tagNotPresent \u003d false;","lastModifiedDate":"2017-10-19"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"                affectedIndexes.add(Index.fromZeroBased(i));","lastModifiedDate":"2017-10-19"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-19"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        if (tagNotPresent) {","lastModifiedDate":"2017-10-19"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_TAG_NOT_FOUND);","lastModifiedDate":"2017-10-19"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-19"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            model.editTag(toEdit, newTag, affectedIndexes);","lastModifiedDate":"2017-10-19"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicatePersonException dpe) {","lastModifiedDate":"2017-10-19"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TAGS);","lastModifiedDate":"2017-10-20"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-19"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"The target person cannot be missing\");","lastModifiedDate":"2017-10-19"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-10-19"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, toEdit.tagName, newTag.tagName));","lastModifiedDate":"2017-10-19"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-19"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-19"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object","lastModifiedDate":"2017-10-19"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-19"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-19"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-10-19"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof EditTagCommand)) {","lastModifiedDate":"2017-10-19"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-19"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        // state check","lastModifiedDate":"2017-10-19"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand e \u003d (EditTagCommand) other;","lastModifiedDate":"2017-10-19"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        return toEdit.equals(e.toEdit)","lastModifiedDate":"2017-10-19"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 newTag.equals(e.newTag);","lastModifiedDate":"2017-10-19"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-19"}],"authorContributionMap":{"Esilocke":98}},{"path":"src/main/java/seedu/address/logic/commands/FavouriteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * Favourites a person identified using it\u0027s last displayed index from the address book.","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommand extends UndoableCommand {","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"favourite\";","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"fav\";","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"            + \": Favourites the person identified by the index number used in the last person listing.\\n\"","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_FAVOURITE_PERSON_SUCCESS \u003d \"Favourited Person: %1$s\";","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_DUPLICATE_FAVOURITE \u003d \"Person is already favourited.\";","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    public FavouriteCommand(Index targetIndex) {","lastModifiedDate":"2017-10-25"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2017-10-25"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-25"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-25"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToFavourite \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        if (personToFavourite.getFavourite().equals(true)) {","lastModifiedDate":"2017-10-25"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FAVOURITE);","lastModifiedDate":"2017-10-25"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-25"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"            model.favouritePerson(personToFavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-25"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"            assert false : \"The target person cannot be missing\";","lastModifiedDate":"2017-10-25"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_FAVOURITE_PERSON_SUCCESS, personToFavourite));","lastModifiedDate":"2017-10-25"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-25"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-25"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof FavouriteCommand // instanceof handles nulls","lastModifiedDate":"2017-10-25"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.targetIndex.equals(((FavouriteCommand) other).targetIndex)); // state check","lastModifiedDate":"2017-10-25"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":63}},{"path":"src/main/java/seedu/address/logic/commands/FavouriteListCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsFavouritePredicate;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":" * Lists all favourited persons in the address book to the user.","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteListCommand extends Command {","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"showfavourite\";","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"sfav\";","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all favourited persons.\";","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    private static final NameContainsFavouritePredicate predicate \u003d new NameContainsFavouritePredicate();","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult execute() {","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":22}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Finds and lists all persons or tasks in address book whose name contains any of the argument keywords.","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Keyword matching is case sensitive.","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";","lastModifiedDate":"2017-10-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_TASK_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names or descriptions \"","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"            + \"contain any of the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            + \"Example: \" + COMMAND_WORD + \" task make\";","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    private final NameContainsKeywordsPredicate personPredicate;","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private final TaskContainsKeywordPredicate taskPredicate;","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private boolean isTask;","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        this.personPredicate \u003d predicate;","lastModifiedDate":"2017-10-28"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        this.taskPredicate \u003d null;","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        this.isTask \u003d false;","lastModifiedDate":"2017-10-28"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public FindCommand(TaskContainsKeywordPredicate predicate) {","lastModifiedDate":"2017-10-28"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        this.personPredicate \u003d null;","lastModifiedDate":"2017-10-28"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        this.taskPredicate \u003d predicate;","lastModifiedDate":"2017-10-28"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        this.isTask \u003d true;","lastModifiedDate":"2017-10-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute() {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        if (isTask) {","lastModifiedDate":"2017-10-28"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            assert(taskPredicate !\u003d null);","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            model.updateFilteredTaskList(taskPredicate);","lastModifiedDate":"2017-10-28"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            return new CommandResult(getMessageForTaskListShownSummary(model.getFilteredTaskList().size()));","lastModifiedDate":"2017-10-28"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-28"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            assert(personPredicate !\u003d null);","lastModifiedDate":"2017-10-28"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            model.updateFilteredPersonList(personPredicate);","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-28"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-28"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        } else if (!(other instanceof FindCommand)) {","lastModifiedDate":"2017-10-28"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-28"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        } else if (this.isTask !\u003d ((FindCommand) other).isTask) {","lastModifiedDate":"2017-10-28"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        } else if (this.isTask) {","lastModifiedDate":"2017-10-28"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"            return this.taskPredicate.equals(((FindCommand) other).taskPredicate);","lastModifiedDate":"2017-10-28"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-28"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"            return this.personPredicate.equals(((FindCommand) other).personPredicate);","lastModifiedDate":"2017-10-28"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Esilocke":36,"wangyiming1019":1,"-":30}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-29"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-29"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":" * Finds and lists all persons in address book who has a tag that contains any of the argument keywords.","lastModifiedDate":"2017-10-29"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":" * Keyword matching is case sensitive.","lastModifiedDate":"2017-10-29"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-29"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommand extends Command {","lastModifiedDate":"2017-10-29"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"findtag\";","lastModifiedDate":"2017-10-29"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"ftag\";","lastModifiedDate":"2017-10-29"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain any of \"","lastModifiedDate":"2017-10-29"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"            + \"the specified tags (not case-sensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2017-10-29"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2017-10-29"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends colleagues\";","lastModifiedDate":"2017-10-29"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    private final NameContainsTagsPredicate predicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    public FindTagCommand(NameContainsTagsPredicate predicate) {","lastModifiedDate":"2017-10-29"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-29"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult execute() {","lastModifiedDate":"2017-10-29"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-10-29"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));","lastModifiedDate":"2017-10-29"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-29"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-29"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-29"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls","lastModifiedDate":"2017-10-29"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check","lastModifiedDate":"2017-10-29"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-29"}],"authorContributionMap":{"wangyiming1019":37}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Lists all the commands entered by user from the start of app launch.","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class HistoryCommand extends Command {","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";","lastModifiedDate":"2017-10-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult execute() {","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        if (previousCommands.isEmpty()) {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Collections.reverse(previousCommands);","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(history);","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.history \u003d history;","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"wangyiming1019":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";","lastModifiedDate":"2017-10-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute() {","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Esilocke":3,"wangyiming1019":1,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/LocateCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import java.util.List;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.EventsCenter;","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":" * Locates a person\u0027s address on Google Maps identified using it\u0027s last displayed index from the address book.","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommand extends Command {","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_WORD \u003d \"locate\";","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"loc\";","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"            + \": Locates the address of the person identified by the index number used in the last person listing.\\n\"","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String MESSAGE_LOCATE_PERSON_SUCCESS \u003d \"Searching for Person: %1$s\";","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    public LocateCommand(Index targetIndex) {","lastModifiedDate":"2017-10-28"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult execute() throws CommandException {","lastModifiedDate":"2017-10-28"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-28"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-28"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        EventsCenter.getInstance().post(new BrowserPanelLocateEvent(","lastModifiedDate":"2017-10-28"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"                model.getFilteredPersonList().get(targetIndex.getZeroBased())));","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_PERSON_SUCCESS, targetIndex.getOneBased()));","lastModifiedDate":"2017-10-28"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-28"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-28"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"                || (other instanceof LocateCommand // instanceof handles nulls","lastModifiedDate":"2017-10-28"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"                \u0026\u0026 this.targetIndex.equals(((LocateCommand) other).targetIndex)); // state check","lastModifiedDate":"2017-10-28"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"jeffreygohkw":54}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-07-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Redo the previously undone command.","lastModifiedDate":"2017-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class RedoCommand extends Command {","lastModifiedDate":"2017-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";","lastModifiedDate":"2017-07-13"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";","lastModifiedDate":"2017-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";","lastModifiedDate":"2017-07-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";","lastModifiedDate":"2017-07-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {","lastModifiedDate":"2017-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireAllNonNull(model, undoRedoStack);","lastModifiedDate":"2017-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (!undoRedoStack.canRedo()) {","lastModifiedDate":"2017-07-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2017-07-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        undoRedoStack.popRedo().redo();","lastModifiedDate":"2017-07-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2017-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {","lastModifiedDate":"2017-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2017-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-13"}],"authorContributionMap":{"wangyiming1019":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.EventsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book.","lastModifiedDate":"2016-09-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class SelectCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";","lastModifiedDate":"2017-10-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\"","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public SelectCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-09-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-02-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"wangyiming1019":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-09-30"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-11"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-11"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-09-30"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-09-30"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"/**","lastModifiedDate":"2017-09-30"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":" * Sorts all persons in address book by any field. Sorting can be done in ascending or descending order","lastModifiedDate":"2017-09-30"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" */","lastModifiedDate":"2017-09-30"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"public class SortCommand extends UndoableCommand {","lastModifiedDate":"2017-10-11"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2017-09-30"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";","lastModifiedDate":"2017-10-11"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    public static final ArrayList\u003cString\u003e ACCEPTED_FIELD_PARAMETERS \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2017-09-30"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"            \"name\", \"phone\", \"email\", \"address\"));","lastModifiedDate":"2017-09-30"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"    public static final ArrayList\u003cString\u003e ACCEPTED_ORDER_PARAMETERS \u003d new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2017-09-30"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"            \"asc\", \"desc\"));","lastModifiedDate":"2017-09-30"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all persons by chosen \"","lastModifiedDate":"2017-09-30"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"                + \"field [NAME/PHONE/EMAIL/ADDRESS] and by order [ASC/DESC]. Case insensitive\\n\"","lastModifiedDate":"2017-09-30"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"                + \"Parameters: KEYWORD [FIELD] [ORDER]\\n\"","lastModifiedDate":"2017-09-30"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"                + \"Example: \" + COMMAND_WORD + \" email desc\";","lastModifiedDate":"2017-09-30"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid Input.\\n\"","lastModifiedDate":"2017-09-30"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"            + \"Accepted Field Values: NAME, PHONE, EMAIL, ADDRESS \\n\"","lastModifiedDate":"2017-09-30"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"            + \"Accepted Order Values: ASC, DESC\";","lastModifiedDate":"2017-09-30"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All persons in address book successfully sorted\";","lastModifiedDate":"2017-09-30"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    private final String field;","lastModifiedDate":"2017-10-01"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    private final String order;","lastModifiedDate":"2017-10-01"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"    public SortCommand(String field, String order) {","lastModifiedDate":"2017-10-01"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"        this.field \u003d field;","lastModifiedDate":"2017-10-01"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        this.order \u003d order;","lastModifiedDate":"2017-10-01"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"    public String getField() {","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"        return this.field;","lastModifiedDate":"2017-10-01"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    public String getOrder() {","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"        return this.order;","lastModifiedDate":"2017-10-01"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-01"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    public CommandResult executeUndoableCommand() {","lastModifiedDate":"2017-10-11"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-10-11"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"        model.sortPersons(getField(), getOrder());","lastModifiedDate":"2017-10-01"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2017-10-01"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-09-30"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"}","lastModifiedDate":"2017-09-30"}],"authorContributionMap":{"charlesgoh":48,"jeffreygohkw":8}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-07-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Undo the previous {@code UndoableCommand}.","lastModifiedDate":"2017-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2017-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2017-07-13"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";","lastModifiedDate":"2017-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";","lastModifiedDate":"2017-07-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";","lastModifiedDate":"2017-07-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute() throws CommandException {","lastModifiedDate":"2017-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireAllNonNull(model, undoRedoStack);","lastModifiedDate":"2017-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (!undoRedoStack.canUndo()) {","lastModifiedDate":"2017-07-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2017-07-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        undoRedoStack.popUndo().undo();","lastModifiedDate":"2017-07-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2017-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {","lastModifiedDate":"2017-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2017-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-13"}],"authorContributionMap":{"wangyiming1019":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/UnfavouriteCommand.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * Unfavourites a person identified using it\u0027s last displayed index from the address book.","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class UnfavouriteCommand extends UndoableCommand {","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_WORD \u003d \"unfavourite\";","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    public static final String COMMAND_ALIAS \u003d \"unfav\";","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"            + \": Unfavourites the person identified by the index number used in the last person listing.\\n\"","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_UNFAVOURITE_PERSON_SUCCESS \u003d \"Unfavourited Person: %1$s\";","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String MESSAGE_NOTFAVOURITEYET_PERSON \u003d \"Person is not favourited yet.\";","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    public UnfavouriteCommand(Index targetIndex) {","lastModifiedDate":"2017-10-25"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2017-10-25"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {","lastModifiedDate":"2017-10-25"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2017-10-25"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToUnfavourite \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        if (personToUnfavourite.getFavourite().equals(false)) {","lastModifiedDate":"2017-10-25"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"            throw new CommandException(MESSAGE_NOTFAVOURITEYET_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-25"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"            model.unfavouritePerson(personToUnfavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-25"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"            assert false : \"The target person cannot be missing\";","lastModifiedDate":"2017-10-25"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        return new CommandResult(String.format(MESSAGE_UNFAVOURITE_PERSON_SUCCESS, personToUnfavourite));","lastModifiedDate":"2017-10-25"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-25"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-25"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof UnfavouriteCommand // instanceof handles nulls","lastModifiedDate":"2017-10-25"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.targetIndex.equals(((UnfavouriteCommand) other).targetIndex)); // state check","lastModifiedDate":"2017-10-25"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":63}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_PRIVATE;","lastModifiedDate":"2017-10-13"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_PRIVATE;","lastModifiedDate":"2017-10-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_PRIVATE;","lastModifiedDate":"2017-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_PRIVATE;","lastModifiedDate":"2017-10-13"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-22"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK_PRIVATE;","lastModifiedDate":"2017-10-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_PRIVATE;","lastModifiedDate":"2017-10-13"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-03-17"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-24"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;","lastModifiedDate":"2017-10-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK,","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"                        PREFIX_REMARK_PRIVATE, PREFIX_TAG, PREFIX_NAME_PRIVATE, PREFIX_PHONE_PRIVATE,","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"                        PREFIX_EMAIL_PRIVATE, PREFIX_ADDRESS_PRIVATE, PREFIX_TAG_PRIVATE, PREFIX_DEADLINE,","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"                        PREFIX_DESCRIPTION, PREFIX_PRIORITY, PREFIX_TASK);","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_TASK)) {","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyTask taskToAdd \u003d constructTask(args);","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            return new AddCommand(taskToAdd);","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson personToAdd \u003d constructPerson(args);","lastModifiedDate":"2017-10-24"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        return new AddCommand(personToAdd);","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-10-24"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-10-24"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-10-24"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-10-24"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"     * Constructs a ReadOnlyPerson from the arguments provided.","lastModifiedDate":"2017-10-24"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    private static ReadOnlyPerson constructPerson(String args) throws ParseException {","lastModifiedDate":"2017-10-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK,","lastModifiedDate":"2017-10-22"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"                        PREFIX_TAG, PREFIX_NAME_PRIVATE, PREFIX_PHONE_PRIVATE, PREFIX_EMAIL_PRIVATE,","lastModifiedDate":"2017-10-22"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"                        PREFIX_ADDRESS_PRIVATE, PREFIX_REMARK_PRIVATE, PREFIX_TAG_PRIVATE);","lastModifiedDate":"2017-10-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2017-10-13"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_NAME_PRIVATE)))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-13"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-13"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_PHONE)","lastModifiedDate":"2017-10-13"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_PHONE_PRIVATE)))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-13"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-13"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_EMAIL)","lastModifiedDate":"2017-10-13"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_EMAIL_PRIVATE)))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-13"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-13"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_ADDRESS)","lastModifiedDate":"2017-10-13"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_ADDRESS_PRIVATE)))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_REMARK)","lastModifiedDate":"2017-10-22"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_REMARK_PRIVATE)))) {","lastModifiedDate":"2017-10-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"            Name name;","lastModifiedDate":"2017-10-13"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"            Phone phone;","lastModifiedDate":"2017-10-13"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"            Email email;","lastModifiedDate":"2017-10-13"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"            Address address;","lastModifiedDate":"2017-10-13"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"            Remark remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"            if ((arePrefixesPresent(argMultimap, PREFIX_NAME))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();","lastModifiedDate":"2017-10-21"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-13"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME_PRIVATE), true).get();","lastModifiedDate":"2017-10-13"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"            if ((arePrefixesPresent(argMultimap, PREFIX_PHONE))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"                phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();","lastModifiedDate":"2017-10-21"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-13"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"                phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE_PRIVATE), true).get();","lastModifiedDate":"2017-10-13"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-13"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"            if ((arePrefixesPresent(argMultimap, PREFIX_EMAIL))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"                email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();","lastModifiedDate":"2017-10-21"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-13"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"                email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL_PRIVATE), true).get();","lastModifiedDate":"2017-10-13"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-13"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"            if ((arePrefixesPresent(argMultimap, PREFIX_ADDRESS))) {","lastModifiedDate":"2017-10-13"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"                address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();","lastModifiedDate":"2017-10-21"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-13"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"                address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS_PRIVATE), true).get();","lastModifiedDate":"2017-10-13"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"            if ((arePrefixesPresent(argMultimap, PREFIX_REMARK))) {","lastModifiedDate":"2017-10-22"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"                remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();","lastModifiedDate":"2017-10-22"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"            } else {","lastModifiedDate":"2017-10-22"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"                remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK_PRIVATE), true).get();","lastModifiedDate":"2017-10-22"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, false, remark, tagList);","lastModifiedDate":"2017-10-25"},{"lineNumber":146,"author":{"gitId":"Esilocke"},"content":"            return person;","lastModifiedDate":"2017-10-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-02-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);","lastModifiedDate":"2017-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":151,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":152,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":153,"author":{"gitId":"Esilocke"},"content":"     * Constructs a ReadOnlyPerson from the arguments provided.","lastModifiedDate":"2017-10-24"},{"lineNumber":154,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":155,"author":{"gitId":"Esilocke"},"content":"    private static ReadOnlyTask constructTask(String args) throws ParseException {","lastModifiedDate":"2017-10-24"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-10-24"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_PRIORITY);","lastModifiedDate":"2017-10-24"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME))) {","lastModifiedDate":"2017-10-24"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_TASK_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION))) {","lastModifiedDate":"2017-10-24"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_TASK_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_DEADLINE))) {","lastModifiedDate":"2017-10-24"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_TASK_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_PRIORITY))) {","lastModifiedDate":"2017-10-24"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_TASK_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-24"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"            TaskName name;","lastModifiedDate":"2017-10-24"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"            Description description;","lastModifiedDate":"2017-10-24"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"            Deadline deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"            Priority priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"            name \u003d ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME)).get();","lastModifiedDate":"2017-10-24"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)).get();","lastModifiedDate":"2017-10-24"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"            deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).get();","lastModifiedDate":"2017-10-24"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"            priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get();","lastModifiedDate":"2017-10-24"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"            ReadOnlyTask task \u003d new Task(name, description, deadline, priority);","lastModifiedDate":"2017-10-24"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"            return task;","lastModifiedDate":"2017-10-24"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-24"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(ive.getMessage(), ive);","lastModifiedDate":"2017-10-24"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"charlesgoh":18,"jeffreygohkw":48,"Esilocke":73,"wangyiming1019":1,"-":52}},{"path":"src/main/java/seedu/address/logic/parser/AddTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-16"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-16"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-10-16"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-16"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-16"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-16"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2017-10-16"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-16"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-16"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new AddTagCommand object","lastModifiedDate":"2017-10-16"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-16"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {","lastModifiedDate":"2017-10-16"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTagCommand","lastModifiedDate":"2017-10-16"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"     * and returns a AddTagCommand object for execution.","lastModifiedDate":"2017-10-16"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-16"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public AddTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-16"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-10-16"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-10-16"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-16"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"            String tagName \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");","lastModifiedDate":"2017-10-16"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            Tag toAdd \u003d new Tag(tagName);","lastModifiedDate":"2017-10-16"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"            String indexes \u003d argMultimap.getPreamble();","lastModifiedDate":"2017-10-16"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            if (indexes.trim().isEmpty()) {","lastModifiedDate":"2017-10-19"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"                return new AddTagCommand(toAdd);","lastModifiedDate":"2017-10-19"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-19"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"            ArrayList\u003cIndex\u003e indexList \u003d toArrayList(indexes);","lastModifiedDate":"2017-10-16"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"            return new AddTagCommand(toAdd, indexList);","lastModifiedDate":"2017-10-16"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-16"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(ive.getMessage(), ive);","lastModifiedDate":"2017-10-16"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an ArrayList of the indexes in the given {@code String}","lastModifiedDate":"2017-10-16"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    private static ArrayList\u003cIndex\u003e toArrayList(String indexes) throws IllegalValueException {","lastModifiedDate":"2017-10-16"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-16"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        String[] indexArray \u003d indexes.split(\" \");","lastModifiedDate":"2017-10-16"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        for (String s: indexArray) {","lastModifiedDate":"2017-10-16"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"            indexList.add(ParserUtil.parseIndex(s));","lastModifiedDate":"2017-10-16"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        return indexList;","lastModifiedDate":"2017-10-16"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-10-16"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-10-16"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-10-16"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-16"}],"authorContributionMap":{"Esilocke":4,"wangyiming1019":65}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2017-10-16"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.BackupCommand;","lastModifiedDate":"2017-10-18"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;","lastModifiedDate":"2017-10-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2017-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTagCommand;","lastModifiedDate":"2017-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteListCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;","lastModifiedDate":"2017-10-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;","lastModifiedDate":"2017-07-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2017-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2017-07-17"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        case AddCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        case AddTagCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-16"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        case AddTagCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-16"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"            return new AddTagCommandParser().parse(arguments);","lastModifiedDate":"2017-10-16"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        case ChangePrivacyCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-22"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        case ChangePrivacyCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-22"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"            return new ChangePrivacyCommandParser().parse(arguments);","lastModifiedDate":"2017-10-22"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        case EditCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        case EditTagCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-20"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        case EditTagCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-20"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"            return new EditTagCommandParser().parse(arguments);","lastModifiedDate":"2017-10-20"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        case SelectCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        case SelectCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new SelectCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        case LocateCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-28"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        case LocateCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-28"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"            return new LocateCommandParser().parse(arguments);","lastModifiedDate":"2017-10-28"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"        case DeleteCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        case DeleteTagCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-16"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        case DeleteTagCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-16"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"            return new DeleteTagCommandParser().parse(arguments);","lastModifiedDate":"2017-10-16"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"        case ClearCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommandParser().parse(arguments);","lastModifiedDate":"2017-10-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        case FindCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        case FindTagCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-29"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"        case FindTagCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-29"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"            return new FindTagCommandParser().parse(arguments);","lastModifiedDate":"2017-10-29"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-25"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-25"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"            return new FavouriteCommandParser().parse(arguments);","lastModifiedDate":"2017-10-25"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteListCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-25"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        case FavouriteListCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-25"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"            return new FavouriteListCommand();","lastModifiedDate":"2017-10-25"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        case UnfavouriteCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-25"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        case UnfavouriteCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-25"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"            return new UnfavouriteCommandParser().parse(arguments);","lastModifiedDate":"2017-10-25"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"        case ListCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        case HistoryCommand.COMMAND_WORD:","lastModifiedDate":"2017-05-24"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"        case HistoryCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return new HistoryCommand();","lastModifiedDate":"2017-05-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2017-07-17"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"        case UndoCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            return new UndoCommand();","lastModifiedDate":"2017-07-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        case RedoCommand.COMMAND_WORD:","lastModifiedDate":"2017-07-17"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":"        case RedoCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-03"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return new RedoCommand();","lastModifiedDate":"2017-07-17"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"        case SortCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-01"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"        case SortCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-18"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"            return new SortCommandParser().parse(arguments);","lastModifiedDate":"2017-10-01"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"        case BackupCommand.COMMAND_WORD:","lastModifiedDate":"2017-10-18"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"        case BackupCommand.COMMAND_ALIAS:","lastModifiedDate":"2017-10-18"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"            return new BackupCommandParser().parse(arguments);","lastModifiedDate":"2017-10-20"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":10,"jeffreygohkw":9,"Esilocke":6,"wangyiming1019":41,"-":91}},{"path":"src/main/java/seedu/address/logic/parser/BackupCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-20"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.BackupCommand;","lastModifiedDate":"2017-10-20"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-20"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"/**","lastModifiedDate":"2017-10-20"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":" * Parses arguments for backup command and returns a BackupCommand instance. Arguments should consist of only one","lastModifiedDate":"2017-10-20"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":" * filepath.","lastModifiedDate":"2017-10-20"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":" */","lastModifiedDate":"2017-10-20"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"public class BackupCommandParser implements Parser\u003cBackupCommand\u003e {","lastModifiedDate":"2017-10-20"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-20"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    public BackupCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2017-10-20"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d userInput.trim();","lastModifiedDate":"2017-10-20"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"        return new BackupCommand(trimmedArgs);","lastModifiedDate":"2017-10-20"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"}","lastModifiedDate":"2017-10-20"}],"authorContributionMap":{"charlesgoh":17}},{"path":"src/main/java/seedu/address/logic/parser/ChangePrivacyCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-22"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-22"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-22"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-10-22"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-10-22"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-10-22"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-10-22"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-22"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-22"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;","lastModifiedDate":"2017-10-22"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;","lastModifiedDate":"2017-10-22"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-22"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-22"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new ChangePrivacyCommand object","lastModifiedDate":"2017-10-22"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-22"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommandParser implements Parser\u003cChangePrivacyCommand\u003e {","lastModifiedDate":"2017-10-22"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-22"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-10-22"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-10-22"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-22"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public ChangePrivacyCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-22"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-10-22"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-10-22"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2017-10-28"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"                        PREFIX_REMARK);","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        Index index;","lastModifiedDate":"2017-10-22"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        try {","lastModifiedDate":"2017-10-22"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-10-22"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-22"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettings();","lastModifiedDate":"2017-10-22"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        checkName(argMultimap, pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        checkPhone(argMultimap, pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        checkEmail(argMultimap, pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        checkAddress(argMultimap, pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        checkRemark(argMultimap, pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        if (!pps.isAnyFieldNonNull()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(ChangePrivacyCommand.MESSAGE_NO_FIELDS);","lastModifiedDate":"2017-10-28"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        return new ChangePrivacyCommand(index, pps);","lastModifiedDate":"2017-10-28"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the name prefix and sets the PersonPrivacySettings depending on the input","lastModifiedDate":"2017-10-28"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command","lastModifiedDate":"2017-10-28"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify","lastModifiedDate":"2017-10-28"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkName(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {","lastModifiedDate":"2017-10-28"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2017-10-22"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_NAME).toString().equals(\"Optional[true]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setNameIsPrivate(true);","lastModifiedDate":"2017-10-22"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_NAME).toString().equals(\"Optional[false]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setNameIsPrivate(false);","lastModifiedDate":"2017-10-22"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-22"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-22"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-22"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the phone prefix and sets the PersonPrivacySettings depending on the input","lastModifiedDate":"2017-10-28"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command","lastModifiedDate":"2017-10-28"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify","lastModifiedDate":"2017-10-28"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false","lastModifiedDate":"2017-10-28"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkPhone(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {","lastModifiedDate":"2017-10-28"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2017-10-22"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_PHONE).toString().equals(\"Optional[true]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setPhoneIsPrivate(true);","lastModifiedDate":"2017-10-22"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_PHONE).toString().equals(\"Optional[false]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setPhoneIsPrivate(false);","lastModifiedDate":"2017-10-22"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-22"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-22"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-22"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the email prefix and sets the PersonPrivacySettings depending on the input","lastModifiedDate":"2017-10-28"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command","lastModifiedDate":"2017-10-28"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify","lastModifiedDate":"2017-10-28"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false","lastModifiedDate":"2017-10-28"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkEmail(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {","lastModifiedDate":"2017-10-28"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2017-10-22"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_EMAIL).toString().equals(\"Optional[true]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setEmailIsPrivate(true);","lastModifiedDate":"2017-10-22"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_EMAIL).toString().equals(\"Optional[false]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setEmailIsPrivate(false);","lastModifiedDate":"2017-10-22"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-22"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-22"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-22"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the address prefix and sets the PersonPrivacySettings depending on the input","lastModifiedDate":"2017-10-28"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command","lastModifiedDate":"2017-10-28"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify","lastModifiedDate":"2017-10-28"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false","lastModifiedDate":"2017-10-28"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkAddress(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {","lastModifiedDate":"2017-10-28"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2017-10-22"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_ADDRESS).toString().equals(\"Optional[true]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setAddressIsPrivate(true);","lastModifiedDate":"2017-10-22"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_ADDRESS).toString().equals(\"Optional[false]\")) {","lastModifiedDate":"2017-10-22"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setAddressIsPrivate(false);","lastModifiedDate":"2017-10-22"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-22"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-22"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-22"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks the input under the address prefix and sets the PersonPrivacySettings depending on the input","lastModifiedDate":"2017-10-28"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"     * @param argMultimap The input arguments of the Command","lastModifiedDate":"2017-10-28"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"     * @param pps The PersonPrivacySettings to modify","lastModifiedDate":"2017-10-28"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the input is neither true nor false","lastModifiedDate":"2017-10-28"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    private void checkRemark(ArgumentMultimap argMultimap, PersonPrivacySettings pps) throws ParseException {","lastModifiedDate":"2017-10-28"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"            if (argMultimap.getValue(PREFIX_REMARK).toString().equals(\"Optional[true]\")) {","lastModifiedDate":"2017-10-28"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setRemarkIsPrivate(true);","lastModifiedDate":"2017-10-28"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"            } else if (argMultimap.getValue(PREFIX_REMARK).toString().equals(\"Optional[false]\")) {","lastModifiedDate":"2017-10-28"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"                pps.setRemarkIsPrivate(false);","lastModifiedDate":"2017-10-28"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"            } else {","lastModifiedDate":"2017-10-28"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-28"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"                        ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-28"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-22"}],"authorContributionMap":{"jeffreygohkw":151}},{"path":"src/main/java/seedu/address/logic/parser/ClearCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-26"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-26"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-26"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-10-26"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-26"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"public class ClearCommandParser {","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments and returns a {@code ClearCommand}","lastModifiedDate":"2017-10-26"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * that either clears the {@code Person} list, the {@code Task} list, or both.","lastModifiedDate":"2017-10-26"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-26"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-26"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public ClearCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-26"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        if (args \u003d\u003d null || args.isEmpty()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommand();","lastModifiedDate":"2017-10-26"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_PERSON);","lastModifiedDate":"2017-10-26"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_PERSON).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TASK).isPresent()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommand();","lastModifiedDate":"2017-10-26"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_PERSON).isPresent()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommand(PREFIX_PERSON);","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        } else if (argMultimap.getValue(PREFIX_TASK).isPresent()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            return new ClearCommand(PREFIX_TASK);","lastModifiedDate":"2017-10-26"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-26"}],"authorContributionMap":{"Esilocke":37}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"person\");","lastModifiedDate":"2017-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");","lastModifiedDate":"2017-10-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_NAME_PRIVATE \u003d new Prefix(\"pn/\");","lastModifiedDate":"2017-10-13"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_PHONE_PRIVATE \u003d new Prefix(\"pp/\");","lastModifiedDate":"2017-10-13"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_EMAIL_PRIVATE \u003d new Prefix(\"pe/\");","lastModifiedDate":"2017-10-13"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_ADDRESS_PRIVATE \u003d new Prefix(\"pa/\");","lastModifiedDate":"2017-10-13"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    public static final Prefix PREFIX_REMARK_PRIVATE \u003d new Prefix(\"ra/\");","lastModifiedDate":"2017-10-22"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    public static final Prefix PREFIX_TAG_PRIVATE \u003d new Prefix(\"pt/\");","lastModifiedDate":"2017-10-13"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_TASK \u003d new Prefix(\"task\");","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"by/\");","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pr/\");","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"charlesgoh":2,"jeffreygohkw":6,"Esilocke":5,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-05-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns an DeleteCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK);","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            Index index;","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            if (argMultimap.getValue(PREFIX_TASK).isPresent()) {","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"                String filteredString \u003d args.replace(PREFIX_TASK.getPrefix(), \" \");","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                index \u003d ParserUtil.parseIndex(filteredString.trim());","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"                return new DeleteCommand(index, DeleteCommand.DELETE_TYPE_TASK);","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            } else {","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"                index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"                return new DeleteCommand(index, DeleteCommand.DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Esilocke":12,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-16"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-16"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-10-16"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-16"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-16"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-16"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2017-10-16"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-16"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-16"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new DeleteTagCommand object","lastModifiedDate":"2017-10-16"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-16"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {","lastModifiedDate":"2017-10-16"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand","lastModifiedDate":"2017-10-16"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"     * and returns a DeleteTagCommand object for execution.","lastModifiedDate":"2017-10-16"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-16"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public DeleteTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-16"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-10-16"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-10-16"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"            String indexes \u003d argMultimap.getPreamble();","lastModifiedDate":"2017-10-16"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"            String tagName \u003d argMultimap.getValue(PREFIX_TAG).orElse(\"\");","lastModifiedDate":"2017-10-16"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            Tag toDelete \u003d new Tag(tagName);","lastModifiedDate":"2017-10-16"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            if (indexes.trim().isEmpty()) {","lastModifiedDate":"2017-10-19"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"                return new DeleteTagCommand(toDelete);","lastModifiedDate":"2017-10-19"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-19"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            ArrayList\u003cIndex\u003e indexList \u003d convertToArrayList(indexes);","lastModifiedDate":"2017-10-19"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"            return new DeleteTagCommand(toDelete, indexList);","lastModifiedDate":"2017-10-16"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-16"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(ive.getMessage(), ive);","lastModifiedDate":"2017-10-16"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an ArrayList of the indexes in the given {@code String}","lastModifiedDate":"2017-10-16"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    private static ArrayList\u003cIndex\u003e convertToArrayList(String indexes) throws IllegalValueException {","lastModifiedDate":"2017-10-16"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-16"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        String[] indexArray \u003d indexes.split(\" \");","lastModifiedDate":"2017-10-16"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        for (String s: indexArray) {","lastModifiedDate":"2017-10-16"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"            indexList.add(ParserUtil.parseIndex(s));","lastModifiedDate":"2017-10-16"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        return indexList;","lastModifiedDate":"2017-10-16"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-10-16"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-10-16"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-10-16"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-16"}],"authorContributionMap":{"Esilocke":4,"wangyiming1019":62}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2017-10-26"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;","lastModifiedDate":"2017-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK);","lastModifiedDate":"2017-10-26"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        if (argMultimap.getValue(PREFIX_TASK).isPresent()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            return constructTaskDescriptor(args);","lastModifiedDate":"2017-10-26"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            return constructPersonDescriptor(args);","lastModifiedDate":"2017-10-26"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    /** Constructs a new EditCommand that edits a Person object. **/","lastModifiedDate":"2017-10-26"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    private EditCommand constructPersonDescriptor(String args) throws ParseException {","lastModifiedDate":"2017-10-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_REMARK,","lastModifiedDate":"2017-10-23"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"                            PREFIX_TAG);","lastModifiedDate":"2017-10-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-05-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);","lastModifiedDate":"2017-06-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);","lastModifiedDate":"2017-06-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);","lastModifiedDate":"2017-06-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);","lastModifiedDate":"2017-06-21"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).ifPresent(editPersonDescriptor::setRemark);","lastModifiedDate":"2017-10-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);","lastModifiedDate":"2017-03-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    /** Constructs a new EditCommand that edits a Task object. **/","lastModifiedDate":"2017-10-26"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    private EditCommand constructTaskDescriptor(String args) throws ParseException {","lastModifiedDate":"2017-10-26"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-10-26"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_NAME, PREFIX_DESCRIPTION,","lastModifiedDate":"2017-10-26"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"                        PREFIX_DEADLINE, PREFIX_PRIORITY);","lastModifiedDate":"2017-10-26"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        Index index;","lastModifiedDate":"2017-10-26"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-10-26"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-26"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_TASK_USAGE));","lastModifiedDate":"2017-10-26"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();","lastModifiedDate":"2017-10-26"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editTaskDescriptor::setTaskName);","lastModifiedDate":"2017-10-26"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION))","lastModifiedDate":"2017-10-26"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"                    .ifPresent(editTaskDescriptor::setDescription);","lastModifiedDate":"2017-10-26"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).ifPresent(editTaskDescriptor::setDeadline);","lastModifiedDate":"2017-10-26"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).ifPresent(editTaskDescriptor::setPriority);","lastModifiedDate":"2017-10-26"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-26"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(ive.getMessage(), ive);","lastModifiedDate":"2017-10-26"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        if (!editTaskDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-10-26"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        return new EditCommand(index, editTaskDescriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {","lastModifiedDate":"2017-03-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"charlesgoh":4,"Esilocke":47,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/EditTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-20"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-20"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-20"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_DUPLICATE_TAGS;","lastModifiedDate":"2017-10-20"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_INSUFFICIENT_ARGS;","lastModifiedDate":"2017-10-20"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_INVALID_TAG_NAME;","lastModifiedDate":"2017-10-20"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-20"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-20"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTagCommand;","lastModifiedDate":"2017-10-20"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-20"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-20"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"/** Parses input arguments and creates a new EditTagCommand object */","lastModifiedDate":"2017-10-20"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {","lastModifiedDate":"2017-10-20"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String EDITTAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}\\\\s]+[\\\\p{Alnum}]+\";","lastModifiedDate":"2017-10-20"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final int EXPECTED_NUMBER_OF_ARGS \u003d 2;","lastModifiedDate":"2017-10-20"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-20"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-10-20"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-10-20"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-20"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-20"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public EditTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-20"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-10-20"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cTag\u003e tags;","lastModifiedDate":"2017-10-20"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        String trimmed \u003d args.trim();","lastModifiedDate":"2017-10-20"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        if (!args.matches(EDITTAG_VALIDATION_REGEX)) {","lastModifiedDate":"2017-10-20"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-20"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-20"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            tags \u003d readTags(trimmed);","lastModifiedDate":"2017-10-20"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-20"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_INVALID_TAG_NAME);","lastModifiedDate":"2017-10-20"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        if (tags.size() !\u003d EXPECTED_NUMBER_OF_ARGS) {","lastModifiedDate":"2017-10-20"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_INSUFFICIENT_ARGS);","lastModifiedDate":"2017-10-20"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        Tag toChange \u003d tags.get(0);","lastModifiedDate":"2017-10-20"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        Tag newTag \u003d tags.get(1);","lastModifiedDate":"2017-10-20"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        if (toChange.equals(newTag)) {","lastModifiedDate":"2017-10-20"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            throw new ParseException(MESSAGE_DUPLICATE_TAGS);","lastModifiedDate":"2017-10-20"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        return new EditTagCommand(toChange, newTag);","lastModifiedDate":"2017-10-20"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    /** Atempts to read the string and parse it into a Tag set*/","lastModifiedDate":"2017-10-20"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    private ArrayList\u003cTag\u003e readTags(String args) throws IllegalValueException {","lastModifiedDate":"2017-10-20"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        String[] splittedArgs \u003d args.split(\"\\\\s+\");","lastModifiedDate":"2017-10-20"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-20"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        for (String s : splittedArgs) {","lastModifiedDate":"2017-10-20"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"            Tag newTag \u003d new Tag(s);","lastModifiedDate":"2017-10-20"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"            tagList.add(newTag);","lastModifiedDate":"2017-10-20"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        return tagList;","lastModifiedDate":"2017-10-20"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-20"}],"authorContributionMap":{"Esilocke":62}},{"path":"src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new FavouriteCommand object","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the FavouriteCommand","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"     * and returns an FavouriteCommand object for execution.","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    public FavouriteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"            return new FavouriteCommand(index);","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":29}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * and returns an FindCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK);","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        if (!argMultimap.getValue(PREFIX_TASK).isPresent()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-28"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            String argsWithNoTaskPrefix \u003d args.replaceFirst(PREFIX_TASK.getPrefix(), \"\");","lastModifiedDate":"2017-10-30"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            trimmedArgs \u003d argsWithNoTaskPrefix.trim();","lastModifiedDate":"2017-10-30"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-10-30"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"                throw new ParseException(","lastModifiedDate":"2017-10-28"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_TASK_USAGE));","lastModifiedDate":"2017-10-28"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-10-30"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            return new FindCommand(new TaskContainsKeywordPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-10-28"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Esilocke":14,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-29"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-29"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-29"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;","lastModifiedDate":"2017-10-29"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-29"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-29"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new FindTagCommand object","lastModifiedDate":"2017-10-29"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-29"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {","lastModifiedDate":"2017-10-29"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand","lastModifiedDate":"2017-10-29"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"     * and returns an FindTagCommand object for execution.","lastModifiedDate":"2017-10-29"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-29"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    public FindTagCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-29"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-10-29"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-10-29"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(","lastModifiedDate":"2017-10-29"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-29"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-10-29"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cString\u003e tagToFindList \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2017-10-29"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        for (String tagToFind : tagKeywords) {","lastModifiedDate":"2017-10-29"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"            tagToFindList.add(tagToFind);","lastModifiedDate":"2017-10-29"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        return new FindTagCommand(new NameContainsTagsPredicate(tagToFindList));","lastModifiedDate":"2017-10-29"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-29"}],"authorContributionMap":{"wangyiming1019":36}},{"path":"src/main/java/seedu/address/logic/parser/LocateCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":" * Parses input arguments and creates a new SelectCommand object","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommandParser implements Parser\u003cLocateCommand\u003e {","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"     * and returns an SelectCommand object for execution.","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    public LocateCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"        try {","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"            return new LocateCommand(index);","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"jeffreygohkw":29}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s","lastModifiedDate":"2017-07-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type.","lastModifiedDate":"2017-07-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and","lastModifiedDate":"2017-07-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the","lastModifiedDate":"2017-07-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an","lastModifiedDate":"2017-07-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods.","lastModifiedDate":"2017-07-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_NAME \u003d \"task\";","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2017-06-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present.","lastModifiedDate":"2017-10-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-10-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-10-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();","lastModifiedDate":"2017-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-14"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present.","lastModifiedDate":"2017-10-15"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean isPrivate) which will set the Name to be private if true.","lastModifiedDate":"2017-10-15"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-10-14"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-14"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-15"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-10-15"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get(), isPrivate)) : Optional.empty();","lastModifiedDate":"2017-10-15"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present.","lastModifiedDate":"2017-10-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-10-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {","lastModifiedDate":"2017-10-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-10-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();","lastModifiedDate":"2017-10-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-14"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present.","lastModifiedDate":"2017-10-15"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean isPrivate) which will set the Phone to be private if true.","lastModifiedDate":"2017-10-15"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-10-14"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-14"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-15"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-10-15"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get(), isPrivate)) : Optional.empty();","lastModifiedDate":"2017-10-15"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present.","lastModifiedDate":"2017-10-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-07-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {","lastModifiedDate":"2017-10-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-10-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();","lastModifiedDate":"2017-10-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present.","lastModifiedDate":"2017-10-15"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean isPrivate) which will set the Address to be private if true.","lastModifiedDate":"2017-10-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-07-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address, boolean isPrivate)","lastModifiedDate":"2017-10-15"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"            throws IllegalValueException {","lastModifiedDate":"2017-10-15"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-10-15"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get(), isPrivate)) : Optional.empty();","lastModifiedDate":"2017-10-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-22"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present.","lastModifiedDate":"2017-10-22"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-10-22"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) throws IllegalValueException {","lastModifiedDate":"2017-10-22"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(remark);","lastModifiedDate":"2017-10-22"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"        return remark.isPresent() ? Optional.of(new Remark(remark.get())) : Optional.empty();","lastModifiedDate":"2017-10-22"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-22"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present.","lastModifiedDate":"2017-10-22"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"     * Takes in a (@code boolean isPrivate) which will set the Remark to be private if true.","lastModifiedDate":"2017-10-22"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-10-22"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark, boolean isPrivate)","lastModifiedDate":"2017-10-22"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"            throws IllegalValueException {","lastModifiedDate":"2017-10-22"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"        requireNonNull(remark);","lastModifiedDate":"2017-10-22"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        return remark.isPresent() ? Optional.of(new Remark(remark.get(), isPrivate)) : Optional.empty();","lastModifiedDate":"2017-10-22"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present.","lastModifiedDate":"2017-10-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-07-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {","lastModifiedDate":"2017-10-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-10-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();","lastModifiedDate":"2017-10-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present.","lastModifiedDate":"2017-02-11"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"     * Takes in a (@code boolean isPrivate) which will set the Email to be private if true.","lastModifiedDate":"2017-10-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters.","lastModifiedDate":"2017-07-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get(), isPrivate)) : Optional.empty();","lastModifiedDate":"2017-10-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {","lastModifiedDate":"2017-03-07"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            tagSet.add(new Tag(tagName));","lastModifiedDate":"2017-02-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code TaskName} if it is present.","lastModifiedDate":"2017-10-24"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cTaskName\u003e parseTaskName(Optional\u003cString\u003e name) throws IllegalValueException {","lastModifiedDate":"2017-10-24"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-10-24"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"        return name.isPresent() ? Optional.of(new TaskName(name.get())) : Optional.empty();","lastModifiedDate":"2017-10-24"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code Description} if it is present.","lastModifiedDate":"2017-10-24"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {","lastModifiedDate":"2017-10-24"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(description);","lastModifiedDate":"2017-10-24"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"        return description.isPresent() ? Optional.of(new Description(description.get())) : Optional.empty();","lastModifiedDate":"2017-10-24"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code Deadline} if it is present.","lastModifiedDate":"2017-10-24"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cDeadline\u003e parseDeadline(Optional\u003cString\u003e deadline) throws IllegalValueException {","lastModifiedDate":"2017-10-24"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(deadline);","lastModifiedDate":"2017-10-24"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"        return deadline.isPresent() ? Optional.of(new Deadline(deadline.get())) : Optional.empty();","lastModifiedDate":"2017-10-24"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"     * Parses a string into a {@code Priority} if it is present.","lastModifiedDate":"2017-10-24"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"    public static Optional\u003cPriority\u003e parsePriority(Optional\u003cString\u003e priority) throws IllegalValueException {","lastModifiedDate":"2017-10-24"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(priority);","lastModifiedDate":"2017-10-24"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"        return priority.isPresent() ? Optional.of(new Priority(priority.get())) : Optional.empty();","lastModifiedDate":"2017-10-24"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"charlesgoh":23,"jeffreygohkw":29,"Esilocke":39,"-":104}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-01"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-01"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_INVALID_INPUT;","lastModifiedDate":"2017-10-01"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2017-10-04"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-04"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"/**","lastModifiedDate":"2017-10-04"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":" * Parses input arguments and creates a new SortCommand object based on the field and order parameters provided","lastModifiedDate":"2017-10-04"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":" */","lastModifiedDate":"2017-10-04"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {","lastModifiedDate":"2017-10-01"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"    public static final int FIELD_ARG_POSITION \u003d 0;","lastModifiedDate":"2017-10-01"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"    public static final int ORDER_ARG_POSITION \u003d 1;","lastModifiedDate":"2017-10-01"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-01"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand","lastModifiedDate":"2017-10-01"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"     * and returns a SortCommand object for execution.","lastModifiedDate":"2017-10-01"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-01"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-01"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"    public SortCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-01"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-10-01"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-10-01"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-01"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-01"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"        // Converts arg arrays to lower case to account for caps entries","lastModifiedDate":"2017-10-01"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        String[] argKeywords \u003d trimmedArgs.split(\"\\\\s\");","lastModifiedDate":"2017-10-01"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"        for (int i \u003d 0; i \u003c argKeywords.length; i++) {","lastModifiedDate":"2017-10-01"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"            argKeywords[i] \u003d argKeywords[i].toLowerCase();","lastModifiedDate":"2017-10-01"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-01"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        if (argKeywords.length !\u003d 2) {","lastModifiedDate":"2017-10-12"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-12"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"        if (!SortCommand.ACCEPTED_FIELD_PARAMETERS.contains(argKeywords[FIELD_ARG_POSITION])","lastModifiedDate":"2017-10-01"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"                    || !SortCommand.ACCEPTED_ORDER_PARAMETERS.contains(argKeywords[ORDER_ARG_POSITION])) {","lastModifiedDate":"2017-10-01"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INPUT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-01"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-01"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"        // If there are no problems with the input, return a new instance of SortCommand","lastModifiedDate":"2017-10-01"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"        return new SortCommand(argKeywords[FIELD_ARG_POSITION], argKeywords[ORDER_ARG_POSITION]);","lastModifiedDate":"2017-10-01"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"}","lastModifiedDate":"2017-10-01"}],"authorContributionMap":{"charlesgoh":44,"jeffreygohkw":4}},{"path":"src/main/java/seedu/address/logic/parser/UnfavouriteCommandParser.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":" * Parses input arguments and creates a new UnfavouriteCommand object","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"     * and returns an UnfavouriteCommand object for execution.","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    public UnfavouriteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"            return new UnfavouriteCommand(index);","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"            throw new ParseException(","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":29}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2017-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-23"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.UniqueTaskList;","lastModifiedDate":"2017-10-26"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .equals comparison)","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final UniqueTagList tags;","lastModifiedDate":"2016-08-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private final UniqueTaskList tasks;","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tags \u003d new UniqueTagList();","lastModifiedDate":"2016-08-26"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        tasks \u003d new UniqueTaskList();","lastModifiedDate":"2017-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}","lastModifiedDate":"2016-12-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {","lastModifiedDate":"2017-06-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags.setTags(tags);","lastModifiedDate":"2016-10-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    public void setTasks(List\u003c? extends ReadOnlyTask\u003e tasks) throws DuplicateTaskException {","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        this.tasks.setTasks(tasks);","lastModifiedDate":"2017-10-26"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            setPersons(newData.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            setTasks(newData.getTasksList());","lastModifiedDate":"2017-10-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {","lastModifiedDate":"2017-06-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException e) {","lastModifiedDate":"2017-10-28"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            assert false : \"AddressBooks should not have duplicate tasks\";","lastModifiedDate":"2017-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        syncMasterTagListWith(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"     * Resets only the existing contact or task data of this {@code AddressBook}.","lastModifiedDate":"2017-10-26"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    public void resetPartialData(ReadOnlyAddressBook newData, Prefix type) {","lastModifiedDate":"2017-10-26"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-10-26"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(type);","lastModifiedDate":"2017-10-26"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"            if (type.equals(PREFIX_TASK)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"                setTasks(newData.getTasksList());","lastModifiedDate":"2017-10-26"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"            } else if (type.equals(PREFIX_PERSON)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"                setPersons(newData.getPersonList());","lastModifiedDate":"2017-10-26"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"                setTags(new HashSet\u003c\u003e(newData.getTagList()));","lastModifiedDate":"2017-10-26"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"                syncMasterTagListWith(persons);","lastModifiedDate":"2017-10-26"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"                throw new AssertionError(\"Type must either be persons or tasks\");","lastModifiedDate":"2017-10-26"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-26"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicatePersonException e) {","lastModifiedDate":"2017-10-26"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"            assert false : \"Address books should not have duplicate persons\";","lastModifiedDate":"2017-10-26"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        } catch (DuplicateTaskException e) {","lastModifiedDate":"2017-10-26"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"            assert false : \"Address books should not have duplicate tasks\";","lastModifiedDate":"2017-10-26"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}.","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists.","lastModifiedDate":"2017-06-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {","lastModifiedDate":"2017-06-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Person newPerson \u003d new Person(p);","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        syncMasterTagListWith(newPerson);","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails.","lastModifiedDate":"2017-09-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person","lastModifiedDate":"2017-09-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // in the person list.","lastModifiedDate":"2017-09-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        persons.add(newPerson);","lastModifiedDate":"2017-03-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}.","lastModifiedDate":"2016-12-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-12-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to","lastModifiedDate":"2016-12-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     *      another existing person in the list.","lastModifiedDate":"2016-12-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list.","lastModifiedDate":"2017-06-07"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-04-07"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #syncMasterTagListWith(Person)","lastModifiedDate":"2017-04-07"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)","lastModifiedDate":"2017-06-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {","lastModifiedDate":"2017-06-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        requireNonNull(editedReadOnlyPerson);","lastModifiedDate":"2017-05-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);","lastModifiedDate":"2016-12-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        syncMasterTagListWith(editedPerson);","lastModifiedDate":"2016-12-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails.","lastModifiedDate":"2016-12-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person","lastModifiedDate":"2016-12-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // in the person list.","lastModifiedDate":"2016-12-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2017-08-07"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-01"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":"     * Sorts persons in person list by any field, in either ascending or descending order","lastModifiedDate":"2017-10-01"},{"lineNumber":160,"author":{"gitId":"charlesgoh"},"content":"     *","lastModifiedDate":"2017-10-01"},{"lineNumber":161,"author":{"gitId":"charlesgoh"},"content":"     * @param field","lastModifiedDate":"2017-10-01"},{"lineNumber":162,"author":{"gitId":"charlesgoh"},"content":"     * @param order","lastModifiedDate":"2017-10-01"},{"lineNumber":163,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-01"},{"lineNumber":164,"author":{"gitId":"charlesgoh"},"content":"    public void sortPersonsBy(String field, String order) {","lastModifiedDate":"2017-10-01"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"        persons.sortBy(field, order);","lastModifiedDate":"2017-10-01"},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":168,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":169,"author":{"gitId":"wangyiming1019"},"content":"     * Favourites the given person {@code target} to this {@code AddressBook}.","lastModifiedDate":"2017-10-25"},{"lineNumber":170,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if the {@code target} is not in this {@code AddressBook}.","lastModifiedDate":"2017-10-25"},{"lineNumber":171,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":172,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":173,"author":{"gitId":"wangyiming1019"},"content":"        persons.favouritePerson(target);","lastModifiedDate":"2017-10-25"},{"lineNumber":174,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":175,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":176,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":177,"author":{"gitId":"wangyiming1019"},"content":"     * Unfavourites the given person {@code target} from this {@code AddressBook}.","lastModifiedDate":"2017-10-25"},{"lineNumber":178,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if the {@code target} is not in this {@code AddressBook}.","lastModifiedDate":"2017-10-25"},{"lineNumber":179,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":180,"author":{"gitId":"wangyiming1019"},"content":"    public void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":181,"author":{"gitId":"wangyiming1019"},"content":"        persons.unfavouritePerson(target);","lastModifiedDate":"2017-10-25"},{"lineNumber":182,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":183,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Ensures that every tag in this person:","lastModifiedDate":"2016-09-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     *  - exists in the master list {@link #tags}","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     *  - points to a Tag object in the master list","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private void syncMasterTagListWith(Person person) {","lastModifiedDate":"2016-10-19"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());","lastModifiedDate":"2017-03-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        tags.mergeFrom(personTags);","lastModifiedDate":"2016-09-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // Create map with values \u003d tag object references in the master list","lastModifiedDate":"2016-09-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // used for checking person tag references","lastModifiedDate":"2016-10-19"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-09-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));","lastModifiedDate":"2016-10-19"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list.","lastModifiedDate":"2016-10-19"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2016-10-19"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));","lastModifiedDate":"2016-10-19"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        person.setTags(correctTagReferences);","lastModifiedDate":"2017-03-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * Ensures that every tag in these persons:","lastModifiedDate":"2016-10-19"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     *  - exists in the master list {@link #tags}","lastModifiedDate":"2016-10-19"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     *  - points to a Tag object in the master list","lastModifiedDate":"2016-10-19"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     *  @see #syncMasterTagListWith(Person)","lastModifiedDate":"2016-10-19"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {","lastModifiedDate":"2016-10-19"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);","lastModifiedDate":"2016-10-19"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {","lastModifiedDate":"2017-06-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        if (persons.remove(key)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-08-24"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2016-08-24"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    //// tag-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {","lastModifiedDate":"2016-08-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        tags.add(t);","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"    //// task-level operations","lastModifiedDate":"2017-10-24"},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":"     * Adds a task to the address book.","lastModifiedDate":"2017-10-24"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-24"},{"lineNumber":238,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if an equivalent task already exists.","lastModifiedDate":"2017-10-24"},{"lineNumber":239,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"    public void addTask(ReadOnlyTask t) throws DuplicateTaskException {","lastModifiedDate":"2017-10-24"},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":"        Task newTask \u003d new Task(t);","lastModifiedDate":"2017-10-24"},{"lineNumber":242,"author":{"gitId":"Esilocke"},"content":"        tasks.add(newTask);","lastModifiedDate":"2017-10-24"},{"lineNumber":243,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":245,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":246,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-10-24"},{"lineNumber":248,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if the {@code key} is not in this {@code AddressBook}.","lastModifiedDate":"2017-10-24"},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"    public boolean removeTask(ReadOnlyTask key) throws TaskNotFoundException {","lastModifiedDate":"2017-10-24"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"        if (tasks.remove(key)) {","lastModifiedDate":"2017-10-24"},{"lineNumber":252,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-24"},{"lineNumber":253,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-24"},{"lineNumber":254,"author":{"gitId":"Esilocke"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2017-10-24"},{"lineNumber":255,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":256,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"     * Replaces the given task {@code target} in the list with {@code editedReadOnlyTask}.","lastModifiedDate":"2017-10-26"},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-26"},{"lineNumber":262,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to","lastModifiedDate":"2017-10-26"},{"lineNumber":263,"author":{"gitId":"Esilocke"},"content":"     *      another existing task in the list.","lastModifiedDate":"2017-10-26"},{"lineNumber":264,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list.","lastModifiedDate":"2017-10-26"},{"lineNumber":265,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":266,"author":{"gitId":"Esilocke"},"content":"    public void updateTask(ReadOnlyTask target, ReadOnlyTask editedReadOnlyTask)","lastModifiedDate":"2017-10-26"},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException {","lastModifiedDate":"2017-10-26"},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editedReadOnlyTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":270,"author":{"gitId":"Esilocke"},"content":"        Task editedTask \u003d new Task(editedReadOnlyTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":"        tasks.setTask(target, editedTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":272,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"Esilocke"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\"","lastModifiedDate":"2017-10-30"},{"lineNumber":278,"author":{"gitId":"Esilocke"},"content":"                + tasks.asObservableList().size() +  \" tasks\";","lastModifiedDate":"2017-10-30"},{"lineNumber":279,"author":{"gitId":"Esilocke"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {","lastModifiedDate":"2016-12-24"},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":"        return persons.asObservableList();","lastModifiedDate":"2017-09-01"},{"lineNumber":285,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":286,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":287,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":288,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":289,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getTasksList() {","lastModifiedDate":"2017-10-23"},{"lineNumber":290,"author":{"gitId":"Esilocke"},"content":"        return tasks.asObservableList();","lastModifiedDate":"2017-10-23"},{"lineNumber":291,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":292,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-01"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {","lastModifiedDate":"2016-12-24"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        return tags.asObservableList();","lastModifiedDate":"2017-09-01"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2016-09-21"},{"lineNumber":304,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))","lastModifiedDate":"2017-10-30"},{"lineNumber":305,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks);","lastModifiedDate":"2017-10-30"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-09-21"},{"lineNumber":311,"author":{"gitId":"Esilocke"},"content":"        return Objects.hash(persons, tags, tasks);","lastModifiedDate":"2017-10-30"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"charlesgoh":10,"Esilocke":105,"wangyiming1019":16,"-":182}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-16"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2017-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-23"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-10-26"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    Predicate\u003cReadOnlyTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;","lastModifiedDate":"2017-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    /** Clears only part of the existing backing model and replaces with the provided new data. */","lastModifiedDate":"2017-10-26"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    void resetPartialData(ReadOnlyAddressBook newData, Prefix type);","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Deletes the given person. */","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    /** Deletes given tag from specific persons */","lastModifiedDate":"2017-10-16"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    void deleteTag(Tag toDelete, ArrayList\u003cIndex\u003e targetIndexes) throws PersonNotFoundException,","lastModifiedDate":"2017-10-16"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException;","lastModifiedDate":"2017-10-16"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /** Adds the given person */","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    /** Adds given tag to specific persons */","lastModifiedDate":"2017-10-16"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    void addTag(Tag toAdd, ArrayList\u003cIndex\u003e targetIndexes) throws PersonNotFoundException,","lastModifiedDate":"2017-10-16"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException;","lastModifiedDate":"2017-10-16"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    /** Edits the specified tag, and updates all instances in the address book */","lastModifiedDate":"2017-10-19"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    void editTag(Tag toChange, Tag newTag, ArrayList\u003cIndex\u003e affectedIndexes) throws PersonNotFoundException,","lastModifiedDate":"2017-10-19"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            DuplicatePersonException;","lastModifiedDate":"2017-10-19"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    /** Favourites the given person */","lastModifiedDate":"2017-10-25"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"    void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException;","lastModifiedDate":"2017-10-25"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    /** Unfavourites the given person */","lastModifiedDate":"2017-10-25"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException;","lastModifiedDate":"2017-10-25"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-12-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to","lastModifiedDate":"2016-12-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *      another existing person in the list.","lastModifiedDate":"2016-12-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list.","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)","lastModifiedDate":"2017-06-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    /** Adds the given task */","lastModifiedDate":"2017-10-23"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    void addTask(ReadOnlyTask task) throws DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    /** Deletes the given task */","lastModifiedDate":"2017-10-23"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    void deleteTask(ReadOnlyTask toDelete) throws TaskNotFoundException;","lastModifiedDate":"2017-10-23"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"     * Replaces the given task {@code target} with {@code editedTask}.","lastModifiedDate":"2017-10-26"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-26"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to","lastModifiedDate":"2017-10-26"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"     *      another existing task in the list.","lastModifiedDate":"2017-10-26"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list.","lastModifiedDate":"2017-10-26"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"    void updateTask(ReadOnlyTask target, ReadOnlyTask editedTask)","lastModifiedDate":"2017-10-26"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException;","lastModifiedDate":"2017-10-26"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    /** Returns an unmodifiable view of the filtered tasks list */","lastModifiedDate":"2017-10-23"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList();","lastModifiedDate":"2017-10-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}.","lastModifiedDate":"2017-10-26"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-10-26"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    void updateFilteredTaskList(Predicate\u003cReadOnlyTask\u003e predicate);","lastModifiedDate":"2017-10-26"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-01"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"     * Sorts all persons in person list by field in ascending (asc) or descending (desc) order","lastModifiedDate":"2017-10-01"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"     * @param field","lastModifiedDate":"2017-10-01"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"     * @param order","lastModifiedDate":"2017-10-01"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-01"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"    void sortPersons(String field, String order);","lastModifiedDate":"2017-10-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"charlesgoh":6,"Esilocke":36,"wangyiming1019":18,"-":49}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import java.util.List;","lastModifiedDate":"2017-10-19"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Set;","lastModifiedDate":"2017-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;","lastModifiedDate":"2017-01-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;","lastModifiedDate":"2017-01-19"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2017-10-26"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsFavouritePredicate;","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-23"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * All changes to any model should be synchronized.","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class ModelManager extends ComponentManager implements Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    private final FilteredList\u003cReadOnlyTask\u003e filteredTasks;","lastModifiedDate":"2017-10-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTasksList());","lastModifiedDate":"2017-10-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2016-09-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public void resetPartialData(ReadOnlyAddressBook newData, Prefix type) {","lastModifiedDate":"2017-10-26"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        assert(type.equals(PREFIX_TASK) || type.equals(PREFIX_PERSON));","lastModifiedDate":"2017-10-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        if (type.equals(PREFIX_TASK)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"            addressBook.resetPartialData(newData, PREFIX_TASK);","lastModifiedDate":"2017-10-26"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"            indicateAddressBookChanged();","lastModifiedDate":"2017-10-26"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-26"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"            addressBook.resetPartialData(newData, PREFIX_PERSON);","lastModifiedDate":"2017-10-26"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"            indicateAddressBookChanged();","lastModifiedDate":"2017-10-26"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /** Raises an event to indicate the model has changed */","lastModifiedDate":"2016-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void indicateAddressBookChanged() {","lastModifiedDate":"2016-09-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));","lastModifiedDate":"2016-09-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2016-08-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2016-09-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"     * Delete input tag from the specific persons shown in the last list.","lastModifiedDate":"2017-10-16"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"    public synchronized void deleteTag(Tag toDelete, ArrayList\u003cIndex\u003e personIndexes) throws PersonNotFoundException,","lastModifiedDate":"2017-10-16"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException {","lastModifiedDate":"2017-10-16"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c personIndexes.size(); i++) {","lastModifiedDate":"2017-10-16"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"            int index \u003d personIndexes.get(i).getZeroBased();","lastModifiedDate":"2017-10-16"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson personWithTag \u003d this.getFilteredPersonList().get(index);","lastModifiedDate":"2017-10-16"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"            Person personWithoutTag \u003d new Person(personWithTag);","lastModifiedDate":"2017-10-16"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(personWithoutTag.getTags());","lastModifiedDate":"2017-10-16"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"            newTags.remove(toDelete);","lastModifiedDate":"2017-10-16"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"            personWithoutTag.setTags(newTags);","lastModifiedDate":"2017-10-16"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"            addressBook.updatePerson(personWithTag, personWithoutTag);","lastModifiedDate":"2017-10-16"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"            indicateAddressBookChanged();","lastModifiedDate":"2017-10-16"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {","lastModifiedDate":"2017-06-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2016-09-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"     * Adds input tag to the specific persons shown in the last list.","lastModifiedDate":"2017-10-16"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"    public synchronized void addTag(Tag toAdd, ArrayList\u003cIndex\u003e personIndexes) throws PersonNotFoundException,","lastModifiedDate":"2017-10-16"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"            DuplicatePersonException {","lastModifiedDate":"2017-10-16"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"        for (int i \u003d 0; i \u003c personIndexes.size(); i++) {","lastModifiedDate":"2017-10-16"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"            int index \u003d personIndexes.get(i).getZeroBased();","lastModifiedDate":"2017-10-16"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"            ReadOnlyPerson personWithoutTag \u003d this.getFilteredPersonList().get(index);","lastModifiedDate":"2017-10-16"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"            Person personWithTag \u003d new Person(personWithoutTag);","lastModifiedDate":"2017-10-16"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(personWithTag.getTags());","lastModifiedDate":"2017-10-16"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"            newTags.add(toAdd);","lastModifiedDate":"2017-10-16"},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"            personWithTag.setTags(newTags);","lastModifiedDate":"2017-10-16"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"            addressBook.updatePerson(personWithoutTag, personWithTag);","lastModifiedDate":"2017-10-16"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"            indicateAddressBookChanged();","lastModifiedDate":"2017-10-16"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)","lastModifiedDate":"2017-06-07"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {","lastModifiedDate":"2017-06-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        addressBook.updatePerson(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2016-12-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-01"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"    public void sortPersons(String field, String order) {","lastModifiedDate":"2017-10-01"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"        addressBook.sortPersonsBy(field, order);","lastModifiedDate":"2017-10-01"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-01"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":156,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":157,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-19"},{"lineNumber":158,"author":{"gitId":"Esilocke"},"content":"     * Replaces the toChange Tag with the newTag Tag, for all Person objects denoted by the indexes.","lastModifiedDate":"2017-10-19"},{"lineNumber":159,"author":{"gitId":"Esilocke"},"content":"     * Guarantees: indexes contains at least 1 person that has the toChange Tag.","lastModifiedDate":"2017-10-19"},{"lineNumber":160,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-19"},{"lineNumber":161,"author":{"gitId":"Esilocke"},"content":"    public synchronized void editTag(Tag toChange, Tag newTag, ArrayList\u003cIndex\u003e indexes)","lastModifiedDate":"2017-10-19"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"            throws PersonNotFoundException, DuplicatePersonException {","lastModifiedDate":"2017-10-19"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"        List\u003cReadOnlyPerson\u003e allPersons \u003d this.getFilteredPersonList();","lastModifiedDate":"2017-10-19"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"        Set\u003cTag\u003e personTags;","lastModifiedDate":"2017-10-19"},{"lineNumber":165,"author":{"gitId":"Esilocke"},"content":"        Person toUpdate;","lastModifiedDate":"2017-10-19"},{"lineNumber":166,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson toRead;","lastModifiedDate":"2017-10-19"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"        int index;","lastModifiedDate":"2017-10-19"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"        for (Index i : indexes) {","lastModifiedDate":"2017-10-19"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"            index \u003d i.getZeroBased();","lastModifiedDate":"2017-10-19"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"            toRead \u003d allPersons.get(index);","lastModifiedDate":"2017-10-19"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"            toUpdate \u003d new Person(toRead);","lastModifiedDate":"2017-10-19"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"            personTags \u003d new HashSet\u003c\u003e(toRead.getTags());","lastModifiedDate":"2017-10-20"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"            personTags.remove(toChange);","lastModifiedDate":"2017-10-19"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"            personTags.add(newTag);","lastModifiedDate":"2017-10-19"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"            toUpdate.setTags(personTags);","lastModifiedDate":"2017-10-19"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"            addressBook.updatePerson(toRead, toUpdate);","lastModifiedDate":"2017-10-19"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-19"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-19"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":182,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":183,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":184,"author":{"gitId":"wangyiming1019"},"content":"        addressBook.favouritePerson(target);","lastModifiedDate":"2017-10-25"},{"lineNumber":185,"author":{"gitId":"wangyiming1019"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-25"},{"lineNumber":186,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":187,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"    public void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-10-30"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"        addressBook.unfavouritePerson(target);","lastModifiedDate":"2017-10-30"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"        updateFilteredPersonList(new NameContainsFavouritePredicate());","lastModifiedDate":"2017-10-30"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-23"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":197,"author":{"gitId":"Esilocke"},"content":"    public synchronized void addTask(ReadOnlyTask toAdd) throws DuplicateTaskException {","lastModifiedDate":"2017-10-30"},{"lineNumber":198,"author":{"gitId":"Esilocke"},"content":"        addressBook.addTask(toAdd);","lastModifiedDate":"2017-10-30"},{"lineNumber":199,"author":{"gitId":"Esilocke"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2017-10-30"},{"lineNumber":200,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-25"},{"lineNumber":201,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":202,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":203,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":204,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":205,"author":{"gitId":"Esilocke"},"content":"    public synchronized void deleteTask(ReadOnlyTask toDelete) throws TaskNotFoundException {","lastModifiedDate":"2017-10-23"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"        addressBook.removeTask(toDelete);","lastModifiedDate":"2017-10-24"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-23"},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"    public void updateTask(ReadOnlyTask target, ReadOnlyTask editedTask)","lastModifiedDate":"2017-10-26"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException {","lastModifiedDate":"2017-10-26"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"        requireAllNonNull(target, editedTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":215,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":216,"author":{"gitId":"Esilocke"},"content":"        addressBook.updateTask(target, editedTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":217,"author":{"gitId":"Esilocke"},"content":"        indicateAddressBookChanged();","lastModifiedDate":"2017-10-26"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of","lastModifiedDate":"2017-09-01"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * {@code addressBook}","lastModifiedDate":"2017-09-01"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2017-09-01"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);","lastModifiedDate":"2017-09-01"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList() {","lastModifiedDate":"2017-10-23"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);","lastModifiedDate":"2017-10-23"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":245,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":246,"author":{"gitId":"Esilocke"},"content":"    public void updateFilteredTaskList(Predicate\u003cReadOnlyTask\u003e predicate) {","lastModifiedDate":"2017-10-26"},{"lineNumber":247,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-10-26"},{"lineNumber":248,"author":{"gitId":"Esilocke"},"content":"        filteredTasks.setPredicate(predicate);","lastModifiedDate":"2017-10-26"},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":250,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2017-05-31"},{"lineNumber":267,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2017-10-30"},{"lineNumber":268,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks);","lastModifiedDate":"2017-10-30"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"charlesgoh":6,"Esilocke":98,"wangyiming1019":49,"-":118}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2016-09-28"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonList();","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the tags list.","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate tags.","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * Returns an unmodifiable view of the tasks list.","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    ObservableList\u003cReadOnlyTask\u003e getTasksList();","lastModifiedDate":"2017-10-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Esilocke":5,"-":24}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String ADDRESS_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Validates given address.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given address string is invalid.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Address(String address) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2017-10-03"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d ADDRESS_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-03"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-03"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!isValidAddress(address)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.value \u003d address;","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"    public Address(String address, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        this(address);","lastModifiedDate":"2017-10-14"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);","lastModifiedDate":"2017-10-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person email.","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(ADDRESS_PLACEHOLDER_VALUE);","lastModifiedDate":"2017-10-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        if (isPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"            return \"\u003cPrivate Address\u003e\";","lastModifiedDate":"2017-10-16"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean isPrivate() {","lastModifiedDate":"2017-10-13"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {","lastModifiedDate":"2017-10-13"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jeffreygohkw":14,"Esilocke":6,"-":59}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String EMAIL_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Validates given email.","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given email address string is invalid.","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Email(String email) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2017-10-03"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d EMAIL_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-03"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-03"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (!isValidEmail(trimmedEmail)) {","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.value \u003d trimmedEmail;","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    public Email(String email, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        this(email);","lastModifiedDate":"2017-10-14"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);","lastModifiedDate":"2017-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid person email.","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX) || test.equals(EMAIL_PLACEHOLDER_VALUE);","lastModifiedDate":"2017-10-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        if (isPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"            return \"\u003cPrivate Email\u003e\";","lastModifiedDate":"2017-10-16"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean isPrivate() {","lastModifiedDate":"2017-10-13"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {","lastModifiedDate":"2017-10-13"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jeffreygohkw":14,"Esilocke":6,"-":55}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Validates given name.","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given name string is invalid.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Name(String name) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!isValidName(trimmedName)) {","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.fullName \u003d trimmedName;","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    public Name(String name, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        this(name);","lastModifiedDate":"2017-10-14"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);","lastModifiedDate":"2017-10-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person name.","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        if (isPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"            return \"\u003cPrivate Name\u003e\";","lastModifiedDate":"2017-10-16"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean isPrivate() {","lastModifiedDate":"2017-10-13"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {","lastModifiedDate":"2017-10-13"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jeffreygohkw":14,"-":65}},{"path":"src/main/java/seedu/address/model/person/NameContainsFavouritePredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} are favoured.","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"public class NameContainsFavouritePredicate implements Predicate\u003cReadOnlyPerson\u003e {","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"    public NameContainsFavouritePredicate() {","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    public boolean test(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"        return person.getFavourite();","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof NameContainsFavouritePredicate); // instanceof handles nulls","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":23}},{"path":"src/main/java/seedu/address/model/person/NameContainsTagsPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-10-29"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-29"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;","lastModifiedDate":"2017-10-29"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Set;","lastModifiedDate":"2017-10-29"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-10-29"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-29"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-29"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches any of the tags given.","lastModifiedDate":"2017-10-29"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-29"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class NameContainsTagsPredicate implements Predicate\u003cReadOnlyPerson\u003e {","lastModifiedDate":"2017-10-29"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"    private final List\u003cString\u003e tags;","lastModifiedDate":"2017-10-29"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    public NameContainsTagsPredicate(List\u003cString\u003e tags) {","lastModifiedDate":"2017-10-29"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"        this.tags \u003d tags;","lastModifiedDate":"2017-10-29"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-29"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public boolean test(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-29"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        String allTagString \u003d convertTagToString(person);","lastModifiedDate":"2017-10-30"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        final List\u003cString\u003e wantedTag \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-29"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        final List\u003cString\u003e unwantedTag \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-29"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        updateWantedTagUnwantedTag(wantedTag, unwantedTag);","lastModifiedDate":"2017-10-29"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        boolean isOnlyUnwantedTags \u003d isOnlyUnwantedTagsCheck(wantedTag, unwantedTag);","lastModifiedDate":"2017-10-29"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        if (isOnlyUnwantedTags) {","lastModifiedDate":"2017-10-29"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"            return !(unwantedTag.stream()","lastModifiedDate":"2017-10-29"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"                    .anyMatch((inputTag -\u003e StringUtil.containsWordIgnoreCase(allTagString, inputTag))));","lastModifiedDate":"2017-10-29"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        return wantedTag.stream()","lastModifiedDate":"2017-10-29"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(allTagString, keyword))","lastModifiedDate":"2017-10-29"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 !(unwantedTag.stream()","lastModifiedDate":"2017-10-29"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"                .anyMatch((keyword -\u003e StringUtil.containsWordIgnoreCase(allTagString, keyword))));","lastModifiedDate":"2017-10-29"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-30"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"     * check only unwanted tag list has elements","lastModifiedDate":"2017-10-30"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"     * @return a boolean value","lastModifiedDate":"2017-10-30"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-30"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    private boolean isOnlyUnwantedTagsCheck(List\u003cString\u003e wantedTag,","lastModifiedDate":"2017-10-29"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"                                            List\u003cString\u003e unwantedTag) {","lastModifiedDate":"2017-10-29"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        if (wantedTag.isEmpty() \u0026\u0026 !unwantedTag.isEmpty()) {","lastModifiedDate":"2017-10-29"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"            return true;","lastModifiedDate":"2017-10-29"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        } else {","lastModifiedDate":"2017-10-29"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"            return false;","lastModifiedDate":"2017-10-29"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-30"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"     * Update the wantedTag and unwantedTag list","lastModifiedDate":"2017-10-30"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"     * @param wantedTag list of tags to be searched","lastModifiedDate":"2017-10-30"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"     * @param unwantedTag list of tags to not be searched","lastModifiedDate":"2017-10-30"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-30"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"    private void updateWantedTagUnwantedTag(List\u003cString\u003e wantedTag, List\u003cString\u003e unwantedTag) {","lastModifiedDate":"2017-10-29"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        for (String everyTag : tags) {","lastModifiedDate":"2017-10-29"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"            if (!everyTag.startsWith(\"/not\")) {","lastModifiedDate":"2017-10-29"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"                wantedTag.add(everyTag);","lastModifiedDate":"2017-10-29"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"            } else {","lastModifiedDate":"2017-10-29"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"                unwantedTag.add(everyTag.substring(4));","lastModifiedDate":"2017-10-29"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"            }","lastModifiedDate":"2017-10-29"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-30"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"     * Convert a set of tags to Strings","lastModifiedDate":"2017-10-30"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-30"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"    private String convertTagToString(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-30"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"        Set\u003cTag\u003e personTags \u003d person.getTags();","lastModifiedDate":"2017-10-29"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"        StringBuilder allTagNames \u003d new StringBuilder();","lastModifiedDate":"2017-10-29"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        for (Tag tag : personTags) {","lastModifiedDate":"2017-10-29"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"            allTagNames.append(tag.getTagName());","lastModifiedDate":"2017-10-29"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"            allTagNames.append(\" \");","lastModifiedDate":"2017-10-29"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-29"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        return allTagNames.toString().trim();","lastModifiedDate":"2017-10-29"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-29"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-29"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-29"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"                || (other instanceof NameContainsTagsPredicate // instanceof handles nulls","lastModifiedDate":"2017-10-29"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 this.tags.equals(((NameContainsTagsPredicate) other).tags)); // state check","lastModifiedDate":"2017-10-29"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-29"}],"authorContributionMap":{"wangyiming1019":92}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.beans.property.ObjectProperty;","lastModifiedDate":"2017-07-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;","lastModifiedDate":"2017-07-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person implements ReadOnlyPerson {","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cName\u003e name;","lastModifiedDate":"2017-07-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;","lastModifiedDate":"2017-07-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;","lastModifiedDate":"2017-07-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;","lastModifiedDate":"2017-07-12"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    private ObjectProperty\u003cBoolean\u003e favourite;","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"    private ObjectProperty\u003cRemark\u003e remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;","lastModifiedDate":"2017-07-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    public Person(Name name, Phone phone, Email email, Address address,","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"                  Boolean favourite, Remark remark, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-10-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);","lastModifiedDate":"2017-07-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);","lastModifiedDate":"2017-07-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);","lastModifiedDate":"2017-07-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);","lastModifiedDate":"2017-07-12"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        this.favourite \u003d new SimpleObjectProperty\u003c\u003e(favourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"        this.remark \u003d new SimpleObjectProperty\u003c\u003e(remark);","lastModifiedDate":"2017-10-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // protect internal tags from changes in the arg list","lastModifiedDate":"2017-07-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));","lastModifiedDate":"2017-07-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson.","lastModifiedDate":"2016-12-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Person(ReadOnlyPerson source) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getFavourite(),","lastModifiedDate":"2017-10-25"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"             source.getRemark(), source.getTags());","lastModifiedDate":"2017-10-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setName(Name name) {","lastModifiedDate":"2016-12-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.name.set(requireNonNull(name));","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return name.get();","lastModifiedDate":"2017-07-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPhone(Phone phone) {","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.phone.set(requireNonNull(phone));","lastModifiedDate":"2017-07-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return phone.get();","lastModifiedDate":"2017-07-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setEmail(Email email) {","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.email.set(requireNonNull(email));","lastModifiedDate":"2017-07-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {","lastModifiedDate":"2017-07-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return email.get();","lastModifiedDate":"2017-07-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setAddress(Address address) {","lastModifiedDate":"2016-12-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.address.set(requireNonNull(address));","lastModifiedDate":"2017-07-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {","lastModifiedDate":"2017-07-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return address.get();","lastModifiedDate":"2017-07-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"    public void setFavourite(Boolean favourite) {","lastModifiedDate":"2017-10-25"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"        this.favourite.set(requireNonNull(favourite));","lastModifiedDate":"2017-10-25"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"    public ObjectProperty\u003cBoolean\u003e favouriteProperty() {","lastModifiedDate":"2017-10-25"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        return favourite;","lastModifiedDate":"2017-10-25"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"    @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"    public Boolean getFavourite() {","lastModifiedDate":"2017-10-25"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        return favourite.get();","lastModifiedDate":"2017-10-25"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"    public void setRemark(Remark remark) {","lastModifiedDate":"2017-10-22"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"        this.remark.set(requireNonNull(remark));","lastModifiedDate":"2017-10-22"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-22"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"    public ObjectProperty\u003cRemark\u003e remarkProperty() {","lastModifiedDate":"2017-10-22"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"        return remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-22"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"    public Remark getRemark() {","lastModifiedDate":"2017-10-22"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"        return remark.get();","lastModifiedDate":"2017-10-22"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());","lastModifiedDate":"2017-07-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {","lastModifiedDate":"2017-07-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return tags;","lastModifiedDate":"2017-07-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set.","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {","lastModifiedDate":"2017-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        tags.set(new UniqueTagList(replacement));","lastModifiedDate":"2017-07-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":166,"author":{"gitId":"wangyiming1019"},"content":"        return Objects.hash(name, phone, email, address, favourite, remark, tags);","lastModifiedDate":"2017-10-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return getAsText();","lastModifiedDate":"2016-09-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":16,"wangyiming1019":22,"-":136}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";","lastModifiedDate":"2017-05-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2017-05-04"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static final String PHONE_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean isPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Validates given phone number.","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if given phone string is invalid.","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Phone(String phone) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2017-10-03"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d PHONE_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-03"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-03"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (!isValidPhone(trimmedPhone)) {","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.value \u003d trimmedPhone;","lastModifiedDate":"2016-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-14"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"    public Phone(String phone, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-14"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        this(phone);","lastModifiedDate":"2017-10-14"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        this.setPrivate(isPrivate);","lastModifiedDate":"2017-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid person phone number.","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        return test.matches(PHONE_VALIDATION_REGEX) || test.equals(PHONE_PLACEHOLDER_VALUE);","lastModifiedDate":"2017-10-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        if (isPrivate) {","lastModifiedDate":"2017-10-15"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"            return \"\u003cPrivate Phone\u003e\";","lastModifiedDate":"2017-10-16"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"    public boolean isPrivate() {","lastModifiedDate":"2017-10-13"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        return isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    public void setPrivate(boolean isPrivate) {","lastModifiedDate":"2017-10-13"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        this.isPrivate \u003d isPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"jeffreygohkw":15,"Esilocke":6,"-":55}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.beans.property.ObjectProperty;","lastModifiedDate":"2017-07-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.UniqueTagList;","lastModifiedDate":"2017-07-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A read-only immutable interface for a Person in the addressbook.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface ReadOnlyPerson {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();","lastModifiedDate":"2017-07-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Name getName();","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();","lastModifiedDate":"2017-07-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Phone getPhone();","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();","lastModifiedDate":"2017-07-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Email getEmail();","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();","lastModifiedDate":"2017-07-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    Address getAddress();","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    ObjectProperty\u003cRemark\u003e remarkProperty();","lastModifiedDate":"2017-10-22"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"    Remark getRemark();","lastModifiedDate":"2017-10-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();","lastModifiedDate":"2017-07-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Set\u003cTag\u003e getTags();","lastModifiedDate":"2017-03-07"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    ObjectProperty\u003cBoolean\u003e favouriteProperty();","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    Boolean getFavourite();","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress()))","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"                \u0026\u0026 other.getFavourite().equals(this.getFavourite())","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 other.getRemark().equals(this.getRemark());","lastModifiedDate":"2017-10-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Formats the person as text, showing all contact details.","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    default String getAsText() {","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .append(\" Phone: \")","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .append(\" Email: \")","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .append(\" Address: \")","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .append(getAddress())","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"                .append(\" Remark: \")","lastModifiedDate":"2017-10-22"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"                .append(getRemark())","lastModifiedDate":"2017-10-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .append(\" Tags: \");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        getTags().forEach(builder::append);","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":5,"wangyiming1019":4,"-":54}},{"path":"src/main/java/seedu/address/model/person/Remark.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"charlesgoh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-10-22"},{"lineNumber":2,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-22"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"/**","lastModifiedDate":"2017-10-22"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":" * Represents a Person\u0027s remark in the address book.","lastModifiedDate":"2017-10-22"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}","lastModifiedDate":"2017-10-22"},{"lineNumber":8,"author":{"gitId":"charlesgoh"},"content":" */","lastModifiedDate":"2017-10-22"},{"lineNumber":9,"author":{"gitId":"charlesgoh"},"content":"public class Remark {","lastModifiedDate":"2017-10-22"},{"lineNumber":10,"author":{"gitId":"charlesgoh"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d","lastModifiedDate":"2017-10-22"},{"lineNumber":11,"author":{"gitId":"charlesgoh"},"content":"            \"Person remarks can take any values, and it should not be blank\";","lastModifiedDate":"2017-10-22"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"    /*","lastModifiedDate":"2017-10-22"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"     * The first character of the remark must not be a whitespace,","lastModifiedDate":"2017-10-22"},{"lineNumber":15,"author":{"gitId":"charlesgoh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-10-22"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2017-10-22"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-22"},{"lineNumber":19,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":20,"author":{"gitId":"charlesgoh"},"content":"    public final String value;","lastModifiedDate":"2017-10-22"},{"lineNumber":21,"author":{"gitId":"charlesgoh"},"content":"    private boolean isPrivate \u003d false;","lastModifiedDate":"2017-10-22"},{"lineNumber":22,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":23,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-22"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"     * Validates given remark.","lastModifiedDate":"2017-10-22"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"     *","lastModifiedDate":"2017-10-22"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"     * @throws IllegalValueException if given remark string is invalid.","lastModifiedDate":"2017-10-22"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"    public Remark(String remark) throws IllegalValueException {","lastModifiedDate":"2017-10-22"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"        if (remark \u003d\u003d null) {","lastModifiedDate":"2017-10-22"},{"lineNumber":30,"author":{"gitId":"charlesgoh"},"content":"            this.value \u003d REMARK_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-22"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"            return;","lastModifiedDate":"2017-10-22"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        if (!isValidRemark(remark)) {","lastModifiedDate":"2017-10-22"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);","lastModifiedDate":"2017-10-22"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":36,"author":{"gitId":"charlesgoh"},"content":"        this.value \u003d remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":37,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"    public Remark(String remark, boolean isPrivate) throws IllegalValueException {","lastModifiedDate":"2017-10-22"},{"lineNumber":40,"author":{"gitId":"charlesgoh"},"content":"        this(remark);","lastModifiedDate":"2017-10-22"},{"lineNumber":41,"author":{"gitId":"charlesgoh"},"content":"        this.setPrivate(isPrivate);","lastModifiedDate":"2017-10-22"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-22"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"     * Returns true if a given string is a valid person email.","lastModifiedDate":"2017-10-22"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    public static boolean isValidRemark(String test) {","lastModifiedDate":"2017-10-22"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"        return test.matches(REMARK_VALIDATION_REGEX) || test.equals(REMARK_PLACEHOLDER_VALUE);","lastModifiedDate":"2017-10-22"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-22"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"    public String toString() {","lastModifiedDate":"2017-10-22"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"        if (isPrivate) {","lastModifiedDate":"2017-10-22"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"            return \"\u003cPrivate Remark\u003e\";","lastModifiedDate":"2017-10-22"},{"lineNumber":55,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":56,"author":{"gitId":"charlesgoh"},"content":"        return value;","lastModifiedDate":"2017-10-22"},{"lineNumber":57,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":58,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-22"},{"lineNumber":60,"author":{"gitId":"charlesgoh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-22"},{"lineNumber":61,"author":{"gitId":"charlesgoh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-22"},{"lineNumber":62,"author":{"gitId":"charlesgoh"},"content":"                || (other instanceof Remark // instanceof handles nulls","lastModifiedDate":"2017-10-22"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check","lastModifiedDate":"2017-10-22"},{"lineNumber":64,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":65,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":66,"author":{"gitId":"charlesgoh"},"content":"    @Override","lastModifiedDate":"2017-10-22"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-22"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"        return value.hashCode();","lastModifiedDate":"2017-10-22"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"    public boolean isPrivate() {","lastModifiedDate":"2017-10-22"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        return isPrivate;","lastModifiedDate":"2017-10-22"},{"lineNumber":73,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":75,"author":{"gitId":"charlesgoh"},"content":"    public void setPrivate(boolean isPrivate) {","lastModifiedDate":"2017-10-22"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"        this.isPrivate \u003d isPrivate;","lastModifiedDate":"2017-10-22"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"}","lastModifiedDate":"2017-10-22"}],"authorContributionMap":{"charlesgoh":78}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collection;","lastModifiedDate":"2017-10-04"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import java.util.Collections;","lastModifiedDate":"2017-10-04"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;","lastModifiedDate":"2017-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.fxmisc.easybind.EasyBind;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#equals(Object)","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // used by asObservableList()","lastModifiedDate":"2017-09-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);","lastModifiedDate":"2017-09-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return internalList.contains(toCheck);","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {","lastModifiedDate":"2017-03-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        internalList.add(new Person(toAdd));","lastModifiedDate":"2017-03-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list.","lastModifiedDate":"2017-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list.","lastModifiedDate":"2017-06-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)","lastModifiedDate":"2017-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {","lastModifiedDate":"2017-08-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        internalList.set(index, new Person(editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {","lastModifiedDate":"2016-08-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!personFoundAndDeleted) {","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return personFoundAndDeleted;","lastModifiedDate":"2016-08-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"     * Favourites the equivalent person in the list.","lastModifiedDate":"2017-10-25"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"     *","lastModifiedDate":"2017-10-25"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list.","lastModifiedDate":"2017-10-25"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"    public void favouritePerson(ReadOnlyPerson toFavourite) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toFavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        int index \u003d internalList.indexOf(toFavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-10-25"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-10-25"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"        internalList.get(index).setFavourite(true);","lastModifiedDate":"2017-10-25"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"     * Unfavourites the equivalent person from the list.","lastModifiedDate":"2017-10-25"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"     *","lastModifiedDate":"2017-10-25"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list.","lastModifiedDate":"2017-10-25"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    public void unfavouritePerson(ReadOnlyPerson toUnfavourite) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        requireNonNull(toUnfavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"        int index \u003d internalList.indexOf(toUnfavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-10-25"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-10-25"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        internalList.get(index).setFavourite(false);","lastModifiedDate":"2017-10-25"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        this.internalList.setAll(replacement.internalList);","lastModifiedDate":"2016-10-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();","lastModifiedDate":"2016-12-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        for (final ReadOnlyPerson person : persons) {","lastModifiedDate":"2016-12-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            replacement.add(new Person(person));","lastModifiedDate":"2016-12-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        setPersons(replacement);","lastModifiedDate":"2016-12-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {","lastModifiedDate":"2017-09-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);","lastModifiedDate":"2017-09-01"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-04"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"     * Sorts person list by all persons by any field in ascending or descending order","lastModifiedDate":"2017-10-04"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"     * @param field","lastModifiedDate":"2017-10-04"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"     * @param order","lastModifiedDate":"2017-10-04"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-04"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"    public void sortBy(String field, String order) {","lastModifiedDate":"2017-10-01"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"        //sortyBy first chooses the right comparator","lastModifiedDate":"2017-10-01"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e comparator \u003d null;","lastModifiedDate":"2017-10-01"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"        /**","lastModifiedDate":"2017-10-04"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"         * Comparators for the various fields available for sorting","lastModifiedDate":"2017-10-04"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"         */","lastModifiedDate":"2017-10-04"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personNameComparator \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2017-10-04"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"            @Override","lastModifiedDate":"2017-10-04"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {","lastModifiedDate":"2017-10-04"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"                return o1.getName().fullName.compareTo(o2.getName().fullName);","lastModifiedDate":"2017-10-04"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-04"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"        };","lastModifiedDate":"2017-10-04"},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personPhoneComparator \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2017-10-04"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":"            @Override","lastModifiedDate":"2017-10-04"},{"lineNumber":160,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {","lastModifiedDate":"2017-10-04"},{"lineNumber":161,"author":{"gitId":"charlesgoh"},"content":"                return o1.getPhone().value.compareTo(o2.getPhone().value);","lastModifiedDate":"2017-10-04"},{"lineNumber":162,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-04"},{"lineNumber":163,"author":{"gitId":"charlesgoh"},"content":"        };","lastModifiedDate":"2017-10-04"},{"lineNumber":164,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personEmailComparator \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2017-10-04"},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"            @Override","lastModifiedDate":"2017-10-04"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {","lastModifiedDate":"2017-10-04"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"                return o1.getEmail().value.compareTo(o2.getEmail().value);","lastModifiedDate":"2017-10-04"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-04"},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":"        };","lastModifiedDate":"2017-10-04"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"        Comparator\u003cPerson\u003e personAddressComparator \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2017-10-04"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"            @Override","lastModifiedDate":"2017-10-04"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"            public int compare(Person o1, Person o2) {","lastModifiedDate":"2017-10-04"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"                return o1.getAddress().value.compareTo(o2.getAddress().value);","lastModifiedDate":"2017-10-04"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-04"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"        };","lastModifiedDate":"2017-10-04"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"        switch (field) {","lastModifiedDate":"2017-10-01"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"        case \"name\":","lastModifiedDate":"2017-10-01"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personNameComparator;","lastModifiedDate":"2017-10-01"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"            break;","lastModifiedDate":"2017-10-01"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":"        case \"phone\":","lastModifiedDate":"2017-10-01"},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personPhoneComparator;","lastModifiedDate":"2017-10-01"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"            break;","lastModifiedDate":"2017-10-01"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":"        case \"email\":","lastModifiedDate":"2017-10-01"},{"lineNumber":189,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personEmailComparator;","lastModifiedDate":"2017-10-01"},{"lineNumber":190,"author":{"gitId":"charlesgoh"},"content":"            break;","lastModifiedDate":"2017-10-01"},{"lineNumber":191,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":"        case \"address\":","lastModifiedDate":"2017-10-01"},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"            comparator \u003d personAddressComparator;","lastModifiedDate":"2017-10-01"},{"lineNumber":194,"author":{"gitId":"charlesgoh"},"content":"            break;","lastModifiedDate":"2017-10-01"},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"        default:","lastModifiedDate":"2017-10-01"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"            try {","lastModifiedDate":"2017-10-01"},{"lineNumber":198,"author":{"gitId":"charlesgoh"},"content":"                System.out.println(\"An error occured\");","lastModifiedDate":"2017-10-01"},{"lineNumber":199,"author":{"gitId":"charlesgoh"},"content":"                throw new Exception(\"Invalid field parameter entered...\\n\");","lastModifiedDate":"2017-10-01"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":"            } catch (Exception e) {","lastModifiedDate":"2017-10-01"},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"                e.printStackTrace();","lastModifiedDate":"2017-10-01"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-01"},{"lineNumber":203,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-01"},{"lineNumber":204,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"        //sortBy then chooses the right ordering","lastModifiedDate":"2017-10-01"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":"        switch (order) {","lastModifiedDate":"2017-10-01"},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":"        case \"asc\":","lastModifiedDate":"2017-10-01"},{"lineNumber":208,"author":{"gitId":"charlesgoh"},"content":"            Collections.sort(internalList, comparator);","lastModifiedDate":"2017-10-01"},{"lineNumber":209,"author":{"gitId":"charlesgoh"},"content":"            break;","lastModifiedDate":"2017-10-01"},{"lineNumber":210,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":211,"author":{"gitId":"charlesgoh"},"content":"        case \"desc\":","lastModifiedDate":"2017-10-01"},{"lineNumber":212,"author":{"gitId":"charlesgoh"},"content":"            Collections.sort(internalList, Collections.reverseOrder(comparator));","lastModifiedDate":"2017-10-01"},{"lineNumber":213,"author":{"gitId":"charlesgoh"},"content":"            break;","lastModifiedDate":"2017-10-01"},{"lineNumber":214,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":215,"author":{"gitId":"charlesgoh"},"content":"        default:","lastModifiedDate":"2017-10-01"},{"lineNumber":216,"author":{"gitId":"charlesgoh"},"content":"            try {","lastModifiedDate":"2017-10-01"},{"lineNumber":217,"author":{"gitId":"charlesgoh"},"content":"                System.out.println(\"An error occured\");","lastModifiedDate":"2017-10-01"},{"lineNumber":218,"author":{"gitId":"charlesgoh"},"content":"                throw new Exception(\"Invalid field parameter entered...\\n\");","lastModifiedDate":"2017-10-01"},{"lineNumber":219,"author":{"gitId":"charlesgoh"},"content":"            } catch (Exception e) {","lastModifiedDate":"2017-10-01"},{"lineNumber":220,"author":{"gitId":"charlesgoh"},"content":"                e.printStackTrace();","lastModifiedDate":"2017-10-01"},{"lineNumber":221,"author":{"gitId":"charlesgoh"},"content":"            }","lastModifiedDate":"2017-10-01"},{"lineNumber":222,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-01"},{"lineNumber":223,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2017-04-14"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":88,"wangyiming1019":30,"-":124}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Validates given tag name.","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid.","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Tag(String name) throws IllegalValueException {","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        if (!isValidTagName(trimmedName)) {","lastModifiedDate":"2016-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.tagName \u003d trimmedName;","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"charlesgoh"},"content":"    public String getTagName() {","lastModifiedDate":"2017-10-15"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"        return tagName;","lastModifiedDate":"2017-10-15"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-15"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":4,"-":58}},{"path":"src/main/java/seedu/address/model/task/Deadline.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-12"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.Calendar;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-12"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-12"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Represents the deadline of a task in the address book.","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class Deadline {","lastModifiedDate":"2017-10-12"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"            \"Task deadlines must be in the format DD-MM-YYYY, with \u0027-\u0027, \u0027.\u0027, \u0027.\u0027 as separators\";","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    /*","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    Deadline format: DDSMMSYYYY, in DAY-MONTH-YEAR format.","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    S represents the separators, and can be any of these characters: - . /","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_VALIDATION_REGEX \u003d \"\\\\d\\\\d[-./]\\\\d\\\\d[-./]\\\\d\\\\d\\\\d\\\\d.*\";","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    private static final String DEADLINE_PERIOD_DELIMITER \u003d \".\";","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /*","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    Expected indexes for the separator characters","lastModifiedDate":"2017-10-12"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private static final int DEADLINE_SEPARATOR_INDEX_1 \u003d 2;","lastModifiedDate":"2017-10-12"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private static final int DEADLINE_SEPARATOR_INDEX_2 \u003d 5;","lastModifiedDate":"2017-10-12"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    private static final int DEADLINE_DAY_INDEX \u003d 0;","lastModifiedDate":"2017-10-12"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private static final int DEADLINE_MONTH_INDEX \u003d 1;","lastModifiedDate":"2017-10-12"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private static final int DEADLINE_YEAR_INDEX \u003d 2;","lastModifiedDate":"2017-10-12"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public final Calendar calendar;","lastModifiedDate":"2017-10-12"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    public final String value;","lastModifiedDate":"2017-10-12"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"     * Validates given deadline.","lastModifiedDate":"2017-10-12"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-12"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given deadline string is invalid.","lastModifiedDate":"2017-10-12"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    public Deadline(String deadline) throws IllegalValueException {","lastModifiedDate":"2017-10-12"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        if (deadline \u003d\u003d null) {","lastModifiedDate":"2017-10-12"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d DEADLINE_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-12"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            this.calendar \u003d null;","lastModifiedDate":"2017-10-12"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-12"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        } else if (deadline.equals(DEADLINE_PLACEHOLDER_VALUE)) {","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d DEADLINE_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"            this.calendar \u003d null;","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        String trimmedDeadline \u003d deadline.trim();","lastModifiedDate":"2017-10-12"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        if (!isValidDeadline(trimmedDeadline)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_DEADLINE_CONSTRAINTS);","lastModifiedDate":"2017-10-12"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        this.value \u003d trimmedDeadline;","lastModifiedDate":"2017-10-12"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        this.calendar \u003d Calendar.getInstance();","lastModifiedDate":"2017-10-12"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        calendar.clear();","lastModifiedDate":"2017-10-12"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        char separator \u003d trimmedDeadline.charAt(DEADLINE_SEPARATOR_INDEX_1);","lastModifiedDate":"2017-10-12"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        String[] splitTest \u003d trimmedDeadline.split(Character.toString(separator));","lastModifiedDate":"2017-10-12"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        int day \u003d Integer.parseInt(splitTest[DEADLINE_DAY_INDEX]);","lastModifiedDate":"2017-10-12"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        int month \u003d Integer.parseInt(splitTest[DEADLINE_MONTH_INDEX]);","lastModifiedDate":"2017-10-12"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        int year \u003d Integer.parseInt(splitTest[DEADLINE_YEAR_INDEX]);","lastModifiedDate":"2017-10-12"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        this.calendar.set(year, month, day);","lastModifiedDate":"2017-10-12"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is in valid deadline format.","lastModifiedDate":"2017-10-12"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidDeadline(String test) {","lastModifiedDate":"2017-10-12"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        if (test.equals(DEADLINE_PLACEHOLDER_VALUE)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-12"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        } else if (!test.matches(DEADLINE_VALIDATION_REGEX)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-12"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        } else if (test.charAt(DEADLINE_SEPARATOR_INDEX_1) !\u003d test.charAt(DEADLINE_SEPARATOR_INDEX_2)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-12"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-12"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"            return isValidDate(test);","lastModifiedDate":"2017-10-12"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"     * Returns true if the given string is a valid date.","lastModifiedDate":"2017-10-12"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"     * Guarantees: given string format is valid","lastModifiedDate":"2017-10-12"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidDate(String test) {","lastModifiedDate":"2017-10-12"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        Calendar testCalendar \u003d setCalendar(test);","lastModifiedDate":"2017-10-12"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-12"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            testCalendar.setLenient(false);","lastModifiedDate":"2017-10-12"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"            testCalendar.getTime();","lastModifiedDate":"2017-10-12"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-12"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2017-10-12"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-12"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"     * Returns a Calendar object that represents the given date string.","lastModifiedDate":"2017-10-12"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    private static Calendar setCalendar(String date) {","lastModifiedDate":"2017-10-12"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        Calendar result \u003d Calendar.getInstance();","lastModifiedDate":"2017-10-12"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"        result.clear();","lastModifiedDate":"2017-10-12"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        String separator \u003d Character.toString(date.charAt(DEADLINE_SEPARATOR_INDEX_1));","lastModifiedDate":"2017-10-12"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        if (separator.equals(DEADLINE_PERIOD_DELIMITER)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"            separator \u003d \"\\\\.\";","lastModifiedDate":"2017-10-12"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        String[] splitTest \u003d date.split(separator);","lastModifiedDate":"2017-10-12"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"        int day \u003d Integer.parseInt(splitTest[DEADLINE_DAY_INDEX]);","lastModifiedDate":"2017-10-12"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        int month \u003d Integer.parseInt(splitTest[DEADLINE_MONTH_INDEX]);","lastModifiedDate":"2017-10-12"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        int year \u003d Integer.parseInt(splitTest[DEADLINE_YEAR_INDEX]);","lastModifiedDate":"2017-10-12"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"        result.set(year, month, day);","lastModifiedDate":"2017-10-12"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"        return result;","lastModifiedDate":"2017-10-12"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2017-10-12"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        return value;","lastModifiedDate":"2017-10-12"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-12"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-12"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Deadline // instanceof handles nulls","lastModifiedDate":"2017-10-12"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.value.equals(((Deadline) other).value)); // state check","lastModifiedDate":"2017-10-12"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-12"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"        return value.hashCode();","lastModifiedDate":"2017-10-12"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-12"}],"authorContributionMap":{"Esilocke":131}},{"path":"src/main/java/seedu/address/model/task/Description.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-12"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Represents a task description in the address book.","lastModifiedDate":"2017-10-12"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-12"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class Description {","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d","lastModifiedDate":"2017-10-12"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"            \"Task descriptions can be in any format\";","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    /*","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public final String value;","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * Validates given description.","lastModifiedDate":"2017-10-12"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-12"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given description string is invalid.","lastModifiedDate":"2017-10-12"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public Description(String description) throws IllegalValueException {","lastModifiedDate":"2017-10-12"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2017-10-12"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d DESCRIPTION_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-12"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-12"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2017-10-12"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        if (!isValidDescription(trimmedDescription)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_DESCRIPTION_CONSTRAINTS);","lastModifiedDate":"2017-10-12"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        this.value \u003d trimmedDescription;","lastModifiedDate":"2017-10-12"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is a valid description.","lastModifiedDate":"2017-10-12"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2017-10-12"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        return test.equals(DESCRIPTION_PLACEHOLDER_VALUE) || test.matches(DESCRIPTION_VALIDATION_REGEX);","lastModifiedDate":"2017-10-12"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2017-10-12"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        return value;","lastModifiedDate":"2017-10-12"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-12"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-12"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2017-10-12"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.value.equals(((Description) other).value)); // state check","lastModifiedDate":"2017-10-12"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-12"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        return value.hashCode();","lastModifiedDate":"2017-10-12"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-12"}],"authorContributionMap":{"Esilocke":64}},{"path":"src/main/java/seedu/address/model/task/Priority.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-12"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Represents a task priority in the address book.","lastModifiedDate":"2017-10-12"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-12"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class Priority {","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d","lastModifiedDate":"2017-10-12"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"            \"Task priorities must be an integer from 1 to 5, inclusive, where 1 represents the lowest priority\";","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    public static final int PRIORITY_LOWER_BOUND \u003d 1;","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public static final int PRIORITY_UPPER_BOUND \u003d 5;","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[\\\\d].*\";","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_PLACEHOLDER_VALUE \u003d \"\";","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public final String value;","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"     * Validates given priority.","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given priority string is invalid.","lastModifiedDate":"2017-10-12"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public Priority(String priority) throws IllegalValueException {","lastModifiedDate":"2017-10-12"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        if (priority \u003d\u003d null) {","lastModifiedDate":"2017-10-12"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d PRIORITY_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-12"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-12"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        } else if (priority.equals(PRIORITY_PLACEHOLDER_VALUE)) {","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            this.value \u003d PRIORITY_PLACEHOLDER_VALUE;","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            return;","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        String trimmedPriority \u003d priority.trim();","lastModifiedDate":"2017-10-12"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-12"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            Integer.parseInt(trimmedPriority);","lastModifiedDate":"2017-10-17"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2017-10-12"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_PRIORITY_CONSTRAINTS);","lastModifiedDate":"2017-10-12"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        if (!isValidPriority(trimmedPriority)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_PRIORITY_CONSTRAINTS);","lastModifiedDate":"2017-10-12"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        this.value \u003d trimmedPriority;","lastModifiedDate":"2017-10-12"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is a valid task priority.","lastModifiedDate":"2017-10-12"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidPriority(String test) {","lastModifiedDate":"2017-10-12"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        if (test.equals(PRIORITY_PLACEHOLDER_VALUE)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-12"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        } else if (!test.matches(PRIORITY_VALIDATION_REGEX)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-12"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        } else {","lastModifiedDate":"2017-10-12"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            int intTest \u003d Integer.parseInt(test);","lastModifiedDate":"2017-10-12"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"            return isWithinBounds(intTest);","lastModifiedDate":"2017-10-12"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"     * Returns true if the value is within the upper and lower bounds of priority","lastModifiedDate":"2017-10-12"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"    public static boolean isWithinBounds(int test) {","lastModifiedDate":"2017-10-12"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        return test \u003c\u003d PRIORITY_UPPER_BOUND \u0026\u0026 test \u003e\u003d PRIORITY_LOWER_BOUND;","lastModifiedDate":"2017-10-12"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2017-10-12"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        return value;","lastModifiedDate":"2017-10-12"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-12"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-12"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof Priority // instanceof handles nulls","lastModifiedDate":"2017-10-12"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.value.equals(((Priority) other).value)); // state check","lastModifiedDate":"2017-10-12"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-12"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        return value.hashCode();","lastModifiedDate":"2017-10-12"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-12"}],"authorContributionMap":{"Esilocke":83}},{"path":"src/main/java/seedu/address/model/task/ReadOnlyTask.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-23"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.property.ObjectProperty;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-23"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Provides an immutable interface for a Task in the address book.","lastModifiedDate":"2017-10-23"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-23"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public interface ReadOnlyTask {","lastModifiedDate":"2017-10-23"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    TaskName getTaskName();","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    Description getDescription();","lastModifiedDate":"2017-10-23"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    Deadline getDeadline();","lastModifiedDate":"2017-10-23"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    Priority getPriority();","lastModifiedDate":"2017-10-23"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cTaskName\u003e taskNameProperty();","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cDescription\u003e descriptionProperty();","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cDeadline\u003e deadlineProperty();","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    ObjectProperty\u003cPriority\u003e priorityProperty();","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    default String getAsText() {","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        builder.append(getTaskName())","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"                .append(\" Description: \")","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"                .append(getDescription())","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                .append(\" Deadline: \")","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                .append(getDeadline())","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"                .append(\" Priority: \")","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                .append(getPriority());","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        return builder.toString();","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    default boolean isSameStateAs(ReadOnlyTask other) {","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"                || (other !\u003d null // this is first to avoid NPE below","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getTaskName().equals(this.getTaskName()) // state checks here onwards","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getDescription().equals(this.getDescription())","lastModifiedDate":"2017-10-24"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getDeadline().equals(this.getDeadline())","lastModifiedDate":"2017-10-24"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 other.getPriority().equals(this.getPriority()));","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-23"}],"authorContributionMap":{"Esilocke":43}},{"path":"src/main/java/seedu/address/model/task/Task.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-12"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.Objects;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.property.ObjectProperty;","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.property.SimpleObjectProperty;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-17"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" * Represents a task object in the address book.","lastModifiedDate":"2017-10-17"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-17"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class Task implements ReadOnlyTask {","lastModifiedDate":"2017-10-23"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cTaskName\u003e taskName;","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cDescription\u003e description;","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cDeadline\u003e deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    private ObjectProperty\u003cPriority\u003e priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public Task(TaskName taskName, Description description, Deadline deadline, Priority priority) {","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        this.taskName \u003d new SimpleObjectProperty\u003c\u003e(taskName);","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        this.description \u003d new SimpleObjectProperty\u003c\u003e(description);","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        this.deadline \u003d new SimpleObjectProperty\u003c\u003e(deadline);","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        this.priority \u003d new SimpleObjectProperty\u003c\u003e(priority);","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public Task(ReadOnlyTask task) {","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        this(task.getTaskName(), task.getDescription(), task.getDeadline(), task.getPriority());","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    public TaskName getTaskName() {","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        return taskName.get();","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    public Description getDescription() {","lastModifiedDate":"2017-10-23"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        return description.get();","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public Deadline getDeadline() {","lastModifiedDate":"2017-10-23"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        return deadline.get();","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-23"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    public Priority getPriority() {","lastModifiedDate":"2017-10-23"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        return priority.get();","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        return getAsText();","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    // JavaFX property functions","lastModifiedDate":"2017-10-28"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cTaskName\u003e taskNameProperty() {","lastModifiedDate":"2017-10-28"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        return taskName;","lastModifiedDate":"2017-10-28"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cDescription\u003e descriptionProperty() {","lastModifiedDate":"2017-10-28"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        return description;","lastModifiedDate":"2017-10-28"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cDeadline\u003e deadlineProperty() {","lastModifiedDate":"2017-10-28"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        return deadline;","lastModifiedDate":"2017-10-28"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    public ObjectProperty\u003cPriority\u003e priorityProperty() {","lastModifiedDate":"2017-10-28"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        return priority;","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    // Setters for TaskBuilder testing","lastModifiedDate":"2017-10-24"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    public void setTaskName(TaskName taskName) {","lastModifiedDate":"2017-10-24"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        this.taskName.set(taskName);","lastModifiedDate":"2017-10-24"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    public void setDeadline(Deadline deadline) {","lastModifiedDate":"2017-10-24"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        this.deadline.set(deadline);","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    public void setDescription(Description description) {","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        this.description.set(description);","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public void setPriority(Priority priority) {","lastModifiedDate":"2017-10-24"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        this.priority.set(priority);","lastModifiedDate":"2017-10-24"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-24"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-24"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"            || (other instanceof ReadOnlyTask // instanceof handles nulls","lastModifiedDate":"2017-10-24"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"            \u0026\u0026 this.isSameStateAs((ReadOnlyTask) other));","lastModifiedDate":"2017-10-24"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-28"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2017-10-28"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        return Objects.hash(taskName, description, deadline, priority);","lastModifiedDate":"2017-10-28"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-12"}],"authorContributionMap":{"Esilocke":105}},{"path":"src/main/java/seedu/address/model/task/TaskContainsKeywordPredicate.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-26"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.List;","lastModifiedDate":"2017-10-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-26"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" * Tests that a {@code ReadOnlyTask}\u0027s {@code TaskName} or {@code Description} matches any of the keywords given.","lastModifiedDate":"2017-10-26"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-26"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"public class TaskContainsKeywordPredicate  implements Predicate\u003cReadOnlyTask\u003e {","lastModifiedDate":"2017-10-26"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    public TaskContainsKeywordPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-10-26"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-10-26"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    public boolean test(ReadOnlyTask task) {","lastModifiedDate":"2017-10-26"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c keywords.size(); i++) {","lastModifiedDate":"2017-10-30"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"            String keyword \u003d keywords.get(i);","lastModifiedDate":"2017-10-30"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"            if (StringUtil.containsWordIgnoreCase(task.getTaskName().taskName, keyword)","lastModifiedDate":"2017-10-30"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"                    || StringUtil.containsWordIgnoreCase(task.getDescription().value, keyword)) {","lastModifiedDate":"2017-10-30"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"                return true;","lastModifiedDate":"2017-10-30"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-30"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        return false;","lastModifiedDate":"2017-10-30"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof TaskContainsKeywordPredicate // instanceof handles nulls","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.keywords.equals(((TaskContainsKeywordPredicate) other).keywords)); // state check","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-26"}],"authorContributionMap":{"Esilocke":38}},{"path":"src/main/java/seedu/address/model/task/TaskName.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-12"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-12"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-12"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":" * Represents a Task name in the address book.","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"public class TaskName {","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"            \"Task names can be in any format, and should not be blank\";","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    /*","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public final String taskName;","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * Validates given name.","lastModifiedDate":"2017-10-12"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-12"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if given name string is invalid.","lastModifiedDate":"2017-10-12"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public TaskName(String name) throws IllegalValueException {","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-10-12"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-10-12"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        if (!isValidName(trimmedName)) {","lastModifiedDate":"2017-10-12"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2017-10-12"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-12"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        this.taskName \u003d trimmedName;","lastModifiedDate":"2017-10-12"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-12"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     * Returns true if a given string is a valid task name.","lastModifiedDate":"2017-10-12"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-12"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2017-10-12"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        return test.matches(NAME_VALIDATION_REGEX);","lastModifiedDate":"2017-10-12"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    public String toString() {","lastModifiedDate":"2017-10-12"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        return taskName;","lastModifiedDate":"2017-10-12"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-12"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-12"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof TaskName // instanceof handles nulls","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.taskName.equals(((TaskName) other).taskName)); // state check","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-12"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-12"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        return taskName.hashCode();","lastModifiedDate":"2017-10-12"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-12"}],"authorContributionMap":{"Esilocke":63}},{"path":"src/main/java/seedu/address/model/task/UniqueTaskList.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-23"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import java.util.Collection;","lastModifiedDate":"2017-10-30"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import java.util.List;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import org.fxmisc.easybind.EasyBind;","lastModifiedDate":"2017-10-24"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2017-10-30"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-24"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2017-10-30"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":" *","lastModifiedDate":"2017-10-30"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2017-10-30"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":" *","lastModifiedDate":"2017-10-30"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":" * @see Task#equals(Object)","lastModifiedDate":"2017-10-30"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)","lastModifiedDate":"2017-10-30"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2017-10-26"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    // used by asObservableList()","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    private final ObservableList\u003cReadOnlyTask\u003e mappedList \u003d EasyBind.map(internalList, (task) -\u003e task);","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     * Returns true if the list contains an equivalent task as the given argument.","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    public boolean contains(ReadOnlyTask toCheck) {","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        return internalList.contains(toCheck);","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"     * Adds a task to the list.","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if the task to add is a duplicate of an existing task in the list.","lastModifiedDate":"2017-10-24"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    public void add(ReadOnlyTask toAdd) throws DuplicateTaskException {","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        internalList.add(new Task(toAdd));","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}.","lastModifiedDate":"2017-10-26"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-26"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list.","lastModifiedDate":"2017-10-26"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list.","lastModifiedDate":"2017-10-26"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public void setTask(ReadOnlyTask target, ReadOnlyTask editedTask)","lastModifiedDate":"2017-10-26"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            throws DuplicateTaskException, TaskNotFoundException {","lastModifiedDate":"2017-10-26"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(editedTask);","lastModifiedDate":"2017-10-26"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-10-26"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-10-26"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2017-10-26"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        if (!target.equals(editedTask) \u0026\u0026 internalList.contains(editedTask)) {","lastModifiedDate":"2017-10-26"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        internalList.set(index, new Task(editedTask));","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-30"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"     * Removes the equivalent task from the list.","lastModifiedDate":"2017-10-30"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-30"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"     * @throws TaskNotFoundException if no such task could be found in the list.","lastModifiedDate":"2017-10-30"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-30"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    public boolean remove(ReadOnlyTask toRemove) throws TaskNotFoundException {","lastModifiedDate":"2017-10-30"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-10-30"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);","lastModifiedDate":"2017-10-30"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        if (!taskFoundAndDeleted) {","lastModifiedDate":"2017-10-30"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2017-10-30"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-30"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        return taskFoundAndDeleted;","lastModifiedDate":"2017-10-30"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public void setTasks(UniqueTaskList replacement) {","lastModifiedDate":"2017-10-26"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        this.internalList.setAll(replacement.internalList);","lastModifiedDate":"2017-10-26"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"    public void setTasks(List\u003c? extends ReadOnlyTask\u003e tasks) throws DuplicateTaskException {","lastModifiedDate":"2017-10-26"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"        final UniqueTaskList replacement \u003d new UniqueTaskList();","lastModifiedDate":"2017-10-26"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"        for (final ReadOnlyTask task : tasks) {","lastModifiedDate":"2017-10-26"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"            replacement.add(new Task(task));","lastModifiedDate":"2017-10-26"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"        setTasks(replacement);","lastModifiedDate":"2017-10-26"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-30"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-10-30"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-30"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e asObservableList() {","lastModifiedDate":"2017-10-30"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);","lastModifiedDate":"2017-10-30"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2017-10-24"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        return internalList.iterator();","lastModifiedDate":"2017-10-24"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-30"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-30"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-10-30"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls","lastModifiedDate":"2017-10-30"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));","lastModifiedDate":"2017-10-30"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-30"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"    public int hashCode() {","lastModifiedDate":"2017-10-30"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        return internalList.hashCode();","lastModifiedDate":"2017-10-30"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-23"}],"authorContributionMap":{"Esilocke":124}},{"path":"src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task.exceptions;","lastModifiedDate":"2017-10-24"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":" * Signals that the operation will result in duplicate Person objects.","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"public class DuplicateTaskException extends DuplicateDataException {","lastModifiedDate":"2017-10-24"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    public DuplicateTaskException() {","lastModifiedDate":"2017-10-24"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"        super(\"Operation would result in duplicate tasks\");","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-24"}],"authorContributionMap":{"Esilocke":13}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task.exceptions;","lastModifiedDate":"2017-10-23"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-23"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":" * Signals that the operation could not find the specified task.","lastModifiedDate":"2017-10-23"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-23"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2017-10-23"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-23"}],"authorContributionMap":{"Esilocke":8}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-12-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), false,","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Cheerful lad\"),","lastModifiedDate":"2017-10-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), false,","lastModifiedDate":"2017-10-25"},{"lineNumber":31,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Very friendly\"),","lastModifiedDate":"2017-10-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), false,","lastModifiedDate":"2017-10-25"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"She sells sea shells on the sea shore\"),","lastModifiedDate":"2017-10-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), false,","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Laughs too much\"),","lastModifiedDate":"2017-10-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), false,","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Goes to the same coffee shop every morning\"),","lastModifiedDate":"2017-10-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), false,","lastModifiedDate":"2017-10-25"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"                    new Remark(\"Disappearing act?\"),","lastModifiedDate":"2017-10-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                    getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            };","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException e) {","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException e) {","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);","lastModifiedDate":"2016-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {","lastModifiedDate":"2017-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        for (String s : strings) {","lastModifiedDate":"2017-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            tags.add(new Tag(s));","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return tags;","lastModifiedDate":"2017-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"charlesgoh":7,"wangyiming1019":6,"-":66}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    String getAddressBookFilePath();","lastModifiedDate":"2016-09-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook, String args) throws IOException;","lastModifiedDate":"2017-10-20"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-18"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    void backupAddressBookDefault(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2017-10-20"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    void changeFilePath(String fp, UserPrefs u);","lastModifiedDate":"2017-10-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"charlesgoh":3,"jeffreygohkw":3,"-":44}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-10-04"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2016-09-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;","lastModifiedDate":"2016-09-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;","lastModifiedDate":"2016-09-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String getUserPrefsFilePath() {","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String getAddressBookFilePath() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-20"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"     * Backs up data to a remote location.","lastModifiedDate":"2017-10-20"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"     * @param addressBook","lastModifiedDate":"2017-10-20"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"     * @param filePath","lastModifiedDate":"2017-10-20"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"     * @throws IOException","lastModifiedDate":"2017-10-20"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-20"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {","lastModifiedDate":"2017-10-20"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"        logger.fine(\"Attempting to write to backup data file in custom location\");","lastModifiedDate":"2017-10-20"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        this.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2017-10-20"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-20"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"     * Default back up data which saves file in the same directory as the main save file","lastModifiedDate":"2017-10-20"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"     * @param addressBook","lastModifiedDate":"2017-10-20"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"     * @throws IOException","lastModifiedDate":"2017-10-20"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-20"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"    public void backupAddressBookDefault(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2017-10-20"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        logger.fine(\"Attempting to write to backup data file\");","lastModifiedDate":"2017-10-18"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"        this.saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath() + \"-backup.xml\");","lastModifiedDate":"2017-10-18"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Subscribe","lastModifiedDate":"2016-09-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {","lastModifiedDate":"2016-09-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));","lastModifiedDate":"2016-09-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            saveAddressBook(event.data);","lastModifiedDate":"2016-09-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            raise(new DataSavingExceptionEvent(e));","lastModifiedDate":"2016-09-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"    @Override","lastModifiedDate":"2017-10-04"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"    public void changeFilePath(String fp, UserPrefs u) {","lastModifiedDate":"2017-10-04"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(fp);","lastModifiedDate":"2017-10-04"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        u.setAddressBookFilePath(fp);","lastModifiedDate":"2017-10-04"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"        addressBookStorage.changeFilePath(fp, u);","lastModifiedDate":"2017-10-04"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"charlesgoh":20,"jeffreygohkw":8,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlElement;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-01-19"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * JAXB-friendly version of the Person.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class XmlAdaptedPerson {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-15"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean nameIsPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private String phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-15"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean phoneIsPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private String email;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-15"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean emailIsPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private String address;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-15"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    private Boolean addressIsPrivate;","lastModifiedDate":"2017-10-13"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    @XmlElement (required \u003d true)","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    private String favourite;","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    private String remark;","lastModifiedDate":"2017-10-23"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-23"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    private Boolean remarkIsPrivate;","lastModifiedDate":"2017-10-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @XmlElement","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Constructs an XmlAdaptedPerson.","lastModifiedDate":"2016-12-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * This is the no-arg constructor that is required by JAXB.","lastModifiedDate":"2016-12-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public XmlAdaptedPerson() {}","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Converts a given Person into this class for JAXB use.","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        favourite \u003d source.getFavourite().toString();","lastModifiedDate":"2017-10-25"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"        remark \u003d source.getRemark().value;","lastModifiedDate":"2017-10-23"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        nameIsPrivate \u003d source.getName().isPrivate();","lastModifiedDate":"2017-10-13"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        phoneIsPrivate \u003d source.getPhone().isPrivate();","lastModifiedDate":"2017-10-13"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        emailIsPrivate \u003d source.getEmail().isPrivate();","lastModifiedDate":"2017-10-13"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        addressIsPrivate \u003d source.getAddress().isPrivate();","lastModifiedDate":"2017-10-13"},{"lineNumber":74,"author":{"gitId":"charlesgoh"},"content":"        remarkIsPrivate \u003d source.getRemark().isPrivate();","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        for (Tag tag : source.getTags()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));","lastModifiedDate":"2016-09-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object.","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        if (nameIsPrivate \u003d\u003d null) {","lastModifiedDate":"2017-10-14"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"            nameIsPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-14"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        if (phoneIsPrivate \u003d\u003d null) {","lastModifiedDate":"2017-10-14"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"            phoneIsPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-14"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        if (emailIsPrivate \u003d\u003d null) {","lastModifiedDate":"2017-10-14"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"            emailIsPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-14"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        if (addressIsPrivate \u003d\u003d null) {","lastModifiedDate":"2017-10-14"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"            addressIsPrivate \u003d false;","lastModifiedDate":"2017-10-14"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-14"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"        if (remarkIsPrivate \u003d\u003d null) {","lastModifiedDate":"2017-10-23"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"            remarkIsPrivate \u003d false;","lastModifiedDate":"2017-10-23"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        final Name name \u003d new Name(this.name, this.nameIsPrivate);","lastModifiedDate":"2017-10-13"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        final Phone phone \u003d new Phone(this.phone, this.phoneIsPrivate);","lastModifiedDate":"2017-10-13"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        final Email email \u003d new Email(this.email, this.emailIsPrivate);","lastModifiedDate":"2017-10-13"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        final Address address \u003d new Address(this.address, this.addressIsPrivate);","lastModifiedDate":"2017-10-13"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"        final Boolean favourite \u003d new Boolean(this.favourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        final Remark remark \u003d new Remark(this.remark, this.remarkIsPrivate);","lastModifiedDate":"2017-10-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2017-03-14"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        return new Person(name, phone, email, address, favourite, remark, tags);","lastModifiedDate":"2017-10-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"charlesgoh":10,"jeffreygohkw":27,"wangyiming1019":6,"-":73}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.storage;","lastModifiedDate":"2017-10-24"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"import javax.xml.bind.annotation.XmlElement;","lastModifiedDate":"2017-10-24"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-24"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;","lastModifiedDate":"2017-10-24"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"/** JAXB-friendly version of a Task */","lastModifiedDate":"2017-10-24"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class XmlAdaptedTask {","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private String name;","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-24"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    private String description;","lastModifiedDate":"2017-10-24"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    private String deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    @XmlElement(required \u003d true)","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    private String priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"     * Constructs an XmlAdaptedTask.","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"     * This is the no-arg constructor that is required by JAXB.","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public XmlAdaptedTask() {}","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"     * Converts a given Task into this class for JAXB use.","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public XmlAdaptedTask(ReadOnlyTask source) {","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        name \u003d source.getTaskName().taskName;","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        description \u003d source.getDescription().value;","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        deadline \u003d source.getDeadline().value;","lastModifiedDate":"2017-10-24"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        priority \u003d source.getPriority().value;","lastModifiedDate":"2017-10-24"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Task object.","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public Task toModelType() throws IllegalValueException {","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        final TaskName name \u003d new TaskName(this.name);","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        final Description description \u003d new Description(this.description);","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        final Deadline deadline \u003d new Deadline(this.deadline);","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        final Priority priority \u003d new Priority(this.priority);","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        return new Task(name, description, deadline, priority);","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-24"}],"authorContributionMap":{"Esilocke":55}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk.","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private String filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public XmlAddressBookStorage(String filePath) {","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public String getAddressBookFilePath() {","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                                                                                 FileNotFoundException {","lastModifiedDate":"2016-10-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        File addressBookFile \u003d new File(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!addressBookFile.exists()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Optional.of(addressBookOptional);","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(file);","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-20"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"     * Backs up data to a remote location.","lastModifiedDate":"2017-10-20"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"     * @param addressBook","lastModifiedDate":"2017-10-20"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"     * @param filePath","lastModifiedDate":"2017-10-20"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"     * @throws IOException","lastModifiedDate":"2017-10-20"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-20"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {","lastModifiedDate":"2017-10-20"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        logger.fine(\"Attempting to write to backup data file in custom location\");","lastModifiedDate":"2017-10-20"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        this.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2017-10-20"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-20"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"     * Default back up data which saves file in the same directory as the main save file","lastModifiedDate":"2017-10-20"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"     * @param addressBook","lastModifiedDate":"2017-10-20"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"     * @throws IOException","lastModifiedDate":"2017-10-20"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-20"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    public void backupAddressBookDefault(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2017-10-20"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"        logger.fine(\"Attempting to write to backup data file\");","lastModifiedDate":"2017-10-18"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"        this.saveAddressBook(addressBook, filePath + \"-backup.xml\");","lastModifiedDate":"2017-10-18"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-17"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-17"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-04"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     * Changes the file path of the save file","lastModifiedDate":"2017-10-04"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"     * @param filepath the new file path of the save file. Cannot be null","lastModifiedDate":"2017-10-04"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-04"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"    public void changeFilePath(String filepath, UserPrefs u) {","lastModifiedDate":"2017-10-04"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        requireNonNull(filepath);","lastModifiedDate":"2017-10-04"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        filePath \u003d filepath;","lastModifiedDate":"2017-10-04"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"charlesgoh":21,"jeffreygohkw":9,"-":77}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlElement;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to XML format","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class XmlSerializableAddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @XmlElement","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @XmlElement","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @XmlElement","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates an empty XmlSerializableAddressBook.","lastModifiedDate":"2016-12-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * This empty constructor is required for marshalling.","lastModifiedDate":"2016-12-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public XmlSerializableAddressBook() {","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Conversion","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));","lastModifiedDate":"2016-10-19"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        tasks.addAll(src.getTasksList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {","lastModifiedDate":"2017-09-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                return p.toModelType();","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                e.printStackTrace();","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                //TODO: better error handling","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                return null;","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(persons);","lastModifiedDate":"2017-09-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2016-10-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                return t.toModelType();","lastModifiedDate":"2016-10-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2016-10-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                e.printStackTrace();","lastModifiedDate":"2016-10-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                //TODO: better error handling","lastModifiedDate":"2016-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                return null;","lastModifiedDate":"2016-10-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-10-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return FXCollections.unmodifiableObservableList(tags);","lastModifiedDate":"2017-09-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"    public ObservableList\u003cReadOnlyTask\u003e getTasksList() {","lastModifiedDate":"2017-10-24"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        final ObservableList\u003cReadOnlyTask\u003e tasks \u003d this.tasks.stream().map(t -\u003e {","lastModifiedDate":"2017-10-24"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"            try {","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"                return t.toModelType();","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"                e.printStackTrace();","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"                return null;","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-24"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));","lastModifiedDate":"2017-10-24"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        return FXCollections.unmodifiableObservableList(tasks);","lastModifiedDate":"2017-10-24"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Esilocke":17,"-":74}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2017-06-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2017-08-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.event.Event;","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.web.WebView;","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2017-03-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;","lastModifiedDate":"2017-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;","lastModifiedDate":"2017-06-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Browser Panel of the App.","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";","lastModifiedDate":"2017-08-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";","lastModifiedDate":"2017-08-04"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String PRIVATE_NAME_CANNOT_SEARCH \u003d \"Cannot perform a search on that person. \"","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Their name is private.\";","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String GOOGLE_MAPS_URL_PREFIX \u003d \"https://maps.google.com/search/\";","lastModifiedDate":"2017-10-29"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String GOOGLE_MAPS_URL_SUFFIX  \u003d \"/\";","lastModifiedDate":"2017-10-28"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String PRIVATE_ADDRESS_CANNOT_SEARCH \u003d \"Cannot perform a search on that person\u0027s address. \"","lastModifiedDate":"2017-10-28"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"            + \"Their address is private.\";","lastModifiedDate":"2017-10-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";","lastModifiedDate":"2016-12-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());","lastModifiedDate":"2017-06-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private WebView browser;","lastModifiedDate":"2016-12-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public BrowserPanel() {","lastModifiedDate":"2017-06-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page.","lastModifiedDate":"2017-04-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);","lastModifiedDate":"2017-06-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        loadDefaultPage();","lastModifiedDate":"2017-03-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);","lastModifiedDate":"2017-06-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-16"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"     * Loads a google search for a person\u0027s name if their name is not private","lastModifiedDate":"2017-10-16"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"     * Prints out a message on the result display otherwise","lastModifiedDate":"2017-10-16"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"     * @param person The person we want to search for","lastModifiedDate":"2017-10-16"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {","lastModifiedDate":"2017-06-19"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        if (person.getName().isPrivate()) {","lastModifiedDate":"2017-10-16"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"            raise(new NewResultAvailableEvent(PRIVATE_NAME_CANNOT_SEARCH));","lastModifiedDate":"2017-10-16"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")","lastModifiedDate":"2017-08-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);","lastModifiedDate":"2017-08-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"     * Loads a google search for a person\u0027saddress if their address is not private","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"     * Prints out a message on the result display otherwise","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"     * @param person The person\u0027s address we want to search for","lastModifiedDate":"2017-10-28"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    private void loadMapsPage(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-28"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        if (person.getAddress().isPrivate()) {","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"            raise(new NewResultAvailableEvent(PRIVATE_ADDRESS_CANNOT_SEARCH));","lastModifiedDate":"2017-10-28"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-28"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"            loadPage(GOOGLE_MAPS_URL_PREFIX + person.getAddress().toString().replaceAll(\" \", \"+\")","lastModifiedDate":"2017-10-28"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"                + GOOGLE_MAPS_URL_SUFFIX);","lastModifiedDate":"2017-10-28"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void loadPage(String url) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));","lastModifiedDate":"2017-08-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme.","lastModifiedDate":"2017-03-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-02"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void loadDefaultPage() {","lastModifiedDate":"2017-03-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        loadPage(defaultPage.toExternalForm());","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Frees resources allocated to the browser.","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void freeResources() {","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        browser \u003d null;","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Subscribe","lastModifiedDate":"2017-06-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {","lastModifiedDate":"2017-06-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));","lastModifiedDate":"2017-06-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        loadPersonPage(event.getNewSelection().person);","lastModifiedDate":"2017-07-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"    @Subscribe","lastModifiedDate":"2017-10-28"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleBrowserPanelLocateEvent(BrowserPanelLocateEvent event) {","lastModifiedDate":"2017-10-28"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));","lastModifiedDate":"2017-10-28"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        loadMapsPage(event.getNewSelection());","lastModifiedDate":"2017-10-28"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"jeffreygohkw":37,"-":75}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import java.io.File;","lastModifiedDate":"2017-10-04"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import java.io.IOException;","lastModifiedDate":"2017-10-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2017-06-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import javafx.stage.FileChooser;","lastModifiedDate":"2017-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2017-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.OpenRequestEvent;","lastModifiedDate":"2017-10-03"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.SaveAsRequestEvent;","lastModifiedDate":"2017-10-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;","lastModifiedDate":"2017-06-16"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-10-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FxViewUtil;","lastModifiedDate":"2016-12-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2017-10-08"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.storage.XmlFileStorage;","lastModifiedDate":"2017-10-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    private static final String ICON \u003d \"/images/address_book_32_alternative.png\";","lastModifiedDate":"2017-10-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;","lastModifiedDate":"2016-10-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;","lastModifiedDate":"2016-10-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());","lastModifiedDate":"2017-06-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    private final FileChooser fileChooser \u003d new FileChooser();","lastModifiedDate":"2017-10-04"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"    private MainApp mainApp;","lastModifiedDate":"2017-10-04"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    private Storage storage;","lastModifiedDate":"2017-10-08"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model;","lastModifiedDate":"2017-10-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private BrowserPanel browserPanel;","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    private TaskListPanel taskListPanel;","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private Config config;","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private UserPrefs prefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private StackPane browserPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML","lastModifiedDate":"2017-10-08"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    private MenuItem openMenuItem;","lastModifiedDate":"2017-10-08"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML","lastModifiedDate":"2017-10-08"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    private MenuItem saveMenuItem;","lastModifiedDate":"2017-10-08"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML","lastModifiedDate":"2017-10-08"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    private MenuItem exitMenuItem;","lastModifiedDate":"2017-10-08"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    private StackPane taskListPanelPlaceholder;","lastModifiedDate":"2017-10-28"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.config \u003d config;","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.prefs \u003d prefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        setTitle(config.getAppTitle());","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        setIcon(ICON);","lastModifiedDate":"2016-08-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        setWindowMinSize();","lastModifiedDate":"2016-08-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(prefs);","lastModifiedDate":"2016-08-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Scene scene \u003d new Scene(getRoot());","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        primaryStage.setScene(scene);","lastModifiedDate":"2016-08-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);","lastModifiedDate":"2017-06-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(openMenuItem, KeyCombination.valueOf(\"CTRL+O\"));","lastModifiedDate":"2017-10-08"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(saveMenuItem, KeyCombination.valueOf(\"CTRL+S\"));","lastModifiedDate":"2017-10-08"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        setAccelerator(exitMenuItem, KeyCombination.valueOf(\"ALT+F4\"));","lastModifiedDate":"2017-10-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-04"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"     * Is called by the main application to give a reference back to itself.","lastModifiedDate":"2017-10-04"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"     *","lastModifiedDate":"2017-10-04"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"     * @param mainApp the MainApp itself","lastModifiedDate":"2017-10-08"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-04"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"    public void setMainApp(MainApp mainApp) {","lastModifiedDate":"2017-10-04"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"        this.mainApp \u003d mainApp;","lastModifiedDate":"2017-10-04"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-04"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-08"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"     * Is called by the main application to provide MainWindow with Storage","lastModifiedDate":"2017-10-08"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"     *","lastModifiedDate":"2017-10-08"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"     * @param s the Storage used by MainApp","lastModifiedDate":"2017-10-08"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-08"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"    public void setStorage(Storage s) {","lastModifiedDate":"2017-10-08"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"        this.storage \u003d s;","lastModifiedDate":"2017-10-08"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-08"},{"lineNumber":174,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":175,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-08"},{"lineNumber":176,"author":{"gitId":"jeffreygohkw"},"content":"     * Is called by the main application to  provide MainWindow with Model","lastModifiedDate":"2017-10-08"},{"lineNumber":177,"author":{"gitId":"jeffreygohkw"},"content":"     *","lastModifiedDate":"2017-10-08"},{"lineNumber":178,"author":{"gitId":"jeffreygohkw"},"content":"     * @param m the Model used by MainApp","lastModifiedDate":"2017-10-08"},{"lineNumber":179,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-08"},{"lineNumber":180,"author":{"gitId":"jeffreygohkw"},"content":"    public void setModel(Model m) {","lastModifiedDate":"2017-10-08"},{"lineNumber":181,"author":{"gitId":"jeffreygohkw"},"content":"        this.model \u003d m;","lastModifiedDate":"2017-10-08"},{"lineNumber":182,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-08"},{"lineNumber":183,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        browserPanel \u003d new BrowserPanel();","lastModifiedDate":"2017-06-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2017-06-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());","lastModifiedDate":"2017-10-28"},{"lineNumber":195,"author":{"gitId":"Esilocke"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());","lastModifiedDate":"2017-10-28"},{"lineNumber":196,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2017-06-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":"        String preferredFilePath \u003d this.prefs.getAddressBookFilePath();","lastModifiedDate":"2017-10-19"},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(preferredFilePath, logic.getFilteredPersonList().size());","lastModifiedDate":"2017-10-19"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);","lastModifiedDate":"2017-06-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    void hide() {","lastModifiedDate":"2016-10-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2016-08-18"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    private void setTitle(String appTitle) {","lastModifiedDate":"2016-08-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        primaryStage.setTitle(appTitle);","lastModifiedDate":"2016-08-18"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-02"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Sets the given image as the icon of the main window.","lastModifiedDate":"2016-12-02"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}","lastModifiedDate":"2016-12-02"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-02"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    private void setIcon(String iconSource) {","lastModifiedDate":"2016-12-02"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);","lastModifiedDate":"2016-12-02"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-02"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-02"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * Sets the default size based on user preferences.","lastModifiedDate":"2016-08-18"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {","lastModifiedDate":"2016-10-15"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());","lastModifiedDate":"2016-08-18"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());","lastModifiedDate":"2016-08-18"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2016-08-18"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());","lastModifiedDate":"2016-08-18"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());","lastModifiedDate":"2016-08-18"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private void setWindowMinSize() {","lastModifiedDate":"2016-08-18"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);","lastModifiedDate":"2016-08-18"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);","lastModifiedDate":"2016-08-18"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Returns the current size and the position of the main Window.","lastModifiedDate":"2016-08-18"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    GuiSettings getCurrentGuiSetting() {","lastModifiedDate":"2016-10-15"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2016-08-18"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2016-08-18"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     * Opens the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();","lastModifiedDate":"2016-12-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":262,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-03"},{"lineNumber":263,"author":{"gitId":"jeffreygohkw"},"content":"     * Opens the data from a desired location","lastModifiedDate":"2017-10-03"},{"lineNumber":264,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-03"},{"lineNumber":265,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML","lastModifiedDate":"2017-10-03"},{"lineNumber":266,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleOpen() throws IOException, DataConversionException {","lastModifiedDate":"2017-10-08"},{"lineNumber":267,"author":{"gitId":"jeffreygohkw"},"content":"        // Set extension filter","lastModifiedDate":"2017-10-08"},{"lineNumber":268,"author":{"gitId":"jeffreygohkw"},"content":"        FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter(","lastModifiedDate":"2017-10-08"},{"lineNumber":269,"author":{"gitId":"jeffreygohkw"},"content":"                \"XML files (*.xml)\", \"*.xml\");","lastModifiedDate":"2017-10-08"},{"lineNumber":270,"author":{"gitId":"jeffreygohkw"},"content":"        fileChooser.getExtensionFilters().add(extFilter);","lastModifiedDate":"2017-10-08"},{"lineNumber":271,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":272,"author":{"gitId":"jeffreygohkw"},"content":"        // Show open file dialog","lastModifiedDate":"2017-10-08"},{"lineNumber":273,"author":{"gitId":"jeffreygohkw"},"content":"        File file \u003d fileChooser.showOpenDialog(primaryStage);","lastModifiedDate":"2017-10-04"},{"lineNumber":274,"author":{"gitId":"jeffreygohkw"},"content":"        if (file !\u003d null) {","lastModifiedDate":"2017-10-04"},{"lineNumber":275,"author":{"gitId":"jeffreygohkw"},"content":"            // Change file path to the opened file","lastModifiedDate":"2017-10-08"},{"lineNumber":276,"author":{"gitId":"jeffreygohkw"},"content":"            storage.changeFilePath(file.getPath(), prefs);","lastModifiedDate":"2017-10-08"},{"lineNumber":277,"author":{"gitId":"jeffreygohkw"},"content":"            // Reset data in the model to the data from the opened file","lastModifiedDate":"2017-10-08"},{"lineNumber":278,"author":{"gitId":"jeffreygohkw"},"content":"            model.resetData(XmlFileStorage.loadDataFromSaveFile(file));","lastModifiedDate":"2017-10-08"},{"lineNumber":279,"author":{"gitId":"jeffreygohkw"},"content":"            // Update the UI","lastModifiedDate":"2017-10-08"},{"lineNumber":280,"author":{"gitId":"jeffreygohkw"},"content":"            fillInnerParts();","lastModifiedDate":"2017-10-08"},{"lineNumber":281,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-04"},{"lineNumber":282,"author":{"gitId":"jeffreygohkw"},"content":"        raise(new OpenRequestEvent());","lastModifiedDate":"2017-10-03"},{"lineNumber":283,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-03"},{"lineNumber":284,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":285,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-03"},{"lineNumber":286,"author":{"gitId":"jeffreygohkw"},"content":"     * Saves the data at a desired location","lastModifiedDate":"2017-10-03"},{"lineNumber":287,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-03"},{"lineNumber":288,"author":{"gitId":"jeffreygohkw"},"content":"    @FXML","lastModifiedDate":"2017-10-03"},{"lineNumber":289,"author":{"gitId":"jeffreygohkw"},"content":"    private void handleSaveAs() throws IOException {","lastModifiedDate":"2017-10-08"},{"lineNumber":290,"author":{"gitId":"jeffreygohkw"},"content":"        // Set extension filter","lastModifiedDate":"2017-10-08"},{"lineNumber":291,"author":{"gitId":"jeffreygohkw"},"content":"        FileChooser.ExtensionFilter extFilter \u003d new FileChooser.ExtensionFilter(","lastModifiedDate":"2017-10-08"},{"lineNumber":292,"author":{"gitId":"jeffreygohkw"},"content":"                \"XML files (*.xml)\", \"*.xml\");","lastModifiedDate":"2017-10-08"},{"lineNumber":293,"author":{"gitId":"jeffreygohkw"},"content":"        fileChooser.getExtensionFilters().add(extFilter);","lastModifiedDate":"2017-10-08"},{"lineNumber":294,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-08"},{"lineNumber":295,"author":{"gitId":"jeffreygohkw"},"content":"        // Show save file dialog","lastModifiedDate":"2017-10-08"},{"lineNumber":296,"author":{"gitId":"jeffreygohkw"},"content":"        File file \u003d fileChooser.showSaveDialog(primaryStage);","lastModifiedDate":"2017-10-04"},{"lineNumber":297,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":298,"author":{"gitId":"jeffreygohkw"},"content":"        if (file !\u003d null) {","lastModifiedDate":"2017-10-08"},{"lineNumber":299,"author":{"gitId":"jeffreygohkw"},"content":"            // Make sure it has the correct extension","lastModifiedDate":"2017-10-08"},{"lineNumber":300,"author":{"gitId":"jeffreygohkw"},"content":"            if (!file.getPath().endsWith(\".xml\")) {","lastModifiedDate":"2017-10-08"},{"lineNumber":301,"author":{"gitId":"jeffreygohkw"},"content":"                file \u003d new File(file.getPath() + \".xml\");","lastModifiedDate":"2017-10-08"},{"lineNumber":302,"author":{"gitId":"jeffreygohkw"},"content":"            }","lastModifiedDate":"2017-10-08"},{"lineNumber":303,"author":{"gitId":"jeffreygohkw"},"content":"            // Change file path to the new save file","lastModifiedDate":"2017-10-08"},{"lineNumber":304,"author":{"gitId":"jeffreygohkw"},"content":"            storage.changeFilePath(file.getPath(), prefs);","lastModifiedDate":"2017-10-08"},{"lineNumber":305,"author":{"gitId":"jeffreygohkw"},"content":"            // Save the address book data and the user preferences","lastModifiedDate":"2017-10-08"},{"lineNumber":306,"author":{"gitId":"jeffreygohkw"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2017-10-08"},{"lineNumber":307,"author":{"gitId":"jeffreygohkw"},"content":"            storage.saveUserPrefs(prefs);","lastModifiedDate":"2017-10-08"},{"lineNumber":308,"author":{"gitId":"jeffreygohkw"},"content":"            // Update the UI","lastModifiedDate":"2017-10-08"},{"lineNumber":309,"author":{"gitId":"jeffreygohkw"},"content":"            fillInnerParts();","lastModifiedDate":"2017-10-08"},{"lineNumber":310,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-04"},{"lineNumber":311,"author":{"gitId":"jeffreygohkw"},"content":"        raise(new SaveAsRequestEvent());","lastModifiedDate":"2017-10-03"},{"lineNumber":312,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-03"},{"lineNumber":313,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-03"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":315,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":316,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        raise(new ExitAppRequestEvent());","lastModifiedDate":"2016-08-26"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        return this.personListPanel;","lastModifiedDate":"2016-08-25"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":326,"author":{"gitId":"Esilocke"},"content":"    public TaskListPanel getTaskListPanel() {","lastModifiedDate":"2017-10-30"},{"lineNumber":327,"author":{"gitId":"Esilocke"},"content":"        return this.taskListPanel;","lastModifiedDate":"2017-10-30"},{"lineNumber":328,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-30"},{"lineNumber":329,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-30"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    void releaseResources() {","lastModifiedDate":"2016-10-15"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        browserPanel.freeResources();","lastModifiedDate":"2016-09-21"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    @Subscribe","lastModifiedDate":"2017-06-16"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {","lastModifiedDate":"2017-06-16"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));","lastModifiedDate":"2017-06-16"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        handleHelp();","lastModifiedDate":"2017-06-16"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"charlesgoh":3,"jeffreygohkw":107,"Esilocke":11,"-":218}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"charlesgoh"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-10-19"},{"lineNumber":4,"author":{"gitId":"charlesgoh"},"content":"import java.util.Random;","lastModifiedDate":"2017-10-19"},{"lineNumber":5,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.beans.binding.Bindings;","lastModifiedDate":"2017-07-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"     * Preset values for random selection later.","lastModifiedDate":"2017-10-23"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    private enum Colours {","lastModifiedDate":"2017-10-23"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"        blue, green, brown, purple, navy, crimson, firebrick, maroon, red","lastModifiedDate":"2017-10-23"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    private static HashMap\u003cString, String\u003e colourHash \u003d new HashMap\u003cString, String\u003e();","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    private static Random randomNumber \u003d new Random();","lastModifiedDate":"2017-10-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public final ReadOnlyPerson person;","lastModifiedDate":"2017-07-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    private Label remark;","lastModifiedDate":"2017-10-23"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    @FXML","lastModifiedDate":"2017-10-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        initTags(person);","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        bindListeners(person);","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * so that they will be notified of any changes.","lastModifiedDate":"2017-07-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));","lastModifiedDate":"2017-10-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));","lastModifiedDate":"2017-07-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {","lastModifiedDate":"2017-07-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            tags.getChildren().clear();","lastModifiedDate":"2017-07-12"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"            initTags(person);","lastModifiedDate":"2017-10-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2017-07-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-15"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"     * Locate hashed colour for tag. If not found, new colour is assigned to tag","lastModifiedDate":"2017-10-15"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"     * @param tag","lastModifiedDate":"2017-10-15"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"     * @return","lastModifiedDate":"2017-10-15"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-15"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"    private String getTagColour(String tag) {","lastModifiedDate":"2017-10-15"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"        if (!colourHash.containsKey(tag)) {","lastModifiedDate":"2017-10-15"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"            int randomiser \u003d randomNumber.nextInt(Colours.values().length);","lastModifiedDate":"2017-10-23"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"            String colour \u003d Colours.values()[randomiser].toString();","lastModifiedDate":"2017-10-15"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"            colourHash.put(tag, colour);","lastModifiedDate":"2017-10-15"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-15"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        return colourHash.get(tag);","lastModifiedDate":"2017-10-15"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-15"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-15"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"     * Assigns each tag a colour","lastModifiedDate":"2017-10-15"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"     * @param person","lastModifiedDate":"2017-10-15"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void initTags(ReadOnlyPerson person) {","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        person.getTags().forEach(tag -\u003e {","lastModifiedDate":"2017-10-15"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"            Label newTagLabel \u003d new Label(tag.getTagName());","lastModifiedDate":"2017-10-15"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"            newTagLabel.setStyle(\"-fx-background-color: \" + this.getTagColour(tag.getTagName()));","lastModifiedDate":"2017-10-15"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-15"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"            tags.getChildren().add(newTagLabel);","lastModifiedDate":"2017-10-15"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"        });","lastModifiedDate":"2017-10-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"charlesgoh":31,"wangyiming1019":9,"-":85}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Clock;","lastModifiedDate":"2017-02-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Date;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.controlsfx.control.StatusBar;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2016-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2017-08-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;","lastModifiedDate":"2016-09-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";","lastModifiedDate":"2017-02-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";","lastModifiedDate":"2017-02-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used to generate time stamps.","lastModifiedDate":"2017-02-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-02-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * TODO: change clock to an instance variable.","lastModifiedDate":"2017-02-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * We leave it as a static variable because manual dependency injection","lastModifiedDate":"2017-02-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,","lastModifiedDate":"2017-02-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * but it should be easier once we have factories/DI frameworks.","lastModifiedDate":"2017-02-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();","lastModifiedDate":"2017-02-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);","lastModifiedDate":"2016-09-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StatusBar syncStatus;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"    private StatusBar totalPersons;","lastModifiedDate":"2017-10-17"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    @FXML","lastModifiedDate":"2017-10-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private StatusBar saveLocationStatus;","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    public StatusBarFooter(String saveLocation, int initialTotalPersons) {","lastModifiedDate":"2017-10-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);","lastModifiedDate":"2017-04-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);","lastModifiedDate":"2017-04-01"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        setTotalPersons(initialTotalPersons);","lastModifiedDate":"2017-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        registerAsAnEventHandler(this);","lastModifiedDate":"2017-04-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Sets the clock used to determine the current time.","lastModifiedDate":"2017-02-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static void setClock(Clock clock) {","lastModifiedDate":"2017-02-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        StatusBarFooter.clock \u003d clock;","lastModifiedDate":"2017-02-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns the clock currently in use.","lastModifiedDate":"2017-02-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Clock getClock() {","lastModifiedDate":"2017-02-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return clock;","lastModifiedDate":"2017-02-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private void setSaveLocation(String location) {","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));","lastModifiedDate":"2017-08-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private void setSyncStatus(String status) {","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));","lastModifiedDate":"2017-08-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Subscribe","lastModifiedDate":"2016-09-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {","lastModifiedDate":"2016-09-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        long now \u003d clock.millis();","lastModifiedDate":"2017-02-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();","lastModifiedDate":"2017-02-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));","lastModifiedDate":"2016-09-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));","lastModifiedDate":"2017-02-25"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        this.setTotalPersons(abce.data.getPersonList().size());","lastModifiedDate":"2017-10-17"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-17"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-17"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"    private void setTotalPersons(int totalPersons) {","lastModifiedDate":"2017-10-17"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) listed\");","lastModifiedDate":"2017-10-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"charlesgoh":9,"-":80}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import javafx.beans.binding.Bindings;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * A UI component that displays the information of a {@code Task}","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" * */","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class TaskCard  extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"     *","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    public final ReadOnlyTask task;","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private HBox taskCardPane;","lastModifiedDate":"2017-10-28"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    private Label taskName;","lastModifiedDate":"2017-10-28"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    private Label id;","lastModifiedDate":"2017-10-28"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    private Label description;","lastModifiedDate":"2017-10-28"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private Label deadline;","lastModifiedDate":"2017-10-28"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    private Label priority;","lastModifiedDate":"2017-10-28"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public TaskCard(ReadOnlyTask task, int displayedIndex) {","lastModifiedDate":"2017-10-28"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        super(FXML);","lastModifiedDate":"2017-10-28"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        this.task \u003d task;","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2017-10-28"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        bindListeners(task);","lastModifiedDate":"2017-10-28"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"     * Binds the individual UI elements to observe their respective {@code Task} properties","lastModifiedDate":"2017-10-28"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"     * so that they will be notified of any changes.","lastModifiedDate":"2017-10-28"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    private void bindListeners(ReadOnlyTask task) {","lastModifiedDate":"2017-10-28"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        taskName.textProperty().bind(Bindings.convert(task.taskNameProperty()));","lastModifiedDate":"2017-10-28"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        description.textProperty().bind(Bindings.convert(task.descriptionProperty()));","lastModifiedDate":"2017-10-28"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        deadline.textProperty().bind(Bindings.convert(task.deadlineProperty()));","lastModifiedDate":"2017-10-28"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        priority.textProperty().bind(Bindings.convert(task.priorityProperty()));","lastModifiedDate":"2017-10-28"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        // short circuit if same object","lastModifiedDate":"2017-10-28"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-10-28"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            return true;","lastModifiedDate":"2017-10-28"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-10-28"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        if (!(other instanceof TaskCard)) {","lastModifiedDate":"2017-10-28"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            return false;","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        // state check","lastModifiedDate":"2017-10-28"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        TaskCard card \u003d (TaskCard) other;","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-10-28"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"                \u0026\u0026 task.equals(card.task);","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"Esilocke":76}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.ui;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import org.fxmisc.easybind.EasyBind;","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import javafx.application.Platform;","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":" * Panel containing the list of tasks.","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    @FXML","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private ListView\u003cTaskCard\u003e taskListView;","lastModifiedDate":"2017-10-28"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public TaskListPanel(ObservableList\u003cReadOnlyTask\u003e taskList) {","lastModifiedDate":"2017-10-28"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        super(FXML);","lastModifiedDate":"2017-10-28"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        setConnections(taskList);","lastModifiedDate":"2017-10-28"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        registerAsAnEventHandler(this);","lastModifiedDate":"2017-10-28"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    private void setConnections(ObservableList\u003cReadOnlyTask\u003e taskList) {","lastModifiedDate":"2017-10-28"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map(","lastModifiedDate":"2017-10-28"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                taskList, (task) -\u003e new TaskCard(task, taskList.indexOf(task) + 1));","lastModifiedDate":"2017-10-28"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        taskListView.setItems(mappedList);","lastModifiedDate":"2017-10-28"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());","lastModifiedDate":"2017-10-28"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        setEventHandlerForSelectionChangeEvent();","lastModifiedDate":"2017-10-28"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    private void setEventHandlerForSelectionChangeEvent() {","lastModifiedDate":"2017-10-28"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        taskListView.getSelectionModel().selectedItemProperty()","lastModifiedDate":"2017-10-28"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {","lastModifiedDate":"2017-10-28"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"                    if (newValue !\u003d null) {","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");","lastModifiedDate":"2017-10-28"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"                        raise(new TaskPanelSelectionChangedEvent(newValue));","lastModifiedDate":"2017-10-28"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"                    }","lastModifiedDate":"2017-10-28"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"                });","lastModifiedDate":"2017-10-28"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"     * Scrolls to the {@code TaskCard} at the {@code index} and selects it.","lastModifiedDate":"2017-10-28"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    private void scrollTo(int index) {","lastModifiedDate":"2017-10-28"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        Platform.runLater(() -\u003e {","lastModifiedDate":"2017-10-28"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"            taskListView.scrollTo(index);","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);","lastModifiedDate":"2017-10-28"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        });","lastModifiedDate":"2017-10-28"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"    @Subscribe","lastModifiedDate":"2017-10-28"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {","lastModifiedDate":"2017-10-28"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));","lastModifiedDate":"2017-10-28"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        scrollTo(event.targetIndex);","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}.","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        protected void updateItem(TaskCard task, boolean empty) {","lastModifiedDate":"2017-10-28"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"            super.updateItem(task, empty);","lastModifiedDate":"2017-10-28"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"            if (empty || task \u003d\u003d null) {","lastModifiedDate":"2017-10-28"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"                setGraphic(null);","lastModifiedDate":"2017-10-28"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"                setText(null);","lastModifiedDate":"2017-10-28"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            } else {","lastModifiedDate":"2017-10-28"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"                setGraphic(task.getRoot());","lastModifiedDate":"2017-10-28"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-28"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"Esilocke":88}},{"path":"src/main/java/seedu/address/ui/Ui.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /** Stops the UI. */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    void stop();","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    /** Gets the main window. */","lastModifiedDate":"2017-10-04"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    MainWindow getMainWindow();","lastModifiedDate":"2017-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"jeffreygohkw":2,"-":16}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.google.common.eventbus.Subscribe;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.ComponentManager;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;","lastModifiedDate":"2016-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-08-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class UiManager extends ComponentManager implements Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";","lastModifiedDate":"2017-06-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";","lastModifiedDate":"2017-06-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";","lastModifiedDate":"2017-06-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":33,"author":{"gitId":"charlesgoh"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32_alternative.png\";","lastModifiedDate":"2017-10-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Config config;","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private UserPrefs prefs;","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.config \u003d config;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.prefs \u003d prefs;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        mainWindow.hide();","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        mainWindow.releaseResources();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    public MainWindow getMainWindow() {","lastModifiedDate":"2017-10-04"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        return mainWindow;","lastModifiedDate":"2017-10-04"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-04"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);","lastModifiedDate":"2017-06-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Subscribe","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {","lastModifiedDate":"2016-09-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));","lastModifiedDate":"2016-09-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,","lastModifiedDate":"2017-06-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                event.exception);","lastModifiedDate":"2017-06-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"charlesgoh":1,"jeffreygohkw":4,"-":120}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.Rule;","lastModifiedDate":"2016-09-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Rule","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32_alternative.png\"));","lastModifiedDate":"2017-10-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        AppUtil.getImage(null);","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalArgumentException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(false);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        thrown.expect(IllegalArgumentException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        thrown.expectMessage(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"charlesgoh":1,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-05-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-06-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;","lastModifiedDate":"2017-05-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Rule;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-10-17"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Rule","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        ModelStubAcceptingObjectAdded modelStub \u003d new ModelStubAcceptingObjectAdded();","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        ModelStubAcceptingObjectAdded modelStub \u003d new ModelStubAcceptingObjectAdded();","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        Task validTask \u003d new TaskBuilder().build();","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        CommandResult commandResult \u003d getAddCommandForTask(validTask, modelStub).execute();","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_TASK_SUCCESS, validTask), commandResult.feedbackToUser);","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);","lastModifiedDate":"2017-10-24"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        ModelStub modelStub \u003d new ModelStubAlwaysThrowingDuplicateException();","lastModifiedDate":"2017-10-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        thrown.expect(CommandException.class);","lastModifiedDate":"2017-05-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-05-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();","lastModifiedDate":"2017-05-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {","lastModifiedDate":"2017-10-24"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        ModelStub modelStub \u003d new ModelStubAlwaysThrowingDuplicateException();","lastModifiedDate":"2017-10-24"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        Task validTask \u003d new TaskBuilder().build();","lastModifiedDate":"2017-10-24"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        thrown.expect(CommandException.class);","lastModifiedDate":"2017-10-24"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        getAddCommandForTask(validTask, modelStub).execute();","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        Task paper \u003d new TaskBuilder().withTaskName(\"Paper\").build();","lastModifiedDate":"2017-10-24"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        Task pencil \u003d new TaskBuilder().withTaskName(\"Pencil\").build();","lastModifiedDate":"2017-10-24"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"        AddCommand addPaperCommand \u003d new AddCommand(paper);","lastModifiedDate":"2017-10-24"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        AddCommand addPencilCommand \u003d new AddCommand(pencil);","lastModifiedDate":"2017-10-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        assertTrue(addPaperCommand.equals(addPaperCommand));","lastModifiedDate":"2017-10-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        AddCommand addPaperCommandCopy \u003d new AddCommand(paper);","lastModifiedDate":"2017-10-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        assertTrue(addPaperCommand.equals(addPaperCommandCopy));","lastModifiedDate":"2017-10-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addPaperCommand.equals(\"\"));","lastModifiedDate":"2017-10-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addPaperCommand.equals(null));","lastModifiedDate":"2017-10-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        // different person/task -\u003e returns false","lastModifiedDate":"2017-10-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addPaperCommand.equals(addPencilCommand));","lastModifiedDate":"2017-10-24"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        // add person vs add task -\u003e returns false","lastModifiedDate":"2017-10-24"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"        assertFalse(addAliceCommand.equals(addPaperCommand));","lastModifiedDate":"2017-10-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Generates a new AddCommand with the details of the given person.","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {","lastModifiedDate":"2017-08-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        AddCommand command \u003d new AddCommand(person);","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-07-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return command;","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":135,"author":{"gitId":"Esilocke"},"content":"     * Generates a new AddCommand with the details of the given person.","lastModifiedDate":"2017-10-24"},{"lineNumber":136,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":137,"author":{"gitId":"Esilocke"},"content":"    private AddCommand getAddCommandForTask(Task task, Model model) {","lastModifiedDate":"2017-10-24"},{"lineNumber":138,"author":{"gitId":"Esilocke"},"content":"        AddCommand command \u003d new AddCommand(task);","lastModifiedDate":"2017-10-24"},{"lineNumber":139,"author":{"gitId":"Esilocke"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-24"},{"lineNumber":140,"author":{"gitId":"Esilocke"},"content":"        return command;","lastModifiedDate":"2017-10-24"},{"lineNumber":141,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":142,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {","lastModifiedDate":"2017-03-02"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":"        @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":153,"author":{"gitId":"wangyiming1019"},"content":"        public void addTag(Tag toAdd, ArrayList\u003cIndex\u003e targetIndexes)  {","lastModifiedDate":"2017-10-16"},{"lineNumber":154,"author":{"gitId":"wangyiming1019"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-16"},{"lineNumber":155,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":156,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":162,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-28"},{"lineNumber":163,"author":{"gitId":"Esilocke"},"content":"        public void resetPartialData(ReadOnlyAddressBook newData, Prefix prefix) {","lastModifiedDate":"2017-10-28"},{"lineNumber":164,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-28"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return null;","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":178,"author":{"gitId":"wangyiming1019"},"content":"        @Override","lastModifiedDate":"2017-10-16"},{"lineNumber":179,"author":{"gitId":"wangyiming1019"},"content":"        public void deleteTag(Tag toDelete, ArrayList\u003cIndex\u003e targetIndexes) {","lastModifiedDate":"2017-10-16"},{"lineNumber":180,"author":{"gitId":"wangyiming1019"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-16"},{"lineNumber":181,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":182,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)","lastModifiedDate":"2017-06-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                throws DuplicatePersonException {","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-10-20"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"        public void editTag(Tag toChange, Tag newTag, ArrayList\u003cIndex\u003e affectedIndexes) throws PersonNotFoundException,","lastModifiedDate":"2017-10-20"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"                DuplicatePersonException {","lastModifiedDate":"2017-10-20"},{"lineNumber":192,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-20"},{"lineNumber":193,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2017-09-01"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            return null;","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-05-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-10-01"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":206,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":207,"author":{"gitId":"Esilocke"},"content":"        public void updateFilteredTaskList(Predicate\u003cReadOnlyTask\u003e predicate) {","lastModifiedDate":"2017-10-26"},{"lineNumber":208,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-26"},{"lineNumber":209,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":211,"author":{"gitId":"charlesgoh"},"content":"        @Override","lastModifiedDate":"2017-10-01"},{"lineNumber":212,"author":{"gitId":"charlesgoh"},"content":"        public void sortPersons(String field, String order) {","lastModifiedDate":"2017-10-01"},{"lineNumber":213,"author":{"gitId":"charlesgoh"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-01"},{"lineNumber":214,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":215,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":216,"author":{"gitId":"wangyiming1019"},"content":"        @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":217,"author":{"gitId":"wangyiming1019"},"content":"        public void favouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":218,"author":{"gitId":"wangyiming1019"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-25"},{"lineNumber":219,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":220,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"        public void addTask(ReadOnlyTask toAdd) throws DuplicateTaskException {","lastModifiedDate":"2017-10-24"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":226,"author":{"gitId":"wangyiming1019"},"content":"        @Override","lastModifiedDate":"2017-10-25"},{"lineNumber":227,"author":{"gitId":"wangyiming1019"},"content":"        public void unfavouritePerson(ReadOnlyPerson target) throws PersonNotFoundException {","lastModifiedDate":"2017-10-25"},{"lineNumber":228,"author":{"gitId":"wangyiming1019"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-25"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":230,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":231,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"        public void deleteTask(ReadOnlyTask toDelete) throws TaskNotFoundException {","lastModifiedDate":"2017-10-24"},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":235,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":236,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":237,"author":{"gitId":"Esilocke"},"content":"        public ObservableList\u003cReadOnlyTask\u003e getFilteredTaskList() {","lastModifiedDate":"2017-10-24"},{"lineNumber":238,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":239,"author":{"gitId":"Esilocke"},"content":"            return null;","lastModifiedDate":"2017-10-24"},{"lineNumber":240,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":241,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":242,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-26"},{"lineNumber":243,"author":{"gitId":"Esilocke"},"content":"        public void updateTask(ReadOnlyTask target, ReadOnlyTask editedTask) throws DuplicateTaskException {","lastModifiedDate":"2017-10-26"},{"lineNumber":244,"author":{"gitId":"Esilocke"},"content":"            fail(\"This method should not be called.\");","lastModifiedDate":"2017-10-26"},{"lineNumber":245,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"Esilocke"},"content":"     * A Model stub that always throw a DuplicateDataException when trying to add a person or task.","lastModifiedDate":"2017-10-24"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"Esilocke"},"content":"    private class ModelStubAlwaysThrowingDuplicateException extends ModelStub {","lastModifiedDate":"2017-10-24"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {","lastModifiedDate":"2017-03-02"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":258,"author":{"gitId":"Esilocke"},"content":"        public void addTask(ReadOnlyTask task) throws DuplicateTaskException {","lastModifiedDate":"2017-10-24"},{"lineNumber":259,"author":{"gitId":"Esilocke"},"content":"            throw new DuplicateTaskException();","lastModifiedDate":"2017-10-24"},{"lineNumber":260,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":261,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":269,"author":{"gitId":"Esilocke"},"content":"     * A Model stub that always accept the person or task being added.","lastModifiedDate":"2017-10-24"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":271,"author":{"gitId":"Esilocke"},"content":"    private class ModelStubAcceptingObjectAdded extends ModelStub {","lastModifiedDate":"2017-10-24"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":273,"author":{"gitId":"Esilocke"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-24"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {","lastModifiedDate":"2017-03-02"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            personsAdded.add(new Person(person));","lastModifiedDate":"2017-03-02"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":280,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":281,"author":{"gitId":"Esilocke"},"content":"        public void addTask(ReadOnlyTask task) throws DuplicateTaskException {","lastModifiedDate":"2017-10-24"},{"lineNumber":282,"author":{"gitId":"Esilocke"},"content":"            tasksAdded.add(new Task(task));","lastModifiedDate":"2017-10-24"},{"lineNumber":283,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":284,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"charlesgoh":4,"Esilocke":102,"wangyiming1019":24,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/AddTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-21"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-21"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-21"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-10-21"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-10-21"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;","lastModifiedDate":"2017-10-21"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-21"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-21"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-21"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-21"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-21"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-21"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-21"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-21"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-21"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-21"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-21"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-21"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code AddTagCommand}.","lastModifiedDate":"2017-10-21"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-21"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommandTest {","lastModifiedDate":"2017-10-21"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-21"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public void execute_validIndexAndTagUnfilteredListSuccess() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"teacher\");","lastModifiedDate":"2017-10-21"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, tagToAdd);","lastModifiedDate":"2017-10-21"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-21"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addTag(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-21"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexUnfilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-10-21"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);","lastModifiedDate":"2017-10-21"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-21"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexAndTagFilteredListSuccess() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-21"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"stranger\");","lastModifiedDate":"2017-10-21"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_SUCCESS, tagToAdd);","lastModifiedDate":"2017-10-21"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-21"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(expectedModel);","lastModifiedDate":"2017-10-21"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.addTag(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-21"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexFilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-21"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);","lastModifiedDate":"2017-10-21"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-10-21"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-21"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagUnfilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2017-10-21"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagFilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-21"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(tagToAdd, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_DUPLICATE_TAG);","lastModifiedDate":"2017-10-21"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes1 \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes2 \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        indexes2.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        Tag firstTag \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        Tag secondTag \u003d new Tag(\"classmates\");","lastModifiedDate":"2017-10-21"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"        final AddTagCommand standardCommand \u003d new AddTagCommand(firstTag, indexes1);","lastModifiedDate":"2017-10-21"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-21"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand commandWithSameValues \u003d new AddTagCommand(firstTag, indexes1);","lastModifiedDate":"2017-10-21"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-10-21"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-21"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-10-21"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-10-21"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-10-21"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"        // different target indexes -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(firstTag, indexes2)));","lastModifiedDate":"2017-10-21"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"        // different target tag -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(secondTag, indexes1)));","lastModifiedDate":"2017-10-21"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-21"},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an {@code AddTagCommand} with parameters {@code targetIndexes} and {@code tagToAdd}","lastModifiedDate":"2017-10-21"},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-21"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":"    private AddTagCommand prepareCommand(Tag tagToAdd, ArrayList\u003cIndex\u003e targetIndexes) {","lastModifiedDate":"2017-10-21"},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(tagToAdd, targetIndexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"        addTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-21"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":"        return addTagCommand;","lastModifiedDate":"2017-10-21"},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":149,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-21"},{"lineNumber":150,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":151,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"}],"authorContributionMap":{"wangyiming1019":151}},{"path":"src/test/java/seedu/address/logic/commands/ChangePrivacyCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-23"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertFalse;","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-23"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-23"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-23"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-23"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-23"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonPrivacySettingsBuilder;","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommandTest {","lastModifiedDate":"2017-10-23"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    public void personPrivacySettingsTests() {","lastModifiedDate":"2017-10-23"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettings();","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(pps.isAnyFieldNonNull());","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsByBuilder \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\")","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"            .setPhonePrivate(\"false\").setEmailPrivate(\"true\").setAddressPrivate(\"true\").build();","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setNameIsPrivate(true);","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setPhoneIsPrivate(false);","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setEmailIsPrivate(true);","lastModifiedDate":"2017-10-24"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setAddressIsPrivate(true);","lastModifiedDate":"2017-10-24"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getAddressIsPrivate(), pps.getAddressIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getEmailIsPrivate(), pps.getEmailIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getNameIsPrivate(), pps.getNameIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.getPhoneIsPrivate(), pps.getPhoneIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(ppsByBuilder.isAnyFieldNonNull(), pps.isAnyFieldNonNull());","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        Person newPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\").build();","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getEmail().setPrivate(true);","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.setRemark(model.getFilteredPersonList().get(0).getRemark());","lastModifiedDate":"2017-10-28"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(newPerson).setNamePrivate(\"false\")","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"false\").setEmailPrivate(\"true\").setAddressPrivate(\"false\").build();","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommand \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, pps);","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommand.model \u003d model;","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, newPerson);","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-10-24"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), newPerson);","lastModifiedDate":"2017-10-24"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-24"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsPublic \u003d new PersonPrivacySettingsBuilder(newPerson).setNamePrivate(\"false\")","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"false\").setEmailPrivate(\"false\").setAddressPrivate(\"false\").build();","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        newPerson.getEmail().setPrivate(false);","lastModifiedDate":"2017-10-28"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommandPublic \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, ppsPublic);","lastModifiedDate":"2017-10-28"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommandPublic.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessagePublic \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, newPerson);","lastModifiedDate":"2017-10-28"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), newPerson);","lastModifiedDate":"2017-10-28"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommandPublic, model, expectedMessagePublic, expectedModel);","lastModifiedDate":"2017-10-28"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        Person personInList \u003d new PersonBuilder().withName(lastPerson.getName().toString())","lastModifiedDate":"2017-10-26"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"                .withPhone(lastPerson.getPhone().toString()).withEmail(lastPerson.getEmail().toString())","lastModifiedDate":"2017-10-26"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"                .withAddress(lastPerson.getAddress().toString()).withRemark(lastPerson.getRemark().toString())","lastModifiedDate":"2017-10-26"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"                .withFavourite(lastPerson.getFavourite().toString())","lastModifiedDate":"2017-10-26"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"                .build();","lastModifiedDate":"2017-10-26"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.setTags(lastPerson.getTags());","lastModifiedDate":"2017-10-26"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getName().setPrivate(true);","lastModifiedDate":"2017-10-24"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getPhone().setPrivate(true);","lastModifiedDate":"2017-10-24"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(personInList).setNamePrivate(\"true\")","lastModifiedDate":"2017-10-24"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"true\").build();","lastModifiedDate":"2017-10-24"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommand \u003d new ChangePrivacyCommand(indexLastPerson, pps);","lastModifiedDate":"2017-10-24"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-26"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, personInList);","lastModifiedDate":"2017-10-24"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-10-24"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(lastPerson, personInList);","lastModifiedDate":"2017-10-24"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-24"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings ppsPublic \u003d new PersonPrivacySettingsBuilder(personInList).setNamePrivate(\"false\")","lastModifiedDate":"2017-10-26"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"                .setPhonePrivate(\"false\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getName().setPrivate(false);","lastModifiedDate":"2017-10-26"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"        personInList.getPhone().setPrivate(false);","lastModifiedDate":"2017-10-26"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand changePrivacyCommandPublic \u003d new ChangePrivacyCommand(indexLastPerson, ppsPublic);","lastModifiedDate":"2017-10-26"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        changePrivacyCommandPublic.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-26"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessagePublic \u003d String.format(ChangePrivacyCommand.MESSAGE_CHANGE_PRIVACY_SUCCESS, personInList);","lastModifiedDate":"2017-10-26"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(lastPerson, personInList);","lastModifiedDate":"2017-10-26"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandSuccess(changePrivacyCommandPublic, model, expectedMessagePublic, expectedModel);","lastModifiedDate":"2017-10-26"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-23"}],"authorContributionMap":{"jeffreygohkw":128}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.ClearCommand.TYPE_ALL;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model,","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"                String.format(ClearCommand.MESSAGE_SUCCESS, TYPE_ALL), model);","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(prepareCommand(model), model,","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"                String.format(ClearCommand.MESSAGE_SUCCESS, TYPE_ALL), model);","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}.","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private ClearCommand prepareCommand(Model model) {","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ClearCommand command \u003d new ClearCommand();","lastModifiedDate":"2017-06-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return command;","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Esilocke":5,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-06-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;","lastModifiedDate":"2017-06-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_PRIVATE;","lastModifiedDate":"2017-10-16"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_PRIVATE;","lastModifiedDate":"2017-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_PRIVATE;","lastModifiedDate":"2017-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_PRIVATE;","lastModifiedDate":"2017-10-16"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;","lastModifiedDate":"2017-10-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_REMARK_AMY \u003d \"She sells sea shells on the sea shore\";","lastModifiedDate":"2017-10-23"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    public static final String VALID_REMARK_BOB \u003d \"He eats, shoots and leaves\";","lastModifiedDate":"2017-10-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    public static final String VALID_FAVOURITE \u003d \"false\";","lastModifiedDate":"2017-10-25"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_TAG_COLLEAGUE \u003d \"colleague\";","lastModifiedDate":"2017-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_TASK_NAME_PENCIL \u003d \"Buy pencil\";","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_TASK_NAME_PAPER \u003d \"Buy paper\";","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DESCRIPTION_PENCIL \u003d \"Buy mechanical pencil from ABS\";","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DESCRIPTION_PAPER \u003d \"Buy 500 pieces of paper\";","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DEADLINE_PENCIL \u003d \"04-04-2017\";","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_DEADLINE_PAPER \u003d \"05-04-2017\";","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_PRIORITY_PENCIL \u003d \"1\";","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public static final String VALID_PRIORITY_PAPER \u003d \"3\";","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String NAME_DESC_AMY_PRIVATE \u003d \" \" + PREFIX_NAME_PRIVATE + VALID_NAME_AMY;","lastModifiedDate":"2017-10-16"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String NAME_DESC_BOB_PRIVATE \u003d \" \" + PREFIX_NAME_PRIVATE + VALID_NAME_BOB;","lastModifiedDate":"2017-10-16"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String PHONE_DESC_AMY_PRIVATE \u003d \" \" + PREFIX_PHONE_PRIVATE + VALID_PHONE_AMY;","lastModifiedDate":"2017-10-16"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String PHONE_DESC_BOB_PRIVATE \u003d \" \" + PREFIX_PHONE_PRIVATE + VALID_PHONE_BOB;","lastModifiedDate":"2017-10-16"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String EMAIL_DESC_AMY_PRIVATE \u003d \" \" + PREFIX_EMAIL_PRIVATE + VALID_EMAIL_AMY;","lastModifiedDate":"2017-10-16"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String EMAIL_DESC_BOB_PRIVATE \u003d \" \" + PREFIX_EMAIL_PRIVATE + VALID_EMAIL_BOB;","lastModifiedDate":"2017-10-16"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String ADDRESS_DESC_AMY_PRIVATE \u003d \" \" + PREFIX_ADDRESS_PRIVATE + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-10-16"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"    public static final String ADDRESS_DESC_BOB_PRIVATE \u003d \" \" + PREFIX_ADDRESS_PRIVATE + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-10-16"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_DESC_AMY_PRIVATE \u003d \" \" + PREFIX_ADDRESS_PRIVATE + VALID_REMARK_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"    public static final String REMARK_DESC_BOB_PRIVATE \u003d \" \" + PREFIX_ADDRESS_PRIVATE + VALID_REMARK_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_NAME_DESC_PENCIL \u003d \" \" + PREFIX_NAME + VALID_TASK_NAME_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_NAME_DESC_PAPER \u003d \" \" + PREFIX_NAME + VALID_TASK_NAME_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_DESC_PENCIL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    public static final String DESCRIPTION_DESC_PAPER \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_DESC_PENCIL \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    public static final String DEADLINE_DESC_PAPER \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_DESC_PENCIL \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"    public static final String PRIORITY_DESC_PAPER \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"20-20-20000\"; // bad date format","lastModifiedDate":"2017-10-24"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"6\"; // priority is out of bounds","lastModifiedDate":"2017-10-24"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"    public static final String TASK_SEPARATOR \u003d \" \" + PREFIX_TASK + \" \";","lastModifiedDate":"2017-10-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    public static final EditCommand.EditTaskDescriptor DESC_PENCIL;","lastModifiedDate":"2017-10-26"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"    public static final EditCommand.EditTaskDescriptor DESC_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"                .withRemark(VALID_REMARK_AMY).withFavourite(VALID_FAVOURITE)","lastModifiedDate":"2017-10-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"                .withRemark(VALID_REMARK_BOB).withFavourite(VALID_FAVOURITE)","lastModifiedDate":"2017-10-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-25"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        DESC_PENCIL \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_PENCIL)","lastModifiedDate":"2017-10-26"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PENCIL)","lastModifiedDate":"2017-10-26"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PENCIL).withPriority(VALID_PRIORITY_PENCIL).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        DESC_PAPER \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_PAPER)","lastModifiedDate":"2017-10-26"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PAPER)","lastModifiedDate":"2017-10-26"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"                .withDeadline(VALID_DEADLINE_PAPER).withPriority(VALID_PRIORITY_PAPER).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2017-08-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute();","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2017-06-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            command.execute();","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");","lastModifiedDate":"2017-06-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2017-06-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());","lastModifiedDate":"2017-06-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book.","lastModifiedDate":"2017-07-20"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public static void showFirstPersonOnly(Model model) {","lastModifiedDate":"2017-07-20"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2017-07-20"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;","lastModifiedDate":"2017-07-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book.","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public static void deleteFirstPerson(Model model) {","lastModifiedDate":"2017-08-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            model.deletePerson(firstPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);","lastModifiedDate":"2017-08-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":186,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":187,"author":{"gitId":"wangyiming1019"},"content":"     * Favourites the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book.","lastModifiedDate":"2017-10-25"},{"lineNumber":188,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":189,"author":{"gitId":"wangyiming1019"},"content":"    public static void favouriteFirstPerson(Model model) {","lastModifiedDate":"2017-10-25"},{"lineNumber":190,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson firstPerson \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2017-10-25"},{"lineNumber":191,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-25"},{"lineNumber":192,"author":{"gitId":"wangyiming1019"},"content":"            model.favouritePerson(firstPerson);","lastModifiedDate":"2017-10-25"},{"lineNumber":193,"author":{"gitId":"wangyiming1019"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2017-10-25"},{"lineNumber":194,"author":{"gitId":"wangyiming1019"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);","lastModifiedDate":"2017-10-25"},{"lineNumber":195,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-25"},{"lineNumber":196,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"charlesgoh":7,"jeffreygohkw":12,"Esilocke":34,"wangyiming1019":15,"-":129}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-06-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;","lastModifiedDate":"2017-07-20"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeleteCommand.DELETE_TYPE_PERSON;","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}.","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    private DeleteCommand prepareCommand(Index index, int type) {","lastModifiedDate":"2017-10-24"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index, type);","lastModifiedDate":"2017-10-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-07-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return deleteCommand;","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assert model.getFilteredPersonList().isEmpty();","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Esilocke":10,"-":109}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-21"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-21"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-21"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-10-21"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-10-21"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;","lastModifiedDate":"2017-10-21"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-21"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-21"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-21"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-21"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-21"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-21"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-21"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-21"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-21"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-21"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-21"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-21"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code RemoveTagCommand}.","lastModifiedDate":"2017-10-21"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-21"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommandTest {","lastModifiedDate":"2017-10-21"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-21"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexAndTagUnfilteredListSuccess() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-21"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.deleteTag(tagToDelete, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-21"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexAndTagFilteredListSuccess() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-21"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-21"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(expectedModel);","lastModifiedDate":"2017-10-21"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel.deleteTag(tagToDelete, indexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-21"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexUnfilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-10-21"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);","lastModifiedDate":"2017-10-21"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-21"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexFilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-21"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(outOfBoundIndex);","lastModifiedDate":"2017-10-21"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-10-21"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-21"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagUnfilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"someone\");","lastModifiedDate":"2017-10-21"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_NONEXISTENT_TAG);","lastModifiedDate":"2017-10-21"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidTagFilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-21"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"someone\");","lastModifiedDate":"2017-10-21"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_NONEXISTENT_TAG);","lastModifiedDate":"2017-10-21"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidTagNotInUnFilteredListThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-22"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(\"teacher\");","lastModifiedDate":"2017-10-21"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(indexes, tagToDelete);","lastModifiedDate":"2017-10-21"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":120,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(deleteTagCommand, model, DeleteTagCommand.MESSAGE_NONEXISTENT_TAG);","lastModifiedDate":"2017-10-21"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":124,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes1 \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes2 \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"        indexes1.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"        indexes2.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"        Tag firstTag \u003d new Tag(\"friends\");","lastModifiedDate":"2017-10-21"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"        Tag secondTag \u003d new Tag(\"classmates\");","lastModifiedDate":"2017-10-21"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"        final DeleteTagCommand standardCommand \u003d new DeleteTagCommand(firstTag, indexes1);","lastModifiedDate":"2017-10-21"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":134,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-21"},{"lineNumber":135,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand commandWithSameValues \u003d new DeleteTagCommand(firstTag, indexes1);","lastModifiedDate":"2017-10-21"},{"lineNumber":136,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-10-21"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-21"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-10-21"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-10-21"},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":145,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-10-21"},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":147,"author":{"gitId":"wangyiming1019"},"content":"        // different target indexes -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":148,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new DeleteTagCommand(firstTag, indexes2)));","lastModifiedDate":"2017-10-21"},{"lineNumber":149,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":150,"author":{"gitId":"wangyiming1019"},"content":"        // different target tag -\u003e returns false","lastModifiedDate":"2017-10-21"},{"lineNumber":151,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(standardCommand.equals(new DeleteTagCommand(secondTag, indexes1)));","lastModifiedDate":"2017-10-21"},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":153,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":154,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-21"},{"lineNumber":155,"author":{"gitId":"wangyiming1019"},"content":"     * Returns an {@code RemoveTagCommand} with parameters {@code targetIndexes} and {@code tagToDelete}","lastModifiedDate":"2017-10-21"},{"lineNumber":156,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-21"},{"lineNumber":157,"author":{"gitId":"wangyiming1019"},"content":"    private DeleteTagCommand prepareCommand(ArrayList\u003cIndex\u003e targetIndexes, Tag tagToDelete) {","lastModifiedDate":"2017-10-21"},{"lineNumber":158,"author":{"gitId":"wangyiming1019"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(tagToDelete, targetIndexes);","lastModifiedDate":"2017-10-21"},{"lineNumber":159,"author":{"gitId":"wangyiming1019"},"content":"        deleteTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-21"},{"lineNumber":160,"author":{"gitId":"wangyiming1019"},"content":"        return deleteTagCommand;","lastModifiedDate":"2017-10-21"},{"lineNumber":161,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":162,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-21"},{"lineNumber":163,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":164,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"}],"authorContributionMap":{"wangyiming1019":164}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-05-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-05-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {","lastModifiedDate":"2017-05-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2017-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() throws Exception {","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-07-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_privateFields_success() throws Exception {","lastModifiedDate":"2017-10-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2017-10-16"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getName().setPrivate(true);","lastModifiedDate":"2017-10-16"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        Name originalName \u003d personInFilteredList.getName();","lastModifiedDate":"2017-10-16"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getPhone().setPrivate(true);","lastModifiedDate":"2017-10-16"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        Phone originalPhone \u003d personInFilteredList.getPhone();","lastModifiedDate":"2017-10-16"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getEmail().setPrivate(true);","lastModifiedDate":"2017-10-16"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        Email originalEmail \u003d personInFilteredList.getEmail();","lastModifiedDate":"2017-10-16"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getAddress().setPrivate(true);","lastModifiedDate":"2017-10-16"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        Address originalAddress \u003d personInFilteredList.getAddress();","lastModifiedDate":"2017-10-16"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getRemark().setPrivate(true);","lastModifiedDate":"2017-10-28"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        Remark originalRemark \u003d personInFilteredList.getRemark();","lastModifiedDate":"2017-10-28"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2017-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_ALL_FIELDS_PRIVATE);","lastModifiedDate":"2017-10-28"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-10-16"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), personInFilteredList);","lastModifiedDate":"2017-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);","lastModifiedDate":"2017-10-28"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getName(), originalName);","lastModifiedDate":"2017-10-16"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getPhone(), originalPhone);","lastModifiedDate":"2017-10-16"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getEmail(), originalEmail);","lastModifiedDate":"2017-10-16"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getAddress(), originalAddress);","lastModifiedDate":"2017-10-16"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(personInFilteredList.getRemark(), originalRemark);","lastModifiedDate":"2017-10-28"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getName().setPrivate(false);","lastModifiedDate":"2017-10-16"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getPhone().setPrivate(false);","lastModifiedDate":"2017-10-16"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getEmail().setPrivate(false);","lastModifiedDate":"2017-10-16"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getAddress().setPrivate(false);","lastModifiedDate":"2017-10-16"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"        personInFilteredList.getRemark().setPrivate(false);","lastModifiedDate":"2017-10-28"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {","lastModifiedDate":"2017-10-29"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2017-10-29"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_ALL_FIELDS_PRIVATE);","lastModifiedDate":"2017-10-29"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);","lastModifiedDate":"2017-10-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));","lastModifiedDate":"2017-05-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-07-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-07-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2017-05-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2017-05-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-07-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2017-05-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-07-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-07-20"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,","lastModifiedDate":"2017-05-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-07-05"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2017-05-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}","lastModifiedDate":"2017-05-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);","lastModifiedDate":"2017-05-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-07-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return editCommand;","lastModifiedDate":"2017-05-22"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"jeffreygohkw":47,"-":183}},{"path":"src/test/java/seedu/address/logic/commands/EditTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-20"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLLEAGUE;","lastModifiedDate":"2017-10-20"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-10-20"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-10-20"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-10-20"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-10-20"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_EDIT_TAG_SUCCESS;","lastModifiedDate":"2017-10-20"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_TAG_NOT_FOUND;","lastModifiedDate":"2017-10-20"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTaglessAddressBook;","lastModifiedDate":"2017-10-20"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-20"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-20"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-10-20"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-20"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-20"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-20"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-20"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-20"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-10-20"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-20"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-20"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-20"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-20"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-10-20"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-10-20"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-20"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-10-20"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommandTest {","lastModifiedDate":"2017-10-20"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    public void noTagsPresent() throws IllegalValueException {","lastModifiedDate":"2017-10-20"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        Model taglessModel \u003d new ModelManager(getTaglessAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        Model blankModel \u003d new ModelManager(new AddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        String absentTag \u003d \"notInAddressBook\";","lastModifiedDate":"2017-10-20"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand noPersonCommand \u003d prepareCommand(VALID_TAG_FRIEND, absentTag, blankModel);","lastModifiedDate":"2017-10-20"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand noTagsCommand \u003d prepareCommand(VALID_TAG_FRIEND, absentTag, taglessModel);","lastModifiedDate":"2017-10-20"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand absentTagCommand \u003d prepareCommand(VALID_TAG_FRIEND, absentTag, model);","lastModifiedDate":"2017-10-20"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        // No people are in this address book","lastModifiedDate":"2017-10-20"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(noPersonCommand, taglessModel, MESSAGE_TAG_NOT_FOUND);","lastModifiedDate":"2017-10-20"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        // All persons do not have tags","lastModifiedDate":"2017-10-20"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(noTagsCommand, taglessModel, MESSAGE_TAG_NOT_FOUND);","lastModifiedDate":"2017-10-20"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        // No persons in address book has the required tag","lastModifiedDate":"2017-10-20"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        assertCommandFailure(absentTagCommand, model, MESSAGE_TAG_NOT_FOUND);","lastModifiedDate":"2017-10-20"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    public void editTagSubset() throws IllegalValueException, PersonNotFoundException {","lastModifiedDate":"2017-10-20"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d prepareAddressBook();","lastModifiedDate":"2017-10-20"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        Model testModel \u003d new ModelManager(testBook, new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand tagChangeColleagueToHusband \u003d prepareCommand(VALID_TAG_COLLEAGUE, VALID_TAG_HUSBAND, testModel);","lastModifiedDate":"2017-10-20"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EDIT_TAG_SUCCESS, VALID_TAG_COLLEAGUE, VALID_TAG_HUSBAND);","lastModifiedDate":"2017-10-20"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        Tag husbandTag \u003d new Tag(VALID_TAG_HUSBAND);","lastModifiedDate":"2017-10-20"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"        Tag colleagueTag \u003d new Tag(VALID_TAG_COLLEAGUE);","lastModifiedDate":"2017-10-20"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        // Attempt to change some Person objects","lastModifiedDate":"2017-10-20"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-20"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"        indices.add(Index.fromZeroBased(0));","lastModifiedDate":"2017-10-20"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        indices.add(Index.fromZeroBased(2));","lastModifiedDate":"2017-10-20"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"        expectedModel.editTag(colleagueTag, husbandTag, indices);","lastModifiedDate":"2017-10-20"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(tagChangeColleagueToHusband, testModel, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-20"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    public void editTagAll() throws IllegalValueException, PersonNotFoundException {","lastModifiedDate":"2017-10-20"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"        AddressBook testBook \u003d prepareAddressBook();","lastModifiedDate":"2017-10-20"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        Model testModel \u003d new ModelManager(testBook, new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand tagChangeFriendToHusband \u003d prepareCommand(VALID_TAG_FRIEND, VALID_TAG_HUSBAND, testModel);","lastModifiedDate":"2017-10-20"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EDIT_TAG_SUCCESS, VALID_TAG_FRIEND, VALID_TAG_HUSBAND);","lastModifiedDate":"2017-10-20"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        Tag friendTag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2017-10-20"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"        Tag husbandTag \u003d new Tag(VALID_TAG_HUSBAND);","lastModifiedDate":"2017-10-20"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"        // Attempt to change all Person objects","lastModifiedDate":"2017-10-20"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        Model expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-20"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cIndex\u003e indices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-10-20"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        for (int i \u003d 0; i \u003c 4; i++) {","lastModifiedDate":"2017-10-20"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"            indices.add(Index.fromZeroBased(i));","lastModifiedDate":"2017-10-20"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        expectedModel.editTag(friendTag, husbandTag, indices);","lastModifiedDate":"2017-10-20"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(tagChangeFriendToHusband, testModel, expectedMessage, expectedModel);","lastModifiedDate":"2017-10-20"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    /** Returns a new EditTagCommand with the parameters */","lastModifiedDate":"2017-10-20"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    public EditTagCommand prepareCommand(String toChange, String newValue, Model model) throws IllegalValueException {","lastModifiedDate":"2017-10-20"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"        Tag changedTag \u003d new Tag(toChange);","lastModifiedDate":"2017-10-20"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"        Tag newTag \u003d new Tag(newValue);","lastModifiedDate":"2017-10-20"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        EditTagCommand editTagCommand \u003d new EditTagCommand(changedTag, newTag);","lastModifiedDate":"2017-10-20"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        editTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-20"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        return editTagCommand;","lastModifiedDate":"2017-10-20"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":95,"author":{"gitId":"Esilocke"},"content":"    /** Returns a pre-made Address Book for testing purposes */","lastModifiedDate":"2017-10-20"},{"lineNumber":96,"author":{"gitId":"Esilocke"},"content":"    public AddressBook prepareAddressBook() throws DuplicatePersonException {","lastModifiedDate":"2017-10-20"},{"lineNumber":97,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson alice \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2017-10-20"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_COLLEAGUE).build();","lastModifiedDate":"2017-10-20"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson bernice \u003d new PersonBuilder().withName(\"Bernice Applecut\")","lastModifiedDate":"2017-10-20"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-20"},{"lineNumber":101,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson clarice \u003d new PersonBuilder().withName(\"Clarice Fenderbunt\")","lastModifiedDate":"2017-10-20"},{"lineNumber":102,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_COLLEAGUE).build();","lastModifiedDate":"2017-10-20"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"        ReadOnlyPerson denise \u003d new PersonBuilder().withName(\"Denise Lieselocke\")","lastModifiedDate":"2017-10-20"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-20"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toAdd \u003d new ArrayList\u003c\u003e(Arrays.asList(alice, bernice, clarice, denise));","lastModifiedDate":"2017-10-20"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        AddressBook preparedBook \u003d new AddressBook();","lastModifiedDate":"2017-10-20"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyPerson r : toAdd) {","lastModifiedDate":"2017-10-20"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"            preparedBook.addPerson(r);","lastModifiedDate":"2017-10-20"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        return preparedBook;","lastModifiedDate":"2017-10-20"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-20"}],"authorContributionMap":{"Esilocke":112}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-26"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PENCIL;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-26"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;","lastModifiedDate":"2017-10-26"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"public class EditTaskDescriptorTest {","lastModifiedDate":"2017-10-26"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-26"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    public void equals() {","lastModifiedDate":"2017-10-26"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-26"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_PENCIL);","lastModifiedDate":"2017-10-26"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        assertTrue(DESC_PENCIL.equals(descriptorWithSameValues));","lastModifiedDate":"2017-10-26"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-26"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        assertTrue(DESC_PENCIL.equals(DESC_PENCIL));","lastModifiedDate":"2017-10-26"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(null));","lastModifiedDate":"2017-10-26"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(5));","lastModifiedDate":"2017-10-26"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(DESC_PAPER));","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        EditTaskDescriptor editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL)","lastModifiedDate":"2017-10-26"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"                .withTaskName(VALID_TASK_NAME_PAPER).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));","lastModifiedDate":"2017-10-26"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        // different description -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withDescription(VALID_DESCRIPTION_PAPER).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));","lastModifiedDate":"2017-10-26"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        // different deadline -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withDeadline(VALID_DEADLINE_PAPER).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));","lastModifiedDate":"2017-10-26"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        // different priority -\u003e returns false","lastModifiedDate":"2017-10-26"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        editedPencil \u003d new EditTaskDescriptorBuilder(DESC_PENCIL).withPriority(VALID_PRIORITY_PAPER).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"        assertFalse(DESC_PENCIL.equals(editedPencil));","lastModifiedDate":"2017-10-26"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-26"}],"authorContributionMap":{"Esilocke":54}},{"path":"src/test/java/seedu/address/logic/commands/FavouriteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommandTest {","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexValidPersonSuccess() throws Exception {","lastModifiedDate":"2017-10-25"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))","lastModifiedDate":"2017-10-25"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"                .withFavourite(\"True\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToFavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(FavouriteCommand.MESSAGE_FAVOURITE_PERSON_SUCCESS, personToFavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult commandResult \u003d favouriteCommand.execute();","lastModifiedDate":"2017-10-25"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(outOfBoundIndex);","lastModifiedDate":"2017-10-25"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(favouriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-25"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() {","lastModifiedDate":"2017-10-25"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteFirstCommand \u003d new FavouriteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteSecondCommand \u003d new FavouriteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-25"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommand));","lastModifiedDate":"2017-10-25"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-25"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteFirstCommandCopy \u003d new FavouriteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommandCopy));","lastModifiedDate":"2017-10-25"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-25"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(1));","lastModifiedDate":"2017-10-25"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-25"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(null));","lastModifiedDate":"2017-10-25"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-10-25"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(favouriteSecondCommand));","lastModifiedDate":"2017-10-25"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"     * Returns a {@code FavouriteCommand} with the parameter {@code index}.","lastModifiedDate":"2017-10-25"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"    private FavouriteCommand prepareCommand(Index index) {","lastModifiedDate":"2017-10-25"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(index);","lastModifiedDate":"2017-10-25"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        favouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-25"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        return favouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":77}},{"path":"src/test/java/seedu/address/logic/commands/FavouriteListCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.favouriteFirstPerson;","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Before;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteListCommandTest {","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    private Model model;","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"    private FavouriteListCommand favouriteListCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    @Before","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    public void setUp() {","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        favouriteListCommand \u003d new FavouriteListCommand();","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"        favouriteListCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"    public void executeEmptyFavouriteListShowsNothing() {","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult result \u003d favouriteListCommand.execute();","lastModifiedDate":"2017-10-25"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(result.feedbackToUser, FavouriteListCommand.MESSAGE_SUCCESS);","lastModifiedDate":"2017-10-25"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    public void executeFavouriteListNotEmptyShowsPerson() {","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        favouriteFirstPerson(model);","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        favouriteFirstPerson(expectedModel);","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(model, expectedModel);","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult result \u003d favouriteListCommand.execute();","lastModifiedDate":"2017-10-25"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(result.feedbackToUser, FavouriteListCommand.MESSAGE_SUCCESS);","lastModifiedDate":"2017-10-25"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":46}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-29"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-29"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-29"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-29"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2017-10-29"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-10-29"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-10-29"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-10-29"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2017-10-29"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-10-29"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-10-29"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2017-10-29"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-29"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-10-29"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Collections;","lastModifiedDate":"2017-10-29"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import java.util.List;","lastModifiedDate":"2017-10-29"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-29"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-29"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-29"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-10-29"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-29"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-29"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-29"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-29"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"/**","lastModifiedDate":"2017-10-29"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTagCommand}.","lastModifiedDate":"2017-10-29"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":" */","lastModifiedDate":"2017-10-29"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommandTest {","lastModifiedDate":"2017-10-29"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-29"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() {","lastModifiedDate":"2017-10-29"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        NameContainsTagsPredicate firstPredicate \u003d","lastModifiedDate":"2017-10-29"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-10-29"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        NameContainsTagsPredicate secondPredicate \u003d","lastModifiedDate":"2017-10-29"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-10-29"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand findFirstCommand \u003d new FindTagCommand(firstPredicate);","lastModifiedDate":"2017-10-29"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand findSecondCommand \u003d new FindTagCommand(secondPredicate);","lastModifiedDate":"2017-10-29"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-29"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-10-29"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-29"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);","lastModifiedDate":"2017-10-29"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-10-29"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-29"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-10-29"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-29"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-10-29"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-10-29"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-10-29"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"    public void executeZeroKeywordsNoPersonFound() {","lastModifiedDate":"2017-10-29"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-10-29"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");","lastModifiedDate":"2017-10-29"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());","lastModifiedDate":"2017-10-29"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"    public void executeMultipleKeywordsMultiplePersonsFound() {","lastModifiedDate":"2017-10-29"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2017-10-29"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d prepareCommand(\"friends owesMoney\");","lastModifiedDate":"2017-10-29"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-10-29"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":78,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":79,"author":{"gitId":"wangyiming1019"},"content":"    public void executeOneKeywordMultiplePersonsFound() {","lastModifiedDate":"2017-10-29"},{"lineNumber":80,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2017-10-29"},{"lineNumber":81,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d prepareCommand(\"friends\");","lastModifiedDate":"2017-10-29"},{"lineNumber":82,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-10-29"},{"lineNumber":83,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":84,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":85,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":86,"author":{"gitId":"wangyiming1019"},"content":"     * Parses {@code userInput} into a {@code FindTagCommand}.","lastModifiedDate":"2017-10-29"},{"lineNumber":87,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":88,"author":{"gitId":"wangyiming1019"},"content":"    private FindTagCommand prepareCommand(String userInput) {","lastModifiedDate":"2017-10-29"},{"lineNumber":89,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d","lastModifiedDate":"2017-10-29"},{"lineNumber":90,"author":{"gitId":"wangyiming1019"},"content":"                new FindTagCommand(new NameContainsTagsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));","lastModifiedDate":"2017-10-29"},{"lineNumber":91,"author":{"gitId":"wangyiming1019"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-29"},{"lineNumber":92,"author":{"gitId":"wangyiming1019"},"content":"        return command;","lastModifiedDate":"2017-10-29"},{"lineNumber":93,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":94,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":95,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":96,"author":{"gitId":"wangyiming1019"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e","lastModifiedDate":"2017-10-29"},{"lineNumber":97,"author":{"gitId":"wangyiming1019"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e","lastModifiedDate":"2017-10-29"},{"lineNumber":98,"author":{"gitId":"wangyiming1019"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e","lastModifiedDate":"2017-10-29"},{"lineNumber":99,"author":{"gitId":"wangyiming1019"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}","lastModifiedDate":"2017-10-29"},{"lineNumber":100,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":101,"author":{"gitId":"wangyiming1019"},"content":"    private void assertCommandSuccess(FindTagCommand command, String expectedMessage,","lastModifiedDate":"2017-10-29"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {","lastModifiedDate":"2017-10-29"},{"lineNumber":103,"author":{"gitId":"wangyiming1019"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());","lastModifiedDate":"2017-10-29"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult commandResult \u003d command.execute();","lastModifiedDate":"2017-10-29"},{"lineNumber":105,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":106,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);","lastModifiedDate":"2017-10-29"},{"lineNumber":107,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());","lastModifiedDate":"2017-10-29"},{"lineNumber":108,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());","lastModifiedDate":"2017-10-29"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-29"}],"authorContributionMap":{"wangyiming1019":110}},{"path":"src/test/java/seedu/address/logic/commands/LocateCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.fail;","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Before;","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Rule;","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":" * Contains integration tests (interaction with the Model) for {@code LocateCommand}.","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommandTest {","lastModifiedDate":"2017-10-28"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    @Rule","lastModifiedDate":"2017-10-28"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();","lastModifiedDate":"2017-10-28"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"    private Model model;","lastModifiedDate":"2017-10-28"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"    @Before","lastModifiedDate":"2017-10-28"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"    public void setUp() {","lastModifiedDate":"2017-10-28"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-28"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2017-10-28"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-10-28"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-28"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);","lastModifiedDate":"2017-10-28"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(lastPersonIndex);","lastModifiedDate":"2017-10-28"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2017-10-28"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-10-28"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-28"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2017-10-28"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-28"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-28"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"    public void execute_invalidIndexFilteredList_failure() {","lastModifiedDate":"2017-10-28"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        showFirstPersonOnly(model);","lastModifiedDate":"2017-10-28"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-10-28"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-10-28"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-28"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"    public void equals() {","lastModifiedDate":"2017-10-28"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateFirstCommand \u003d new LocateCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-28"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateSecondCommand \u003d new LocateCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-28"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-28"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(locateFirstCommand.equals(locateFirstCommand));","lastModifiedDate":"2017-10-28"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-28"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateFirstCommandCopy \u003d new LocateCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-28"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(locateFirstCommand.equals(locateFirstCommandCopy));","lastModifiedDate":"2017-10-28"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-28"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(locateFirstCommand.equals(1));","lastModifiedDate":"2017-10-28"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-28"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(locateFirstCommand.equals(null));","lastModifiedDate":"2017-10-28"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-10-28"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        assertFalse(locateFirstCommand.equals(locateSecondCommand));","lastModifiedDate":"2017-10-28"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes a {@code LocateCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}","lastModifiedDate":"2017-10-28"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"     * is raised with the correct index.","lastModifiedDate":"2017-10-28"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionSuccess(Index index) {","lastModifiedDate":"2017-10-28"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateCommand \u003d prepareCommand(index);","lastModifiedDate":"2017-10-28"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"        ReadOnlyPerson p \u003d model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2017-10-28"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        try {","lastModifiedDate":"2017-10-28"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"            CommandResult commandResult \u003d locateCommand.execute();","lastModifiedDate":"2017-10-28"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"            assertEquals(String.format(LocateCommand.MESSAGE_LOCATE_PERSON_SUCCESS, index.getOneBased()),","lastModifiedDate":"2017-10-28"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"                    commandResult.feedbackToUser);","lastModifiedDate":"2017-10-28"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-10-28"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-10-28"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"        BrowserPanelLocateEvent lastEvent \u003d","lastModifiedDate":"2017-10-28"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"                (BrowserPanelLocateEvent) eventsCollectorRule.eventsCollector.getMostRecent();","lastModifiedDate":"2017-10-28"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(p, lastEvent.getNewSelection());","lastModifiedDate":"2017-10-28"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"     * Executes a {@code LocateCommand} with the given {@code index}, and checks that a {@code CommandException}","lastModifiedDate":"2017-10-28"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"     * is thrown with the {@code expectedMessage}.","lastModifiedDate":"2017-10-28"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {","lastModifiedDate":"2017-10-28"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateCommand \u003d prepareCommand(index);","lastModifiedDate":"2017-10-28"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"        try {","lastModifiedDate":"2017-10-28"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"            locateCommand.execute();","lastModifiedDate":"2017-10-28"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"            fail(\"The expected CommandException was not thrown.\");","lastModifiedDate":"2017-10-28"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-10-28"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"            assertEquals(expectedMessage, ce.getMessage());","lastModifiedDate":"2017-10-28"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());","lastModifiedDate":"2017-10-28"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-28"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-28"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns a {@code LocateCommand} with parameters {@code index}.","lastModifiedDate":"2017-10-28"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-28"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"    private LocateCommand prepareCommand(Index index) {","lastModifiedDate":"2017-10-28"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand locateCommand \u003d new LocateCommand(index);","lastModifiedDate":"2017-10-28"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"        locateCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-28"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        return locateCommand;","lastModifiedDate":"2017-10-28"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"jeffreygohkw":142}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;","lastModifiedDate":"2017-07-13"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeleteCommand.DELETE_TYPE_PERSON;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-07-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Before;","lastModifiedDate":"2017-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-07-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-07-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class RedoCommandTest {","lastModifiedDate":"2017-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();","lastModifiedDate":"2017-07-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();","lastModifiedDate":"2017-07-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-13"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Before","lastModifiedDate":"2017-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);","lastModifiedDate":"2017-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);","lastModifiedDate":"2017-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack(","lastModifiedDate":"2017-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));","lastModifiedDate":"2017-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();","lastModifiedDate":"2017-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);","lastModifiedDate":"2017-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // multiple commands in redoStack","lastModifiedDate":"2017-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // single command in redoStack","lastModifiedDate":"2017-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // no command in redoStack","lastModifiedDate":"2017-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);","lastModifiedDate":"2017-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-13"}],"authorContributionMap":{"Esilocke":3,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/UnFavouriteCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.favouriteFirstPerson;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"public class UnFavouriteCommandTest {","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"    public void executeValidIndexValidPersonSuccess() throws Exception {","lastModifiedDate":"2017-10-25"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        favouriteFirstPerson(model);","lastModifiedDate":"2017-10-25"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        ReadOnlyPerson personToUnfavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2017-10-25"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        String expectedMessage \u003d String.format(UnfavouriteCommand.MESSAGE_UNFAVOURITE_PERSON_SUCCESS,","lastModifiedDate":"2017-10-25"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"                personToUnfavourite);","lastModifiedDate":"2017-10-25"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        CommandResult commandResult \u003d unfavouriteCommand.execute();","lastModifiedDate":"2017-10-25"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"    public void executeInvalidIndexThrowsCommandException() throws Exception {","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-10-25"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(outOfBoundIndex);","lastModifiedDate":"2017-10-25"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        assertCommandFailure(unfavouriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-10-25"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"    public void equals() {","lastModifiedDate":"2017-10-25"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand favouriteFirstCommand \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand favouriteSecondCommand \u003d new UnfavouriteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-10-25"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommand));","lastModifiedDate":"2017-10-25"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-10-25"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand deleteFirstCommandCopy \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-25"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(favouriteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-10-25"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-10-25"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(1));","lastModifiedDate":"2017-10-25"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-10-25"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(null));","lastModifiedDate":"2017-10-25"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-10-25"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        assertFalse(favouriteFirstCommand.equals(favouriteSecondCommand));","lastModifiedDate":"2017-10-25"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"     * Returns a {@code UnfavouriteCommand} with the parameter {@code index}.","lastModifiedDate":"2017-10-25"},{"lineNumber":71,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":72,"author":{"gitId":"wangyiming1019"},"content":"    private UnfavouriteCommand prepareCommand(Index index) {","lastModifiedDate":"2017-10-25"},{"lineNumber":73,"author":{"gitId":"wangyiming1019"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(index);","lastModifiedDate":"2017-10-25"},{"lineNumber":74,"author":{"gitId":"wangyiming1019"},"content":"        unfavouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());","lastModifiedDate":"2017-10-25"},{"lineNumber":75,"author":{"gitId":"wangyiming1019"},"content":"        return unfavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":76,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":77,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":77}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;","lastModifiedDate":"2017-07-13"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeleteCommand.DELETE_TYPE_PERSON;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-07-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Before;","lastModifiedDate":"2017-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-07-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2017-07-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.UndoRedoStack;","lastModifiedDate":"2017-07-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class UndoCommandTest {","lastModifiedDate":"2017-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();","lastModifiedDate":"2017-07-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();","lastModifiedDate":"2017-07-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-13"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON);","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Before","lastModifiedDate":"2017-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);","lastModifiedDate":"2017-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);","lastModifiedDate":"2017-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute() throws Exception {","lastModifiedDate":"2017-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack(","lastModifiedDate":"2017-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());","lastModifiedDate":"2017-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();","lastModifiedDate":"2017-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);","lastModifiedDate":"2017-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        deleteCommandOne.execute();","lastModifiedDate":"2017-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        deleteCommandTwo.execute();","lastModifiedDate":"2017-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // multiple commands in undoStack","lastModifiedDate":"2017-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        deleteFirstPerson(expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // single command in undoStack","lastModifiedDate":"2017-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2017-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // no command in undoStack","lastModifiedDate":"2017-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);","lastModifiedDate":"2017-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-13"}],"authorContributionMap":{"Esilocke":3,"-":55}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_SEPARATOR;","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PENCIL;","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_AMY)","lastModifiedDate":"2017-10-23"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-10-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-10-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY","lastModifiedDate":"2017-07-06"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-10-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + REMARK_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-10-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_BOB)","lastModifiedDate":"2017-10-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-10-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":104,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":105,"author":{"gitId":"Esilocke"},"content":"    public void parseTasksAllFieldsPresent_success() {","lastModifiedDate":"2017-10-24"},{"lineNumber":106,"author":{"gitId":"Esilocke"},"content":"        Task expectedTask \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_PENCIL)","lastModifiedDate":"2017-10-24"},{"lineNumber":107,"author":{"gitId":"Esilocke"},"content":"                .withDescription(VALID_DESCRIPTION_PENCIL).withDeadline(VALID_DEADLINE_PENCIL)","lastModifiedDate":"2017-10-24"},{"lineNumber":108,"author":{"gitId":"Esilocke"},"content":"                .withPriority(VALID_PRIORITY_PENCIL).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":109,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":110,"author":{"gitId":"Esilocke"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-10-24"},{"lineNumber":111,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PAPER","lastModifiedDate":"2017-10-24"},{"lineNumber":112,"author":{"gitId":"Esilocke"},"content":"                + TASK_NAME_DESC_PENCIL + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":113,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL, new AddCommand(expectedTask));","lastModifiedDate":"2017-10-24"},{"lineNumber":114,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":115,"author":{"gitId":"Esilocke"},"content":"        // multiple descriptions - last description accepted","lastModifiedDate":"2017-10-24"},{"lineNumber":116,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PAPER + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":118,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL, new AddCommand(expectedTask));","lastModifiedDate":"2017-10-24"},{"lineNumber":119,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":120,"author":{"gitId":"Esilocke"},"content":"        // multiple deadlines - last deadline accepted","lastModifiedDate":"2017-10-24"},{"lineNumber":121,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":122,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PAPER + DEADLINE_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":123,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL, new AddCommand(expectedTask));","lastModifiedDate":"2017-10-24"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":125,"author":{"gitId":"Esilocke"},"content":"        // multiple priorities - last priority accepted","lastModifiedDate":"2017-10-24"},{"lineNumber":126,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":127,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL + PRIORITY_DESC_PAPER","lastModifiedDate":"2017-10-24"},{"lineNumber":128,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL, new AddCommand(expectedTask));","lastModifiedDate":"2017-10-24"},{"lineNumber":129,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":130,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":131,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY)","lastModifiedDate":"2017-10-23"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"                .withTags().build();","lastModifiedDate":"2017-10-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2017-07-06"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY, new AddCommand(expectedPerson));","lastModifiedDate":"2017-10-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2017-06-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + VALID_PHONE_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2017-06-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2017-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_PHONE_BOB","lastModifiedDate":"2017-07-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":167,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":168,"author":{"gitId":"Esilocke"},"content":"    public void parseTasksCompulsoryFieldMissing_failure() {","lastModifiedDate":"2017-10-24"},{"lineNumber":169,"author":{"gitId":"Esilocke"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_TASK_USAGE);","lastModifiedDate":"2017-10-24"},{"lineNumber":170,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":171,"author":{"gitId":"Esilocke"},"content":"        // missing task name prefix","lastModifiedDate":"2017-10-24"},{"lineNumber":172,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + VALID_TASK_NAME_PAPER","lastModifiedDate":"2017-10-24"},{"lineNumber":173,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL + PRIORITY_DESC_PENCIL, expectedMessage);","lastModifiedDate":"2017-10-24"},{"lineNumber":174,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":175,"author":{"gitId":"Esilocke"},"content":"        // missing description prefix","lastModifiedDate":"2017-10-24"},{"lineNumber":176,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":177,"author":{"gitId":"Esilocke"},"content":"                + VALID_DESCRIPTION_PENCIL + DEADLINE_DESC_PENCIL + PRIORITY_DESC_PENCIL, expectedMessage);","lastModifiedDate":"2017-10-24"},{"lineNumber":178,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":179,"author":{"gitId":"Esilocke"},"content":"        // missing deadline prefix","lastModifiedDate":"2017-10-24"},{"lineNumber":180,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":181,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + VALID_DEADLINE_PENCIL + PRIORITY_DESC_PENCIL, expectedMessage);","lastModifiedDate":"2017-10-24"},{"lineNumber":182,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":183,"author":{"gitId":"Esilocke"},"content":"        // missing priority prefix","lastModifiedDate":"2017-10-24"},{"lineNumber":184,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":185,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL + VALID_PRIORITY_PENCIL, expectedMessage);","lastModifiedDate":"2017-10-24"},{"lineNumber":186,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":187,"author":{"gitId":"Esilocke"},"content":"        // all prefixes missing","lastModifiedDate":"2017-10-24"},{"lineNumber":188,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + VALID_TASK_NAME_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":189,"author":{"gitId":"Esilocke"},"content":"                + VALID_DESCRIPTION_PENCIL + VALID_DEADLINE_PENCIL + VALID_PRIORITY_PENCIL, expectedMessage);","lastModifiedDate":"2017-10-24"},{"lineNumber":190,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":191,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB","lastModifiedDate":"2017-10-23"},{"lineNumber":196,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-10-23"},{"lineNumber":197,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2017-10-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":200,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC","lastModifiedDate":"2017-10-23"},{"lineNumber":201,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-10-23"},{"lineNumber":202,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);","lastModifiedDate":"2017-10-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":205,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-10-23"},{"lineNumber":206,"author":{"gitId":"charlesgoh"},"content":"                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + REMARK_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":207,"author":{"gitId":"charlesgoh"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);","lastModifiedDate":"2017-10-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":210,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2017-10-23"},{"lineNumber":211,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB","lastModifiedDate":"2017-10-23"},{"lineNumber":212,"author":{"gitId":"charlesgoh"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);","lastModifiedDate":"2017-10-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":215,"author":{"gitId":"charlesgoh"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + INVALID_PHONE_DESC","lastModifiedDate":"2017-10-23"},{"lineNumber":216,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + REMARK_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2017-10-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":218,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":219,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":220,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskInvalidValue_failure() {","lastModifiedDate":"2017-10-24"},{"lineNumber":221,"author":{"gitId":"Esilocke"},"content":"        // invalid deadline","lastModifiedDate":"2017-10-24"},{"lineNumber":222,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":223,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + INVALID_DEADLINE_DESC","lastModifiedDate":"2017-10-24"},{"lineNumber":224,"author":{"gitId":"Esilocke"},"content":"                + PRIORITY_DESC_PENCIL, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);","lastModifiedDate":"2017-10-24"},{"lineNumber":225,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":226,"author":{"gitId":"Esilocke"},"content":"        // invalid priority","lastModifiedDate":"2017-10-24"},{"lineNumber":227,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":228,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + DEADLINE_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":229,"author":{"gitId":"Esilocke"},"content":"                + INVALID_PRIORITY_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS);","lastModifiedDate":"2017-10-24"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-10-24"},{"lineNumber":232,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + TASK_SEPARATOR + TASK_NAME_DESC_PENCIL","lastModifiedDate":"2017-10-24"},{"lineNumber":233,"author":{"gitId":"Esilocke"},"content":"                + DESCRIPTION_DESC_PENCIL + INVALID_DEADLINE_DESC","lastModifiedDate":"2017-10-24"},{"lineNumber":234,"author":{"gitId":"Esilocke"},"content":"                + INVALID_PRIORITY_DESC, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);","lastModifiedDate":"2017-10-24"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"charlesgoh":33,"Esilocke":89,"-":114}},{"path":"src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-21"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-21"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-10-21"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-21"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-21"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;","lastModifiedDate":"2017-10-21"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-21"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-21"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-21"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.AddTagCommand;","lastModifiedDate":"2017-10-21"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-21"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"public class AddTagCommandParserTest {","lastModifiedDate":"2017-10-21"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    private AddTagCommandParser parser \u003d new AddTagCommandParser();","lastModifiedDate":"2017-10-21"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public void parseValidIndexAndTagSuccess() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";","lastModifiedDate":"2017-10-21"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToAdd \u003d new Tag(tagName);","lastModifiedDate":"2017-10-21"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString()","lastModifiedDate":"2017-10-21"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"                + tagName;","lastModifiedDate":"2017-10-21"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, userInput, new AddTagCommand(tagToAdd, indexes));","lastModifiedDate":"2017-10-21"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidTagFailure() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"        final String tagToAdd \u003d \"friends\";","lastModifiedDate":"2017-10-22"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString();","lastModifiedDate":"2017-10-21"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, userInput, MESSAGE_TAG_CONSTRAINTS);","lastModifiedDate":"2017-10-21"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidArgsFailure() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-21"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-21"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"}],"authorContributionMap":{"wangyiming1019":58}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeleteCommand.DELETE_TYPE_PERSON;","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Rule;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.logic.commands.BackupCommand;","lastModifiedDate":"2017-10-20"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;","lastModifiedDate":"2017-10-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;","lastModifiedDate":"2017-10-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;","lastModifiedDate":"2017-07-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2017-07-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonPrivacySettingsBuilder;","lastModifiedDate":"2017-10-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Rule","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAdd() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasAdd() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-10-16"},{"lineNumber":66,"author":{"gitId":"wangyiming1019"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \"","lastModifiedDate":"2017-10-16"},{"lineNumber":67,"author":{"gitId":"wangyiming1019"},"content":"                + PersonUtil.getPersonDetails(person));","lastModifiedDate":"2017-10-16"},{"lineNumber":68,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-10-16"},{"lineNumber":69,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":70,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandChangePrivacy() throws Exception {","lastModifiedDate":"2017-10-23"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-10-23"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(person).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand command \u003d (ChangePrivacyCommand) parser.parseCommand(","lastModifiedDate":"2017-10-23"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"                ChangePrivacyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2017-10-23"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAME + String.valueOf(person.getName().isPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_PHONE + String.valueOf(person.getPhone().isPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_EMAIL + String.valueOf(person.getEmail().isPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_ADDRESS + String.valueOf(person.getAddress().isPrivate()));","lastModifiedDate":"2017-10-28"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(changePrivacyCommandsEqual(command, actualCommand));","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasChangePrivacy() throws Exception {","lastModifiedDate":"2017-10-23"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-10-23"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder(person).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand command \u003d (ChangePrivacyCommand) parser.parseCommand(","lastModifiedDate":"2017-10-23"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"                ChangePrivacyCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2017-10-23"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_NAME + String.valueOf(person.getName().isPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_PHONE + String.valueOf(person.getPhone().isPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_EMAIL + String.valueOf(person.getEmail().isPrivate())","lastModifiedDate":"2017-10-28"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"                        + \" \" + PREFIX_ADDRESS + String.valueOf(person.getAddress().isPrivate()));","lastModifiedDate":"2017-10-28"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d new ChangePrivacyCommand(INDEX_FIRST_PERSON, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(changePrivacyCommandsEqual(command, actualCommand));","lastModifiedDate":"2017-10-24"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":102,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandClear() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":109,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasClear() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":110,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);","lastModifiedDate":"2017-10-16"},{"lineNumber":111,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandDelete() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON), command);","lastModifiedDate":"2017-10-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":121,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasDelete() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":122,"author":{"gitId":"wangyiming1019"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-10-16"},{"lineNumber":123,"author":{"gitId":"wangyiming1019"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-10-16"},{"lineNumber":124,"author":{"gitId":"Esilocke"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON), command);","lastModifiedDate":"2017-10-24"},{"lineNumber":125,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandEdit() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":137,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasEdit() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":138,"author":{"gitId":"wangyiming1019"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-10-16"},{"lineNumber":139,"author":{"gitId":"wangyiming1019"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-10-16"},{"lineNumber":140,"author":{"gitId":"wangyiming1019"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \"","lastModifiedDate":"2017-10-16"},{"lineNumber":141,"author":{"gitId":"wangyiming1019"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));","lastModifiedDate":"2017-10-16"},{"lineNumber":142,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-10-16"},{"lineNumber":143,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":144,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":146,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandExit() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":152,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandFind() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":160,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasFind() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":161,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-10-16"},{"lineNumber":162,"author":{"gitId":"wangyiming1019"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-10-16"},{"lineNumber":163,"author":{"gitId":"wangyiming1019"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-10-16"},{"lineNumber":164,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-10-16"},{"lineNumber":165,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":166,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":167,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":168,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandFindTag() throws Exception {","lastModifiedDate":"2017-10-29"},{"lineNumber":169,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friend\", \"colleague\");","lastModifiedDate":"2017-10-29"},{"lineNumber":170,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand(","lastModifiedDate":"2017-10-29"},{"lineNumber":171,"author":{"gitId":"wangyiming1019"},"content":"                FindTagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-10-29"},{"lineNumber":172,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FindTagCommand(","lastModifiedDate":"2017-10-29"},{"lineNumber":173,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(keywords)), command);","lastModifiedDate":"2017-10-29"},{"lineNumber":174,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":175,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":176,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":177,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasFindTag() throws Exception {","lastModifiedDate":"2017-10-29"},{"lineNumber":178,"author":{"gitId":"wangyiming1019"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friend\", \"colleague\");","lastModifiedDate":"2017-10-29"},{"lineNumber":179,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand(","lastModifiedDate":"2017-10-29"},{"lineNumber":180,"author":{"gitId":"wangyiming1019"},"content":"                FindTagCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-10-29"},{"lineNumber":181,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new FindTagCommand(","lastModifiedDate":"2017-10-29"},{"lineNumber":182,"author":{"gitId":"wangyiming1019"},"content":"                new NameContainsTagsPredicate(keywords)), command);","lastModifiedDate":"2017-10-29"},{"lineNumber":183,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":184,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":186,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandHelp() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":192,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandHistory() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);","lastModifiedDate":"2017-05-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);","lastModifiedDate":"2017-05-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-24"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            parser.parseCommand(\"histories\");","lastModifiedDate":"2017-05-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2017-05-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-05-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());","lastModifiedDate":"2017-05-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":205,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasHistory() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":206,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);","lastModifiedDate":"2017-10-16"},{"lineNumber":207,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);","lastModifiedDate":"2017-10-16"},{"lineNumber":208,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":209,"author":{"gitId":"wangyiming1019"},"content":"        try {","lastModifiedDate":"2017-10-16"},{"lineNumber":210,"author":{"gitId":"wangyiming1019"},"content":"            parser.parseCommand(\"histories\");","lastModifiedDate":"2017-10-16"},{"lineNumber":211,"author":{"gitId":"wangyiming1019"},"content":"            fail(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2017-10-16"},{"lineNumber":212,"author":{"gitId":"wangyiming1019"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-10-16"},{"lineNumber":213,"author":{"gitId":"wangyiming1019"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());","lastModifiedDate":"2017-10-16"},{"lineNumber":214,"author":{"gitId":"wangyiming1019"},"content":"        }","lastModifiedDate":"2017-10-16"},{"lineNumber":215,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":216,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":218,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandList() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":224,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasList() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":225,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);","lastModifiedDate":"2017-10-16"},{"lineNumber":226,"author":{"gitId":"wangyiming1019"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-10-16"},{"lineNumber":227,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":228,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":230,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandSelect() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":237,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandAliasSelect() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":238,"author":{"gitId":"wangyiming1019"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand(","lastModifiedDate":"2017-10-16"},{"lineNumber":239,"author":{"gitId":"wangyiming1019"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-10-16"},{"lineNumber":240,"author":{"gitId":"wangyiming1019"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-10-16"},{"lineNumber":241,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":242,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":243,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":244,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandLocate() throws Exception {","lastModifiedDate":"2017-10-28"},{"lineNumber":245,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand command \u003d (LocateCommand) parser.parseCommand(","lastModifiedDate":"2017-10-28"},{"lineNumber":246,"author":{"gitId":"jeffreygohkw"},"content":"                LocateCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-10-28"},{"lineNumber":247,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(new LocateCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-10-28"},{"lineNumber":248,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":249,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":250,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":251,"author":{"gitId":"jeffreygohkw"},"content":"    public void parseCommandAliasLocate() throws Exception {","lastModifiedDate":"2017-10-28"},{"lineNumber":252,"author":{"gitId":"jeffreygohkw"},"content":"        LocateCommand command \u003d (LocateCommand) parser.parseCommand(","lastModifiedDate":"2017-10-28"},{"lineNumber":253,"author":{"gitId":"jeffreygohkw"},"content":"                LocateCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-10-28"},{"lineNumber":254,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(new LocateCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-10-28"},{"lineNumber":255,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":256,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":257,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":258,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandBackupWord() throws Exception {","lastModifiedDate":"2017-10-20"},{"lineNumber":259,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(BackupCommand.COMMAND_WORD) instanceof BackupCommand);","lastModifiedDate":"2017-10-20"},{"lineNumber":260,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":261,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":262,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":263,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandBackupWordWithInput() throws Exception {","lastModifiedDate":"2017-10-20"},{"lineNumber":264,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(BackupCommand.COMMAND_WORD + \" test.xml\") instanceof BackupCommand);","lastModifiedDate":"2017-10-20"},{"lineNumber":265,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":266,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":267,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":268,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandBackupAlias() throws Exception {","lastModifiedDate":"2017-10-20"},{"lineNumber":269,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(BackupCommand.COMMAND_ALIAS) instanceof BackupCommand);","lastModifiedDate":"2017-10-20"},{"lineNumber":270,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":271,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":272,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-20"},{"lineNumber":273,"author":{"gitId":"charlesgoh"},"content":"    public void parseCommandBackupAliasWithInput() throws Exception {","lastModifiedDate":"2017-10-20"},{"lineNumber":274,"author":{"gitId":"charlesgoh"},"content":"        assertTrue(parser.parseCommand(BackupCommand.COMMAND_ALIAS + \" test.xml\") instanceof BackupCommand);","lastModifiedDate":"2017-10-20"},{"lineNumber":275,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":276,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-07-17"},{"lineNumber":278,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandRedoCommandWordReturnsRedoCommand() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);","lastModifiedDate":"2017-07-17"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);","lastModifiedDate":"2017-07-17"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-07-17"},{"lineNumber":284,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUndoCommandWordReturnsUndoCommand() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);","lastModifiedDate":"2017-07-17"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);","lastModifiedDate":"2017-07-17"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":290,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUnrecognisedInputThrowsParseException() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        thrown.expect(ParseException.class);","lastModifiedDate":"2017-06-27"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-06-27"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        parser.parseCommand(\"\");","lastModifiedDate":"2017-06-27"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":297,"author":{"gitId":"wangyiming1019"},"content":"    public void parseCommandUnknownCommandThrowsParseException() throws Exception {","lastModifiedDate":"2017-10-16"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        thrown.expect(ParseException.class);","lastModifiedDate":"2017-06-27"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-27"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        parser.parseCommand(\"unknownCommand\");","lastModifiedDate":"2017-06-27"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":302,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":303,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":304,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if 2 ChangePrivacyCommands are equal","lastModifiedDate":"2017-10-24"},{"lineNumber":305,"author":{"gitId":"jeffreygohkw"},"content":"     * @param command the expected command","lastModifiedDate":"2017-10-24"},{"lineNumber":306,"author":{"gitId":"jeffreygohkw"},"content":"     * @param actualCommand the actual command","lastModifiedDate":"2017-10-24"},{"lineNumber":307,"author":{"gitId":"jeffreygohkw"},"content":"     * @return true if all the data are equal","lastModifiedDate":"2017-10-24"},{"lineNumber":308,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":309,"author":{"gitId":"jeffreygohkw"},"content":"    private boolean changePrivacyCommandsEqual(ChangePrivacyCommand command, ChangePrivacyCommand actualCommand) {","lastModifiedDate":"2017-10-24"},{"lineNumber":310,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getIndex(), actualCommand.getIndex());","lastModifiedDate":"2017-10-24"},{"lineNumber":311,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getAddressIsPrivate(), actualCommand.getPps().getAddressIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":312,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getNameIsPrivate(), actualCommand.getPps().getNameIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":313,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getEmailIsPrivate(), actualCommand.getPps().getEmailIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":314,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(command.getPps().getPhoneIsPrivate(), actualCommand.getPps().getPhoneIsPrivate());","lastModifiedDate":"2017-10-24"},{"lineNumber":315,"author":{"gitId":"jeffreygohkw"},"content":"        return true;","lastModifiedDate":"2017-10-24"},{"lineNumber":316,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"charlesgoh":21,"jeffreygohkw":68,"Esilocke":3,"wangyiming1019":89,"-":136}},{"path":"src/test/java/seedu/address/logic/parser/ChangePrivacyCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-22"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-23"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-22"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-10-22"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-10-22"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-10-22"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-10-22"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-10-22"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-10-22"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-29"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-22"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-22"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-23"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand;","lastModifiedDate":"2017-10-22"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;","lastModifiedDate":"2017-10-23"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-23"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.testutil.PersonPrivacySettingsBuilder;","lastModifiedDate":"2017-10-23"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"public class ChangePrivacyCommandParserTest {","lastModifiedDate":"2017-10-22"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-10-22"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-10-22"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    private ChangePrivacyCommandParser parser \u003d new ChangePrivacyCommandParser();","lastModifiedDate":"2017-10-22"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-22"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-10-22"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"        // no index specified","lastModifiedDate":"2017-10-22"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-22"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        // no field specified","lastModifiedDate":"2017-10-22"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\", ChangePrivacyCommand.MESSAGE_NO_FIELDS);","lastModifiedDate":"2017-10-22"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        // no index and no field specified","lastModifiedDate":"2017-10-22"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-22"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-22"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-10-22"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        // negative index","lastModifiedDate":"2017-10-22"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-22"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        // zero index","lastModifiedDate":"2017-10-22"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-22"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-10-22"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-22"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-10-22"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-22"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-22"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-10-22"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        // Non boolean argument","lastModifiedDate":"2017-10-22"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_NAME + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_PHONE + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_EMAIL + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_ADDRESS + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_REMARK + \"notBoolean\",","lastModifiedDate":"2017-10-29"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-29"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        // valid value followed by invalid value. The test case for invalid value  followed by valid value","lastModifiedDate":"2017-10-22"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-10-22"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_NAME + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_PHONE + \"true\" + \" \" + PREFIX_PHONE + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_EMAIL + \"true\" + \" \" + PREFIX_EMAIL + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_ADDRESS + \"true\" + \" \" + PREFIX_ADDRESS + \"notBoolean\",","lastModifiedDate":"2017-10-22"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-22"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_REMARK + \"true\" + \" \" + PREFIX_REMARK + \"notBoolean\",","lastModifiedDate":"2017-10-29"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangePrivacyCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-29"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_allFieldsSpecified_success() throws ParseException {","lastModifiedDate":"2017-10-23"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_EMAIL + \"false\"","lastModifiedDate":"2017-10-23"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_ADDRESS + \"true\" + \" \" + PREFIX_PHONE + \"false\";","lastModifiedDate":"2017-10-23"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\")","lastModifiedDate":"2017-10-23"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"                .setEmailPrivate(\"false\").setAddressPrivate(\"true\").setPhonePrivate(\"false\").build();","lastModifiedDate":"2017-10-23"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);","lastModifiedDate":"2017-10-23"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":101,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":102,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":103,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":104,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":105,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_someFieldsSpecified_success() throws ParseException {","lastModifiedDate":"2017-10-23"},{"lineNumber":106,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":107,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_EMAIL + \"true\";","lastModifiedDate":"2017-10-23"},{"lineNumber":108,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":109,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\")","lastModifiedDate":"2017-10-23"},{"lineNumber":110,"author":{"gitId":"jeffreygohkw"},"content":"                .setEmailPrivate(\"true\").build();","lastModifiedDate":"2017-10-28"},{"lineNumber":111,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":112,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":113,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);","lastModifiedDate":"2017-10-23"},{"lineNumber":114,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":115,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":116,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":117,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":118,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":119,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_oneFieldSpecified_success() throws ParseException {","lastModifiedDate":"2017-10-23"},{"lineNumber":120,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":121,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\";","lastModifiedDate":"2017-10-23"},{"lineNumber":122,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":123,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\").build();","lastModifiedDate":"2017-10-28"},{"lineNumber":124,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":125,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":126,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);","lastModifiedDate":"2017-10-23"},{"lineNumber":127,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":128,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":129,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":130,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":131,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":132,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() throws ParseException {","lastModifiedDate":"2017-10-23"},{"lineNumber":133,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":134,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"true\" + \" \" + PREFIX_EMAIL + \"false\"","lastModifiedDate":"2017-10-23"},{"lineNumber":135,"author":{"gitId":"jeffreygohkw"},"content":"                + \" \" + PREFIX_ADDRESS + \"true\" + \" \" + PREFIX_PHONE + \"false\" + \" \" + PREFIX_NAME + \"false\" + \" \"","lastModifiedDate":"2017-10-23"},{"lineNumber":136,"author":{"gitId":"jeffreygohkw"},"content":"                + PREFIX_EMAIL + \"true\" + \" \" + PREFIX_ADDRESS + \"false\" + \" \" + PREFIX_PHONE + \"true\";","lastModifiedDate":"2017-10-23"},{"lineNumber":137,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":138,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"false\")","lastModifiedDate":"2017-10-23"},{"lineNumber":139,"author":{"gitId":"jeffreygohkw"},"content":"                .setEmailPrivate(\"true\").setAddressPrivate(\"false\").setPhonePrivate(\"true\").build();","lastModifiedDate":"2017-10-23"},{"lineNumber":140,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":141,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":142,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);","lastModifiedDate":"2017-10-23"},{"lineNumber":143,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":144,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":145,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":146,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":147,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-23"},{"lineNumber":148,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidValueFollowedByValidValue_success() throws ParseException {","lastModifiedDate":"2017-10-23"},{"lineNumber":149,"author":{"gitId":"jeffreygohkw"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-10-23"},{"lineNumber":150,"author":{"gitId":"jeffreygohkw"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + \"notBoolean\" + \" \" + PREFIX_NAME + \"true\";","lastModifiedDate":"2017-10-23"},{"lineNumber":151,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":152,"author":{"gitId":"jeffreygohkw"},"content":"        PersonPrivacySettings pps \u003d new PersonPrivacySettingsBuilder().setNamePrivate(\"true\").build();","lastModifiedDate":"2017-10-28"},{"lineNumber":153,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand expectedCommand \u003d new ChangePrivacyCommand(targetIndex, pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":154,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":155,"author":{"gitId":"jeffreygohkw"},"content":"        ChangePrivacyCommand actualCommand \u003d parser.parse(userInput);","lastModifiedDate":"2017-10-23"},{"lineNumber":156,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":157,"author":{"gitId":"jeffreygohkw"},"content":"        compareChangePrivacyCommand(expectedCommand, actualCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":158,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":159,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":160,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-29"},{"lineNumber":161,"author":{"gitId":"jeffreygohkw"},"content":"     * Checks if two ChangePrivacyCommands are equal by comparing their contents","lastModifiedDate":"2017-10-29"},{"lineNumber":162,"author":{"gitId":"jeffreygohkw"},"content":"     * @param expectedCommand The expected ChangePrivacyCommand","lastModifiedDate":"2017-10-29"},{"lineNumber":163,"author":{"gitId":"jeffreygohkw"},"content":"     * @param actualCommand The actual ChangePrivacyCommand","lastModifiedDate":"2017-10-29"},{"lineNumber":164,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-29"},{"lineNumber":165,"author":{"gitId":"jeffreygohkw"},"content":"    private void compareChangePrivacyCommand(ChangePrivacyCommand expectedCommand, ChangePrivacyCommand actualCommand) {","lastModifiedDate":"2017-10-29"},{"lineNumber":166,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getIndex(), actualCommand.getIndex());","lastModifiedDate":"2017-10-23"},{"lineNumber":167,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getAddressIsPrivate(), actualCommand.getPps().getAddressIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":168,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getNameIsPrivate(), actualCommand.getPps().getNameIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":169,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getEmailIsPrivate(), actualCommand.getPps().getEmailIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":170,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getPhoneIsPrivate(), actualCommand.getPps().getPhoneIsPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":171,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getPps().getRemarkIsPrivate(), actualCommand.getPps().getRemarkIsPrivate());","lastModifiedDate":"2017-10-29"},{"lineNumber":172,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":173,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-22"}],"authorContributionMap":{"jeffreygohkw":173}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_SEPARATOR;","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeleteCommand.DELETE_TYPE_PERSON;","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.DeleteCommand.DELETE_TYPE_TASK;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_PERSON));","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskValidArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, TASK_SEPARATOR + \"1\",","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"                new DeleteCommand(INDEX_FIRST_PERSON, DELETE_TYPE_TASK));","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    //@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    public void parseTaskInvalidArgs_throwsParseException() {","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, TASK_SEPARATOR + \"a\",","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    //@@author","lastModifiedDate":"2017-10-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"Esilocke":23,"-":29}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-21"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-21"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-10-21"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-21"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-21"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;","lastModifiedDate":"2017-10-21"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-21"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-21"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-10-21"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.DeleteTagCommand;","lastModifiedDate":"2017-10-21"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-21"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"public class DeleteTagCommandParserTest {","lastModifiedDate":"2017-10-21"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();","lastModifiedDate":"2017-10-21"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    public void parseValidIndexAndTagSuccess() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"        final String tagName \u003d \"friends\";","lastModifiedDate":"2017-10-21"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        Tag tagToDelete \u003d new Tag(tagName);","lastModifiedDate":"2017-10-21"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString()","lastModifiedDate":"2017-10-21"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"                + tagName;","lastModifiedDate":"2017-10-21"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, userInput, new DeleteTagCommand(tagToDelete, indexes));","lastModifiedDate":"2017-10-21"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"        final String nonExistentTagName \u003d \"hello\";","lastModifiedDate":"2017-10-21"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"        Tag nonExistentTag \u003d new Tag(nonExistentTagName);","lastModifiedDate":"2017-10-21"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"        userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString()","lastModifiedDate":"2017-10-21"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"                + nonExistentTagName;","lastModifiedDate":"2017-10-21"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, userInput, new DeleteTagCommand(nonExistentTag, indexes));","lastModifiedDate":"2017-10-21"},{"lineNumber":42,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":44,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidTagFailure() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":46,"author":{"gitId":"wangyiming1019"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();","lastModifiedDate":"2017-10-21"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":48,"author":{"gitId":"wangyiming1019"},"content":"        indexes.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2017-10-21"},{"lineNumber":49,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":50,"author":{"gitId":"wangyiming1019"},"content":"        final String tagToDelete \u003d \"friends\";","lastModifiedDate":"2017-10-22"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex1 \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":52,"author":{"gitId":"wangyiming1019"},"content":"        Index targetIndex2 \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-10-21"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":54,"author":{"gitId":"wangyiming1019"},"content":"        String userInput \u003d targetIndex1.getOneBased() + \" \" + targetIndex2.getOneBased() + \" \" + PREFIX_TAG.toString();","lastModifiedDate":"2017-10-21"},{"lineNumber":55,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, userInput, MESSAGE_TAG_CONSTRAINTS);","lastModifiedDate":"2017-10-21"},{"lineNumber":56,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-21"},{"lineNumber":59,"author":{"gitId":"wangyiming1019"},"content":"    public void parseInvalidArgsFailure() throws Exception {","lastModifiedDate":"2017-10-21"},{"lineNumber":60,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, DeleteTagCommand.COMMAND_WORD,","lastModifiedDate":"2017-10-21"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-21"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-21"},{"lineNumber":63,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-21"},{"lineNumber":64,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"},{"lineNumber":65,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-21"}],"authorContributionMap":{"wangyiming1019":65}},{"path":"src/test/java/seedu/address/logic/parser/EditTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-19"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-20"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-10-20"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-10-20"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-10-20"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_DUPLICATE_TAGS;","lastModifiedDate":"2017-10-20"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.EditTagCommand.MESSAGE_INSUFFICIENT_ARGS;","lastModifiedDate":"2017-10-20"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-20"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-20"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-19"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-19"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-20"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditTagCommand;","lastModifiedDate":"2017-10-20"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-10-20"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"public class EditTagCommandParserTest {","lastModifiedDate":"2017-10-20"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-10-20"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-10-20"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    private EditTagCommandParser parser \u003d new EditTagCommandParser();","lastModifiedDate":"2017-10-20"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-19"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"    public void invalidInputTest() {","lastModifiedDate":"2017-10-19"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        // empty argument","lastModifiedDate":"2017-10-20"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-20"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        // too little args","lastModifiedDate":"2017-10-19"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INSUFFICIENT_ARGS);","lastModifiedDate":"2017-10-20"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        // too many args","lastModifiedDate":"2017-10-19"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND + \" \" + VALID_TAG_FRIEND","lastModifiedDate":"2017-10-20"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"                + \" \" + VALID_TAG_FRIEND, MESSAGE_INSUFFICIENT_ARGS);","lastModifiedDate":"2017-10-20"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"        // args are the same","lastModifiedDate":"2017-10-19"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND + \" \" + VALID_TAG_FRIEND, MESSAGE_DUPLICATE_TAGS);","lastModifiedDate":"2017-10-20"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        // args are invalid","lastModifiedDate":"2017-10-19"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"        assertParseFailure(parser, INVALID_TAG_DESC + \" \" + INVALID_TAG_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-10-20"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-19"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"    public void validInputTest() throws IllegalValueException {","lastModifiedDate":"2017-10-20"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        Tag friendTag \u003d new Tag(VALID_TAG_FRIEND);","lastModifiedDate":"2017-10-20"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        Tag husbandTag \u003d new Tag(VALID_TAG_HUSBAND);","lastModifiedDate":"2017-10-20"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"        Tag friendTagUpper \u003d new Tag (VALID_TAG_FRIEND.toUpperCase());","lastModifiedDate":"2017-10-20"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        // case changes","lastModifiedDate":"2017-10-19"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND + \" \"","lastModifiedDate":"2017-10-20"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"                + VALID_TAG_FRIEND.toUpperCase(), new EditTagCommand(friendTag, friendTagUpper));","lastModifiedDate":"2017-10-20"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        // two distinct words","lastModifiedDate":"2017-10-19"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND + \" \"","lastModifiedDate":"2017-10-20"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"                + VALID_TAG_HUSBAND, new EditTagCommand(friendTag, husbandTag));","lastModifiedDate":"2017-10-20"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-20"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-19"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-19"}],"authorContributionMap":{"Esilocke":53}},{"path":"src/test/java/seedu/address/logic/parser/FavouriteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"public class FavouriteCommandParserTest {","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    private FavouriteCommandParser parser \u003d new FavouriteCommandParser();","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_validArgs_returnsFavouriteCommand() {","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \"1\", new FavouriteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"f\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"                FavouriteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":26}},{"path":"src/test/java/seedu/address/logic/parser/FindTagCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-29"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-29"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-29"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-29"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-10-29"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-29"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.FindTagCommand;","lastModifiedDate":"2017-10-29"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.model.person.NameContainsTagsPredicate;","lastModifiedDate":"2017-10-29"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"public class FindTagCommandParserTest {","lastModifiedDate":"2017-10-29"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    private FindTagCommandParser parser \u003d new FindTagCommandParser();","lastModifiedDate":"2017-10-29"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    public void parseEmptyArgThrowsParseException() {","lastModifiedDate":"2017-10-29"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2017-10-29"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-29"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-29"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public void parseValidArgsReturnsFindTagCommand() {","lastModifiedDate":"2017-10-29"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"        FindTagCommand expectedFindTagCommand \u003d","lastModifiedDate":"2017-10-29"},{"lineNumber":27,"author":{"gitId":"wangyiming1019"},"content":"                new FindTagCommand(new NameContainsTagsPredicate(","lastModifiedDate":"2017-10-29"},{"lineNumber":28,"author":{"gitId":"wangyiming1019"},"content":"                        Arrays.asList(\"friend\", \"colleague\")));","lastModifiedDate":"2017-10-29"},{"lineNumber":29,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":30,"author":{"gitId":"wangyiming1019"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-10-29"},{"lineNumber":31,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \"friend colleague\", expectedFindTagCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":33,"author":{"gitId":"wangyiming1019"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-10-29"},{"lineNumber":34,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \" \\n friend \\n \\t colleague  \\t\", expectedFindTagCommand);","lastModifiedDate":"2017-10-29"},{"lineNumber":35,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-29"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":38,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-29"}],"authorContributionMap":{"wangyiming1019":38}},{"path":"src/test/java/seedu/address/logic/parser/LocateCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-28"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-28"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-28"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-28"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-28"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.LocateCommand;","lastModifiedDate":"2017-10-28"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-28"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":" * Test scope: similar to {@code SelectCommandParserTest}.","lastModifiedDate":"2017-10-28"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":" * @see SelectCommandParserTest","lastModifiedDate":"2017-10-28"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-28"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"public class LocateCommandParserTest {","lastModifiedDate":"2017-10-28"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    private LocateCommandParser parser \u003d new LocateCommandParser();","lastModifiedDate":"2017-10-28"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_validArgs_returnsLocateCommand() {","lastModifiedDate":"2017-10-28"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseSuccess(parser, \"1\", new LocateCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-28"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-10-28"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-28"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-28"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-28"}],"authorContributionMap":{"jeffreygohkw":29}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-12"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_INVALID_INPUT;","lastModifiedDate":"2017-10-13"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-12"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"public class SortCommandParserTest {","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    public void no_arguments_throwsParseException() {","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_wrongArguments_failure() {","lastModifiedDate":"2017-10-12"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"        // no field specified","lastModifiedDate":"2017-10-12"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"asc\",","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"desc\",","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        // no order specified","lastModifiedDate":"2017-10-12"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"name\",","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"phone\",","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"email\",","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"address\",","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"        // no field or order","lastModifiedDate":"2017-10-13"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        assertParseFailure(parser, \"random text\",","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"                String.format(MESSAGE_INVALID_INPUT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-13"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"    public void parse_validArguments_success() throws ParseException {","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        SortCommand expectedCommand;","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"        SortCommand actualCommand;","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"name\", \"asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"name asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"name\", \"desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"name desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"phone\", \"asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"phone asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"phone\", \"desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"phone desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"email\", \"asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"email asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"email\", \"desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"email desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"address\", \"asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"address asc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":91,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":92,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":93,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":94,"author":{"gitId":"jeffreygohkw"},"content":"        expectedCommand \u003d new SortCommand(\"address\", \"desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":95,"author":{"gitId":"jeffreygohkw"},"content":"        actualCommand \u003d parser.parse(\"address desc\");","lastModifiedDate":"2017-10-24"},{"lineNumber":96,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":97,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getField(), actualCommand.getField());","lastModifiedDate":"2017-10-24"},{"lineNumber":98,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedCommand.getOrder(), actualCommand.getOrder());","lastModifiedDate":"2017-10-24"},{"lineNumber":99,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":100,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-12"}],"authorContributionMap":{"jeffreygohkw":100}},{"path":"src/test/java/seedu/address/logic/parser/UnfavouriteCommandParserTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"wangyiming1019"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-10-25"},{"lineNumber":2,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":3,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-10-25"},{"lineNumber":4,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-10-25"},{"lineNumber":5,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-10-25"},{"lineNumber":6,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-10-25"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"wangyiming1019"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-25"},{"lineNumber":9,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":10,"author":{"gitId":"wangyiming1019"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;","lastModifiedDate":"2017-10-25"},{"lineNumber":11,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":12,"author":{"gitId":"wangyiming1019"},"content":"public class UnfavouriteCommandParserTest {","lastModifiedDate":"2017-10-25"},{"lineNumber":13,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":14,"author":{"gitId":"wangyiming1019"},"content":"    private UnfavouriteCommandParser parser \u003d new UnfavouriteCommandParser();","lastModifiedDate":"2017-10-25"},{"lineNumber":15,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":16,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":17,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_validArgs_returnsUnfavouriteCommand() {","lastModifiedDate":"2017-10-25"},{"lineNumber":18,"author":{"gitId":"wangyiming1019"},"content":"        assertParseSuccess(parser, \"1\", new UnfavouriteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-10-25"},{"lineNumber":19,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":20,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":21,"author":{"gitId":"wangyiming1019"},"content":"    @Test","lastModifiedDate":"2017-10-25"},{"lineNumber":22,"author":{"gitId":"wangyiming1019"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-10-25"},{"lineNumber":23,"author":{"gitId":"wangyiming1019"},"content":"        assertParseFailure(parser, \"u\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2017-10-25"},{"lineNumber":24,"author":{"gitId":"wangyiming1019"},"content":"                UnfavouriteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-10-25"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"wangyiming1019"},"content":"}","lastModifiedDate":"2017-10-25"}],"authorContributionMap":{"wangyiming1019":26}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2016-12-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;","lastModifiedDate":"2017-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-10-04"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import java.util.Comparator;","lastModifiedDate":"2017-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.Rule;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Rule","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTasksList());","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(null);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Repeat ALICE twice","lastModifiedDate":"2017-07-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));","lastModifiedDate":"2017-07-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        thrown.expect(AssertionError.class);","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);","lastModifiedDate":"2017-09-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        addressBook.getPersonList().remove(0);","lastModifiedDate":"2017-09-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);","lastModifiedDate":"2017-09-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        addressBook.getTagList().remove(0);","lastModifiedDate":"2017-09-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":76,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":77,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_name_asc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":78,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":79,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"name\", \"asc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":80,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":81,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":82,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":83,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":84,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getName().toString()));","lastModifiedDate":"2017-10-01"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":86,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_name_desc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"name\", \"desc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getName().toString())));","lastModifiedDate":"2017-10-01"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":102,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":103,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":104,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_phone_asc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":106,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"phone\", \"asc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":108,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":109,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":110,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":111,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getPhone().toString()));","lastModifiedDate":"2017-10-01"},{"lineNumber":113,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":115,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":116,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":117,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":118,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_phone_desc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":120,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"phone\", \"desc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":122,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":123,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getPhone().toString())));","lastModifiedDate":"2017-10-01"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":131,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":133,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_email_asc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":134,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":135,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"email\", \"asc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":136,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":137,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":138,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":139,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":140,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getEmail().toString()));","lastModifiedDate":"2017-10-01"},{"lineNumber":141,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":142,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":143,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":144,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":146,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":147,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_email_desc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":148,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":149,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"email\", \"desc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":150,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":151,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":152,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":153,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":154,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getEmail().toString())));","lastModifiedDate":"2017-10-01"},{"lineNumber":155,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":156,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":158,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":159,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":160,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":161,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_address_asc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":162,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":163,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"address\", \"asc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":164,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":166,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":167,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":168,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Comparator.comparing(o -\u003e o.getAddress().toString()));","lastModifiedDate":"2017-10-01"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":170,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":171,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":172,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":173,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":174,"author":{"gitId":"charlesgoh"},"content":"    @Test","lastModifiedDate":"2017-10-01"},{"lineNumber":175,"author":{"gitId":"charlesgoh"},"content":"    public void sortCommandLogic_address_desc() {","lastModifiedDate":"2017-10-01"},{"lineNumber":176,"author":{"gitId":"charlesgoh"},"content":"        AddressBook testBook \u003d getTypicalAddressBook();","lastModifiedDate":"2017-10-01"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"        testBook.sortPersonsBy(\"address\", \"desc\");","lastModifiedDate":"2017-10-01"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedTestList \u003d testBook.getPersonList();","lastModifiedDate":"2017-10-01"},{"lineNumber":179,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":180,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":181,"author":{"gitId":"charlesgoh"},"content":"        List\u003cReadOnlyPerson\u003e expectedList \u003d getTypicalPersons();","lastModifiedDate":"2017-10-01"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"        Collections.sort(expectedList, Collections.reverseOrder(Comparator.comparing(o -\u003e o.getAddress().toString())));","lastModifiedDate":"2017-10-01"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"        ObservableList\u003cReadOnlyPerson\u003e sortedexpectedList \u003d FXCollections.observableArrayList(expectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":184,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":185,"author":{"gitId":"charlesgoh"},"content":"        assertEquals(sortedTestList, sortedexpectedList);","lastModifiedDate":"2017-10-01"},{"lineNumber":186,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-01"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-01"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints.","lastModifiedDate":"2016-12-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-12-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-12-24"},{"lineNumber":194,"author":{"gitId":"Esilocke"},"content":"        private final ObservableList\u003cReadOnlyTask\u003e tasks \u003d FXCollections.observableArrayList();","lastModifiedDate":"2017-10-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {","lastModifiedDate":"2016-12-24"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags.setAll(tags);","lastModifiedDate":"2016-12-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {","lastModifiedDate":"2016-12-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {","lastModifiedDate":"2016-12-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return tags;","lastModifiedDate":"2016-12-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":210,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":211,"author":{"gitId":"Esilocke"},"content":"        @Override","lastModifiedDate":"2017-10-24"},{"lineNumber":212,"author":{"gitId":"Esilocke"},"content":"        public ObservableList\u003cReadOnlyTask\u003e getTasksList() {","lastModifiedDate":"2017-10-24"},{"lineNumber":213,"author":{"gitId":"Esilocke"},"content":"            return tasks;","lastModifiedDate":"2017-10-24"},{"lineNumber":214,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"charlesgoh":114,"Esilocke":8,"-":95}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-01-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-01-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"    public void privateAddressIsHidden_success() throws IllegalValueException {","lastModifiedDate":"2017-10-16"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"        Address a \u003d new Address(\"Any Address\", true);","lastModifiedDate":"2017-10-16"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(a.isPrivate());","lastModifiedDate":"2017-10-16"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(a.toString(), \"\u003cPrivate Address\u003e\");","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jeffreygohkw":9,"-":21}},{"path":"src/test/java/seedu/address/model/person/EmailTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-01-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-01-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-@example.com\")); // invalid local part","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@b\"));  // minimal","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1@example1.com\"));  // mixture of alphanumeric and dot characters","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"_user_@_e_x_a_m_p_l_e_.com_\"));    // underscores","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very_very_very_long_example.com\"));   // long domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"    public void privateEmailIsHidden_success() throws IllegalValueException {","lastModifiedDate":"2017-10-16"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"        Email e \u003d new Email(\"AnyEmail@example.com\", true);","lastModifiedDate":"2017-10-16"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(e.isPrivate());","lastModifiedDate":"2017-10-16"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(e.toString(), \"\u003cPrivate Email\u003e\");","lastModifiedDate":"2017-10-16"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jeffreygohkw":9,"-":40}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-01-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-01-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"    public void privateNameIsHidden_success() throws IllegalValueException {","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        Name n \u003d new Name(\"Any Name\", true);","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(n.isPrivate());","lastModifiedDate":"2017-10-16"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(n.toString(), \"\u003cPrivate Name\u003e\");","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jeffreygohkw":9,"-":26}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import static junit.framework.TestCase.assertEquals;","lastModifiedDate":"2017-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-01-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-01-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-16"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"    @Test","lastModifiedDate":"2017-10-16"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    public void privatePhoneIsHidden_success() throws IllegalValueException {","lastModifiedDate":"2017-10-16"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"        Phone p \u003d new Phone(\"999\", true);","lastModifiedDate":"2017-10-16"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"        assertTrue(p.isPrivate());","lastModifiedDate":"2017-10-16"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(p.toString(), \"\u003cPrivate Phone\u003e\");","lastModifiedDate":"2017-10-16"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"jeffreygohkw":9,"-":25}},{"path":"src/test/java/seedu/address/model/task/DeadlineTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-11"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-11"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class DeadlineTest {","lastModifiedDate":"2017-10-11"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidDeadline() {","lastModifiedDate":"2017-10-12"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid deadlines","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"alphabets\")); // non-numeric letters","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"!@#$%^\")); // invalid symbols","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"-04-17\")); // missing day","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04--17\")); // missing month","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-04\")); // missing year","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"day-04-17\")); // invalid day","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-month-17\")); // invalid month","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-04-year\")); // invalid year","lastModifiedDate":"2017-10-12"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"32-04-17\")); // impossible day","lastModifiedDate":"2017-10-12"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-13-17\")); // impossible month","lastModifiedDate":"2017-10-12"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-04--1\")); // impossible year","lastModifiedDate":"2017-10-12"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"0-04-17\")); // incomplete day","lastModifiedDate":"2017-10-12"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-0-17\")); // incomplete month","lastModifiedDate":"2017-10-12"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-04-1\")); // incomplete year","lastModifiedDate":"2017-10-12"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-04-201\")); // incomplete year","lastModifiedDate":"2017-10-12"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-04/17\")); // inconsistent separators","lastModifiedDate":"2017-10-12"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Deadline.isValidDeadline(\"04-042017\")); // missing separator","lastModifiedDate":"2017-10-12"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"        // valid deadline (empty deadline for optional data)","lastModifiedDate":"2017-10-12"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"\")); // empty string","lastModifiedDate":"2017-10-12"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        // valid deadlines","lastModifiedDate":"2017-10-12"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"04-04-2017\")); // dashes","lastModifiedDate":"2017-10-12"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"04/04/2017\")); // slashes","lastModifiedDate":"2017-10-12"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Deadline.isValidDeadline(\"04.04.2017\")); // dots","lastModifiedDate":"2017-10-12"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-11"}],"authorContributionMap":{"Esilocke":44}},{"path":"src/test/java/seedu/address/model/task/DescriptionTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-11"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-11"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class DescriptionTest {","lastModifiedDate":"2017-10-11"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidDescription() {","lastModifiedDate":"2017-10-12"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid descriptions","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        // valid descriptions","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Description.isValidDescription(\"\")); // empty string","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Description.isValidDescription(\"alphanumerical contents\")); // alphanumerical contents","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Description.isValidDescription(\"-\")); // single character","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-11"}],"authorContributionMap":{"Esilocke":20}},{"path":"src/test/java/seedu/address/model/task/PriorityTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-11"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-11"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-12"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-12"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-12"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class PriorityTest {","lastModifiedDate":"2017-10-11"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-12"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidPriority() {","lastModifiedDate":"2017-10-12"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid names","lastModifiedDate":"2017-10-12"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only","lastModifiedDate":"2017-10-12"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\"invalid\")); // invalid priority","lastModifiedDate":"2017-10-12"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\"777\")); // priority out of range","lastModifiedDate":"2017-10-12"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertFalse(Priority.isValidPriority(\"0\")); // priority out of range","lastModifiedDate":"2017-10-12"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-12"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        // valid names","lastModifiedDate":"2017-10-12"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Priority.isValidPriority(\"\")); // empty string","lastModifiedDate":"2017-10-12"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"        assertTrue(Priority.isValidPriority(\"1\")); // numerical representation","lastModifiedDate":"2017-10-12"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-12"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-11"}],"authorContributionMap":{"Esilocke":23}},{"path":"src/test/java/seedu/address/model/task/TaskNameTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.model.task;","lastModifiedDate":"2017-10-24"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import org.junit.Test;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"public class TaskNameTest {","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"    public void isValidName() {","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"        // invalid names","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"        assertFalse(TaskName.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-10-24"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"        assertFalse(TaskName.isValidName(\"\")); // empty string","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"        // valid names","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"        assertTrue(TaskName.isValidName(\".\")); // single character","lastModifiedDate":"2017-10-24"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"        assertTrue(TaskName.isValidName(\"buy pencil\")); // alphanumerical with spaces","lastModifiedDate":"2017-10-24"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        assertTrue(TaskName.isValidName(\"buy pencil!\")); // special symbols","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-24"}],"authorContributionMap":{"Esilocke":21}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-05-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2017-05-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-06-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":35,"author":{"gitId":"charlesgoh"},"content":"        descriptor.setRemark(person.getRemark());","lastModifiedDate":"2017-10-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);","lastModifiedDate":"2017-06-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);","lastModifiedDate":"2017-06-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);","lastModifiedDate":"2017-06-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"charlesgoh"},"content":"    /**","lastModifiedDate":"2017-10-22"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-10-22"},{"lineNumber":89,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-22"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"    public EditPersonDescriptorBuilder withRemark(String remark) {","lastModifiedDate":"2017-10-22"},{"lineNumber":91,"author":{"gitId":"charlesgoh"},"content":"        try {","lastModifiedDate":"2017-10-22"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"            ParserUtil.parseRemark(Optional.of(remark)).ifPresent(descriptor::setRemark);","lastModifiedDate":"2017-10-22"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-22"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");","lastModifiedDate":"2017-10-22"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-22"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"        return this;","lastModifiedDate":"2017-10-22"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-22"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":112,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":113,"author":{"gitId":"wangyiming1019"},"content":"     * Sets the {@code Favourite} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-10-25"},{"lineNumber":114,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":115,"author":{"gitId":"wangyiming1019"},"content":"    public EditPersonDescriptorBuilder withFavourite(String favourite) {","lastModifiedDate":"2017-10-25"},{"lineNumber":116,"author":{"gitId":"wangyiming1019"},"content":"        descriptor.setFavourite(new Boolean(favourite));","lastModifiedDate":"2017-10-25"},{"lineNumber":117,"author":{"gitId":"wangyiming1019"},"content":"        return this;","lastModifiedDate":"2017-10-25"},{"lineNumber":118,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":119,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"charlesgoh":13,"wangyiming1019":8,"-":102}},{"path":"src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-10-26"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import java.util.Optional;","lastModifiedDate":"2017-10-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-26"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-26"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * A utility class to help with building EditTaskDescriptor objects.","lastModifiedDate":"2017-10-26"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class EditTaskDescriptorBuilder {","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    private EditTaskDescriptor descriptor;","lastModifiedDate":"2017-10-26"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder() {","lastModifiedDate":"2017-10-26"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptor();","lastModifiedDate":"2017-10-26"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {","lastModifiedDate":"2017-10-26"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);","lastModifiedDate":"2017-10-26"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details","lastModifiedDate":"2017-10-26"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder(ReadOnlyTask task) {","lastModifiedDate":"2017-10-26"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        descriptor \u003d new EditTaskDescriptor();","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"        descriptor.setTaskName(task.getTaskName());","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        descriptor.setDescription(task.getDescription());","lastModifiedDate":"2017-10-26"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"        descriptor.setDeadline(task.getDeadline());","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"        descriptor.setPriority(task.getPriority());","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code TaskName} of the {@code EditTaskDescriptor} that we are building.","lastModifiedDate":"2017-10-26"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withTaskName(String name) {","lastModifiedDate":"2017-10-26"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseTaskName(Optional.of(name)).ifPresent(descriptor::setTaskName);","lastModifiedDate":"2017-10-26"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-26"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");","lastModifiedDate":"2017-10-26"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-26"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building.","lastModifiedDate":"2017-10-26"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2017-10-26"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDescription(Optional.of(description)).ifPresent(descriptor::setDescription);","lastModifiedDate":"2017-10-26"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-26"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"description is expected to be unique.\");","lastModifiedDate":"2017-10-26"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-26"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building.","lastModifiedDate":"2017-10-26"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withDeadline(String deadline) {","lastModifiedDate":"2017-10-26"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parseDeadline(Optional.of(deadline)).ifPresent(descriptor::setDeadline);","lastModifiedDate":"2017-10-26"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-26"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"deadline is expected to be unique.\");","lastModifiedDate":"2017-10-26"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-26"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building.","lastModifiedDate":"2017-10-26"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptorBuilder withPriority(String priority) {","lastModifiedDate":"2017-10-26"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-26"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"            ParserUtil.parsePriority(Optional.of(priority)).ifPresent(descriptor::setPriority);","lastModifiedDate":"2017-10-26"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-26"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"priority is expected to be unique.\");","lastModifiedDate":"2017-10-26"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-26"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"    public EditTaskDescriptor build() {","lastModifiedDate":"2017-10-26"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        return descriptor;","lastModifiedDate":"2017-10-26"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-26"}],"authorContributionMap":{"Esilocke":88}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2016-09-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-05-03"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import seedu.address.model.person.Remark;","lastModifiedDate":"2017-10-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"wangyiming1019"},"content":"    public static final String DEFAULT_FAVOURITE \u003d \"false\";","lastModifiedDate":"2017-10-25"},{"lineNumber":26,"author":{"gitId":"charlesgoh"},"content":"    public static final String DEFAULT_REMARK \u003d \"Eats, shoots, and leaves\";","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Person person;","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"            Boolean defaultFavourite \u003d new Boolean(DEFAULT_FAVOURITE);","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"charlesgoh"},"content":"            Remark defaultRemark \u003d new Remark(DEFAULT_REMARK);","lastModifiedDate":"2017-10-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"wangyiming1019"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress, defaultFavourite,","lastModifiedDate":"2017-10-25"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"                                     defaultRemark, defaultTags);","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {","lastModifiedDate":"2017-05-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d new Person(personToCopy);","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            this.person.setName(new Name(name));","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));","lastModifiedDate":"2017-04-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            this.person.setAddress(new Address(address));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"charlesgoh"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"    public PersonBuilder withRemark(String remark) {","lastModifiedDate":"2017-10-23"},{"lineNumber":94,"author":{"gitId":"charlesgoh"},"content":"        try {","lastModifiedDate":"2017-10-23"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"            this.person.setRemark(new Remark(remark));","lastModifiedDate":"2017-10-23"},{"lineNumber":96,"author":{"gitId":"charlesgoh"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-23"},{"lineNumber":97,"author":{"gitId":"charlesgoh"},"content":"            throw new IllegalArgumentException(\"Remark is invalid\");","lastModifiedDate":"2017-10-23"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":99,"author":{"gitId":"charlesgoh"},"content":"        return this;","lastModifiedDate":"2017-10-23"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            this.person.setPhone(new Phone(phone));","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            this.person.setEmail(new Email(email));","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":126,"author":{"gitId":"wangyiming1019"},"content":"    /**","lastModifiedDate":"2017-10-25"},{"lineNumber":127,"author":{"gitId":"wangyiming1019"},"content":"     * Sets the {@code Boolean} of the {@code Person} that we are building.","lastModifiedDate":"2017-10-25"},{"lineNumber":128,"author":{"gitId":"wangyiming1019"},"content":"     */","lastModifiedDate":"2017-10-25"},{"lineNumber":129,"author":{"gitId":"wangyiming1019"},"content":"    public PersonBuilder withFavourite(String favourite) {","lastModifiedDate":"2017-10-25"},{"lineNumber":130,"author":{"gitId":"wangyiming1019"},"content":"        this.person.setFavourite(new Boolean(favourite));","lastModifiedDate":"2017-10-25"},{"lineNumber":131,"author":{"gitId":"wangyiming1019"},"content":"        return this;","lastModifiedDate":"2017-10-25"},{"lineNumber":132,"author":{"gitId":"wangyiming1019"},"content":"    }","lastModifiedDate":"2017-10-25"},{"lineNumber":133,"author":{"gitId":"wangyiming1019"},"content":"","lastModifiedDate":"2017-10-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return this.person;","lastModifiedDate":"2016-09-03"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"charlesgoh":13,"wangyiming1019":12,"-":113}},{"path":"src/test/java/seedu/address/testutil/PersonPrivacySettingsBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"jeffreygohkw"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-10-23"},{"lineNumber":2,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":3,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.logic.commands.ChangePrivacyCommand.PersonPrivacySettings;","lastModifiedDate":"2017-10-23"},{"lineNumber":4,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-10-23"},{"lineNumber":5,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":6,"author":{"gitId":"jeffreygohkw"},"content":"/**","lastModifiedDate":"2017-10-23"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":" * A utility class to help with building PersonPrivacySettings objects.","lastModifiedDate":"2017-10-23"},{"lineNumber":8,"author":{"gitId":"jeffreygohkw"},"content":" */","lastModifiedDate":"2017-10-23"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"public class PersonPrivacySettingsBuilder {","lastModifiedDate":"2017-10-23"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":11,"author":{"gitId":"jeffreygohkw"},"content":"    private PersonPrivacySettings pps;","lastModifiedDate":"2017-10-23"},{"lineNumber":12,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder() {","lastModifiedDate":"2017-10-23"},{"lineNumber":13,"author":{"gitId":"jeffreygohkw"},"content":"        pps \u003d new PersonPrivacySettings();","lastModifiedDate":"2017-10-23"},{"lineNumber":14,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":15,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":16,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder(PersonPrivacySettings pps) {","lastModifiedDate":"2017-10-23"},{"lineNumber":17,"author":{"gitId":"jeffreygohkw"},"content":"        this.pps \u003d new PersonPrivacySettings(pps);","lastModifiedDate":"2017-10-23"},{"lineNumber":18,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":19,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":20,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":21,"author":{"gitId":"jeffreygohkw"},"content":"     * Returns an {@code PersonPrivacySettings} with fields containing {@code person}\u0027s privacy details","lastModifiedDate":"2017-10-23"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":23,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder(ReadOnlyPerson person) {","lastModifiedDate":"2017-10-23"},{"lineNumber":24,"author":{"gitId":"jeffreygohkw"},"content":"        pps \u003d new PersonPrivacySettings();","lastModifiedDate":"2017-10-23"},{"lineNumber":25,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setNameIsPrivate(person.getName().isPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setPhoneIsPrivate(person.getPhone().isPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setEmailIsPrivate(person.getEmail().isPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":28,"author":{"gitId":"jeffreygohkw"},"content":"        pps.setAddressIsPrivate(person.getAddress().isPrivate());","lastModifiedDate":"2017-10-23"},{"lineNumber":29,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":30,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":31,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":32,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code nameIsPrivate} of the {@code PersonPrivacySettings} that we are building.","lastModifiedDate":"2017-10-23"},{"lineNumber":33,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":34,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setNamePrivate(String name) {","lastModifiedDate":"2017-10-23"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        if (name.equals(\"Optional[true]\") || name.equals(\"true\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":36,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setNameIsPrivate(true);","lastModifiedDate":"2017-10-23"},{"lineNumber":37,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (name.equals(\"Optional[false]\") || name.equals(\"false\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":38,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setNameIsPrivate(false);","lastModifiedDate":"2017-10-23"},{"lineNumber":39,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":40,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of name should be true or false\");","lastModifiedDate":"2017-10-23"},{"lineNumber":41,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":42,"author":{"gitId":"jeffreygohkw"},"content":"        return this;","lastModifiedDate":"2017-10-23"},{"lineNumber":43,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":44,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":45,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":46,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code phoneIsPrivate} of the {@code PersonPrivacySettings} that we are building.","lastModifiedDate":"2017-10-23"},{"lineNumber":47,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":48,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setPhonePrivate(String phone) {","lastModifiedDate":"2017-10-23"},{"lineNumber":49,"author":{"gitId":"jeffreygohkw"},"content":"        if (phone.equals(\"Optional[true]\") || phone.equals(\"true\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":50,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setPhoneIsPrivate(true);","lastModifiedDate":"2017-10-23"},{"lineNumber":51,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (phone.equals(\"Optional[false]\") || phone.equals(\"false\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":52,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setPhoneIsPrivate(false);","lastModifiedDate":"2017-10-23"},{"lineNumber":53,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":54,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of phone should be true or false\");","lastModifiedDate":"2017-10-23"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        return this;","lastModifiedDate":"2017-10-23"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code emailIsPrivate} of the {@code PersonPrivacySettings} that we are building.","lastModifiedDate":"2017-10-23"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setEmailPrivate(String email) {","lastModifiedDate":"2017-10-23"},{"lineNumber":63,"author":{"gitId":"jeffreygohkw"},"content":"        if (email.equals(\"Optional[true]\") || email.equals(\"true\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":64,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setEmailIsPrivate(true);","lastModifiedDate":"2017-10-23"},{"lineNumber":65,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (email.equals(\"Optional[false]\") || email.equals(\"false\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":66,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setEmailIsPrivate(false);","lastModifiedDate":"2017-10-23"},{"lineNumber":67,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":68,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of email should be true or false\");","lastModifiedDate":"2017-10-23"},{"lineNumber":69,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":70,"author":{"gitId":"jeffreygohkw"},"content":"        return this;","lastModifiedDate":"2017-10-23"},{"lineNumber":71,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":72,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":73,"author":{"gitId":"jeffreygohkw"},"content":"    /**","lastModifiedDate":"2017-10-23"},{"lineNumber":74,"author":{"gitId":"jeffreygohkw"},"content":"     * Sets the {@code addressIsPrivate} of the {@code PersonPrivacySettings} that we are building.","lastModifiedDate":"2017-10-23"},{"lineNumber":75,"author":{"gitId":"jeffreygohkw"},"content":"     */","lastModifiedDate":"2017-10-23"},{"lineNumber":76,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettingsBuilder setAddressPrivate(String address) {","lastModifiedDate":"2017-10-23"},{"lineNumber":77,"author":{"gitId":"jeffreygohkw"},"content":"        if (address.equals(\"Optional[true]\") || address.equals(\"true\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":78,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setAddressIsPrivate(true);","lastModifiedDate":"2017-10-23"},{"lineNumber":79,"author":{"gitId":"jeffreygohkw"},"content":"        } else if (address.equals(\"Optional[false]\") || address.equals(\"false\")) {","lastModifiedDate":"2017-10-23"},{"lineNumber":80,"author":{"gitId":"jeffreygohkw"},"content":"            pps.setAddressIsPrivate(false);","lastModifiedDate":"2017-10-23"},{"lineNumber":81,"author":{"gitId":"jeffreygohkw"},"content":"        } else {","lastModifiedDate":"2017-10-23"},{"lineNumber":82,"author":{"gitId":"jeffreygohkw"},"content":"            throw new IllegalArgumentException(\"Privacy of address should be true or false\");","lastModifiedDate":"2017-10-23"},{"lineNumber":83,"author":{"gitId":"jeffreygohkw"},"content":"        }","lastModifiedDate":"2017-10-23"},{"lineNumber":84,"author":{"gitId":"jeffreygohkw"},"content":"        return this;","lastModifiedDate":"2017-10-23"},{"lineNumber":85,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":86,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-23"},{"lineNumber":87,"author":{"gitId":"jeffreygohkw"},"content":"    public PersonPrivacySettings build() {","lastModifiedDate":"2017-10-23"},{"lineNumber":88,"author":{"gitId":"jeffreygohkw"},"content":"        return pps;","lastModifiedDate":"2017-10-23"},{"lineNumber":89,"author":{"gitId":"jeffreygohkw"},"content":"    }","lastModifiedDate":"2017-10-23"},{"lineNumber":90,"author":{"gitId":"jeffreygohkw"},"content":"}","lastModifiedDate":"2017-10-23"}],"authorContributionMap":{"jeffreygohkw":90}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;","lastModifiedDate":"2017-10-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static String getAddCommand(ReadOnlyPerson person) {","lastModifiedDate":"2017-07-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(ReadOnlyPerson person) {","lastModifiedDate":"2017-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"charlesgoh"},"content":"        sb.append(PREFIX_REMARK + person.getRemark().value + \" \");","lastModifiedDate":"2017-10-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"charlesgoh":2,"-":38}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-10-24"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2017-10-24"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2017-10-24"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2017-10-24"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2017-10-24"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-24"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2017-10-24"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.TaskName;","lastModifiedDate":"2017-10-24"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-24"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":" * A utility class to help with building Task objects.","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-24"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"public class TaskBuilder {","lastModifiedDate":"2017-10-24"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_NAME \u003d \"Buy pencil\";","lastModifiedDate":"2017-10-24"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Buy a pencil from ABS by tomorrow\";","lastModifiedDate":"2017-10-24"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_DEADLINE \u003d \"04-04-2017\";","lastModifiedDate":"2017-10-24"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"4\";","lastModifiedDate":"2017-10-24"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"    private Task task;","lastModifiedDate":"2017-10-24"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder() {","lastModifiedDate":"2017-10-24"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-24"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"            TaskName defaultTaskName \u003d new TaskName(DEFAULT_NAME);","lastModifiedDate":"2017-10-24"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            Description defaultDescription \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2017-10-24"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            Deadline defaultDeadline \u003d new Deadline(DEFAULT_DEADLINE);","lastModifiedDate":"2017-10-24"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"            Priority defaultPriority \u003d new Priority(DEFAULT_PRIORITY);","lastModifiedDate":"2017-10-24"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            this.task \u003d new Task(defaultTaskName, defaultDescription, defaultDeadline, defaultPriority);","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-24"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"            throw new AssertionError(\"Default task\u0027s values are invalid.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}.","lastModifiedDate":"2017-10-24"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder(ReadOnlyTask taskToCopy) {","lastModifiedDate":"2017-10-24"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"        this.task \u003d new Task(taskToCopy);","lastModifiedDate":"2017-10-24"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code TaskName} of the {@code Task} that we are building.","lastModifiedDate":"2017-10-24"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withTaskName(String name) {","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"            this.task.setTaskName(new TaskName(name));","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Priority} of the {@code Task} that we are building.","lastModifiedDate":"2017-10-24"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withPriority(String priority) {","lastModifiedDate":"2017-10-24"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-24"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"            this.task.setPriority(new Priority(priority));","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-24"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"priority is expected to be unique.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Description} of the {@code Task} that we are building.","lastModifiedDate":"2017-10-24"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withDescription(String description) {","lastModifiedDate":"2017-10-24"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-24"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"            this.task.setDescription(new Description(description));","lastModifiedDate":"2017-10-24"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-24"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"description is expected to be unique.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-24"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":77,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":78,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-24"},{"lineNumber":79,"author":{"gitId":"Esilocke"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building.","lastModifiedDate":"2017-10-24"},{"lineNumber":80,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-24"},{"lineNumber":81,"author":{"gitId":"Esilocke"},"content":"    public TaskBuilder withDeadline(String deadline) {","lastModifiedDate":"2017-10-24"},{"lineNumber":82,"author":{"gitId":"Esilocke"},"content":"        try {","lastModifiedDate":"2017-10-24"},{"lineNumber":83,"author":{"gitId":"Esilocke"},"content":"            this.task.setDeadline(new Deadline(deadline));","lastModifiedDate":"2017-10-24"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2017-10-24"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"            throw new IllegalArgumentException(\"deadline is expected to be unique.\");","lastModifiedDate":"2017-10-24"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-24"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"        return this;","lastModifiedDate":"2017-10-24"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"    public Task build() {","lastModifiedDate":"2017-10-24"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"        return this.task;","lastModifiedDate":"2017-10-24"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-24"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-24"}],"authorContributionMap":{"Esilocke":93}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"wangyiming1019"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FAVOURITE;","lastModifiedDate":"2017-10-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2017-10-24"},{"lineNumber":13,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2017-10-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-07-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2017-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"wangyiming1019"},"content":"            .withPhone(\"85355255\").withFavourite(\"false\").withRemark(\"Alice from wonderland\")","lastModifiedDate":"2017-10-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2017-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":36,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withFavourite(\"false\")","lastModifiedDate":"2017-10-25"},{"lineNumber":37,"author":{"gitId":"wangyiming1019"},"content":"            .withRemark(\"Teammate\").withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2017-09-21"},{"lineNumber":39,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2017-09-21"},{"lineNumber":41,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2017-09-21"},{"lineNumber":43,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2017-09-21"},{"lineNumber":45,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2017-09-21"},{"lineNumber":47,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2017-09-21"},{"lineNumber":53,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withFavourite(\"false\").build();","lastModifiedDate":"2017-10-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-10-25"},{"lineNumber":58,"author":{"gitId":"wangyiming1019"},"content":"            .withFavourite(VALID_FAVOURITE).withRemark(VALID_REMARK_AMY)","lastModifiedDate":"2017-10-25"},{"lineNumber":59,"author":{"gitId":"charlesgoh"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"wangyiming1019"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-10-25"},{"lineNumber":62,"author":{"gitId":"wangyiming1019"},"content":"            .withFavourite(VALID_FAVOURITE).withRemark(VALID_REMARK_BOB)","lastModifiedDate":"2017-10-25"},{"lineNumber":63,"author":{"gitId":"charlesgoh"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {","lastModifiedDate":"2017-08-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2016-09-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            } catch (DuplicatePersonException e) {","lastModifiedDate":"2017-06-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                assert false : \"not possible\";","lastModifiedDate":"2016-09-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":84,"author":{"gitId":"Esilocke"},"content":"    public static AddressBook getTaglessAddressBook() {","lastModifiedDate":"2017-10-20"},{"lineNumber":85,"author":{"gitId":"Esilocke"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-10-20"},{"lineNumber":86,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyPerson person : getTaglessPersons()) {","lastModifiedDate":"2017-10-20"},{"lineNumber":87,"author":{"gitId":"Esilocke"},"content":"            try {","lastModifiedDate":"2017-10-20"},{"lineNumber":88,"author":{"gitId":"Esilocke"},"content":"                ab.addPerson(person);","lastModifiedDate":"2017-10-20"},{"lineNumber":89,"author":{"gitId":"Esilocke"},"content":"            } catch (DuplicatePersonException e) {","lastModifiedDate":"2017-10-20"},{"lineNumber":90,"author":{"gitId":"Esilocke"},"content":"                assert false : \"not possible\";","lastModifiedDate":"2017-10-20"},{"lineNumber":91,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-20"},{"lineNumber":92,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-20"},{"lineNumber":93,"author":{"gitId":"Esilocke"},"content":"        return ab;","lastModifiedDate":"2017-10-20"},{"lineNumber":94,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {","lastModifiedDate":"2017-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":98,"author":{"gitId":"Esilocke"},"content":"    public static List\u003cReadOnlyPerson\u003e getTaglessPersons() {","lastModifiedDate":"2017-10-20"},{"lineNumber":99,"author":{"gitId":"Esilocke"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-10-20"},{"lineNumber":100,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"charlesgoh":4,"Esilocke":14,"wangyiming1019":15,"-":68}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"Esilocke"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-10-26"},{"lineNumber":2,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":3,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_PENCIL;","lastModifiedDate":"2017-10-26"},{"lineNumber":5,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":6,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PENCIL;","lastModifiedDate":"2017-10-26"},{"lineNumber":7,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":8,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PENCIL;","lastModifiedDate":"2017-10-26"},{"lineNumber":9,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PAPER;","lastModifiedDate":"2017-10-26"},{"lineNumber":10,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_PENCIL;","lastModifiedDate":"2017-10-26"},{"lineNumber":11,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":12,"author":{"gitId":"Esilocke"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-10-26"},{"lineNumber":13,"author":{"gitId":"Esilocke"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-10-26"},{"lineNumber":14,"author":{"gitId":"Esilocke"},"content":"import java.util.List;","lastModifiedDate":"2017-10-26"},{"lineNumber":15,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":16,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-10-26"},{"lineNumber":17,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.ReadOnlyTask;","lastModifiedDate":"2017-10-26"},{"lineNumber":18,"author":{"gitId":"Esilocke"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;","lastModifiedDate":"2017-10-26"},{"lineNumber":19,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":20,"author":{"gitId":"Esilocke"},"content":"//@@author Esilocke","lastModifiedDate":"2017-10-30"},{"lineNumber":21,"author":{"gitId":"Esilocke"},"content":"/**","lastModifiedDate":"2017-10-26"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests.","lastModifiedDate":"2017-10-26"},{"lineNumber":23,"author":{"gitId":"Esilocke"},"content":" */","lastModifiedDate":"2017-10-26"},{"lineNumber":24,"author":{"gitId":"Esilocke"},"content":"public class TypicalTasks {","lastModifiedDate":"2017-10-26"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask ACCEPT \u003d new TaskBuilder().withTaskName(\"Acceptance Testing\")","lastModifiedDate":"2017-10-26"},{"lineNumber":26,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Perform acceptance testing on application\")","lastModifiedDate":"2017-10-26"},{"lineNumber":27,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"04-04-2017\").withPriority(\"3\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":28,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask BUY \u003d new TaskBuilder().withTaskName(\"Buy pencil\")","lastModifiedDate":"2017-10-26"},{"lineNumber":29,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Buy pencils for tomorrow\u0027s test\")","lastModifiedDate":"2017-10-26"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"09-11-2018\").withPriority(\"5\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":31,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask COOK \u003d new TaskBuilder().withTaskName(\"Cook Paella\")","lastModifiedDate":"2017-10-26"},{"lineNumber":32,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Cook Paella for 4 people tonight\")","lastModifiedDate":"2017-10-26"},{"lineNumber":33,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"11-12-2016\").withPriority(\"5\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":34,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask DATE \u003d new TaskBuilder().withTaskName(\"Date with Lucy\")","lastModifiedDate":"2017-10-26"},{"lineNumber":35,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Sunday, 10am at Central Park\")","lastModifiedDate":"2017-10-26"},{"lineNumber":36,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"21.05.2015\").withPriority(\"5\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":37,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask ESCAPE \u003d new TaskBuilder().withTaskName(\"Escape dungeon\")","lastModifiedDate":"2017-10-26"},{"lineNumber":38,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Escape dungeon group formation\")","lastModifiedDate":"2017-10-26"},{"lineNumber":39,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"30-04-2017\").withPriority(\"1\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":40,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask FREE \u003d new TaskBuilder().withTaskName(\"Free memory space\")","lastModifiedDate":"2017-10-26"},{"lineNumber":41,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Implement new version of free()\")","lastModifiedDate":"2017-10-26"},{"lineNumber":42,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"21.08.2019\").withPriority(\"2\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":43,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask GRADLE \u003d new TaskBuilder().withTaskName(\"Resolve gradle\")","lastModifiedDate":"2017-10-26"},{"lineNumber":44,"author":{"gitId":"Esilocke"},"content":"            .withDescription(\"Resolve gradle problems when building project\")","lastModifiedDate":"2017-10-26"},{"lineNumber":45,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(\"06.06.2016\").withPriority(\"5\").build();","lastModifiedDate":"2017-10-26"},{"lineNumber":46,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":47,"author":{"gitId":"Esilocke"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-10-26"},{"lineNumber":48,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask PENCIL \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_PENCIL)","lastModifiedDate":"2017-10-26"},{"lineNumber":49,"author":{"gitId":"Esilocke"},"content":"            .withDescription(VALID_DESCRIPTION_PENCIL)","lastModifiedDate":"2017-10-26"},{"lineNumber":50,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(VALID_DEADLINE_PENCIL).withPriority(VALID_PRIORITY_PENCIL).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":51,"author":{"gitId":"Esilocke"},"content":"    public static final ReadOnlyTask PAPER \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_PAPER)","lastModifiedDate":"2017-10-26"},{"lineNumber":52,"author":{"gitId":"Esilocke"},"content":"            .withDescription(VALID_DESCRIPTION_PAPER)","lastModifiedDate":"2017-10-26"},{"lineNumber":53,"author":{"gitId":"Esilocke"},"content":"            .withDeadline(VALID_DEADLINE_PAPER).withPriority(VALID_PRIORITY_PAPER).build();","lastModifiedDate":"2017-10-26"},{"lineNumber":54,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":55,"author":{"gitId":"Esilocke"},"content":"    private TypicalTasks() {} // prevents instantiation","lastModifiedDate":"2017-10-26"},{"lineNumber":56,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":57,"author":{"gitId":"Esilocke"},"content":"    /**","lastModifiedDate":"2017-10-26"},{"lineNumber":58,"author":{"gitId":"Esilocke"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-10-26"},{"lineNumber":59,"author":{"gitId":"Esilocke"},"content":"     */","lastModifiedDate":"2017-10-26"},{"lineNumber":60,"author":{"gitId":"Esilocke"},"content":"    public static AddressBook getTypicalTasksForAddressBook() {","lastModifiedDate":"2017-10-26"},{"lineNumber":61,"author":{"gitId":"Esilocke"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-10-26"},{"lineNumber":62,"author":{"gitId":"Esilocke"},"content":"        for (ReadOnlyTask task : getTypicalTasks()) {","lastModifiedDate":"2017-10-26"},{"lineNumber":63,"author":{"gitId":"Esilocke"},"content":"            try {","lastModifiedDate":"2017-10-26"},{"lineNumber":64,"author":{"gitId":"Esilocke"},"content":"                ab.addTask(task);","lastModifiedDate":"2017-10-26"},{"lineNumber":65,"author":{"gitId":"Esilocke"},"content":"            } catch (DuplicateTaskException e) {","lastModifiedDate":"2017-10-26"},{"lineNumber":66,"author":{"gitId":"Esilocke"},"content":"                assert false : \"not possible\";","lastModifiedDate":"2017-10-26"},{"lineNumber":67,"author":{"gitId":"Esilocke"},"content":"            }","lastModifiedDate":"2017-10-26"},{"lineNumber":68,"author":{"gitId":"Esilocke"},"content":"        }","lastModifiedDate":"2017-10-26"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        return ab;","lastModifiedDate":"2017-10-26"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":71,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":72,"author":{"gitId":"Esilocke"},"content":"","lastModifiedDate":"2017-10-26"},{"lineNumber":73,"author":{"gitId":"Esilocke"},"content":"    public static List\u003cReadOnlyTask\u003e getTypicalTasks() {","lastModifiedDate":"2017-10-26"},{"lineNumber":74,"author":{"gitId":"Esilocke"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ACCEPT, BUY, COOK, DATE, ESCAPE, FREE, GRADLE));","lastModifiedDate":"2017-10-26"},{"lineNumber":75,"author":{"gitId":"Esilocke"},"content":"    }","lastModifiedDate":"2017-10-26"},{"lineNumber":76,"author":{"gitId":"Esilocke"},"content":"}","lastModifiedDate":"2017-10-26"}],"authorContributionMap":{"Esilocke":76}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2017-07-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;","lastModifiedDate":"2017-08-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2017-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_URL_PREFIX;","lastModifiedDate":"2017-10-29"},{"lineNumber":10,"author":{"gitId":"jeffreygohkw"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_URL_SUFFIX;","lastModifiedDate":"2017-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;","lastModifiedDate":"2017-08-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.Before;","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"jeffreygohkw"},"content":"import seedu.address.commons.events.ui.BrowserPanelLocateEvent;","lastModifiedDate":"2017-10-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"jeffreygohkw"},"content":"    private BrowserPanelLocateEvent panelLocateEventStub;","lastModifiedDate":"2017-10-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private BrowserPanel browserPanel;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Before","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"jeffreygohkw"},"content":"        panelLocateEventStub \u003d new BrowserPanelLocateEvent(BOB);","lastModifiedDate":"2017-10-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uiPartRule.setUiPart(browserPanel);","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());","lastModifiedDate":"2017-07-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-07-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void display() throws Exception {","lastModifiedDate":"2017-07-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // default web page","lastModifiedDate":"2017-07-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);","lastModifiedDate":"2017-07-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());","lastModifiedDate":"2017-07-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // associated web page of a person","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        postNow(selectionChangedEventStub);","lastModifiedDate":"2017-08-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX","lastModifiedDate":"2017-07-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);","lastModifiedDate":"2017-08-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);","lastModifiedDate":"2017-08-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());","lastModifiedDate":"2017-07-06"},{"lineNumber":55,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":56,"author":{"gitId":"jeffreygohkw"},"content":"        // google maps page of a person","lastModifiedDate":"2017-10-29"},{"lineNumber":57,"author":{"gitId":"jeffreygohkw"},"content":"        postNow(panelLocateEventStub);","lastModifiedDate":"2017-10-29"},{"lineNumber":58,"author":{"gitId":"jeffreygohkw"},"content":"        URL expectedMapUrl \u003d new URL(GOOGLE_MAPS_URL_PREFIX","lastModifiedDate":"2017-10-29"},{"lineNumber":59,"author":{"gitId":"jeffreygohkw"},"content":"                + BOB.getAddress().toString().replaceAll(\" \", \"+\") + GOOGLE_MAPS_URL_SUFFIX);","lastModifiedDate":"2017-10-29"},{"lineNumber":60,"author":{"gitId":"jeffreygohkw"},"content":"","lastModifiedDate":"2017-10-29"},{"lineNumber":61,"author":{"gitId":"jeffreygohkw"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);","lastModifiedDate":"2017-10-29"},{"lineNumber":62,"author":{"gitId":"jeffreygohkw"},"content":"        assertEquals(expectedMapUrl, browserPanelHandle.getLoadedUrl());","lastModifiedDate":"2017-10-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"jeffreygohkw":14,"-":50}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2017-07-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2017-07-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;","lastModifiedDate":"2017-07-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;","lastModifiedDate":"2017-07-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.Clock;","lastModifiedDate":"2017-07-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.Instant;","lastModifiedDate":"2017-07-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.ZoneId;","lastModifiedDate":"2017-07-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Date;","lastModifiedDate":"2017-07-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.AfterClass;","lastModifiedDate":"2017-07-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Before;","lastModifiedDate":"2017-07-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.BeforeClass;","lastModifiedDate":"2017-07-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-07-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;","lastModifiedDate":"2017-07-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;","lastModifiedDate":"2017-07-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-07-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {","lastModifiedDate":"2017-07-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";","lastModifiedDate":"2017-07-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";","lastModifiedDate":"2017-07-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());","lastModifiedDate":"2017-07-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();","lastModifiedDate":"2017-07-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());","lastModifiedDate":"2017-07-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;","lastModifiedDate":"2017-07-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @BeforeClass","lastModifiedDate":"2017-07-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static void setUpBeforeClass() {","lastModifiedDate":"2017-07-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // inject fixed clock","lastModifiedDate":"2017-07-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        StatusBarFooter.setClock(injectedClock);","lastModifiedDate":"2017-07-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @AfterClass","lastModifiedDate":"2017-07-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void tearDownAfterClass() {","lastModifiedDate":"2017-07-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // restore original clock","lastModifiedDate":"2017-07-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        StatusBarFooter.setClock(originalClock);","lastModifiedDate":"2017-07-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Before","lastModifiedDate":"2017-07-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"        StatusBarFooter sbf \u003d new StatusBarFooter(STUB_SAVE_LOCATION, EVENT_STUB.data.getPersonList().size());","lastModifiedDate":"2017-10-19"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"        uiPartRule.setUiPart(sbf);","lastModifiedDate":"2017-10-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(sbf.getRoot());","lastModifiedDate":"2017-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-07-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void display() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // initial state","lastModifiedDate":"2017-07-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);","lastModifiedDate":"2017-07-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // after address book is updated","lastModifiedDate":"2017-07-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        postNow(EVENT_STUB);","lastModifiedDate":"2017-08-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,","lastModifiedDate":"2017-07-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));","lastModifiedDate":"2017-07-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the","lastModifiedDate":"2017-07-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}.","lastModifiedDate":"2017-07-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {","lastModifiedDate":"2017-07-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());","lastModifiedDate":"2017-07-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());","lastModifiedDate":"2017-07-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        guiRobot.pauseForHuman();","lastModifiedDate":"2017-07-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-01"}],"authorContributionMap":{"charlesgoh":3,"-":72}},{"path":"src/test/java/seedu/address/ui/UiPartTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Rule;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.rules.ExpectedException;","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.rules.TemporaryFolder;","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Rule","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Rule","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e((URL) null);","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        thrown.expect(AssertionError.class);","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e(missingFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":43,"author":{"gitId":"charlesgoh"},"content":"    //    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":44,"author":{"gitId":"charlesgoh"},"content":"    //    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2017-10-24"},{"lineNumber":45,"author":{"gitId":"charlesgoh"},"content":"    //        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2017-10-24"},{"lineNumber":46,"author":{"gitId":"charlesgoh"},"content":"    //        thrown.expect(AssertionError.class);","lastModifiedDate":"2017-10-24"},{"lineNumber":47,"author":{"gitId":"charlesgoh"},"content":"    //        new TestUiPart\u003cObject\u003e(invalidFileUrl);","lastModifiedDate":"2017-10-24"},{"lineNumber":48,"author":{"gitId":"charlesgoh"},"content":"    //    }","lastModifiedDate":"2017-10-24"},{"lineNumber":49,"author":{"gitId":"charlesgoh"},"content":"    //","lastModifiedDate":"2017-10-24"},{"lineNumber":50,"author":{"gitId":"charlesgoh"},"content":"    //    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":51,"author":{"gitId":"charlesgoh"},"content":"    //    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2017-10-24"},{"lineNumber":52,"author":{"gitId":"charlesgoh"},"content":"    //        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2017-10-24"},{"lineNumber":53,"author":{"gitId":"charlesgoh"},"content":"    //        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2017-10-24"},{"lineNumber":54,"author":{"gitId":"charlesgoh"},"content":"    //    }","lastModifiedDate":"2017-10-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e((String) null);","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        thrown.expect(NullPointerException.class);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"    //    @Test","lastModifiedDate":"2017-10-24"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"    //    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2017-10-24"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"    //        thrown.expect(AssertionError.class);","lastModifiedDate":"2017-10-24"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"    //        new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH);","lastModifiedDate":"2017-10-24"},{"lineNumber":72,"author":{"gitId":"charlesgoh"},"content":"    //    }","lastModifiedDate":"2017-10-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"charlesgoh":17,"-":85}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;","lastModifiedDate":"2017-08-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":28,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":29,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2017-10-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-08-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-08-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-08-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2017-08-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2017-08-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;","lastModifiedDate":"2017-08-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-08-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-08-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-08-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-08-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-08-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-08-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-08-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-08-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {","lastModifiedDate":"2017-08-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-08-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void add() throws Exception {","lastModifiedDate":"2017-08-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Model model \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces","lastModifiedDate":"2017-08-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"         * -\u003e added","lastModifiedDate":"2017-08-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2017-08-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \"","lastModifiedDate":"2017-08-22"},{"lineNumber":69,"author":{"gitId":"charlesgoh"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + REMARK_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";","lastModifiedDate":"2017-10-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */","lastModifiedDate":"2017-08-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;","lastModifiedDate":"2017-08-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2017-08-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);","lastModifiedDate":"2017-08-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */","lastModifiedDate":"2017-08-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;","lastModifiedDate":"2017-08-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2017-08-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);","lastModifiedDate":"2017-08-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2017-08-22"},{"lineNumber":85,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-08-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE","lastModifiedDate":"2017-08-22"},{"lineNumber":90,"author":{"gitId":"charlesgoh"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in","lastModifiedDate":"2017-10-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)","lastModifiedDate":"2017-08-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2017-08-22"},{"lineNumber":93,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + \" \" + PREFIX_TAG.getPrefix() + \"friends\";","lastModifiedDate":"2017-10-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-08-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2017-08-22"},{"lineNumber":98,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2017-08-22"},{"lineNumber":100,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2017-08-22"},{"lineNumber":105,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2017-08-22"},{"lineNumber":107,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-08-22"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-08-22"},{"lineNumber":114,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2017-08-22"},{"lineNumber":119,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB","lastModifiedDate":"2017-08-22"},{"lineNumber":121,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":124,"author":{"gitId":"charlesgoh"},"content":"        /* Case: add a person with all fields same as another person in the address book except remark -\u003e added */","lastModifiedDate":"2017-10-24"},{"lineNumber":125,"author":{"gitId":"charlesgoh"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2017-10-24"},{"lineNumber":126,"author":{"gitId":"charlesgoh"},"content":"                .withAddress(VALID_ADDRESS_AMY).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":127,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2017-10-24"},{"lineNumber":128,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_BOB + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-24"},{"lineNumber":129,"author":{"gitId":"charlesgoh"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-10-24"},{"lineNumber":130,"author":{"gitId":"charlesgoh"},"content":"","lastModifiedDate":"2017-10-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);","lastModifiedDate":"2017-08-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assert getModel().getFilteredPersonList().size()","lastModifiedDate":"2017-09-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();","lastModifiedDate":"2017-09-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandSuccess(IDA);","lastModifiedDate":"2017-08-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /* Case: add to empty address book -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);","lastModifiedDate":"2017-08-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;","lastModifiedDate":"2017-09-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ALICE);","lastModifiedDate":"2017-08-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        toAdd \u003d BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB","lastModifiedDate":"2017-08-22"},{"lineNumber":145,"author":{"gitId":"charlesgoh"},"content":"                + REMARK_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */","lastModifiedDate":"2017-08-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");","lastModifiedDate":"2017-08-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();","lastModifiedDate":"2017-08-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertCommandSuccess(CARL);","lastModifiedDate":"2017-08-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */","lastModifiedDate":"2017-08-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertCommandSuccess(HOON);","lastModifiedDate":"2017-08-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /* Case: missing name -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":157,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-08-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /* Case: missing phone -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":161,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-08-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        /* Case: missing email -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":165,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-08-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        /* Case: missing address -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":169,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-08-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-08-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /* Case: invalid name -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":177,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":178,"author":{"gitId":"charlesgoh"},"content":"                    + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2017-08-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        /* Case: invalid phone -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":183,"author":{"gitId":"charlesgoh"},"content":"                    + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);","lastModifiedDate":"2017-08-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        /* Case: invalid email -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC","lastModifiedDate":"2017-10-23"},{"lineNumber":188,"author":{"gitId":"charlesgoh"},"content":"                    + ADDRESS_DESC_AMY + REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);","lastModifiedDate":"2017-08-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        /* Case: invalid tag -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":192,"author":{"gitId":"charlesgoh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-10-23"},{"lineNumber":193,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + REMARK_DESC_AMY + INVALID_TAG_DESC;","lastModifiedDate":"2017-10-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);","lastModifiedDate":"2017-08-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays","lastModifiedDate":"2017-08-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the","lastModifiedDate":"2017-08-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}.","lastModifiedDate":"2017-08-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * These verifications are done by","lastModifiedDate":"2017-08-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e","lastModifiedDate":"2017-08-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,","lastModifiedDate":"2017-08-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * the browser url and selected card remains unchanged.","lastModifiedDate":"2017-08-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)","lastModifiedDate":"2017-08-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {","lastModifiedDate":"2017-08-22"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}","lastModifiedDate":"2017-08-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * instead.","lastModifiedDate":"2017-08-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)","lastModifiedDate":"2017-08-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {","lastModifiedDate":"2017-08-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-22"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            expectedModel.addPerson(toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException dpe) {","lastModifiedDate":"2017-08-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");","lastModifiedDate":"2017-08-22"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);","lastModifiedDate":"2017-08-22"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);","lastModifiedDate":"2017-08-22"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result","lastModifiedDate":"2017-08-22"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to","lastModifiedDate":"2017-08-22"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code expectedModel}.","lastModifiedDate":"2017-08-22"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)","lastModifiedDate":"2017-08-22"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {","lastModifiedDate":"2017-08-22"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        executeCommand(command);","lastModifiedDate":"2017-08-22"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);","lastModifiedDate":"2017-08-22"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();","lastModifiedDate":"2017-08-22"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();","lastModifiedDate":"2017-08-22"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display","lastModifiedDate":"2017-08-22"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model.","lastModifiedDate":"2017-08-22"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * These verifications are done by","lastModifiedDate":"2017-08-22"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e","lastModifiedDate":"2017-08-22"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the","lastModifiedDate":"2017-08-22"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * error style.","lastModifiedDate":"2017-08-22"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)","lastModifiedDate":"2017-08-22"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {","lastModifiedDate":"2017-08-22"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        executeCommand(command);","lastModifiedDate":"2017-08-22"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);","lastModifiedDate":"2017-08-22"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();","lastModifiedDate":"2017-08-22"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-22"}],"authorContributionMap":{"charlesgoh":36,"-":224}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;","lastModifiedDate":"2017-08-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"Esilocke"},"content":"import static seedu.address.logic.commands.ClearCommand.TYPE_ALL;","lastModifiedDate":"2017-10-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-09-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {","lastModifiedDate":"2017-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-08-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void clear() {","lastModifiedDate":"2017-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        final Model defaultModel \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":22,"author":{"gitId":"Esilocke"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing","lastModifiedDate":"2017-10-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"         * spaces -\u003e cleared","lastModifiedDate":"2017-08-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2017-08-22"},{"lineNumber":25,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \"   \");","lastModifiedDate":"2017-10-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */","lastModifiedDate":"2017-08-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;","lastModifiedDate":"2017-08-22"},{"lineNumber":30,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, TYPE_ALL);","lastModifiedDate":"2017-10-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);","lastModifiedDate":"2017-08-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */","lastModifiedDate":"2017-08-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;","lastModifiedDate":"2017-08-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2017-08-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());","lastModifiedDate":"2017-08-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */","lastModifiedDate":"2017-08-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book","lastModifiedDate":"2017-08-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        selectPerson(Index.fromOneBased(1));","lastModifiedDate":"2017-09-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);","lastModifiedDate":"2017-08-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertSelectedCardDeselected();","lastModifiedDate":"2017-08-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */","lastModifiedDate":"2017-08-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book","lastModifiedDate":"2017-08-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);","lastModifiedDate":"2017-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);","lastModifiedDate":"2017-08-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */","lastModifiedDate":"2017-08-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);","lastModifiedDate":"2017-08-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */","lastModifiedDate":"2017-08-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-08-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display","lastModifiedDate":"2017-08-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model.","lastModifiedDate":"2017-08-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * These verifications are done by","lastModifiedDate":"2017-08-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e","lastModifiedDate":"2017-08-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes.","lastModifiedDate":"2017-08-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)","lastModifiedDate":"2017-08-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command) {","lastModifiedDate":"2017-08-22"},{"lineNumber":69,"author":{"gitId":"Esilocke"},"content":"        String expectedResultMessage \u003d String.format(ClearCommand.MESSAGE_SUCCESS, TYPE_ALL);","lastModifiedDate":"2017-10-28"},{"lineNumber":70,"author":{"gitId":"Esilocke"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());","lastModifiedDate":"2017-10-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays","lastModifiedDate":"2017-08-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}.","lastModifiedDate":"2017-08-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)","lastModifiedDate":"2017-08-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {","lastModifiedDate":"2017-08-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        executeCommand(command);","lastModifiedDate":"2017-08-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);","lastModifiedDate":"2017-08-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();","lastModifiedDate":"2017-08-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();","lastModifiedDate":"2017-08-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display","lastModifiedDate":"2017-08-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model.","lastModifiedDate":"2017-08-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * These verifications are done by","lastModifiedDate":"2017-08-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e","lastModifiedDate":"2017-08-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the","lastModifiedDate":"2017-08-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * error style.","lastModifiedDate":"2017-08-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)","lastModifiedDate":"2017-08-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {","lastModifiedDate":"2017-08-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        executeCommand(command);","lastModifiedDate":"2017-08-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);","lastModifiedDate":"2017-08-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();","lastModifiedDate":"2017-08-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();","lastModifiedDate":"2017-08-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-22"}],"authorContributionMap":{"Esilocke":6,"-":97}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","fileType":"test","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package systemtests;","lastModifiedDate":"2017-09-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;","lastModifiedDate":"2017-09-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;","lastModifiedDate":"2017-09-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-09-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-09-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-09-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-09-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-09-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-09-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-09-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-09-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":17,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;","lastModifiedDate":"2017-10-23"},{"lineNumber":18,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-09-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-09-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":25,"author":{"gitId":"charlesgoh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;","lastModifiedDate":"2017-10-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-09-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-09-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-09-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-09-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2017-09-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;","lastModifiedDate":"2017-09-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.Test;","lastModifiedDate":"2017-09-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-09-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-09-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-09-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.RedoCommand;","lastModifiedDate":"2017-09-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2017-09-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-09-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-09-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-09-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-09-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-09-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;","lastModifiedDate":"2017-09-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-09-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-09-02"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-09-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-09-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-09-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {","lastModifiedDate":"2017-09-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void edit() throws Exception {","lastModifiedDate":"2017-09-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Model model \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */","lastModifiedDate":"2017-09-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field","lastModifiedDate":"2017-09-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"         * -\u003e edited","lastModifiedDate":"2017-09-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2017-09-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \"","lastModifiedDate":"2017-09-02"},{"lineNumber":67,"author":{"gitId":"charlesgoh"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + REMARK_DESC_BOB","lastModifiedDate":"2017-10-23"},{"lineNumber":68,"author":{"gitId":"charlesgoh"},"content":"                + \" \" + TAG_DESC_HUSBAND + \" \";","lastModifiedDate":"2017-10-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-09-02"},{"lineNumber":70,"author":{"gitId":"charlesgoh"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(VALID_REMARK_BOB)","lastModifiedDate":"2017-10-23"},{"lineNumber":71,"author":{"gitId":"charlesgoh"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);","lastModifiedDate":"2017-09-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */","lastModifiedDate":"2017-09-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;","lastModifiedDate":"2017-09-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2017-09-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);","lastModifiedDate":"2017-09-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */","lastModifiedDate":"2017-09-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;","lastModifiedDate":"2017-09-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2017-09-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        model.updatePerson(","lastModifiedDate":"2017-09-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);","lastModifiedDate":"2017-09-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);","lastModifiedDate":"2017-09-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */","lastModifiedDate":"2017-09-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-09-02"},{"lineNumber":88,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-10-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, BOB);","lastModifiedDate":"2017-09-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /* Case: edit some fields -\u003e edited */","lastModifiedDate":"2017-09-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-09-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2017-09-08"},{"lineNumber":95,"author":{"gitId":"charlesgoh"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).withRemark(VALID_REMARK_BOB).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);","lastModifiedDate":"2017-09-02"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        /* Case: clear tags -\u003e cleared */","lastModifiedDate":"2017-09-02"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();","lastModifiedDate":"2017-09-02"},{"lineNumber":101,"author":{"gitId":"charlesgoh"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().withRemark(VALID_REMARK_BOB).build();","lastModifiedDate":"2017-10-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);","lastModifiedDate":"2017-09-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */","lastModifiedDate":"2017-09-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */","lastModifiedDate":"2017-09-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);","lastModifiedDate":"2017-09-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());","lastModifiedDate":"2017-09-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;","lastModifiedDate":"2017-09-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2017-09-08"},{"lineNumber":112,"author":{"gitId":"charlesgoh"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-10-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);","lastModifiedDate":"2017-09-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list","lastModifiedDate":"2017-09-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * -\u003e rejected","lastModifiedDate":"2017-09-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2017-09-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);","lastModifiedDate":"2017-09-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();","lastModifiedDate":"2017-09-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,","lastModifiedDate":"2017-09-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-09-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */","lastModifiedDate":"2017-09-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but","lastModifiedDate":"2017-09-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"         * browser url changes","lastModifiedDate":"2017-09-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2017-09-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        showAllPersons();","lastModifiedDate":"2017-09-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        selectPerson(index);","lastModifiedDate":"2017-09-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-09-02"},{"lineNumber":132,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_AMY + REMARK_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-10-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the","lastModifiedDate":"2017-09-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name","lastModifiedDate":"2017-09-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);","lastModifiedDate":"2017-09-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */","lastModifiedDate":"2017-09-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,","lastModifiedDate":"2017-09-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-09-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,","lastModifiedDate":"2017-09-02"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-09-02"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;","lastModifiedDate":"2017-09-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,","lastModifiedDate":"2017-09-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-09-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /* Case: missing index -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,","lastModifiedDate":"2017-09-02"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-09-02"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /* Case: missing all fields -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),","lastModifiedDate":"2017-09-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-09-02"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /* Case: invalid name -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,","lastModifiedDate":"2017-09-02"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);","lastModifiedDate":"2017-09-02"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        /* Case: invalid phone -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,","lastModifiedDate":"2017-09-02"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);","lastModifiedDate":"2017-09-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        /* Case: invalid email -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,","lastModifiedDate":"2017-09-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);","lastModifiedDate":"2017-09-02"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        /* Case: invalid tag -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,","lastModifiedDate":"2017-09-02"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);","lastModifiedDate":"2017-09-02"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));","lastModifiedDate":"2017-09-02"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));","lastModifiedDate":"2017-09-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-09-02"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));","lastModifiedDate":"2017-09-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-09-02"},{"lineNumber":182,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-10-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-09-02"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */","lastModifiedDate":"2017-09-02"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-09-02"},{"lineNumber":187,"author":{"gitId":"charlesgoh"},"content":"                + ADDRESS_DESC_BOB + REMARK_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-10-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2017-09-02"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-02"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-02"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that","lastModifiedDate":"2017-09-02"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * the browser url and selected card remain unchanged.","lastModifiedDate":"2017-09-02"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list","lastModifiedDate":"2017-09-02"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)","lastModifiedDate":"2017-09-02"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-02"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {","lastModifiedDate":"2017-09-02"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);","lastModifiedDate":"2017-09-02"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-02"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-02"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being","lastModifiedDate":"2017-09-02"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list.","lastModifiedDate":"2017-09-02"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)","lastModifiedDate":"2017-09-02"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-02"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,","lastModifiedDate":"2017-09-02"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {","lastModifiedDate":"2017-09-02"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-09-02"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            expectedModel.updatePerson(","lastModifiedDate":"2017-09-02"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);","lastModifiedDate":"2017-09-02"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-09-02"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {","lastModifiedDate":"2017-09-02"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2017-09-02"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");","lastModifiedDate":"2017-09-02"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-09-02"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel,","lastModifiedDate":"2017-09-02"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);","lastModifiedDate":"2017-09-02"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-02"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-02"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the","lastModifiedDate":"2017-09-02"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * browser url and selected card remain unchanged.","lastModifiedDate":"2017-09-02"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)","lastModifiedDate":"2017-09-02"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-02"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {","lastModifiedDate":"2017-09-02"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);","lastModifiedDate":"2017-09-02"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-02"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at","lastModifiedDate":"2017-09-02"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by","lastModifiedDate":"2017-09-02"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)","lastModifiedDate":"2017-09-02"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)","lastModifiedDate":"2017-09-02"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-02"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,","lastModifiedDate":"2017-09-02"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            Index expectedSelectedCardIndex) {","lastModifiedDate":"2017-09-02"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        executeCommand(command);","lastModifiedDate":"2017-09-02"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-09-02"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);","lastModifiedDate":"2017-09-02"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsDefaultStyle();","lastModifiedDate":"2017-09-02"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {","lastModifiedDate":"2017-09-02"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);","lastModifiedDate":"2017-09-02"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2017-09-02"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            assertSelectedCardUnchanged();","lastModifiedDate":"2017-09-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-09-02"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();","lastModifiedDate":"2017-09-02"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-02"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-02"},{"lineNumber":263,"author":{"gitId":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":265,"author":{"gitId":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":268,"author":{"gitId":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * Verifications 1 to 3 are performed by","lastModifiedDate":"2017-09-02"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e","lastModifiedDate":"2017-09-02"},{"lineNumber":271,"author":{"gitId":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)","lastModifiedDate":"2017-09-02"},{"lineNumber":272,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-02"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {","lastModifiedDate":"2017-09-02"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d getModel();","lastModifiedDate":"2017-09-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-02"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        executeCommand(command);","lastModifiedDate":"2017-09-02"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);","lastModifiedDate":"2017-09-02"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        assertSelectedCardUnchanged();","lastModifiedDate":"2017-09-02"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        assertCommandBoxShowsErrorStyle();","lastModifiedDate":"2017-09-02"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        assertStatusBarUnchanged();","lastModifiedDate":"2017-09-02"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-02"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-02"}],"authorContributionMap":{"charlesgoh":14,"-":268}}]
