import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'checkstyle'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.liferay.node' version '7.2.15'
    id 'com.github.psxpaul.execfork' version '0.1.12'
    id 'com.palantir.git-version' version '0.13.0'
}

OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;

mainClassName = 'reposense.RepoSense'

node.nodeVersion = '10.16.0'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

configurations {
    systemtestImplementation.extendsFrom testImplementation
    systemtestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation  group: 'com.google.code.gson' ,name: 'gson', version:'2.9.0'
    implementation  group: 'net.freeutils', name: 'jlhttp', version: '2.6'
    implementation  group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.9.0'
    implementation  group: 'org.apache.ant', name: 'ant', version: '1.10.12'
    implementation  group: 'org.apache.commons', name: 'commons-csv', version: '1.9.0'
    implementation  group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation  group: 'org.fusesource.jansi', name: 'jansi', version: '2.4.0'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    systemtest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/systemtest/java')
        resources.srcDir file('src/systemtest/resources')
    }
}

wrapper {
    gradleVersion = '6.9.2'
}

run {
    //the second arguments indicates the default value associated with the property.
    args System.getProperty('args', '').split()
    systemProperty "version", getRepoSenseVersion()
}

checkstyle {
    toolVersion = '8.1'
    getConfigDirectory().set(file("$rootProject.projectDir/config/checkstyle"))
}

idea {
    module {
        sourceSets.systemtest.allSource.srcDirs.each { srcDir -> module.testSourceDirs += srcDir }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    environment("REPOSENSE_ENVIRONMENT", "TEST")

    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }

    doFirst {
        deleteReposAddressDirectory()
    }

    doLast {
        deleteReposAddressDirectory()
    }
}

shadowJar {
    archiveFileName = 'RepoSense.jar'
    destinationDirectory = file("${buildDir}/jar/")

    manifest {
        attributes 'Implementation-Version': getRepoSenseVersion()
    }
}

def installFrontend = tasks.register('installFrontend', com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {
    workingDir 'frontend/'
    args = ['install']
}

def buildFrontend = tasks.register('buildFrontend', com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {
    dependsOn installFrontend
    workingDir 'frontend/'
    args = ['run', 'devbuild']
}

tasks.register('lintFrontend', com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {
    dependsOn installFrontend
    workingDir 'frontend/'
    args = ['run', 'lint']
}

def zipReport = tasks.register('zipReport', Zip) {
    dependsOn buildFrontend
    from 'frontend/build/'
    archiveBaseName = 'templateZip'
    destinationDirectory = file('src/main/resources')
}

def compileJava = tasks.compileJava

tasks.shadowJar.dependsOn(zipReport);
tasks.compileJava.dependsOn(zipReport);
tasks.run.dependsOn(compileJava);

tasks.register('systemtest', Test) {
    dependsOn zipReport
    testClassesDirs = sourceSets.systemtest.output.classesDirs
    classpath = sourceSets.systemtest.runtimeClasspath
    environment("REPOSENSE_ENVIRONMENT", "TEST")

    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }

    doFirst {
        deleteReposAddressDirectory()
    }

    doLast {
        deleteReposAddressDirectory()
    }
}

def classes = tasks.classes

def startServerInBackground = tasks.register('startServerInBackground', com.github.psxpaul.task.JavaExecFork) {
    dependsOn classes
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args = ['--config', './frontend/cypress/config', '--since', 'd1', '--view']
    String versionJvmArgs = '-Dversion=' + getRepoSenseVersion()
    jvmArgs = [ versionJvmArgs ]
    waitForPort = 9000
}

def installCypress = tasks.register('installCypress', com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {
    workingDir 'frontend/cypress/'
    args = ['install']
}

tasks.register('cypress', com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {
    dependsOn zipReport, installCypress, startServerInBackground
    tasks.startServerInBackground.mustRunAfter(installCypress)

    workingDir = file('frontend/cypress/')
    args = ["run-script", "debug"]
}

tasks.register('frontendTest', com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {
    dependsOn zipReport, installCypress, startServerInBackground
    tasks.startServerInBackground.mustRunAfter(installCypress)

    workingDir = file('frontend/cypress/')
    args = ["run-script", "tests"]

    // Run tests in CI without slow motion
    if (project.hasProperty('ci')) {
        args = ["run-script", "ci"]
    }
}

tasks.withType(Copy) {
    includeEmptyDirs = true
}

tasks.register('coverage', JacocoReport)

coverage.configure {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)

    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

String getRepoSenseVersion() {
    String repoSenseVersion = project.property("version")
    if (repoSenseVersion.equals("unspecified")) {
        repoSenseVersion = versionDetails().commitDistance == 0 ? versionDetails().lastTag : versionDetails().gitHash
    }
    return repoSenseVersion
}

def syncFrontendPublic = tasks.register('syncFrontendPublic', Sync) {
    from 'reposense-report'
    into 'frontend/public/'
    include '**/*.json'
    includeEmptyDirs = false
    preserve {
        include 'index.html'
        include 'favicon.ico'
    }
}

def macHotReloadFrontend = tasks.register('macHotReloadFrontend', Exec) {
    dependsOn installFrontend
    onlyIf {os.isMacOsX()}
    workingDir 'frontend/'
    commandLine 'npm', 'run', 'serveOpen'
}

def windowsHotReloadFrontend = tasks.register('windowsHotReloadFrontend', Exec) {
    dependsOn installFrontend
    onlyIf {os.isWindows()}
    workingDir 'frontend/'
    commandLine 'cmd','/c', 'START', '"hotreload RepoSense frontend"', 'npm', 'run', 'serveOpen'
}

def linuxHotReloadFrontend = tasks.register('linuxHotReloadFrontend', Exec) {
    dependsOn installFrontend
    onlyIf {os.isLinux()}
    workingDir 'frontend/'
    commandLine 'npm', 'run', 'serveOpen'
}

tasks.register('hotReloadFrontend') {
    dependsOn syncFrontendPublic
    finalizedBy windowsHotReloadFrontend
    finalizedBy macHotReloadFrontend
    finalizedBy linuxHotReloadFrontend
}
// End of hot reload Tasks

void deleteReposAddressDirectory() {
    final String REPOS_ADDRESS = "repos"
    def reposDirectory = new File(REPOS_ADDRESS)
    reposDirectory.deleteDir()
}

jacocoTestReport.executionData(systemtest)
jacocoTestReport.executionData(frontendTest)

defaultTasks 'clean', 'build', 'systemtest', 'frontendTest', 'coverage'
