plugins {
    id 'java'
    id 'checkstyle'
    id 'idea'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'com.liferay.node' version '4.4.0'
}

mainClassName = 'reposense.RepoSense'

node.nodeVersion = '10.5.0'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

wrapper {
  gradleVersion = '4.9'
}

checkstyle {
    toolVersion = '8.1'
}

test {
  testLogging {
    events 'passed', 'skipped', 'failed'
    showStandardStreams = true
  }
}

sourceSets {
  functional {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
    java.srcDir file('src/functional/java')
    resources.srcDir file('src/functional/resources')
  }
}

configurations {
  functionalImplementation.extendsFrom testImplementation
  functionalRuntime.extendsFrom testRuntime
}

dependencies {
    implementation  group: 'com.github.javaparser', name: 'javaparser-core', version: '3.0.1'
    implementation  group: 'com.google.code.gson' ,name: 'gson', version:'2.8.5'
    implementation  group: 'org.apache.ant', name: 'ant', version: '1.10.3'
    implementation  group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.8.1'
    implementation  group: 'net.freeutils', name: 'jlhttp', version: '2.4'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
    archiveName = 'RepoSense.jar'
    destinationDir = file("${buildDir}/jar/")
}

task zipReport(dependsOn: 'npmRunSpuild', type: Zip) {
    from 'frontend/build/'
    baseName = 'templateZip'
    destinationDir = file('src/main/resources')
}
tasks.shadowJar.dependsOn('zipReport');
tasks.run.dependsOn('zipReport');

task functional(dependsOn: 'zipReport', type: Test) {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath
  testLogging {
    events 'passed', 'skipped', 'failed'
    showStandardStreams = true
  }
}

idea {
    module {
        sourceSets.functional.allSource.srcDirs.each { srcDir -> module.testSourceDirs += srcDir }
    }
}

run {
    //the second arguments indicates the default value associated with the property.
    args System.getProperty('args', '').split()
}

tasks.withType(Copy) {
    includeEmptyDirs = true
}

defaultTasks 'clean', 'build', 'functional'
